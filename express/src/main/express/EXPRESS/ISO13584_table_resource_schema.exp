-- modified by RR:
(*
	boolean_expression added to REFERENCE FROM ISO13584_expressions_schema
	level_spec_expression added to REFERENCE FROM ISO13584_library_expressions_schema
*)

-- received on 2000-02-21, originally from Guy Pierra 

SCHEMA ISO13584_table_resource_schema;

REFERENCE FROM ISO13584_IEC61360_dictionary_schema(
	class_BSU,
	date_type,
	level,
	list_to_set,
	revision_len,
	revision_type,
	value_format_len,
	value_format_type);

REFERENCE FROM ISO13584_generic_expressions_schema(
	binary_generic_expression,
	generic_expression,
	generic_literal,
	generic_variable,
	multiple_arity_generic_expression,
	simple_generic_expression,
	unary_generic_expression,
	used_variables,
	variable_semantics);

REFERENCE FROM ISO13584_expressions_schema(
	boolean_defined_function,
	-- RR
	boolean_expression,
	expression,
	is_sql_mappable,
	SQL_mappable_defined_function,
	variable);

REFERENCE FROM ISO13584_instance_resource_schema(
	boolean_value,
	compatible_class_and_class,
	complex_value,
	dic_class_instance,
	entity_instance_value,
	int_level_spec_value,
	integer_value,
	level_spec_value,
	number_value,
	primitive_value,
	real_level_spec_value,
	real_value,
	right_values_for_level_spec,
	simple_value,
	string_value);

REFERENCE FROM ISO13584_library_expressions_schema(
	class_instance_expression,
	compatible_variable_and_expression,
	entity_instance_expression,
	entity_instance_variable,
	-- RR
	level_spec_expression,
	level_spec_variable,
	semantics_of,
	syntax_of);


ENTITY table_identification
ABSTRACT SUPERTYPE;
WHERE 
	WR1: SIZEOF(USEDIN(SELF,
		'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_SPECIFICATION' 
		+ '.TABLE_IDENTIFIER')) 
		<= 1;
	WR2: SIZEOF(USEDIN(SELF,
		'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_EXTENSION'
		+ '.TABLE_IDENTIFIER')) <= 1;
END_ENTITY;


ENTITY table_specification
SUPERTYPE OF(RDB_table_specification);
	table_identifier: table_identification;
	column_meaning: LIST[1:?] OF UNIQUE variable_semantics;
	key: SET[1:?] OF variable_semantics;
WHERE
	WR1: SELF.key <= list_to_set(SELF.column_meaning);
END_ENTITY;


ENTITY RDB_table_specification
SUBTYPE OF(table_specification);
WHERE
	WR1: QUERY (col <* SELF\table_specification.column_meaning |
		QUERY (v <* syntax_of (col) |
		NOT ('ISO13584_EXPRESSIONS_SCHEMA.VARIABLE'
			IN TYPEOF(v))) <> []) = [];
	WR2: (SIZEOF(USEDIN(SELF\table_specification.table_identifier, 
		'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_EXTENSION' + 
		'.TABLE_IDENTIFIER')) = 0) 
		OR ('ISO13584_TABLE_RESOURCE_SCHEMA.RDB_TABLE_EXTENSION' 
		IN TYPEOF(USEDIN(SELF\table_specification.table_identifier, 
		'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_EXTENSION'+ 
		'.TABLE_IDENTIFIER')[1]));
END_ENTITY;


ENTITY table_extension
SUPERTYPE OF (RDB_table_extension);
	table_identifier: table_identification;
	content: LIST[1:?] OF UNIQUE column;
	revision_of_content: revision_type;
	content_revision_date: date_type;
WHERE
	WR1: QUERY ( col <* SELF.content
		| SIZEOF (col.values) <> SIZEOF (SELF.content[1].values)) 
		= [];
	WR2: (SIZEOF ( USEDIN (SELF.table_identifier,
		'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_SPECIFICATION'
		+ '.TABLE_IDENTIFIER' )) = 0)
		OR compatible_list_variable_semantics_and_columns(
		 USEDIN (SELF.table_identifier,
		'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_SPECIFICATION'
		+ '.TABLE_IDENTIFIER' )[1].column_meaning, SELF.content);
END_ENTITY;


ENTITY RDB_table_extension
SUBTYPE OF(table_extension);
	SELF\table_extension.content: LIST[1:?] OF UNIQUE simple_column;
WHERE
	WR1: (SIZEOF(USEDIN(SELF\table_extension.table_identifier,
		'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_SPECIFICATION' +
		'.TABLE_IDENTIFIER')) = 0) OR 
		('ISO13584_TABLE_RESOURCE_SCHEMA.RDB_TABLE_SPECIFICATION' 
		IN TYPEOF(USEDIN(SELF\table_extension.table_identifier, 
		'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_SPECIFICATION' + 
		'.TABLE_IDENTIFIER')[1]));
END_ENTITY;


ENTITY column 
ABSTRACT SUPERTYPE OF (ONEOF(simple_column, complex_column));
	values: LIST [1:?] OF primitive_value;
INVERSE
	belongs_to: table_extension FOR content;
END_ENTITY;


ENTITY simple_column 
ABSTRACT SUPERTYPE OF (ONEOF(boolean_column, formatted_column)) 
SUBTYPE OF (column);
	SELF\column.values: LIST [1:?] OF simple_value;
END_ENTITY;


ENTITY boolean_column
SUBTYPE OF (simple_column);
	SELF\column.values: LIST [1:?] OF boolean_value;
END_ENTITY;


ENTITY formatted_column
ABSTRACT SUPERTYPE OF (ONEOF (number_column, string_column))
SUBTYPE OF (simple_column);
	value_format: value_format_type;
END_ENTITY;


ENTITY number_column
ABSTRACT SUPERTYPE OF (ONEOF (real_column, integer_column))
SUBTYPE OF (formatted_column);
	SELF\column.values: LIST [1:?] OF number_value;
END_ENTITY;


ENTITY real_column
SUBTYPE OF (number_column);
	SELF\column.values: LIST [1:?] OF real_value;
WHERE
	WR1: (SELF\formatted_column.value_format) LIKE 'NR2*';
END_ENTITY;


ENTITY integer_column
SUBTYPE OF (number_column);
	SELF\column.values: LIST [1:?] OF integer_value;
WHERE
	WR1: (SELF\formatted_column.value_format) LIKE 'NR1*';
END_ENTITY;


ENTITY string_column
SUBTYPE OF (formatted_column);
	SELF\column.values: LIST [1:?] OF string_value;
WHERE
	WR1: (((SELF\formatted_column.value_format) LIKE 'A*')
		OR ((SELF\formatted_column.value_format) LIKE 'M*')
		OR ((SELF\formatted_column.value_format) LIKE 'N*')
		OR ((SELF\formatted_column.value_format) LIKE 'X*'))
		AND NOT ((SELF\formatted_column.value_format) LIKE 'NR*');
END_ENTITY;


ENTITY complex_column 
ABSTRACT SUPERTYPE OF (ONEOF (level_spec_column,
						entity_instance_column,
						class_instance_column))
SUBTYPE OF (column);
	SELF\column.values: LIST [1:?] OF complex_value;
END_ENTITY;


ENTITY level_spec_column
ABSTRACT SUPERTYPE OF (ONEOF (int_level_spec_column,
	real_level_spec_column))
SUBTYPE OF (complex_column );
	levels: LIST [1:4] OF UNIQUE level;
	SELF\column.values: LIST [1:?] OF level_spec_value;
WHERE
	WR1: QUERY (inst <* SELF\column.values
		|NOT right_values_for_level_spec (SELF.levels, inst))
		= [];
END_ENTITY;


ENTITY int_level_spec_column
SUBTYPE OF (level_spec_column);
	SELF\column.values: LIST [1:?] OF int_level_spec_value;
END_ENTITY;


ENTITY real_level_spec_column
SUBTYPE OF (level_spec_column);
	SELF\column.values: LIST [1:?] OF real_level_spec_value;
END_ENTITY;


ENTITY entity_instance_column
SUBTYPE OF (complex_column );
	type_name: SET [1 : ?] OF STRING;
	SELF\column.values: LIST [1:?] OF entity_instance_value;
WHERE
	WR1: QUERY ( inst <* SELF\column.values
			|NOT (SELF.type_name <= TYPEOF (inst))) = [];
END_ENTITY;


ENTITY class_instance_column
SUBTYPE OF (complex_column);
	class_ref: class_BSU;
	SELF\column.values: LIST [1:?] OF dic_class_instance;
WHERE
	WR1: QUERY ( inst <* SELF\column.values
		|NOT compatible_class_and_class (SELF.class_ref, 
			inst\dic_class_instance.class_def)) = [];
END_ENTITY;


ENTITY table_expression
ABSTRACT SUPERTYPE OF (ONEOF(simple_table_expression,
	unary_table_expression,
	binary_table_expression,
	multiple_arity_table_expression,
	select_expression))
SUBTYPE OF (generic_expression);
DERIVE
	its_columns: LIST[1:?] OF variable_semantics 
						:= collects_columns (SELF);
	the_key: SET[1:?] OF variable_semantics := return_key(SELF);
	is_SQL_mappable: LOGICAL
					:= is_SQL_mappable_table_expression (SELF);
WHERE
	WR1: QUERY (sem <* its_columns
		|SIZEOF (QUERY (sem_2 <* its_columns
		|sem_2 :=: sem)) <> 1) = [];
END_ENTITY;


ENTITY column_traversal_variable_semantics
SUBTYPE OF (variable_semantics);
	ctxt: table_expression;
	domain: variable_semantics;
WHERE
	WR1: SELF.domain IN SELF.ctxt.its_columns;
	WR2: (SIZEOF (USEDIN(SELF,'ISO13584_GENERIC_EXPRESSIONS_SCHEMA'
		+'.ENVIRONMENT.SEMANTICS')) = 0)
		OR compatible_variable_semantics_and_expression(
		SELF.domain,USEDIN(SELF,'ISO13584_GENERIC_EXPRESSIONS_SCHEMA'
		+'.ENVIRONMENT.SEMANTICS')[1].syntactic_representation);
END_ENTITY;


ENTITY unary_table_expression
ABSTRACT SUPERTYPE OF (projection_expression)
SUBTYPE OF(table_expression,unary_generic_expression);
	SELF\unary_generic_expression.operand : table_expression;
END_ENTITY;


ENTITY binary_table_expression
ABSTRACT SUPERTYPE OF (ONEOF (set_table_expression,
		natural_join_expression))
SUBTYPE OF(table_expression, binary_generic_expression);
	SELF\binary_generic_expression.operands: 
			LIST [2:2] OF table_expression;
END_ENTITY;


ENTITY multiple_arity_table_expression
ABSTRACT SUPERTYPE OF (multiple_arity_cartesian_product)
SUBTYPE OF (table_expression, multiple_arity_generic_expression);
	SELF\multiple_arity_generic_expression.operands:
			LIST [2:?] OF table_expression;
END_ENTITY;


ENTITY simple_table_expression
ABSTRACT SUPERTYPE OF (ONEOF(
	table_variable,
	table_literal))
SUBTYPE OF(table_expression, simple_generic_expression);
END_ENTITY;


ENTITY table_variable
SUPERTYPE OF (RDB_table_variable)
SUBTYPE OF (simple_table_expression, generic_variable);
	structure: LIST [1:?] OF variable_semantics;
	its_key: SET [1:?] OF variable_semantics;
WHERE
	WR1: SELF.its_key <= list_to_set(SELF.structure);
END_ENTITY;


ENTITY RDB_table_variable
SUBTYPE OF (table_variable);
WHERE
	WR1: QUERY (col <* SELF\table_expression.its_columns |
		QUERY (v <* syntax_of (col) |
		NOT ('ISO13584_EXPRESSIONS_SCHEMA.VARIABLE'
			IN TYPEOF(v))) <> []) = [];
END_ENTITY;


ENTITY table_literal
SUBTYPE OF (simple_table_expression, generic_literal);
	the_value: table_identification;
WHERE
	WR1: SIZEOF (USEDIN (SELF.the_value,
		'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_SPECIFICATION'
		+ '.TABLE_IDENTIFIER')) = 1;
END_ENTITY;


ENTITY set_table_expression
ABSTRACT SUPERTYPE OF(ONEOF(
	union_table_expression,
	intersect_table_expression,
	difference_table_expression))
SUBTYPE OF (binary_table_expression);
WHERE
	WR1: SELF\multiple_arity_generic_expression.operands[1]
		\table_expression.its_columns =
		SELF\multiple_arity_generic_expression.operands[2]
		\table_expression.its_columns;
END_ENTITY;


ENTITY union_table_expression
SUBTYPE OF (set_table_expression);
END_ENTITY;


ENTITY intersect_table_expression
SUBTYPE OF (set_table_expression);
END_ENTITY;


ENTITY difference_table_expression
SUBTYPE OF (set_table_expression);
END_ENTITY;


ENTITY multiple_arity_cartesian_product
SUBTYPE OF (multiple_arity_table_expression);
	SELF\multiple_arity_generic_expression.operands:
			LIST [2:?] OF table_expression;
END_ENTITY;


ENTITY in_RDB_table_boolean_expression 
SUBTYPE OF (multiple_arity_generic_expression, 
		 boolean_defined_function, 
		 SQL_mappable_defined_function); 
DERIVE 
	from_table: generic_expression := 
				SELF\multiple_arity_generic_expression.operands[1]; 
	tuple: LIST[1:?] OF generic_expression  
		:= QUERY(element <*  
SELF\multiple_arity_generic_expression.operands | 
		'ISO13584_EXPRESSIONS_SCHEMA.EXPRESSION'  
		IN TYPEOF(element)); 
WHERE 
	WR1: ('ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_EXPRESSION' 
		IN TYPEOF(from_table)) 
		AND is_sql_mappable_table_expression
				(from_table\table_expression); 
	WR2: SIZEOF (QUERY(simple_expr<* 
		QUERY(expr<*SELF\multiple_arity_generic_expression.operands |  
		('ISO13584_EXPRESSIONS_SCHEMA.EXPRESSION'  
		IN TYPEOF (expr)))|is_sql_mappable(simple_expr\expression))) 
		= SIZEOF(SELF\multiple_arity_generic_expression.operands)- 1;
	WR3: SIZEOF (from_table\table_expression.its_columns) 
			= SIZEOF(tuple); 
	WR4: compatible_list_variable_semantics_and_expressions 
		(SELF.from_table\table_expression.its_columns, SELF.tuple); 
	WR5: QUERY (e<*tuple |  
		QUERY (v<*used_variables(e)|('ISO13584_TABLE_RESOURCE_SCHEMA'  
		+ '.COLUMN_TRAVERSAL_VARIABLE_SEMANTICS')  
		IN TYPEOF (v.interpretation.semantics)) <> [] ) = []; 
END_ENTITY; 


ENTITY select_expression
SUBTYPE OF (table_expression, binary_generic_expression);
DERIVE
	from_table: generic_expression :=
		SELF\binary_generic_expression.operands[1];
	condition: generic_expression :=
		SELF\binary_generic_expression.operands[2];
WHERE
	WR1: 'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_EXPRESSION' 
		IN TYPEOF(SELF.from_table);
	WR2: 'ISO13584_EXPRESSIONS_SCHEMA.BOOLEAN_EXPRESSION' 
		IN TYPEOF(SELF.condition);
	WR3: QUERY(va <* used_variables(SELF.condition) |
		NOT('ISO13584_EXPRESSIONS_SCHEMA.VARIABLE' 
		IN TYPEOF(va))) = [];
	WR4: QUERY(v <* used_variables(SELF.condition) | 
		(NOT(check_iterator_context(SELF, v)) OR
		check_iterator_domain_uniqueness(SELF, v))) = [];
END_ENTITY;


ENTITY projection_expression
SUBTYPE OF (unary_table_expression);
	SELF\unary_generic_expression.operand: table_expression;
	argts_var: SET[1:?] OF variable_semantics;
WHERE
	WR1: SELF.argts_var <=
		list_to_set 
(SELF\unary_generic_expression.operand\table_expression.its_columns);
END_ENTITY;


ENTITY natural_join_expression
SUBTYPE OF (binary_table_expression);
DERIVE
	table_1: generic_expression :=
				SELF\binary_generic_expression.operands [1];
	table_2: generic_expression :=
				SELF\binary_generic_expression.operands [2];
WHERE
	WR1: ('ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_EXPRESSION' 
			IN TYPEOF(SELF.table_1))
		AND
		('ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_EXPRESSION' 
			IN TYPEOF(SELF.table_2));
	WR2: SIZEOF(list_to_set(table_1\table_expression.its_columns) *
		list_to_set(table_2\table_expression.its_columns)) > 0;
END_ENTITY;


FUNCTION compatible_column_and_variable (col: column;
		v: generic_variable)
		: LOGICAL;



IF 'ISO13584_EXPRESSIONS_SCHEMA.INT_NUMERIC_VARIABLE' IN TYPEOF(v) 
THEN
	RETURN (('ISO13584_TABLE_RESOURCE_SCHEMA.INTEGER_COLUMN' 
		IN TYPEOF (col)) OR
		(('ISO13584_TABLE_RESOURCE_SCHEMA.NUMBER_COLUMN'
		 IN TYPEOF (col)) 
		AND NOT ('ISO13584_TABLE_RESOURCE_SCHEMA.REAL_COLUMN' 
		IN TYPEOF (col))));
END_IF;

IF 'ISO13584_EXPRESSIONS_SCHEMA.REAL_NUMERIC_VARIABLE' IN TYPEOF(v) 
THEN
	RETURN (('ISO13584_TABLE_RESOURCE_SCHEMA.REAL_COLUMN' 
		IN TYPEOF (col)) 
		OR (('ISO13584_TABLE_RESOURCE_SCHEMA.NUMBER_COLUMN' 
		IN TYPEOF (col)) 
		AND NOT ('ISO13584_TABLE_RESOURCE_SCHEMA.INTEGER_COLUMN' 
		IN TYPEOF (col))));
END_IF;

IF 'ISO13584_EXPRESSIONS_SCHEMA.BOOLEAN_VARIABLE' IN TYPEOF(v) 
THEN
	RETURN ('ISO13584_TABLE_RESOURCE_SCHEMA.BOOLEAN_COLUMN' 
	IN TYPEOF (col));
END_IF;

IF 'ISO13584_EXPRESSIONS_SCHEMA.STRING_VARIABLE' IN TYPEOF(v) 
THEN
	RETURN ('ISO13584_TABLE_RESOURCE_SCHEMA.STRING_COLUMN'
	IN TYPEOF (col));
END_IF;



IF 'ISO13584_LIBRARY_EXPRESSIONS_SCHEMA.ENTITY_INSTANCE_VARIABLE' IN 
	TYPEOF(v) 
THEN
	RETURN (('ISO13584_TABLE_RESOURCE_SCHEMA.ENTITY_INSTANCE_COLUMN' 
		IN TYPEOF (col))
		AND (v\entity_instance_expression.type_name 
<= col\entity_instance_column.type_name)); 
END_IF;

IF 'ISO13584_LIBRARY_EXPRESSIONS_SCHEMA.CLASS_INSTANCE_VARIABLE' IN 
	TYPEOF(v) 
THEN
	IF ('ISO13584_TABLE_RESOURCE_SCHEMA.CLASS_INSTANCE_COLUMN' 
		IN TYPEOF (col))
	THEN 
		RETURN (compatible_class_and_class
			(v\class_instance_expression.expr_type, 
			col\class_instance_column.class_ref));
	ELSE 
		RETURN(FALSE);
	END_IF;
END_IF;

IF 'ISO13584_LIBRARY_EXPRESSIONS_SCHEMA.LEVEL_SPEC_VARIABLE'
	IN TYPEOF(v) THEN
	IF ('ISO13584_TABLE_RESOURCE_SCHEMA.LEVEL_SPEC_COLUMN' 
		IN TYPEOF (col))
	THEN 
		IF list_to_set(v\level_spec_expression.levels)
			 = list_to_set(col\level_spec_column.levels)
		THEN
			IF (('ISO13584_LIBRARY_EXPRESSIONS_SCHEMA'
				+'.INT_LEVEL_SPEC_VARIABLE' IN TYPEOF(v)) 
				AND NOT('ISO13584_TABLE_RESOURCE_SCHEMA' + 
				'.INT_LEVEL_SPEC_COLUMN' IN TYPEOF(col)))
			THEN
				RETURN (FALSE);
			END_IF;
			IF (('ISO13584_LIBRARY_EXPRESSIONS_SCHEMA'
				+'.REAL_LEVEL_SPEC_VARIABLE' IN TYPEOF(v)) 
				AND NOT('ISO13584_TABLE_RESOURCE_SCHEMA' + 
				'.REAL_LEVEL_SPEC_COLUMN' IN TYPEOF(col)))
			THEN
				RETURN (FALSE);
			END_IF;
			RETURN (TRUE);
		ELSE
			RETURN (FALSE);
		END_IF;
	ELSE 
		RETURN (FALSE);
	END_IF;
END_IF;

RETURN (FALSE);

END_FUNCTION; -- compatible_column_and_variable 


FUNCTION compatible_column_and_variable_semantics (
		col: column;
		sem: variable_semantics 
		): LOGICAL;

LOCAL
	va: SET OF generic_variable;
	i: INTEGER;
END_LOCAL;

va := syntax_of (sem);
IF SIZEOF (va) = 0 
THEN
	RETURN (UNKNOWN);
ELSE
	REPEAT i := LOINDEX (va) TO HIINDEX (va);
		IF ( NOT compatible_column_and_variable (col, va[i]))
		THEN
			RETURN (FALSE);
		END_IF;
	END_REPEAT;
	RETURN (TRUE);
END_IF; 

END_FUNCTION; -- compatible_column_and_variable_semantics 


FUNCTION compatible_list_variable_semantics_and_columns (
		sem: LIST [0:?] of variable_semantics;
		col: LIST [0:?] of column
		): LOGICAL;

LOCAL
	i: INTEGER;
	res: LOGICAL;
END_LOCAL;

IF SIZEOF(sem) <> SIZEOF (col)
THEN
	RETURN(FALSE);
END_IF;

res := TRUE;	

REPEAT i:= LOINDEX (col) TO HIINDEX (col);
	res := res AND 
		compatible_column_and_variable_semantics (col[i], sem[i]); 
END_REPEAT;

RETURN (res);

END_FUNCTION; -- compatible_list_variable_semantics_and_columns 


FUNCTION compatible_variable_semantics_and_expression (
		sem: variable_semantics;
		expr: expression 
		): LOGICAL;

LOCAL
	va: SET OF generic_variable;
	i: INTEGER;
END_LOCAL;

va := syntax_of (sem);
IF SIZEOF (va) = 0 
THEN
	RETURN (UNKNOWN);
ELSE
	REPEAT i := LOINDEX (va) TO HIINDEX (va);
		IF ( NOT compatible_variable_and_expression (va[i], expr))
		THEN
			RETURN (FALSE);
		END_IF;
	END_REPEAT;
	RETURN (TRUE);
END_IF; 

END_FUNCTION; -- compatible_variable_semantics_and_expression 


FUNCTION compatible_list_variable_semantics_and_expressions (
		sem: LIST [0:?] of variable_semantics;
		exprs: LIST [0:?] of expression
		): LOGICAL;

LOCAL
	i: INTEGER;
	res: LOGICAL;
END_LOCAL;

IF SIZEOF(sem) <> SIZEOF (exprs)
THEN
	RETURN(FALSE);
END_IF;

res := TRUE;	

REPEAT i:= LOBOUND (sem) TO HIBOUND (sem);
	res := res AND 
		compatible_variable_semantics_and_expression 
		(sem[i], exprs[i]); 
END_REPEAT;

RETURN (res);

END_FUNCTION; -- compatible_list_variable_semantics_and_expressions 


FUNCTION collects_columns (t: table_expression) : 
		LIST OF variable_semantics; 
 
LOCAL 
	i: INTEGER; 
	res, tempo: LIST [0:?] OF variable_semantics:= []; 
	x: BAG [1:1] OF table_specification; 
END_LOCAL; 
 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_VARIABLE'IN TYPEOF(t) 
THEN 
	RETURN( t\table_variable.structure); 
END_IF; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_LITERAL' IN TYPEOF(t) 
THEN 
	x := USEDIN(t\table_literal.the_value,
		'ISO13584_TABLE_RESOURCE_SCHEMA' 
		+ '.TABLE_SPECIFICATION.TABLE_IDENTIFIER'); 
	RETURN(x[1].column_meaning);	 
END_IF; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.NATURAL_JOIN_EXPRESSION' 
	IN TYPEOF(t) 
THEN 
	RETURN( 
	diff_columns(
		collects_columns(
			t\natural_join_expression.table_1), 
		collects_columns(
			t\natural_join_expression.table_2))); 
END_IF; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.BINARY_TABLE_EXPRESSION' 
	IN TYPEOF(t)  
THEN 
	RETURN(collects_columns (t\binary_table_expression.operands[1])+ 
	collects_columns(t\binary_table_expression.operands[2])); 
END_IF; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.MULTIPLE_ARITY_TABLE_EXPRESSION' IN  
TYPEOF(t) THEN 
	REPEAT i:= 1 TO 
			SIZEOF(t\multiple_arity_table_expression.operands);
		res := res + 
		collects_columns(t\multiple_arity_table_expression
											.operands[i]); 
	END_REPEAT; 
	RETURN(res); 
END_IF; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.SELECT_EXPRESSION' IN TYPEOF(t) 
THEN 
	RETURN(collects_columns(
			t\binary_generic_expression.operands[1])); 
END_IF; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.PROJECTION_EXPRESSION' IN TYPEOF(t)  
THEN 
	REPEAT i := 1 TO SIZEOF(t\projection_expression.argts_var); 
		tempo := tempo +t\projection_expression.argts_var[i]; 
	END_REPEAT; 
	RETURN(tempo); 
END_IF; 
 
RETURN([]); 
 
END_FUNCTION; -- collects_columns 


FUNCTION diff_columns (l1, l2 :LIST [1:?] OF variable_semantics) :
						LIST [1:?] OF variable_semantics;

LOCAL
	i: INTEGER;
END_LOCAL;

REPEAT i := 1 TO SIZEOF(l2);
	IF l2[i] IN l1 THEN ;
		ELSE 
			l1 := l1 + l2[i];
	END_IF;
END_REPEAT;

RETURN(l1);
END_FUNCTION; -- diff_columns


FUNCTION semantics_of_variable_set (l: SET[0:?] OF generic_variable)
		: SET [0:?] OF variable_semantics;

LOCAL	
	i: INTEGER;
	res: SET [0:?] OF variable_semantics := [];
END_LOCAL;

REPEAT i := 1 TO SIZEOF(l);
	res := res + l[i].interpretation.semantics;
END_REPEAT;

RETURN (res);

END_FUNCTION; --semantics_of_variable_set 


FUNCTION return_key (t: table_expression) 
		: SET [1:?] OF variable_semantics; 
 
LOCAL 
	i: INTEGER; 
	res: SET [0:?] OF variable_semantics:= []; 
	x: BAG[1:1] OF table_specification; 
END_LOCAL; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_VARIABLE'IN TYPEOF(t) 
THEN 
	RETURN(t\simple_table_expression\table_variable.its_key); 
END_IF; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_LITERAL' IN TYPEOF(t) 
THEN 
	x := USEDIN(t\table_literal.the_value,
		'ISO13584_TABLE_RESOURCE_SCHEMA.' 
		+ 'TABLE_SPECIFICATION.TABLE_IDENTIFIER'); 
	RETURN (x[1]\table_specification.key);	 
END_IF; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.SELECT_EXPRESSION' IN TYPEOF(t) 
THEN 
	RETURN (return_key(
		t\binary_generic_expression.operands[1])); 
END_IF; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.PROJECTION_EXPRESSION' IN TYPEOF(t)  
THEN 
	IF QUERY (col <* t\projection_expression.operand.the_key | NOT 
		(col IN t\projection_expression.argts_var)) <> [] 
	THEN 
		RETURN (list_to_set(t\table_expression.its_columns)); 
	ELSE  
		RETURN (t\projection_expression.operand.the_key); 
	END_IF; 
END_IF; 
 
IF (('ISO13584_TABLE_RESOURCE_SCHEMA.INTERSECT_TABLE_EXPRESSION' 
		IN TYPEOF(t)) 
	OR 
	('ISO13584_TABLE_RESOURCE_SCHEMA.DIFFERENCE_TABLE_EXPRESSION' 
		IN TYPEOF(t))) 
THEN 
	RETURN (return_key(t\binary_table_expression.operands[1])); 
END_IF; 
 
IF (('ISO13584_TABLE_RESOURCE_SCHEMA.UNION_TABLE_EXPRESSION' 
		IN TYPEOF(t)) 
	OR 
	('ISO13584_TABLE_RESOURCE_SCHEMA.NATURAL_JOIN_EXPRESSION' 
		IN TYPEOF(t))) 
THEN 
	RETURN (return_key(t\binary_table_expression.operands[1]) + 
	return_key(t\binary_table_expression.operands[2])); 
END_IF; 
 
IF 'ISO13584_TABLE_RESOURCE_SCHEMA.MULTIPLE_ARITY_TABLE_EXPRESSION' IN  
TYPEOF(t) THEN 
	REPEAT i := 1 TO
	SIZEOF(t\multiple_arity_table_expression.operands); 
		res := res  
		+return_key(t\multiple_arity_table_expression.operands[i]);
	END_REPEAT; 
	RETURN (res); 
END_IF; 
 
RETURN([]); 
END_FUNCTION; -- return_key 


FUNCTION is_SQL_mappable_table_expression (arg: table_expression )  
		: LOGICAL; 
 
LOCAL 
	i: INTEGER; 
END_LOCAL; 
 
IF 	'ISO13584_TABLE_RESOURCE_SCHEMA.SIMPLE_TABLE_EXPRESSION'  
	IN TYPEOF (arg)  
THEN  
	IF 	('ISO13584_TABLE_RESOURCE_SCHEMA.RDB_TABLE_VARIABLE'  
		IN TYPEOF(arg)) 
	THEN  
		RETURN (TRUE); 
	END_IF; 
	IF ('ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_LITERAL'  
		IN TYPEOF(arg)) 
	THEN 
		IF (SIZEOF ( USEDIN (arg\table_literal.the_value, 
			'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_SPECIFICATION' 
			+ '.TABLE_IDENTIFIER')) = 1) 
		THEN 
			RETURN (('ISO13584_TABLE_RESOURCE_SCHEMA' 
				+'.RDB_TABLE_SPECIFICATION')  
				IN TYPEOF (USEDIN (arg\table_literal.the_value, 
				'ISO13584_TABLE_RESOURCE_SCHEMA' 
				+'.TABLE_SPECIFICATION.TABLE_IDENTIFIER')[1])); 
		ELSE 
			RETURN (UNKNOWN); 
		END_IF; 
	END_IF; 
	RETURN (FALSE); 	-- table_variable that is not 
				-- an RDB_table_variable 
END_IF; 
 
IF ('ISO13584_TABLE_RESOURCE_SCHEMA.UNARY_TABLE_EXPRESSION'  
	IN TYPEOF(arg))  
THEN 
	RETURN (is_SQL_mappable_table_expression( 
			arg\unary_table_expression.operand)); 
END_IF; 
 
IF ('ISO13584_TABLE_RESOURCE_SCHEMA.SELECT_EXPRESSION'  
	IN TYPEOF(arg))  
THEN 
	RETURN (is_SQL_mappable_table_expression( 
			arg\select_expression.from_table\table_expression) 
			AND is_SQL_mappable( 
			arg\select_expression.condition\boolean_expression)); 
END_IF; 
 
IF 	('ISO13584_TABLE_RESOURCE_SCHEMA.BINARY_TABLE_EXPRESSION'  
	IN TYPEOF(arg))  
THEN 
	RETURN (is_SQL_mappable_table_expression( 
		arg\binary_table_expression.operands[1]) 
		AND Is_SQL_mappable_table_expression( 
		arg\binary_table_expression.operands[2])); 
END_IF; 
 
IF ('ISO13584_TABLE_RESOURCE_SCHEMA.MULTIPLE_ARITY_TABLE_EXPRESSION'  
	IN TYPEOF(arg))  
THEN  
	REPEAT i := 1 TO SIZEOF  
(arg\multiple_arity_table_expression.operands); 
		IF NOT is_SQL_mappable_table_expression 
				(arg\multiple_arity_table_expression.operands[i]) 
		THEN  
			RETURN (FALSE); 
		END_IF; 
	END_REPEAT; 
	 
	RETURN (TRUE); 
END_IF; 
 
RETURN(UNKNOWN); 
END_FUNCTION; -- is_SQL_mappable_table_expression 


FUNCTION used_table_literals (arg: generic_expression)
		:SET OF table_identification;

LOCAL
	result: SET OF table_identification := [];
END_LOCAL;

IF 'ISO13584_TABLE_RESOURCE_SCHEMA.TABLE_LITERAL' IN TYPEOF (arg) 
THEN
	RETURN ([arg\table_literal.the_value]);
END_IF;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.UNARY_GENERIC_EXPRESSION'
	IN TYPEOF (arg)
THEN 
	RETURN (used_table_literals 
(arg\unary_generic_expression.operand));
END_IF;

IF 'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.BINARY_GENERIC_EXPRESSION'
	IN TYPEOF (arg)
THEN 
	RETURN (used_table_literals (arg\binary_generic_expression
		.operands[1]) + used_table_literals(
		arg\binary_generic_expression.operands[2]));
END_IF;

IF 
'ISO13584_GENERIC_EXPRESSIONS_SCHEMA.MULTIPLE_ARITY_GENERIC_EXPRESSION'
	IN TYPEOF (arg)
THEN
	REPEAT i := 1 TO SIZEOF 
(arg\multiple_arity_generic_expression.operands);
		result := result + used_table_literals 
			(arg\multiple_arity_generic_expression.operands[i]);
	END_REPEAT;
	RETURN (result);
END_IF;

RETURN ([]);

END_FUNCTION; -- used_table_literals


FUNCTION check_iterator_context(expr: select_expression; 
					v: generic_variable): LOGICAL;

IF ('ISO13584_TABLE_RESOURCE_SCHEMA' +
		'.COLUMN_TRAVERSAL_VARIABLE_SEMANTICS' IN
			TYPEOF(v.interpretation.semantics))
THEN
	IF (v.interpretation.semantics\
			column_traversal_variable_semantics.ctxt 
		:<>: expr.from_table)
	THEN
		RETURN(FALSE);
	ELSE
		RETURN(TRUE);
	END_IF;
ELSE
	RETURN(UNKNOWN);
END_IF;

END_FUNCTION; -- check_iterator_context


FUNCTION check_iterator_domain_uniqueness
	(expr: select_expression; v: generic_variable): LOGICAL;
LOCAL
	vars: SET OF generic_variable := [];
	res: SET OF generic_variable := [];
END_LOCAL;

IF ('ISO13584_TABLE_RESOURCE_SCHEMA.'
		+'COLUMN_TRAVERSAL_VARIABLE_SEMANTICS' IN
		TYPEOF(v.interpretation.semantics))
THEN
	vars := used_variables(expr.condition);

	REPEAT i := 1 TO SIZEOF(vars);
		IF 	('ISO13584_TABLE_RESOURCE_SCHEMA' +
			'.COLUMN_TRAVERSAL_VARIABLE_SEMANTICS' IN
			TYPEOF(vars[i].interpretation.semantics))
		THEN
			IF (vars[i].interpretation.semantics\
				column_traversal_variable_semantics.domain 
				:=: v.interpretation.semantics\
					column_traversal_variable_semantics.domain)
			THEN
				res := res + vars[i];
			END_IF;
		END_IF;
	END_REPEAT;

	RETURN(SIZEOF(res) = 1);
END_IF;
	
RETURN(UNKNOWN);

END_FUNCTION; -- check_iterator_domain_uniqueness


END_SCHEMA; --ISO13584_table_ressource_schema
