-- ap212 aim short form, 2000-09-08

SCHEMA electrotechnical_design;

USE FROM ISO13584_expressions_schema                     -- ISO 13584-20
  (abs_function,
   acos_function,
   and_expression,
   asin_function,
   atan_function,
   binary_boolean_expression,
   binary_function_call,
   binary_numeric_expression,
   boolean_expression,
   boolean_literal,
   boolean_variable,
   comparison_equal,
   comparison_expression,
   comparison_greater,
   comparison_greater_equal,
   comparison_less,
   comparison_less_equal,
   comparison_not_equal,
   concat_expression,
   cos_function,
   div_expression,
   equals_expression,
   exp_function,
   expression,
   format_function,
   index_expression,
   int_literal,
   int_numeric_variable,
   int_value_function,
   interval_expression,
   length_function,
   like_expression,
   literal_number,
   log10_function,
   log2_function,
   log_function,
   maximum_function,
   minimum_function,
   minus_expression,
   minus_function,
   mod_expression,
   mult_expression,
   multiple_arity_boolean_expression,
   multiple_arity_function_call,
   multiple_arity_numeric_expression,
   not_expression,
   numeric_expression,
   numeric_variable,
   odd_function,
   or_expression,
   plus_expression,
   power_expression,
   real_literal,
   real_numeric_variable,
   simple_boolean_expression,
   simple_numeric_expression,
   simple_string_expression,
   sin_function,
   slash_expression,
   square_root_function,
   string_expression,
   string_literal,
   string_variable,
   substring_expression,
   tan_function,
   unary_boolean_expression,
   unary_function_call,
   unary_numeric_expression,
   value_function,
   variable,
   xor_expression);

REFERENCE FROM ISO13584_expressions_schema               -- ISO 13584-20
 (is_SQL_mappable,
  is_int_expr,
  used_functions);

USE FROM action_schema                                   -- ISO 10303-41
  (action,
   action_directive,
   action_method,
   action_relationship,
   action_request_solution,
   action_request_status,
   action_status,
   directed_action,
   executed_action,
   versioned_action_request);

USE FROM application_context_schema                      -- ISO 10303-41
  (application_context,
   application_context_element,
   application_context_relationship,
   application_protocol_definition,
   product_definition_context);

USE FROM approval_schema                                 -- ISO 10303-41
  (approval,
   approval_date_time,
   approval_person_organization,
   approval_relationship,
   approval_role,
   approval_status);

USE FROM basic_attribute_schema                          -- ISO 10303-41
  (description_attribute,
   id_attribute,
   name_attribute,
   object_role,
   role_association);

USE FROM certification_schema                            -- ISO 10303-41
  (certification,
   certification_type);

USE FROM configuration_management_schema                 -- ISO 10303-44
  (configurable_item,
   configuration_design,
   configuration_effectivity,
   configuration_item);

USE FROM contract_schema                                 -- ISO 10303-41
  (contract);

USE FROM date_time_schema                                -- ISO 10303-41
  (calendar_date,
   date,
   date_role,
   date_and_time,
   date_time_role,
   event_occurrence,
   event_occurrence_role,
   relative_event_occurrence,
   time_interval_role,
   time_interval_with_bounds);

USE FROM document_schema                                 -- ISO 10303-41
  (document,
   document_product_association,
   document_relationship,
   document_representation_type,
   document_type,
   document_usage_constraint);

USE FROM drawing_definition_schema                       -- ISO 10303-101
  (draughting_title,
   drawing_definition,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   drawing_sheet_revision_usage);

USE FROM effectivity_schema                              -- ISO 10303-41
  (dated_effectivity,
   effectivity,
   effectivity_relationship,
   lot_effectivity,
   serial_numbered_effectivity,
   time_interval_based_effectivity);

USE FROM external_reference_schema                       -- ISO 10303-41
  (externally_defined_item,
   externally_defined_item_relationship,
   external_source,
   pre_defined_item);

USE FROM geometry_schema                                 -- ISO 10303-42
  (axis2_placement,
   axis2_placement_2d,
   axis2_placement_3d,
   b_spline_curve,
   b_spline_curve_with_knots,
   bezier_curve,
   bounded_curve,
   cartesian_point,
   cartesian_transformation_operator_2d,
   cartesian_transformation_operator_3d,
   circle,
   composite_curve,
   conic,
   curve,
   ellipse,
   geometric_representation_context,
   geometric_representation_item,
   hyperbola,
   line,
   offset_curve_2d,
   parabola,
   point,
   polyline,
   quasi_uniform_curve,
   rational_b_spline_curve,
   trimmed_curve,
   uniform_curve);

USE FROM group_schema                                    -- ISO 10303-41
  (group,
   group_relationship);

USE FROM management_resources_schema                     -- ISO 10303-41
  (action_assignment,
   action_request_assignment,
   approval_assignment,
   attribute_classification_assignment,
   attribute_value_assignment,
   attribute_value_role,
   certification_assignment,
   classification_assignment,
   classification_role,
   contract_assignment,
   date_and_time_assignment,
   date_assignment,
   document_reference,
   document_usage_constraint_assignment,
   document_usage_role,
   effectivity_assignment,
   effectivity_context_assignment,
   effectivity_context_role,
   event_occurrence_assignment,
   external_identification_assignment,
   group_assignment,
   identification_assignment,
   identification_assignment_relationship,
   identification_role,
   organization_assignment,
   organizational_project_assignment,
   organizational_project_role,
   person_and_organization_assignment,
   security_classification_assignment,
   time_interval_assignment);

USE FROM material_property_definition_schema             -- ISO 10303-45
  (property_definition_relationship);

USE FROM measure_schema                                  -- ISO 10303-41
  (amount_of_substance_measure,
   amount_of_substance_measure_with_unit,
   amount_of_substance_unit,
   area_measure,
   area_measure_with_unit,
   area_unit,
   celsius_temperature_measure,
   celsius_temperature_measure_with_unit,
   context_dependent_measure,
   context_dependent_unit,
   conversion_based_unit,
   count_measure,
   derived_unit,
   descriptive_measure,
   electric_current_measure,
   electric_current_measure_with_unit,
   electric_current_unit,
   global_unit_assigned_context,
   length_measure,
   length_measure_with_unit,
   length_unit,
   luminous_intensity_measure,
   luminous_intensity_measure_with_unit,
   luminous_intensity_unit,
   mass_measure,
   mass_measure_with_unit,
   mass_unit,
   measure_with_unit,
   named_unit,
   numeric_measure,
   parameter_value,
   plane_angle_measure,
   plane_angle_measure_with_unit,
   plane_angle_unit,
   positive_length_measure,
   positive_plane_angle_measure,
   positive_ratio_measure,
   ratio_measure,
   ratio_measure_with_unit,
   ratio_unit,
   si_unit,
   solid_angle_measure,
   solid_angle_measure_with_unit,
   solid_angle_unit,
   thermodynamic_temperature_measure,
   thermodynamic_temperature_measure_with_unit,
   thermodynamic_temperature_unit,
   time_measure,
   time_measure_with_unit,
   time_unit,
   volume_measure,
   volume_measure_with_unit,
   volume_unit);

USE FROM person_organization_schema                      -- ISO 10303-41
  (address,
   organization,
   organization_relationship,
   organization_role,
   organizational_address,
   organizational_project,
   organizational_project_relationship,
   person,
   person_and_organization,
   person_and_organization_role,
   personal_address);

USE FROM presentation_appearance_schema                  -- ISO 10303-46
  (box_height,
   box_rotate_angle,
   box_slant_angle,
   box_width,
   context_dependent_over_riding_styled_item,
   curve_style_font,
   curve_style_with_ends_and_corners,
   draughting_pre_defined_curve_font, -- V.N. moved here
   externally_defined_curve_font,
   externally_defined_style,
   invisibility,
   pre_defined_curve_font,
   presentation_style_assignment,
   presentation_style_by_context,
   styled_item);

USE FROM presentation_definition_schema                  -- ISO 10303-46
  (annotation_occurrence_relationship,
   defined_character_glyph,
   defined_symbol,
   externally_defined_character_glyph,
   pre_defined_symbol,
   symbol_representation_map);

USE FROM presentation_organization_schema                -- ISO 10303-46
  (area_in_set,
   camera_image,
   camera_model,
   camera_model_d2,
   camera_usage,
   presentation_area,
   presentation_layer_assignment,
   presentation_representation,
   presentation_size,
   presentation_view,
   presented_item,
   presented_item_representation);

USE FROM presentation_resource_schema                    -- ISO 10303-46
  (externally_defined_text_font,
   draughting_pre_defined_colour, -- V.N. moved here
   draughting_pre_defined_text_font, -- V.N. moved here
   planar_box,
   planar_extent,
   pre_defined_colour,
   pre_defined_text_font);

USE FROM process_property_schema                         -- ISO 10303-49
  (action_property);

USE FROM process_property_representation_schema          -- ISO 10303-49
  (action_property_representation);

USE FROM product_concept_schema                          -- ISO 10303-44
  (concept_feature_operator,
   concept_feature_relationship,
   concept_feature_relationship_with_condition,
   conditional_concept_feature,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_relationship);

USE FROM product_definition_schema                       -- ISO 10303-41
  (product,
   product_category,
   product_category_relationship,
   product_definition,
   product_definition_context_association,
   product_definition_context_role,
   product_definition_effectivity,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_formation_with_specified_source,
   product_definition_relationship,
   product_definition_substitute,
   product_definition_with_associated_documents,
   product_related_product_category);

USE FROM product_property_definition_schema              -- ISO 10303-41
  (characterized_object,
   characterized_object_relationship,
   general_property,
   general_property_association,
   general_property_relationship,
   product_definition_shape,
   property_definition,
   shape_aspect,
   shape_aspect_relationship);

USE FROM product_property_representation_schema          -- ISO 10303-41
  (context_dependent_shape_representation,
   property_definition_representation,
   shape_definition_representation,
   shape_representation,
   shape_representation_relationship);

USE FROM product_structure_schema                        -- ISO 10303-44
  (alternate_product_relationship,
   assembly_component_usage,
   assembly_component_usage_substitute,
   make_from_usage_option,
   next_assembly_usage_occurrence,
   product_definition_occurrence_relationship,
   product_definition_usage,
   promissory_usage_occurrence,
   quantified_assembly_component_usage,
   specified_higher_usage_occurrence);

USE FROM qualified_measure_schema                        -- ISO 10303-45
  (descriptive_representation_item,
   measure_representation_item,
   precision_qualifier,
   qualified_representation_item,
   type_qualifier);

USE FROM representation_schema                           -- ISO 10303-43
  (compound_representation_item,
   functionally_defined_transformation,
   global_uncertainty_assigned_context,
   item_defined_transformation,
   list_representation_item,
   mapped_item,
   representation,
   representation_context,
   representation_item,
   representation_item_relationship,
   representation_map,
   representation_relationship,
   representation_relationship_with_transformation,
   set_representation_item,
   uncertainty_measure_with_unit,
   value_representation_item);

REFERENCE FROM representation_schema                     -- ISO 10303-43
  (using_representations);

USE FROM security_classification_schema                  -- ISO 10303-41
  (security_classification,
   security_classification_level);

USE FROM support_resource_schema                         -- ISO 10303-41
   (label,
   identifier);

REFERENCE FROM support_resource_schema                   -- ISO 10303-41
   (type_check_function);

USE FROM topology_schema                                 -- ISO 10303-42
  (edge,
   edge_curve,
   path,
   topological_representation_item,
   vertex,
   vertex_point);

USE FROM ISO13584_generic_expressions_schema;            -- ISO 13584-20

USE FROM aic_draughting_annotation;                      -- ISO 10303-504

USE FROM aic_draughting_elements;                        -- ISO 10303-506

 
TYPE action_item = SELECT 
  (action_directive,
   action_method,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_document_reference,
   applied_person_and_organization_assignment,
   applied_presented_item,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   characterized_object_relationship,
   class,
   class_system,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   descriptive_representation_item,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   equipment_marking,
   executed_action,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   installation_segment,
   interface,
   note_representation,
   notification,
   organization_relationship,
   organizational_project,
   path,
   person_and_organization,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   property_definition_relationship,
   representation,
   representation_item_relationship,
   representation_relationship,
   security_classification,
   security_classification_level,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE action_request_item = SELECT 
  (action_method,
   action_property,
   alternate_product_relationship,
   assembly_component_usage_substitute,
   characterized_object_relationship,
   class_system,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_sheet_revision,
   equipment_marking,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   interface,
   note_representation,
   notification,
   path,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   representation,
   representation_item_relationship,
   representation_relationship,
   shape_aspect_relationship,
   signal,
   terminal,
   vertex);
END_TYPE;

TYPE approval_item = SELECT 
  (action,
   action_directive,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   assembly_component_usage,
   assembly_component_usage_substitute,
   characterized_object_relationship,
   certification,
   class,
   class_system,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   descriptive_representation_item,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   equipment_marking,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   interface,
   note_representation,
   notification,
   organizational_project,
   path,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   property_definition_relationship,
   representation,
   representation_item_relationship,
   representation_relationship,
   security_classification,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE associated_item = SELECT 
  (action,
   action_directive,
   annotation_occurrence_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_identification_assignment,
   class,
   class_system,
   connecting_line_group,
   connectivity_definition,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   installation_segment,
   interface,
   item_designation_assignment,
   note_representation,
   notification,
   organizational_project,
   page_connector_presentation_group,
   page_connector_reference_group,
   path,
   process_variable,
   product,
   product_definition,
   product_definition_formation,
   product_definition_relationship,
   property_definition,
   representation,
   representation_relationship,
   security_classification,
   security_classification_level,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE attribute_language_item = SELECT 
  (action,
   action_directive,
   action_method,
   action_property,
   action_relationship,
   alternate_product_relationship,
   application_context,
   approval_relationship,
   assembly_component_usage_substitute,
   attribute_value_assignment,
   certification,
   class_system,
   conditional_concept_feature,
   configuration_design,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   descriptive_representation_item,
   document_file,
   document_relationship,
   draughting_title,
   drawing_sheet_revision,
   effectivity,
   effectivity_relationship,
   equipment_marking,
   event_occurrence,
   external_source,
   free_segment,
   general_property,
   general_property_relationship,
   group,
   identification_role, 
   inclusion_product_concept_feature,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   interface,
   notification,
   organization_relationship,
   organizational_project,
   organizational_project_relationship,
   path,
   presentation_view,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category_usage,
   product_concept_relationship,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   product_related_product_category,
   product_specification,
   property_definition,
   representation,
   representation_relationship,
   routed_segment,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE category_usage_item = SELECT
  (product_class);
END_TYPE;

TYPE certification_item = SELECT 
  (product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship);
END_TYPE;

TYPE classification_item = SELECT 
  (action_directive,
   action_method,
   applied_identification_assignment,
   approval,
   approval_status,
   class,
   colour_representation_item,
   configuration_item,
   connectivity_definition,
   contract,
   document_file,
   document_type,
   drawing_revision,
   drawing_sheet_revision,
   equipment_marking,
   executed_action,
   general_property,
   installation_location,
   installation_route,
   installation_section,
   installation_section_interface,
   item_designation_assignment,
   organizational_project,
   path,
   planar_extent,
   product,
   product_concept,
   product_concept_feature_category,
   product_definition,
   product_definition_formation,
   product_definition_relationship,
   property_definition,
   representation,
   security_classification_level,
   signal,
   symbol_representation_map,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE class_usage_effectivity_context_item = SELECT 
  (product_definition);
END_TYPE;

TYPE configured_effectivity_context_item = SELECT
  (product_concept_feature_association);
END_TYPE;

TYPE configured_effectivity_item = SELECT
  (connectivity_definition,
   installation_location,
   product_definition,
   signal);
END_TYPE;

TYPE connecting_line_item = SELECT
  (connectivity_definition);
END_TYPE;

TYPE contract_item = SELECT 
  (action_directive,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   notification,
   organizational_project,
   path,
   process_variable,
   product_definition,
   product_definition_formation,
   product_definition_relationship,
   representation,
   signal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE date_and_time_item = SELECT 
  (action,
   action_directive,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_document_reference,
   applied_organization_assignment,
   applied_person_and_organization_assignment,
   applied_presented_item,
   approval_person_organization,
   approval_status,
   assembly_component_usage_substitute,
   characterized_object_relationship,
   certification,
   class,
   class_system,
   configuration_item,
   configuration_design,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   descriptive_representation_item,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   effectivity,
   event_occurrence,
   executed_action,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   installation_segment,
   interface,
   note_representation,
   notification,
   organization_relationship,
   organizational_project,
   path,
   person_and_organization,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   property_definition_relationship,
   representation,
   representation_item_relationship,
   representation_relationship,
   security_classification,
   security_classification_level,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE date_item = SELECT 
(action,
   action_directive,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_document_reference,
   applied_organization_assignment,
   applied_person_and_organization_assignment,
   applied_presented_item,
   approval_person_organization,
   approval_status,
   assembly_component_usage_substitute,
   characterized_object_relationship,
   certification,
   class,
   class_system,
   configuration_item,
   configuration_design,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   descriptive_representation_item,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   effectivity,
   event_occurrence,
   executed_action,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   installation_segment,
   interface,
   note_representation,
   notification,
   organization_relationship,
   organizational_project,
   path,
   person_and_organization,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   property_definition_relationship,
   representation,
   representation_item_relationship,
   representation_relationship,
   security_classification,
   security_classification_level,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE document_reference_item = SELECT 
  (action,
   action_directive,
   action_method,
   address,
   applied_action_assignment,
   applied_classification_assignment,
   applied_identification_assignment,
   approval,
   approval_status,
   certification,
   class,
   class_system,
   configuration_item,
   connectivity_definition,
   contract,
   drawing_revision,
   drawing_sheet_revision,
   equipment_marking,
   executed_action,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   interface,
   item_designation_assignment,
   note_representation,
   notification,
   organization,
   organizational_project,
   path,
   person,
   presentation_view,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_relationship,
   property_definition,
   representation,
   security_classification,
   security_classification_level,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE draughting_group_element = SELECT
  (draughting_annotation_occurrence,
   draughting_elements);
END_TYPE;

TYPE draughting_presented_item_select = SELECT
  (product_definition_formation);
END_TYPE;

TYPE effectivity_item = SELECT 
  (action_property,
   alternate_product_relationship,
   applied_action_assignment,
   assembly_component_usage,
   assembly_component_usage_substitute,
   characterized_object_relationship,
   class_system,
   configuration_design,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   equipment_marking,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   interface,
   note_representation,
   notification,
   path,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   representation,
   representation_item_relationship,
   representation_relationship,
   security_classification,
   shape_aspect_relationship,
   signal,
   terminal,
   vertex);
END_TYPE;

TYPE event_occurrence_item = SELECT 
  (action,
   action_directive,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_document_reference,
   applied_person_and_organization_assignment,
   applied_presented_item,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   characterized_object_relationship,
   class,
   class_system,
   configuration_design,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   equipment_marking,
   executed_action,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   installation_segment,
   interface,
   note_representation,
   notification,
   organization_relationship,
   organizational_project,
   path,
   person_and_organization,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   property_definition_relationship,
   representation,
   representation_item_relationship,
   representation_relationship,
   security_classification,
   security_classification_level,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE external_identification_item = SELECT
  (document_file,
   drawing_revision,
   externally_defined_class,
   externally_defined_general_property,
   product_definition);
END_TYPE;

TYPE group_item = SELECT 
  (characterized_object,
   class_system,
   drawing_sheet_revision,
   installation_route,
   note_representation,
   notification,
   path,
   presentation_view,
   process_variable,
   product,
   product_class,
   product_concept,
   product_concept_feature,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   representation,
   shape_aspect,
   shape_aspect_relationship,
   signal,
   terminal,
   vertex);
END_TYPE;

TYPE identification_item = SELECT 
  (action_directive,
   approval_status,
   class,
   class_system,
   colour_representation_item,
   configuration_item,
   connectivity_definition,
   document_file,
   document_type,
   drawing_revision,
   drawing_sheet_revision,
   effectivity,
   general_property,
   identification_assignment,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_interface,
   notification,
   organization,
   path,
   person_and_organization,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_category,
   product_definition,
   product_definition_formation,
   product_definition_relationship,
   property_definition,
   representation,
   security_classification_level,
   signal,
   terminal,
   vertex);
END_TYPE;

TYPE item_designation_item = SELECT 
  (assembly_component_usage,
   drawing_revision,
   drawing_sheet_revision,
   installation_location,
   product,
   product_definition,
   product_definition_formation,
   signal,
   terminal);
END_TYPE;

TYPE language_item = SELECT 
  (annotation_text_occurrence,
   descriptive_representation_item,
   notification,
   representation);
END_TYPE;

TYPE multi_language_attribute_item = SELECT 
  (action,
   action_directive,
   action_method,
   action_relationship,
   alternate_product_relationship,
   application_context,
   approval_relationship,
   assembly_component_usage_substitute,
   certification,
   class_system,
   conditional_concept_feature,
   configuration_design,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   descriptive_representation_item,
   document_file,
   drawing_sheet_revision,
   effectivity,
   effectivity_relationship,
   equipment_marking,
   event_occurrence,
   external_source,
   free_segment,
   general_property,
   general_property_relationship,
   group,
   identification_role,
   inclusion_product_concept_feature,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   interface,
   notification,
   organization_relationship,
   organizational_project,
   organizational_project_relationship,
   path,
   presentation_view,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category_usage,
   product_concept_relationship,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   product_related_product_category,
   product_specification,
   property_definition,
   representation,
   routed_segment,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE organizational_project_item = SELECT 
  (action,
   product_concept);
END_TYPE;

TYPE organization_item = SELECT 
  (action,
   action_directive,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_document_reference,
   applied_identification_assignment,
   applied_organization_assignment,
   applied_person_and_organization_assignment,
   applied_presented_item,
   approval,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   characterized_object_relationship,
   class,
   class_system,
   configuration_design,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   descriptive_representation_item,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   effectivity,
   event_occurrence,
   executed_action,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   installation_segment,
   interface,
   item_designation_assignment,
   note_representation,
   notification,
   organization_relationship, 
   organizational_project,
   path,
   person_and_organization,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   property_definition_relationship,
   representation,
   representation_item_relationship,
   representation_relationship,
   security_classification,
   security_classification_level,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE page_connector_reference_item = SELECT
  (page_connector_group,
   page_connector_presentation_group);
END_TYPE;

TYPE person_and_organization_item = SELECT 
  (action,
   action_directive,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_document_reference,
   applied_organization_assignment,
   applied_person_and_organization_assignment,
   applied_presented_item,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   characterized_object_relationship,
   class,
   class_system,
   configuration_design,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   descriptive_representation_item,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   event_occurrence,
   executed_action,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   installation_segment,
   interface,
   note_representation,
   notification,
   organization_relationship,
   organizational_project,
   path,
   person_and_organization,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   property_definition_relationship,
   representation,
   representation_item_relationship,
   representation_relationship,
   security_classification,
   security_classification_level,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE presented_item_select = SELECT 
  (action,
   action_directive,
   address,
   applied_identification_assignment,
   approval,
   approval_status,
   assembly_component_usage,
   class,
   class_system,
   configuration_item,
   connectivity_definition,
   contract,
   equipment_marking,
   executed_action,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   interface,
   item_designation_assignment,
   note_representation,
   notification,
   organization,
   organizational_project,
   path,
   person,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   property_definition,
   representation,
   security_classification,
   security_classification_level,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE security_classification_item = SELECT 
  (action,
   action_directive,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   assembly_component_usage_substitute,
   characterized_object_relationship,
   class_system,
   configuration_design,
   configuration_effectivity,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   equipment_marking,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   interface,
   note_representation,
   notification,
   organizational_project,
   path,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_category,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   property_definition,
   property_definition_relationship,
   representation,
   representation_item_relationship,
   representation_relationship,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

TYPE specified_item = SELECT
  (drawing_revision);
END_TYPE;

TYPE time_interval_item = SELECT 
  (action,
   action_directive,
   action_property,
   action_relationship,
   action_request_solution,
   alternate_product_relationship,
   applied_action_assignment,
   applied_classification_assignment,
   applied_document_reference,
   applied_person_and_organization_assignment,
   applied_presented_item,
   approval_status,
   assembly_component_usage_substitute,
   certification,
   characterized_object_relationship,
   class,
   class_system,
   configuration_design,
   configuration_item,
   configuration_item,
   configured_effectivity_assignment,
   connectivity_definition,
   contract,
   descriptive_representation_item,
   document_file,
   document_relationship,
   drawing_revision,
   drawing_revision_sequence,
   drawing_sheet_revision,
   general_property,
   installation_location,
   installation_node,
   installation_route,
   installation_section,
   installation_section_end,
   installation_section_interface,
   installation_segment,
   interface,
   note_representation,
   notification,
   organization_relationship,
   organizational_project,
   path,
   person_and_organization,
   process_variable,
   product,
   product_concept,
   product_concept_feature,
   product_concept_feature_association,
   product_concept_feature_category,
   product_concept_feature_category_usage,
   product_definition,
   product_definition_formation,
   product_definition_formation_relationship,
   product_definition_relationship,
   product_definition_substitute,
   organizational_project,
   property_definition,
   property_definition_relationship,
   representation,
   representation_item_relationship,
   representation_relationship,
   security_classification,
   security_classification_level,
   shape_aspect_relationship,
   signal,
   terminal,
   versioned_action_request,
   vertex);
END_TYPE;

ENTITY annotation_occurrence_associativity
  SUBTYPE OF (annotation_occurrence_relationship);
WHERE
  WR1: SIZEOF(TYPEOF(SELF.related_annotation_occurrence) *
              ['ELECTROTECHNICAL_DESIGN.ANNOTATION_FILL_AREA_OCCURRENCE',
               'ELECTROTECHNICAL_DESIGN.PROJECTION_CURVE',
               'ELECTROTECHNICAL_DESIGN.LEADER_CURVE']) = 1;
END_ENTITY;

ENTITY applied_action_assignment
  SUBTYPE OF (action_assignment);
  items : SET [1:?] OF action_item;
END_ENTITY;

ENTITY applied_action_request_assignment
  SUBTYPE OF (action_request_assignment);
  items : SET [1:?] OF action_request_item;
END_ENTITY;

ENTITY applied_approval_assignment
  SUBTYPE OF (approval_assignment);
  items : SET [1:?] OF approval_item;
END_ENTITY;

ENTITY applied_certification_assignment
  SUBTYPE OF (certification_assignment);
  items : SET [1:?] OF certification_item;
END_ENTITY;

ENTITY applied_classification_assignment
  SUBTYPE OF (classification_assignment);
  items : SET [1:?] OF classification_item;
WHERE
  WR1:  applied_classification_assignment_correlation(SELF);
END_ENTITY;

ENTITY applied_contract_assignment
  SUBTYPE OF (contract_assignment);
  items : SET [1:?] OF contract_item;
END_ENTITY;

ENTITY applied_date_and_time_assignment
  SUBTYPE OF (date_and_time_assignment);
  items : SET [1:?] OF date_and_time_item;
END_ENTITY;

ENTITY applied_date_assignment
  SUBTYPE OF (date_assignment);
  items : SET [1:?] OF date_item;
WHERE
 WR1: ( NOT ( SELF.role. name = 'actual end' ) ) OR
     item_correlation ( SELF.items , ['ACTION' ,
     'ORGANIZATIONAL_PROJECT' , 'EFFECTIVITY'] ) ;
END_ENTITY;

ENTITY applied_document_reference
  SUBTYPE OF (document_reference);
  items : SET [1:?] OF document_reference_item;
WHERE
  WR1:  applied_document_reference_correlation(SELF);
END_ENTITY;

ENTITY applied_document_usage_constraint_assignment
  SUBTYPE OF (document_usage_constraint_assignment);
  items : SET [1:?] OF document_reference_item;
WHERE
  WR1:  applied_document_usage_constraint_assignment_correlation(SELF);
END_ENTITY;

ENTITY applied_effectivity_assignment
  SUBTYPE OF (effectivity_assignment);
  items : SET [1:?] OF effectivity_item;
WHERE
 WR1: SIZEOF ( ['ELECTROTECHNICAL_DESIGN.'+ 'LOT_EFFECTIVITY' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'SERIAL_NUMBERED_EFFECTIVITY' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION_EFFECTIVITY']*
     TYPEOF ( SELF.assigned_effectivity ) ) =0;
END_ENTITY;

ENTITY applied_event_occurrence_assignment
  SUBTYPE OF (event_occurrence_assignment);
  items : SET [1:?] OF event_occurrence_item;
END_ENTITY;

ENTITY applied_external_identification_assignment
  SUBTYPE OF (external_identification_assignment);
  items : SET [1:?] OF external_identification_item;
WHERE
 WR1: ( NOT ( SELF.role. name =
     'alternative document id and location' ) ) OR
     item_correlation ( SELF.items , ['DOCUMENT_FILE'] ) ;
 WR2: ( NOT ( SELF.role. name ='version' ) ) OR item_correlation
     ( SELF.items , ['EXTERNALLY_DEFINED_CLASS' ,
     'EXTERNALLY_DEFINED_GENERAL_PROPERTY'] ) ;
END_ENTITY;

ENTITY applied_group_assignment
  SUBTYPE OF (group_assignment);
  items : SET [1:?] OF group_item;
WHERE
  WR1:  applied_group_assignment_correlation(SELF);
END_ENTITY;

ENTITY applied_identification_assignment
  SUBTYPE OF (identification_assignment);
  items : SET [1:?] OF identification_item;
WHERE
  WR1:  applied_identification_assignment_correlation(SELF);
  WR2:  SIZEOF(SELF.items) = 1;
END_ENTITY;

ENTITY applied_ineffectivity_assignment
  SUBTYPE OF (effectivity_assignment);
  items : SET [1:?] OF effectivity_item;
WHERE
 WR1: SIZEOF ( ['ELECTROTECHNICAL_DESIGN.'+ 'LOT_EFFECTIVITY' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'SERIAL_NUMBERED_EFFECTIVITY' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION_EFFECTIVITY']*
     TYPEOF ( SELF.assigned_effectivity ) ) =0;
END_ENTITY;
 
ENTITY applied_organization_assignment
  SUBTYPE OF (organization_assignment);
  items : SET [1:?] OF organization_item;
WHERE
  WR1:  applied_organization_assignment_correlation(SELF);
END_ENTITY;

ENTITY applied_organizational_project_assignment
  SUBTYPE OF (organizational_project_assignment);
  items : SET [1:?] OF organizational_project_item;
END_ENTITY;

ENTITY applied_person_and_organization_assignment
  SUBTYPE OF (person_and_organization_assignment);
  items : SET [1:?] OF person_and_organization_item;
WHERE
  WR1:  applied_person_and_organization_assignment_correlation(SELF);
END_ENTITY;

ENTITY applied_presented_item
  SUBTYPE OF (presented_item);
  items : SET [1:?] OF presented_item_select;
WHERE
  WR1:  SIZEOF(QUERY(pir <* USEDIN(SELF,
                              'ELECTROTECHNICAL_DESIGN.' +
                              'PRESENTED_ITEM_REPRESENTATION.ITEM') |
                 NOT('ELECTROTECHNICAL_DESIGN.DRAWING_REVISION'
                     IN TYPEOF(pir.presentation))
        )) = 0;
END_ENTITY;

ENTITY applied_security_classification_assignment
  SUBTYPE OF (security_classification_assignment);
  items : SET [1:?] OF security_classification_item;
END_ENTITY;

ENTITY applied_time_interval_assignment
  SUBTYPE OF (time_interval_assignment);
  items : SET [1:?] OF time_interval_item;
END_ENTITY;

ENTITY attribute_language_assignment
  SUBTYPE OF (attribute_classification_assignment);
  items : SET [1:?] OF attribute_language_item;

DERIVE
language : label := SELF\attribute_classification_assignment.
                       assigned_class.name;
WHERE
 WR1:SELF\attribute_classification_assignment. role.name IN
     ['primary' , 'translated'];
 WR2:'ELECTROTECHNICAL_DESIGN.'+'LANGUAGE' IN TYPEOF (
     SELF\attribute_classification_assignment. assigned_class )
     ;
END_ENTITY;
 
ENTITY camera_image_2d_with_scale
  SUBTYPE OF (camera_image);
DERIVE
  scale : positive_ratio_measure :=
          ((SELF\mapped_item.mapping_target\planar_extent.size_in_x) /
           (SELF\mapped_item.mapping_source.mapping_origin\
            camera_model_d2.view_window\planar_extent.size_in_x));
WHERE
  WR1: ('ELECTROTECHNICAL_DESIGN.CAMERA_MODEL_D2'
        IN TYPEOF(SELF\mapped_item.mapping_source.mapping_origin));
  WR2: aspect_ratio(SELF\mapped_item.mapping_target) =
       aspect_ratio(SELF\mapped_item.mapping_source.mapping_origin\
                    camera_model_d2.view_window);
  WR3: SELF\mapped_item.mapping_source.mapping_origin\
       camera_model_d2.view_window_clipping;
END_ENTITY;

ENTITY characterized_class
  SUBTYPE OF (characterized_object, class);
END_ENTITY;

ENTITY class
  SUBTYPE OF (group);
END_ENTITY;

ENTITY class_system
  SUBTYPE OF (group);
END_ENTITY;

ENTITY class_usage_effectivity_context_assignment
  SUBTYPE OF (effectivity_context_assignment);
  items : SET [1:?] OF class_usage_effectivity_context_item;
WHERE
 WR1:SELF.role. name = 'class usage influence' ;
 WR2: SIZEOF ( QUERY ( i <* SELF.items | NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION' IN TYPEOF ( i )
     ) ) ) =0;
 WR3: ( 'ELECTROTECHNICAL_DESIGN.'+ 'APPLIED_EFFECTIVITY_ASSIGNMENT'
     IN TYPEOF ( SELF.assigned_effectivity_assignment ) ) AND (
     SIZEOF ( TYPEOF ( SELF.assigned_effectivity_assignment.
     assigned_effectivity ) ) =1 ) AND (
     SELF.assigned_effectivity_assignment.
     assigned_effectivity.id = 'class usage' ) AND ( SIZEOF (
     QUERY ( i <* SELF.assigned_effectivity_assignment\
     applied_effectivity_assignment.items | NOT (
     'ELECTROTECHNICAL_DESIGN.'+
     'PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE' IN TYPEOF ( i ) )
     ) ) =0 ) ;
END_ENTITY;

ENTITY colour_representation_item
  SUBTYPE OF (descriptive_representation_item);
END_ENTITY;

ENTITY configured_effectivity_assignment
  SUBTYPE OF (effectivity_assignment);
  items : SET [1:?] OF configured_effectivity_item;
WHERE
WR1: ( SIZEOF ( ['ELECTROTECHNICAL_DESIGN.'+ 'EFFECTIVITY']* TYPEOF (
     SELF.assigned_effectivity ) ) =1 ) AND (
     SELF.assigned_effectivity. id = 'configuration validity' )
     ;
 WR2: SIZEOF ( SELF.items ) =1;
 WR3: SIZEOF ( QUERY ( i <* SELF.items | NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION' IN TYPEOF ( i )
     ) OR NOT ( i\product_definition. frame_of_reference.name IN
     [ 'conceptual definition' , 'part occurrence' ,
     'functional definition' , 'alternative definition' ] ) ) )
     =0;
 WR4:SELF.role. name IN ['design' , 'usage'];
 WR5: ( SELF.role. name<>'design' ) OR ( SIZEOF ( QUERY ( i <*
     SELF.items | ( 'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION'
     IN TYPEOF ( i ) ) AND ( i\product_definition.
     frame_of_reference.name = 'part occurrence' ) ) ) =0 ) ;
 WR6: ( SELF.role. name<>'usage' ) OR ( SIZEOF ( QUERY ( i <*
     SELF.items | ( 'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION'
     IN TYPEOF ( i ) ) AND ( i\product_definition.
     frame_of_reference.name = 'conceptual definition' ) ) ) =0
     ) ;
 WR7:SELF.role. description IN ['exception' , 'inherited' ,
     'local'];
 WR8: SIZEOF ( QUERY ( x <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+'EFFECTIVITY_CONTEXT_ASSIGNMENT.'+
     'ASSIGNED_EFFECTIVITY_ASSIGNMENT' ) | 'ELECTROTECHNICAL_DESIGN.'+
     'CONFIGURED_EFFECTIVITY_CONTEXT_ASSIGNMENT' IN TYPEOF ( x )
     ) ) =1;
END_ENTITY;

ENTITY configured_effectivity_context_assignment
  SUBTYPE OF (effectivity_context_assignment);
  items : SET [1:?] OF configured_effectivity_context_item;
WHERE
 WR1:'ELECTROTECHNICAL_DESIGN.'+ 'CONFIGURED_EFFECTIVITY_ASSIGNMENT'
     IN TYPEOF ( SELF.assigned_effectivity_assignment ) ;
 WR2: SIZEOF ( SELF.items ) =1;
END_ENTITY;

ENTITY connecting_line_group
  SUBTYPE OF (group);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                           'GROUP_ASSIGNMENT.' +
                           'ASSIGNED_GROUP')) = 1;
END_ENTITY;

ENTITY connecting_line_group_assignment
  SUBTYPE OF (group_assignment);
  item : connecting_line_item;
END_ENTITY;

ENTITY connectivity_definition
  SUBTYPE OF (shape_aspect);
WHERE
  WR1:  SELF\shape_aspect.product_definitional = UNKNOWN;
  WR2:  'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION' IN
        TYPEOF(SELF\shape_aspect.of_shape\property_definition.definition);
  WR3:  SELF\shape_aspect.of_shape\property_definition.definition.
        frame_of_reference\application_context_element.name
        IN ['functional definition', 'part definition'];
  WR4:  SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
                 sar.name = 'connectivity') )
        =
        SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
          (sar.name = 'connectivity')
          AND
          (
           (('ELECTROTECHNICAL_DESIGN.TERMINAL'
             IN TYPEOF(sar.related_shape_aspect))
            AND
            (sar.related_shape_aspect.of_shape\
             property_definition.definition.frame_of_reference\
             application_context_element.name = 'functional definition') )
           XOR
           (('ELECTROTECHNICAL_DESIGN.TERMINAL'
             IN TYPEOF(sar.related_shape_aspect))
            AND
            (sar.related_shape_aspect.of_shape\
             property_definition.definition.frame_of_reference\
             application_context_element.name = 'functional occurrence') )
           XOR
           (('ELECTROTECHNICAL_DESIGN.TERMINAL'
             IN TYPEOF(sar.related_shape_aspect))
            AND
            (sar.related_shape_aspect.of_shape\
             property_definition.definition.frame_of_reference\
             application_context_element.name = 'part definition') )
           XOR
           (('ELECTROTECHNICAL_DESIGN.TERMINAL'
             IN TYPEOF(sar.related_shape_aspect))
            AND
            (sar.related_shape_aspect.of_shape\
             property_definition.definition.frame_of_reference\
             application_context_element.name = 'part occurrence') )
          ) ) );
  WR5:  SIZEOF(QUERY(conn_mem <* QUERY(sar <* USEDIN(SELF,
                                             'ELECTROTECHNICAL_DESIGN.' +
                                             'SHAPE_ASPECT_RELATIONSHIP.' +
                                             'RELATING_SHAPE_ASPECT') |
                                   sar.name = 'connectivity') |
                 NOT(SIZEOF(QUERY(next_conn_mem <*
                                QUERY(sar <* (USEDIN(SELF,
                                             'ELECTROTECHNICAL_DESIGN.' +
                                             'SHAPE_ASPECT_RELATIONSHIP.' +
                                             'RELATING_SHAPE_ASPECT')
                                             - conn_mem) |
                                  sar.name = 'connectivity') |
                              conn_mem.related_shape_aspect =
                              next_conn_mem.related_shape_aspect
                     )) = 0)
        )) = 0;
  WR6:  SIZEOF(QUERY(bund_mem <* QUERY(sar <* USEDIN(SELF,
                                             'ELECTROTECHNICAL_DESIGN.' +
                                             'SHAPE_ASPECT_RELATIONSHIP.' +
                                             'RELATING_SHAPE_ASPECT') |
                                   sar.name = 'decomposition') |
                 NOT(SIZEOF(QUERY(next_bund_mem <*
                                QUERY(sar <* (USEDIN(SELF,
                                             'ELECTROTECHNICAL_DESIGN.' +
                                             'SHAPE_ASPECT_RELATIONSHIP.' +
                                             'RELATING_SHAPE_ASPECT')
                                             - bund_mem) |
                                  sar.name = 'decomposition') |
                              bund_mem.related_shape_aspect =
                              next_bund_mem.related_shape_aspect
                     )) = 0)
        )) = 0;
  WR7:  SIZEOF(QUERY(sar1 <* QUERY(sar2 <* USEDIN(SELF,
                                             'ELECTROTECHNICAL_DESIGN.' +
                                             'SHAPE_ASPECT_RELATIONSHIP.' +
                                             'RELATING_SHAPE_ASPECT') |
                               sar2.name = 'decomposition') |
                 NOT(acyclic_shape_aspect_relationship(sar1, [SELF],
                                             'ELECTROTECHNICAL_DESIGN.' +
                                             'SHAPE_ASPECT_RELATIONSHIP.' +
                                             'RELATED_SHAPE_ASPECT'))
        )) = 0;
  WR8:  SIZEOF(QUERY(sar1 <* QUERY(sar2 <* USEDIN(SELF,
                                             'ELECTROTECHNICAL_DESIGN.' +
                                             'SHAPE_ASPECT_RELATIONSHIP.' +
                                             'RELATING_SHAPE_ASPECT') |
                               sar2.name = 'decomposition') |
                 NOT(acyclic_shape_aspect_relationship(sar1, [SELF],
                                             'ELECTROTECHNICAL_DESIGN.' +
                                             'SHAPE_ASPECT_RELATIONSHIP.' +
                                             'RELATED_SHAPE_ASPECT'))
        )) = 0;
  WR9: SIZEOF(QUERY(i <* USEDIN(SELF,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                 'ITEMS') |
                 i.role.name = 'version')
        ) < 2;
END_ENTITY;

ENTITY derived_unit_variable
  SUBTYPE OF (derived_unit, variable_semantics);
INVERSE
  associated_variable_environment: environment FOR semantics;
END_ENTITY;
 
ENTITY document_designation_assignment
  SUBTYPE OF (item_designation_assignment);
WHERE
  WR1:  SIZEOF(QUERY(i <* SELF.items |
                 SIZEOF(TYPEOF(i) *
                          ['ELECTROTECHNICAL_DESIGN.' +
                           'DRAWING_REVISION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'DRAWING_SHEET_REVISION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'PRODUCT_DEFINITION']
                 ) = 0 )
        ) = 0;
  WR2:  SIZEOF(QUERY(despd <* SELF.items |
                 ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                  IN TYPEOF(despd))
                 AND
                 NOT(despd\product_definition.frame_of_reference.name
                     IN ['conceptual definition',
                         'functional occurrence',
                         'part occurrence',
                         'system definition']) )
        ) = 0;
  WR3:  SIZEOF(TYPEOF(SELF) *
                 ['ELECTROTECHNICAL_DESIGN.' +
                  'DOCUMENT_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'SIGNAL_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'TERMINAL_DESIGNATION_ASSIGNMENT']
        ) = 1;
END_ENTITY;

ENTITY document_file
  SUBTYPE OF (document, characterized_object);
WHERE
 WR1:SELF\characterized_object. name ='';
 WR2: NOT EXISTS ( SELF\characterized_object. description ) ;
 WR3: SIZEOF ( QUERY ( drt <* SELF\document.
     representation_types | drt. name IN ['digital' ,
     'physical'] ) ) =1;
END_ENTITY;

ENTITY document_product_equivalence
  SUBTYPE OF (document_product_association);
WHERE
 WR1:SELF.name ='equivalence';
 WR2: NOT ( 'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT' IN TYPEOF (
     SELF.related_product ) ) OR ( ( SELF.relating_document.
     kind.product_data_type =
     'configuration controlled document' ) AND ( SIZEOF ( QUERY
     ( prpc <* USEDIN ( SELF.related_product ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_RELATED_PRODUCT_CATEGORY.'+
     'PRODUCTS' ) | prpc. name ='document' ) ) =1 ) ) ;
 WR3: NOT ( 'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION_FORMATION'
     IN TYPEOF ( SELF.related_product ) ) OR ( (
     SELF.relating_document. kind.product_data_type =
     'configuration controlled document version' ) AND ( SIZEOF
     ( QUERY ( prpc <* USEDIN (
     SELF.related_product\product_definition_formation.
     of_product ,
     'ELECTROTECHNICAL_DESIGN.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
     ) | prpc. name ='document' ) ) =1 ) ) ;
 WR4: NOT ( 'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION' IN TYPEOF
     ( SELF.related_product ) ) OR ( ( SELF.relating_document.
     kind.product_data_type =
     'configuration controlled document definition' ) AND (
     SIZEOF ( QUERY ( prpc <* USEDIN (
     SELF.related_product\product_definition.
     formation.of_product ,
     'ELECTROTECHNICAL_DESIGN.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
     ) | prpc. name ='document' ) ) =1 ) ) ;
END_ENTITY;

ENTITY draughting_group_elements_assignment
  SUBTYPE OF (group_assignment);
  items : SET [1:?] OF draughting_group_element;
END_ENTITY;

ENTITY draughting_model
  SUBTYPE OF (representation);
UNIQUE
  UR1:  SELF\representation.name;
WHERE
  WR1:  SIZEOF(QUERY(it <* SELF.items |
          NOT(SIZEOF(['ELECTROTECHNICAL_DESIGN.MAPPED_ITEM',
                      'ELECTROTECHNICAL_DESIGN.STYLED_ITEM',
                      'ELECTROTECHNICAL_DESIGN.AXIS2_PLACEMENT'] *
              TYPEOF (it)) = 1
        ))) = 0;
  WR2:  SIZEOF(QUERY(mi <* QUERY(it <* SELF.items |
                             ('ELECTROTECHNICAL_DESIGN.MAPPED_ITEM'
                              IN TYPEOF(it))) |
                 NOT('ELECTROTECHNICAL_DESIGN.SHAPE_REPRESENTATION'
                     IN TYPEOF(mi\mapped_item.mapping_source.
                               mapped_representation))
        )) = 0;
  WR3:  SIZEOF(QUERY(smi <*
                     QUERY(si <*
                           QUERY(it <* SELF.items |
                             ('ELECTROTECHNICAL_DESIGN.STYLED_ITEM'
                              IN TYPEOF(it)) ) |
                       ('ELECTROTECHNICAL_DESIGN.MAPPED_ITEM'
                        IN TYPEOF(si\styled_item.item)) ) |
                 NOT(('ELECTROTECHNICAL_DESIGN.SHAPE_REPRESENTATION'
                      IN TYPEOF(smi\styled_item.item\mapped_item.
                                mapping_source.mapped_representation))
                     AND
                     (SIZEOF(QUERY(sty <* smi\styled_item.styles |
                               NOT(SIZEOF(QUERY(psa <* sty.styles |
                                     NOT('ELECTROTECHNICAL_DESIGN.' +
                                         'CURVE_STYLE'
                                         IN TYPEOF(psa)) )
                                   ) = 1 ) )
                      ) = 1 )) )
        ) = 0;
END_ENTITY;

(* V.N. Now defined in presentation_resource_schema
ENTITY draughting_pre_defined_colour
  SUBTYPE OF (pre_defined_colour);
WHERE
  WR1: SELF.name IN
       ['black', 'red', 'green', 'blue',
        'yellow', 'magenta', 'cyan', 'white'];
END_ENTITY;*)

(* V.N. Now defined in presentation_appearance_schema
ENTITY draughting_pre_defined_curve_font
  SUBTYPE OF (pre_defined_curve_font);
WHERE
  WR1: SELF.name IN
       ['continuous', 'chain', 'chain double dash', 'dashed', 'dotted'];
END_ENTITY;*)

(* V.N. Now defined in presentation_resource_schema
ENTITY draughting_pre_defined_text_font
  SUBTYPE OF (pre_defined_text_font);
WHERE
  WR1: SELF.name IN
       ['ISO 3098-1 font A', 'ISO 3098-1 font B'];
END_ENTITY;*)

ENTITY draughting_presented_item
  SUBTYPE OF (presented_item);
  items : SET [1:?] OF draughting_presented_item_select;
WHERE
  WR1: SIZEOF(QUERY(pir <* USEDIN(SELF,
                             'ELECTROTECHNICAL_DESIGN.' +
                             'PRESENTED_ITEM_REPRESENTATION.ITEM') |
                NOT('ELECTROTECHNICAL_DESIGN.DRAWING_REVISION'
                    IN TYPEOF(pir.presentation))
       )) = 0;
END_ENTITY;

ENTITY draughting_specification_reference
  SUBTYPE OF (document_reference);
  specified_items : SET [1:?] OF specified_item;
WHERE
  WR1: (SELF.assigned_document.kind.product_data_type =
       'draughting specification');
END_ENTITY;

ENTITY drawing_sheet_layout
  SUBTYPE OF (draughting_symbol_representation);
END_ENTITY;

ENTITY equipment_marking
  SUBTYPE OF (shape_aspect);
WHERE
  WR1:  SIZEOF(QUERY(pd <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                        'PROPERTY_DEFINITION.' +
                                        'DEFINITION') |
                 pd.name = 'information content')
        ) = 1;
  WR2:  SIZEOF(QUERY(pd <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                        'PROPERTY_DEFINITION.' +
                                        'DEFINITION') |
                 SIZEOF(QUERY(pdr <*
                              USEDIN(pd,
                              'ELECTROTECHNICAL_DESIGN.' +
                              'PROPERTY_DEFINITION_REPRESENTATION.' +
                              'DEFINITION') |
                          pdr.used_representation.name
                          IN ['linear pattern location',
                              'marking location'] )
                 ) = 1 )
        ) < 2;
  WR3:  SIZEOF(USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                            'APPLIED_CLASSIFICATION_ASSIGNMENT.' +
                            'ITEMS')
        ) = 1;
  WR4:  SIZEOF(QUERY(aca <* USEDIN(SELF,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_CLASSIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                 aca.role.name = 'class system membership')
        ) = 1;
END_ENTITY;

ENTITY exclusive_product_concept_feature_category
  SUBTYPE OF (product_concept_feature_category);
END_ENTITY;

ENTITY expression_conversion_based_unit
  SUBTYPE OF (context_dependent_unit, variable_semantics);
INVERSE
  associated_variable_environment: environment FOR semantics;
END_ENTITY;

ENTITY externally_defined_class
  SUBTYPE OF (class, externally_defined_item);
WHERE
  WR1:  SIZEOF(QUERY(a <* USEDIN(SELF,
                            'ELECTROTECHNICAL_DESIGN.' +
                            'APPLIED_ORGANIZATION_ASSIGNMENT.' +
                            'ITEMS') |
                 a.role.name = 'library supplier')
        ) = 1;
  WR2:  SIZEOF(QUERY(a <* USEDIN(SELF,
                          'ELECTROTECHNICAL_DESIGN.' +
                          'APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.' +
                          'ITEMS') |
                 a.role.name = 'version')
        ) = 1;
  WR3:  SIZEOF(QUERY(a <* USEDIN(SELF,
                          'ELECTROTECHNICAL_DESIGN.' +
                          'APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.' +
                          'ITEMS') |
                 (a.role.name = 'version')
                 AND
                 NOT(SELF.source :=: a.source))
        ) = 0;
  WR4:  SIZEOF(QUERY(a <* USEDIN(SELF,
                          'ELECTROTECHNICAL_DESIGN.' +
                          'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                          'ITEMS') |
                 a.role.name = 'version')
        ) = 0;
END_ENTITY;

ENTITY externally_defined_general_property
  SUBTYPE OF (general_property, externally_defined_item);
END_ENTITY;

ENTITY free_segment
  SUBTYPE OF (installation_segment);
WHERE
  WR1:  SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
                 (sar.name = 'segment termination')
                 AND
                 ('ELECTROTECHNICAL_DESIGN.INSTALLATION_NODE'
                  IN TYPEOF(sar.related_shape_aspect))
        )) > 0;
END_ENTITY;

ENTITY inclusion_product_concept_feature
  SUBTYPE OF (conditional_concept_feature);
WHERE
 WR1: NOT ( 'ELECTROTECHNICAL_DESIGN.'+
     'PACKAGE_PRODUCT_CONCEPT_FEATURE' IN TYPEOF ( SELF ) ) ;
 WR2: SIZEOF ( QUERY ( cfr <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.CONCEPT_FEATURE_RELATIONSHIP.'+
     'RELATING_PRODUCT_CONCEPT_FEATURE'
     ) | 'ELECTROTECHNICAL_DESIGN.'+
     'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION' IN TYPEOF (
     cfr ) ) ) + SIZEOF ( QUERY ( cfr <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.CONCEPT_FEATURE_RELATIONSHIP.'+
     'RELATED_PRODUCT_CONCEPT_FEATURE'
     ) | 'ELECTROTECHNICAL_DESIGN.'+
     'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION' IN TYPEOF (
     cfr ) ) ) =0;
 WR3: SELF.condition. conditional_operator.name ='implication';
END_ENTITY;

ENTITY installation_location
  SUBTYPE OF (shape_aspect);
WHERE
  WR1:  SIZEOF(TYPEOF(SELF) *
          ['ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION',
           'ELECTROTECHNICAL_DESIGN.SPECIFIED_HIGHER_USAGE_OCCURRENCE']
        ) = 1;
  WR2:  SELF.of_shape.definition\product_definition.frame_of_reference.name
        IN ['conceptual definition',
            'functional definition',
            'functional occurrence',
            'part definition',
            'part occurrence',
            'physical occurrence',
            'system definition'];
  WR3:  ( (SELF.of_shape.definition\product_definition_relationship.
           relating_product_definition.frame_of_reference.name
           = 'functional definition')
          AND
          (SELF.of_shape.definition\product_definition_relationship.
           related_product_definition.frame_of_reference.name
           = 'functional occurrence') )
        XOR
        ( (SELF.of_shape.definition\product_definition_relationship.
           relating_product_definition.frame_of_reference.name
           = 'part definition')
           AND
           (SELF.of_shape.definition\product_definition_relationship.
            related_product_definition.frame_of_reference.name
            = 'part occurrence') )
        AND
        (SELF.of_shape.definition\product_definition_relationship.
         related_product_definition.name = 'single instance');
  WR4:  SIZEOF(QUERY(des <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                 SIZEOF(TYPEOF(des) *
                          ['ELECTROTECHNICAL_DESIGN.' +
                           'DOCUMENT_DESIGNATION_ASSIGNMENT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'SIGNAL_DESIGNATION_ASSIGNMENT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'TERMINAL_DESIGNATION_ASSIGNMENT']
                 ) > 0 )
        ) = 0;
  WR5:  SIZEOF(QUERY(des <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                 ('ELECTROTECHNICAL_DESIGN.' +
                  'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT'
                  IN TYPEOF(des))
                 AND
                 (des.role.description = 'primary') )
        ) = 1;
  WR6:  SIZEOF(QUERY(i <* USEDIN(SELF,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                 'ITEMS') |
                 i.role.name = 'version')
        ) < 2;
END_ENTITY;

ENTITY installation_node
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY installation_route
  SUBTYPE OF (shape_aspect);
WHERE
  WR1:  SIZEOF(QUERY(i <* USEDIN(SELF,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                 'ITEMS') |
                 i.role.name = 'version')
        ) < 2;
END_ENTITY;

ENTITY installation_section
  SUBTYPE OF (shape_aspect);
WHERE
  WR1:  SIZEOF(QUERY(i <* USEDIN(SELF,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                 'ITEMS') |
                 i.role.name = 'version')
        ) < 2;
END_ENTITY;

ENTITY installation_section_end
  SUBTYPE OF (shape_aspect);
WHERE
  WR1:  SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
                 (sar.name = 'section end')
                 AND
                 ('ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION'
                  IN TYPEOF(sar.related_shape_aspect))
        )) = 1;
  WR2:  SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
                 (sar.name = 'section end residence')
                 AND
                 ('ELECTROTECHNICAL_DESIGN.INSTALLATION_NODE'
                  IN TYPEOF(sar.related_shape_aspect))
        )) < 2;
END_ENTITY;

ENTITY installation_section_interface
  SUBTYPE OF (shape_aspect);
WHERE
  WR1: SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                        'SHAPE_ASPECT_RELATIONSHIP.' +
                                        'RELATING_SHAPE_ASPECT') |
                (sar.name = 'section end joint')
                AND
                ('ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION_END'
                 IN TYPEOF(sar.related_shape_aspect))
       )) > 0;
  WR3: SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                        'SHAPE_ASPECT_RELATIONSHIP.' +
                                        'RELATING_SHAPE_ASPECT') |
                (sar.name = 'section interface residence')
                AND
                ('ELECTROTECHNICAL_DESIGN.INSTALLATION_NODE'
                 IN TYPEOF(sar.related_shape_aspect))
       )) <= 1;
  WR4:  SIZEOF(QUERY(i <* USEDIN(SELF,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                 'ITEMS') |
                 i.role.name = 'version')
        ) < 2;
END_ENTITY;

ENTITY installation_segment
  ABSTRACT SUPERTYPE
  SUBTYPE OF (shape_aspect);
END_ENTITY;

ENTITY interface
  SUBTYPE OF (shape_aspect);
WHERE
  WR1:  'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION' IN
        TYPEOF(SELF\shape_aspect.of_shape\property_definition.definition);
  WR2:  SELF\shape_aspect.of_shape\
        property_definition.definition.frame_of_reference\
        application_context_element.name
        IN ['functional definition',
            'part definition'];
  WR3:  SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
                 (sar.name = 'external access')
                 AND
                 ('ELECTROTECHNICAL_DESIGN.TERMINAL' IN
                    TYPEOF(sar.related_shape_aspect )))
        ) > 0;
END_ENTITY;

ENTITY item_designation_assignment
  SUBTYPE OF (identification_assignment);
  items : SET [1:?] OF item_designation_item;
WHERE
  WR1:  SIZEOF(SELF.items) = 1;
  WR2:  SELF\identification_assignment.role.description
        IN ['alias', 'primary'];
  WR3:  NOT(SELF\identification_assignment.role.name
            IN ['alias', 'id', 'version']);
  WR4:  SIZEOF(QUERY(aca <* USEDIN(SELF,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_CLASSIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                 'ELECTROTECHNICAL_DESIGN.CLASS_SYSTEM'
                 IN TYPEOF(aca.assigned_class) )
        ) < 2;
  WR5:  SIZEOF(QUERY(aoa <* USEDIN(SELF,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_ORGANIZATION_ASSIGNMENT.' +
                                   'ITEMS') |
                     aoa.role.name = 'item designation scope')
        ) < 2;
  WR6:  SIZEOF(QUERY(i <* USEDIN(SELF,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                 'ITEMS') |
                     i.role.name = 'version')
        ) < 2;
END_ENTITY;

ENTITY known_source
  SUBTYPE OF (external_source, pre_defined_item);
END_ENTITY;

ENTITY language
  SUBTYPE OF (group);
WHERE
 WR1: ( SIZEOF ( QUERY ( ca <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+
     'CLASSIFICATION_ASSIGNMENT.'+'ASSIGNED_CLASS'
     ) | 'ELECTROTECHNICAL_DESIGN.'+'LANGUAGE_ASSIGNMENT' IN TYPEOF (
     ca ) ) ) >0 ) OR ( SIZEOF ( QUERY ( aca <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+
     'ATTRIBUTE_CLASSIFICATION_ASSIGNMENT.'+'ASSIGNED_CLASS'
     ) | 'ELECTROTECHNICAL_DESIGN.'+'ATTRIBUTE_LANGUAGE_ASSIGNMENT' IN
     TYPEOF ( aca ) ) ) >0 ) ;
END_ENTITY;

ENTITY language_assignment
  SUBTYPE OF (classification_assignment);
  items : SET [1:?] OF language_item;
WHERE
 WR1:'ELECTROTECHNICAL_DESIGN.'+ 'LANGUAGE' IN TYPEOF (
     SELF.assigned_class ) ;
 WR2:SELF.role. name ='language';
 WR3: SIZEOF ( SELF.items ) = SIZEOF ( QUERY ( i <* SELF.items |
     ( 'ELECTROTECHNICAL_DESIGN.'+ 'REPRESENTATION' IN TYPEOF ( i ) )
     AND ( i\representation. name = 'document content' ) ) ) ;
END_ENTITY;

ENTITY multi_language_attribute_assignment
  SUBTYPE OF (attribute_value_assignment);
  items : SET [1:?] OF multi_language_attribute_item;
DERIVE
language : label := get_multi_language(SELF);
WHERE
 WR1:SELF\attribute_value_assignment. role.name =
     'alternate language' ;
 WR2: ( SIZEOF ( USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS' ) )
     =1 ) AND ( SIZEOF ( QUERY ( ala <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+'ATTRIBUTE_LANGUAGE_ASSIGNMENT.'+
     'ITEMS' ) | ala. attribute_name ='attribute_value' ) ) =1 )
     ;
END_ENTITY;

ENTITY named_unit_variable
  SUBTYPE OF (named_unit, variable_semantics);
INVERSE
  associated_variable_environment: environment FOR semantics;
END_ENTITY;

ENTITY note_representation
  SUBTYPE OF (representation);
WHERE
  WR1:  SIZEOF(SELF.items) = 1;
  WR2:  'ELECTROTECHNICAL_DESIGN.DESCRIPTIVE_REPRESENTATION_ITEM'
        IN TYPEOF(SELF.items[1]);
  WR3:  SIZEOF(USEDIN(SELF.items[1], 'ELECTROTECHNICAL_DESIGN.' +
                                     'LANGUAGE_ASSIGNMENT.' +
                                     'ITEMS')
        ) = 1;
  WR4:  SIZEOF(QUERY(i <* USEDIN(SELF,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                 'ITEMS') |
                 i.role.name = 'version')
        ) < 2;
END_ENTITY;

ENTITY notification
  SUBTYPE OF (characterized_object);
WHERE
  WR1:  SIZEOF(QUERY(i <* USEDIN(SELF,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                 'ITEMS') |
                 i.role.name = 'version')
        ) < 2;
END_ENTITY;

ENTITY object_reference_designation_assignment
  SUBTYPE OF (item_designation_assignment);
WHERE
  WR1:  SIZEOF(QUERY(i <* SELF.items |
                 SIZEOF(TYPEOF(i) *
                          ['ELECTROTECHNICAL_DESIGN.' +
                           'INSTALLATION_LOCATION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'PRODUCT_DEFINITION']
                 ) = 0 )
        ) = 0;
  WR2:  SIZEOF(QUERY(despd <* SELF.items |
                 ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                  IN TYPEOF(despd))
                 AND
                 NOT(despd\product_definition.frame_of_reference.name
                     IN ['conceptual definition',
                         'functional occurrence',
                         'part occurrence',
                         'system definition']) )
        ) = 0;
  WR3:  SIZEOF(TYPEOF(SELF) *
                 ['ELECTROTECHNICAL_DESIGN.' +
                  'DOCUMENT_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'SIGNAL_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'TERMINAL_DESIGNATION_ASSIGNMENT']
        ) = 1;
END_ENTITY;

ENTITY package_product_concept_feature
  SUBTYPE OF (product_concept_feature);
WHERE
 WR1: NOT ( 'ELECTROTECHNICAL_DESIGN.'+ 'CONDITIONAL_CONCEPT_FEATURE'
     IN TYPEOF ( SELF ) ) ;
 WR2: SIZEOF ( QUERY ( cfr <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.CONCEPT_FEATURE_RELATIONSHIP.'+
     'RELATING_PRODUCT_CONCEPT_FEATURE'
     ) | ( 'ELECTROTECHNICAL_DESIGN.'+
     'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION' IN TYPEOF (
     cfr ) ) AND ( SIZEOF ( QUERY ( ipcf <* USEDIN ( cfr ,
     'ELECTROTECHNICAL_DESIGN.CONDITIONAL_CONCEPT_FEATURE.'+'CONDITION'
     ) | 'ELECTROTECHNICAL_DESIGN.'+
     'INCLUSION_PRODUCT_CONCEPT_FEATURE' IN TYPEOF ( ipcf ) ) )
     =1 ) ) ) >0;
END_ENTITY;

ENTITY page_connector_group
  SUBTYPE OF (group);
WHERE
  WR1:  SIZEOF(QUERY(gr <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                        'GROUP_RELATIONSHIP.' +
                                        'RELATED_GROUP') |
                 (gr.name = 'connecting line ownership')
                 AND
                 ('ELECTROTECHNICAL_DESIGN.CONNECTING_LINE_GROUP'
                  IN TYPEOF(gr.relating_group))
        )) = 1;
  WR2:  SELF\group.description IN ['central', 'exclusive', 'neutral'];
END_ENTITY;

ENTITY page_connector_presentation_group
  SUBTYPE OF (group);
WHERE
  WR1: SIZEOF(QUERY(gr <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                       'GROUP_RELATIONSHIP.' +
                                       'RELATED_GROUP') |
                (gr.name = 'page connector ownership')
                AND
                ('ELECTROTECHNICAL_DESIGN.PAGE_CONNECTOR_GROUP'
                 IN TYPEOF(gr.relating_group))
       )) = 1;
  WR2: SELF\group.description IN ['none', 'sink', 'source'];
END_ENTITY;

ENTITY page_connector_reference_group
  SUBTYPE OF (group);
WHERE
  WR1: SIZEOF(USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                           'GROUP_ASSIGNMENT.' +
                           'ASSIGNED_GROUP')
       ) = 1;
  WR2: SIZEOF(QUERY(gr <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                       'GROUP_RELATIONSHIP.' +
                                       'RELATED_GROUP') |
         (gr.name = 'page connector presentation ownership')
         AND
         ('ELECTROTECHNICAL_DESIGN.PAGE_CONNECTOR_PRESENTATION_GROUP'
          IN TYPEOF(gr.relating_group))
       )) = 1;
END_ENTITY;

ENTITY page_connector_reference_group_assignment
  SUBTYPE OF (group_assignment);
  item : page_connector_reference_item;
END_ENTITY;

ENTITY person_and_organization_address
  SUBTYPE OF (organizational_address,personal_address);
WHERE
 WR1: SIZEOF ( SELF\personal_address. people ) =1;
 WR2: SIZEOF ( SELF\organizational_address. organizations ) =1;
 WR3: SIZEOF ( QUERY ( pao <* USEDIN ( SELF.people[1] ,
     'ELECTROTECHNICAL_DESIGN.PERSON_AND_ORGANIZATION.THE_PERSON' ) |
     pao. the_organization:=:SELF\organizational_address.
     organizations[1] ) ) =1;
END_ENTITY;

ENTITY physically_modelled_product_definition
  SUBTYPE OF (product_definition_with_associated_documents);
WHERE
 WR1:SELF.frame_of_reference\ application_context_element.name =
     'physical model occurrence' ;
 WR2: ( SIZEOF ( documentation_ids ) =1 ) AND ( SIZEOF ( QUERY (
     d <* documentation_ids | ( SIZEOF ( QUERY ( drt <*
     d.representation_types | ( drt. name ='physical' ) ) ) =1 )
     ) ) =1 ) ;
END_ENTITY;

ENTITY pre_defined_dimension_symbol
  SUBTYPE OF (pre_defined_symbol);
WHERE
  WR1: SELF\pre_defined_item.name
       IN ['arc length',
           'conical taper',
           'counterbore',
           'countersink',
           'depth',
           'diameter',
           'plus minus',
           'radius',
           'slope',
           'spherical diameter',
           'spherical radius',
           'square'];
END_ENTITY;

ENTITY pre_defined_geometrical_tolerance_symbol
  SUBTYPE OF (pre_defined_symbol);
WHERE
  WR1: SELF\pre_defined_item.name
       IN ['angularity',
           'circular runout',
           'circularity',
           'concentricity',
           'cylindricity',
           'diameter',
           'flatness',
           'least material condition',
           'maximum material condition',
           'parallelism',
           'perpendicularity',
           'position',
           'profile of a line',
           'profile of a surface',
           'projected tolerance zone',
           'regardless of feature size',
           'straightness',
           'symmetry',
           'target point',
           'total runout'];
END_ENTITY;

ENTITY pre_defined_point_marker_symbol
  SUBTYPE OF (pre_defined_symbol);
WHERE
  WR1: SELF\pre_defined_item.name
       IN ['asterisk',
           'circle',
           'dot',
           'plus',
           'square',
           'triangle',
           'x'];
END_ENTITY;

ENTITY pre_defined_terminator_symbol
  SUBTYPE OF (pre_defined_symbol);
WHERE
  WR1: SELF\pre_defined_item.name
       IN ['blanked arrow',
           'blanked box',
           'blanked dot',
           'dimension origin',
           'filled arrow',
           'filled box',
           'filled dot',
           'integral symbol',
           'open arrow',
           'slash',
           'unfilled arrow'];
END_ENTITY;

ENTITY predefined_connectivity_definition
  SUBTYPE OF (connectivity_definition);
WHERE
  WR1:  SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
                 sar.name = 'connectivity') )
        =
        SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
          (sar.name = 'connectivity')
          AND
          ('ELECTROTECHNICAL_DESIGN.TERMINAL'
           IN TYPEOF(sar.related_shape_aspect))
          AND
          (sar.related_shape_aspect.of_shape\
           property_definition.definition.frame_of_reference\
           application_context_element.name = 'part occurrence') ) );
END_ENTITY;

ENTITY presentation_with_association
  SUBTYPE OF (presentation_representation);
WHERE
  WR1:  SIZEOF(SELF\representation.items) = 1;
  WR2:  SIZEOF(QUERY(pir <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'PRESENTED_ITEM_REPRESENTATION.' +
                                         'PRESENTATION') |
                 NOT('ELECTROTECHNICAL_DESIGN.' +
                     'PRESENTATION_WITH_ASSOCIATION'
                     IN TYPEOF(pir.item)))
        ) = 0;
END_ENTITY;

ENTITY presented_item_with_association
  SUBTYPE OF (presented_item);
  items : SET [1:?] OF associated_item;
WHERE
  WR1: SIZEOF(QUERY(pir <* USEDIN(SELF,
                             'ELECTROTECHNICAL_DESIGN.' +
                             'PRESENTED_ITEM_REPRESENTATION.ITEM') |
                NOT('ELECTROTECHNICAL_DESIGN.PRESENTATION_WITH_ASSOCIATION'
                    IN TYPEOF(pir.presentation))
       )) = 0;
END_ENTITY;

ENTITY process_variable
  SUBTYPE OF (characterized_object);
END_ENTITY;

ENTITY product_class
  SUBTYPE OF (product_concept, characterized_object);
END_ENTITY;

ENTITY product_concept_feature_category
  SUBTYPE OF (group);
WHERE
  WR1: SIZEOF ( QUERY ( aga <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.GROUP_ASSIGNMENT.'+'ASSIGNED_GROUP' ) |
     ( 'ELECTROTECHNICAL_DESIGN.'+ 'APPLIED_GROUP_ASSIGNMENT' IN
     TYPEOF ( aga ) ) AND ( ( aga. role.name<>
     'specification category member' ) OR ( SIZEOF ( QUERY ( i
     <* aga. items | ( 'ELECTROTECHNICAL_DESIGN.'+
     'PRODUCT_CONCEPT_FEATURE' IN TYPEOF ( i ) ) AND NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'CONDITIONAL_CONCEPT_FEATURE' IN
     TYPEOF ( i ) ) ) ) <> SIZEOF ( aga. items ) ) ) ) ) =0;
END_ENTITY;

ENTITY product_concept_feature_category_usage
  SUBTYPE OF (group_assignment);
  items : SET [1:?] OF category_usage_item;
WHERE
  WR1:  'ELECTROTECHNICAL_DESIGN.PRODUCT_CONCEPT_FEATURE_CATEGORY'
        IN TYPEOF(SELF.assigned_group);
  WR2:  SELF.role.name IN ['mandatory category usage',
                           'optional category usage'];
END_ENTITY;

ENTITY product_identification
  SUBTYPE OF (configuration_item,characterized_object);
WHERE
 WR1: SIZEOF ( QUERY ( cd <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.CONFIGURATION_DESIGN.CONFIGURATION' ) |
     ( 'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION_FORMATION' IN
     TYPEOF ( cd. design ) ) AND ( SIZEOF ( QUERY ( prpc <*
     USEDIN ( cd. design\product_definition_formation.
     of_product ,
     'ELECTROTECHNICAL_DESIGN.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
     ) | prpc. name IN ['part' , 'raw material' , 'tool'] ) ) >0
     ) ) ) <=1;
 WR2:'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_CLASS' IN TYPEOF (
     SELF.item_concept ) ;
 WR3: NOT ( 'ELECTROTECHNICAL_DESIGN.'+ 'CONFIGURABLE_ITEM' IN TYPEOF
     ( SELF ) ) OR ( 'ELECTROTECHNICAL_DESIGN.'+
     'PRODUCT_SPECIFICATION' IN TYPEOF ( SELF ) ) ;
END_ENTITY;

ENTITY product_specification
  SUBTYPE OF (product_identification,configurable_item);
END_ENTITY;

ENTITY reference_grid_layout
  SUBTYPE OF (draughting_symbol_representation);
WHERE
  WR1:  SIZEOF(QUERY(rr <* USEDIN(SELF,
                             'ELECTROTECHNICAL_DESIGN.' +
                             'REPRESENTATION_RELATIONSHIP.' +
                             'REP_1') |
                 (rr.name = 'reference grid')
                 AND
                 ('ELECTROTECHNICAL_DESIGN.REFERENCE_GRID_REPRESENTATION'
                  IN TYPEOF(rr.rep_2))
        )) = 1;
END_ENTITY;

ENTITY reference_grid_representation
  SUBTYPE OF (representation);
WHERE
  WR1:  SIZEOF(SELF\representation.items) = 3;
  WR2:  SIZEOF(QUERY(column <* SELF\representation.items |
                 ('ELECTROTECHNICAL_DESIGN.MAPPED_ITEM'
                  IN TYPEOF(column))
                 AND
                 (column\mapped_item.mapping_source.
                  mapped_representation.name
                  = 'reference grid column representation')
        )) = 1;
  WR3:  SIZEOF(QUERY(row <* SELF\representation.items |
                 ('ELECTROTECHNICAL_DESIGN.MAPPED_ITEM'
                  IN TYPEOF(row))
                 AND
                 (row\mapped_item.mapping_source.
                  mapped_representation.name
                  = 'reference grid row representation')
        )) = 1;
  WR4:  SIZEOF(QUERY(origin <* SELF\representation.items |
                 ('ELECTROTECHNICAL_DESIGN.AXIS2_PLACEMENT_2D'
                  IN TYPEOF(origin))
                 AND
                 (origin.name = 'grid origin') )
        ) = 1;
  WR5:  SIZEOF(QUERY(mi <* SELF\representation.items |
                 ('ELECTROTECHNICAL_DESIGN.MAPPED_ITEM'
                  IN TYPEOF(mi))
                 AND
                 (SIZEOF(QUERY(item <* mi\mapped_item.mapping_source.
                                       mapped_representation.items |
                           NOT(SIZEOF(TYPEOF(item) *
                                      ['ELECTROTECHNICAL_DESIGN.' +
                                       'AXIS2_PLACEMENT_2D',
                                       'ELECTROTECHNICAL_DESIGN.' +
                                       'DESCRIPTIVE_REPRESENTATION_ITEM',
                                       'ELECTROTECHNICAL_DESIGN.' +
                                       'MEASURE_REPRESENTATION_ITEM']
                               ) = 1 ) )
                  ) = 0 ) )
        ) = 0;
  WR6:  SIZEOF(QUERY(mi <* SELF\representation.items |
                 ('ELECTROTECHNICAL_DESIGN.MAPPED_ITEM'
                  IN TYPEOF(mi))
                 AND
                 (NOT(SIZEOF(QUERY(pos <* mi\mapped_item.mapping_source.
                                          mapped_representation.items |
                               'ELECTROTECHNICAL_DESIGN.AXIS2_PLACEMENT_2D'
                               IN TYPEOF(pos)
                  )) = 1))
        )) = 0;
  WR7:  SIZEOF(QUERY(mi <* SELF\representation.items |
          ('ELECTROTECHNICAL_DESIGN.MAPPED_ITEM'
           IN TYPEOF(mi))
          AND
          (NOT(SIZEOF(QUERY(spacing <* mi\mapped_item.mapping_source.
                                       mapped_representation.items |
                 (SIZEOF(TYPEOF(spacing) *
                    ['ELECTROTECHNICAL_DESIGN.LENGTH_MEASURE_WITH_UNIT',
                     'ELECTROTECHNICAL_DESIGN.MEASURE_REPRESENTATION_ITEM']
                  ) = 2)
                 AND
                 (spacing.name = 'grid spacing')
           )) = 1))
        )) = 0;
  WR8:  SIZEOF(QUERY(rm <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                        'REPRESENTATION_MAP.' +
                                        'MAPPED_REPRESENTATION') |
          NOT(SIZEOF(USEDIN(rm, 'ELECTROTECHNICAL_DESIGN.' +
                                'MAPPED_ITEM.' +
                                'MAPPING_SOURCE')) = 1)
        )) = 0;
  WR9:  SIZEOF(QUERY(rm <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                        'REPRESENTATION_MAP.' +
                                        'MAPPED_REPRESENTATION') |
          NOT(SIZEOF(QUERY(mi <* USEDIN(rm, 'ELECTROTECHNICAL_DESIGN.' +
                                            'MAPPED_ITEM.' +
                                            'MAPPING_SOURCE') |
                       NOT(SIZEOF(QUERY(rep <*
                                        USEDIN(mi,
                                        'ELECTROTECHNICAL_DESIGN.' +
                                        'REPRESENTATION.' +
                                        'ITEMS') |
                                    SIZEOF(TYPEOF(rep) *
                                           ['ELECTROTECHNICAL_DESIGN.' +
                                            'DRAWING_SHEET_REVISION',
                                            'ELECTROTECHNICAL_DESIGN.' +
                                            'PRESENTATION_VIEW']
                                    ) = 1 )
                           ) = 1 )
              )) = 0)
        )) = 0;
  WR10: SIZEOF(QUERY(mi <* SELF\representation.items |
                 ('ELECTROTECHNICAL_DESIGN.MAPPED_ITEM'
                  IN TYPEOF(mi))
                 AND
                 (NOT(SIZEOF((QUERY(pos <* mi\mapped_item.mapping_source.
                                           mapped_representation.items |
                                'ELECTROTECHNICAL_DESIGN.' +
                                'AXIS2_PLACEMENT_2D'
                                IN TYPEOF(pos) ))
                             *
                             (QUERY(origin <* SELF\representation.items |
                                'ELECTROTECHNICAL_DESIGN.' +
                                'AXIS2_PLACEMENT_2D'
                                IN TYPEOF(origin) ))
                      ) = 1 ) ) )
        ) = 0;
  WR11: SIZEOF(QUERY(rr <* USEDIN(SELF,
                             'ELECTROTECHNICAL_DESIGN.' +
                             'REPRESENTATION_RELATIONSHIP.' +
                             'REP_2') |
                 (rr.name = 'reference grid')
                 AND
                 ('ELECTROTECHNICAL_DESIGN.REFERENCE_GRID_LAYOUT'
                  IN TYPEOF(rr.rep_1))
        )) >= 1;
END_ENTITY;

ENTITY retention
  SUBTYPE OF (action);
WHERE
 WR1: SIZEOF ( QUERY ( aa <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+'ACTION_ASSIGNMENT.'+
     'ASSIGNED_ACTION' ) | ( 'ELECTROTECHNICAL_DESIGN.'+
     'APPLIED_ACTION_ASSIGNMENT' IN TYPEOF ( aa ) ) AND ( aa.
     role.name ='retention' ) ) ) >=1;
 WR2: ( SIZEOF ( QUERY ( atia <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_TIME_INTERVAL_ASSIGNMENT.'+
     'ITEMS' ) | ( atia. role.name = 'minimum retention period'
     ) ) ) =1 ) AND ( SIZEOF ( QUERY ( atia <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_TIME_INTERVAL_ASSIGNMENT.'+
     'ITEMS' ) | ( atia. role.name = 'maximum retention period'
     ) ) ) =1 ) AND ( SIZEOF ( QUERY ( atia1 <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_TIME_INTERVAL_ASSIGNMENT.'+
     'ITEMS' ) | ( atia1. role.name = 'minimum retention period'
     ) AND ( 'ELECTROTECHNICAL_DESIGN.'+ 'TIME_INTERVAL_WITH_BOUNDS'
     IN TYPEOF ( atia1. assigned_time_interval ) ) AND ( EXISTS
     ( atia1. assigned_time_interval\time_interval_with_bounds.
     secondary_bound ) OR EXISTS ( atia1.
     assigned_time_interval\time_interval_with_bounds. duration
     ) ) AND ( SIZEOF ( QUERY ( atia2 <* USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_TIME_INTERVAL_ASSIGNMENT.'+
     'ITEMS' ) | ( atia2. role.name = 'maximum retention period'
     ) AND ( 'ELECTROTECHNICAL_DESIGN.'+ 'TIME_INTERVAL_WITH_BOUNDS'
     IN TYPEOF ( atia2. assigned_time_interval ) ) AND ( EXISTS
     ( atia2. assigned_time_interval\time_interval_with_bounds.
     secondary_bound ) OR EXISTS ( atia2.
     assigned_time_interval\time_interval_with_bounds. duration
     ) ) AND ( atia1.
     assigned_time_interval\time_interval_with_bounds.
     primary_bound:=:atia2.
     assigned_time_interval\time_interval_with_bounds.
     primary_bound ) ) ) =1 ) ) ) =1 ) ;
 WR3: SIZEOF ( USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+'ACTION_RELATIONSHIP.'+
     'RELATING_ACTION' ) ) + SIZEOF ( USEDIN ( SELF ,
     'ELECTROTECHNICAL_DESIGN.'+'ACTION_RELATIONSHIP.'+
     'RELATED_ACTION' ) ) =0;
END_ENTITY;

ENTITY routed_segment
  SUBTYPE OF (installation_segment);
WHERE
  WR1:  SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
                 (sar.name = 'course sequence')
                 AND
                 (SIZEOF(TYPEOF(sar.related_shape_aspect) *
                  ['ELECTROTECHNICAL_DESIGN.INSTALLATION_NODE',
                   'ELECTROTECHNICAL_DESIGN.INSTALLATION_ROUTE',
                   'ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION',
                   'ELECTROTECHNICAL_DESIGN.' +
                   'INSTALLATION_SECTION_INTERFACE']
                  ) = 1 )
        )) >= 1;
END_ENTITY;

ENTITY signal
  SUBTYPE OF (characterized_object);
WHERE
  WR1:  SIZEOF(QUERY(des <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                 SIZEOF(TYPEOF(des) *
                          ['ELECTROTECHNICAL_DESIGN.' +
                           'DOCUMENT_DESIGNATION_ASSIGNMENT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'TERMINAL_DESIGNATION_ASSIGNMENT']
                 ) > 0 )
        ) = 0;
  WR2:  SIZEOF(QUERY(des <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                 ('ELECTROTECHNICAL_DESIGN.' +
                  'SIGNAL_DESIGNATION_ASSIGNMENT'
                  IN TYPEOF(des))
                 AND
                 (des.role.description = 'primary') )
        ) = 1;
  WR3:  SIZEOF(QUERY(i <* USEDIN(SELF,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                 'ITEMS') |
                 i.role.name = 'version')
        ) < 2;
END_ENTITY;

ENTITY signal_designation_assignment
  SUBTYPE OF (item_designation_assignment);
WHERE
  WR1:  'ELECTROTECHNICAL_DESIGN.SIGNAL'
        IN TYPEOF(SELF.items[1]);
  WR2:  SIZEOF(TYPEOF(SELF) *
                 ['ELECTROTECHNICAL_DESIGN.' +
                  'DOCUMENT_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'SIGNAL_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'TERMINAL_DESIGNATION_ASSIGNMENT']
        ) = 1;
END_ENTITY;

ENTITY terminal
  SUBTYPE OF (shape_aspect);
WHERE
  WR1:  SELF\shape_aspect.product_definitional = UNKNOWN;
  WR2:  'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION' IN
        TYPEOF(SELF\shape_aspect.of_shape\property_definition.definition);
  WR3:  SELF\shape_aspect.of_shape\property_definition.definition.
        frame_of_reference\application_context_element.name
        IN ['functional definition',
            'functional occurrence',
            'part definition',
            'part occurrence'];
  WR4:  SELF\shape_aspect.of_shape\property_definition.definition.name
        = 'single instance';
  WR5:  SIZEOF(QUERY(des <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                 NOT(SIZEOF(TYPEOF(des) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'DOCUMENT_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'SIGNAL_DESIGNATION_ASSIGNMENT']
                     ) > 0 ) )
        ) = 0;
  WR6:  SIZEOF(QUERY(des <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                 ('ELECTROTECHNICAL_DESIGN.' +
                  'TERMINAL_DESIGNATION_ASSIGNMENT'
                  IN TYPEOF(des))
                 AND
                 (des.role.description = 'primary') )
        ) = 1;
  WR7:  SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATED_SHAPE_ASPECT') |
          (sar.related_shape_aspect.of_shape\
           property_definition.definition.frame_of_reference\
           application_context_element.name = 'functional occurrence')
          AND
          (sar.name = 'definition usage')
          AND
          ('ELECTROTECHNICAL_DESIGN.TERMINAL'
           IN TYPEOF(sar.relating_shape_aspect))
          AND
          (sar.relating_shape_aspect.of_shape\
           property_definition.definition.frame_of_reference\
           application_context_element.name = 'functional definition')
        )) = 1;
  WR8:  SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATED_SHAPE_ASPECT') |
          (sar.related_shape_aspect.of_shape\
           property_definition.definition.frame_of_reference\
           application_context_element.name = 'part occurrence')
          AND
          (sar.name = 'definition usage')
          AND
          ('ELECTROTECHNICAL_DESIGN.TERMINAL'
           IN TYPEOF(sar.relating_shape_aspect))
          AND
          (sar.relating_shape_aspect.of_shape\
           property_definition.definition.frame_of_reference\
           application_context_element.name = 'part definition')
        )) = 1;
  WR9:  SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
          (sar.relating_shape_aspect.of_shape\
           property_definition.definition.frame_of_reference\
           application_context_element.name = 'functional definition')
          AND
          (sar.name = 'correspondence')
          AND
          (NOT('ELECTROTECHNICAL_DESIGN.TERMINAL'
               IN TYPEOF(sar.related_shape_aspect)))
          AND
          (NOT(sar.related_shape_aspect.of_shape\
           property_definition.definition.frame_of_reference\
           application_context_element.name = 'functional occurrence'))
        )) = 0;
  WR10: SIZEOF(QUERY(sar <* USEDIN(SELF, 'ELECTROTECHNICAL_DESIGN.' +
                                         'SHAPE_ASPECT_RELATIONSHIP.' +
                                         'RELATING_SHAPE_ASPECT') |
          (sar.relating_shape_aspect.of_shape\
           property_definition.definition.frame_of_reference\
           application_context_element.name = 'part definition')
          AND
          (sar.name = 'correspondence')
          AND
          ('ELECTROTECHNICAL_DESIGN.TERMINAL'
           IN TYPEOF(sar.related_shape_aspect))
          AND
          (sar.related_shape_aspect.of_shape\
           property_definition.definition.frame_of_reference\
           application_context_element.name = 'part occurrence')
        )) <= 1;
  WR11: SIZEOF(QUERY(corr_mem <*
                       QUERY(sar <* USEDIN(SELF,
                                      'ELECTROTECHNICAL_DESIGN.' +
                                      'SHAPE_ASPECT_RELATIONSHIP.' +
                                      'RELATING_SHAPE_ASPECT') |
                         (sar.relating_shape_aspect.of_shape\
                          property_definition.definition.
                          frame_of_reference\application_context_element.
                          name = 'functional definition')
                         AND
                         (sar.name = 'correspondence')) |
                 NOT(SIZEOF(QUERY(next_corr_mem <*
                                QUERY(sar <* (USEDIN(SELF,
                                             'ELECTROTECHNICAL_DESIGN.' +
                                             'SHAPE_ASPECT_RELATIONSHIP.' +
                                             'RELATING_SHAPE_ASPECT')
                                            - corr_mem) |
                              (sar.relating_shape_aspect.of_shape\
                               property_definition.definition.
                               frame_of_reference\
                               application_context_element.
                               name = 'functional definition')
                              AND
                              (sar.name = 'correspondence')) |
                              corr_mem.related_shape_aspect =
                              next_corr_mem.related_shape_aspect
                     )) = 0)
        )) = 0;
END_ENTITY;

ENTITY terminal_designation_assignment
  SUBTYPE OF (item_designation_assignment);
WHERE
  WR1:  SIZEOF(TYPEOF(SELF.items[1]) *
                 ['ELECTROTECHNICAL_DESIGN.TERMINAL']
        ) = 1;
  WR2:  SIZEOF(TYPEOF(SELF) *
                 ['ELECTROTECHNICAL_DESIGN.' +
                  'DOCUMENT_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'SIGNAL_DESIGNATION_ASSIGNMENT',
                  'ELECTROTECHNICAL_DESIGN.' +
                  'TERMINAL_DESIGNATION_ASSIGNMENT']
        ) = 1;
END_ENTITY;

ENTITY value_range
  SUBTYPE OF (compound_representation_item);
WHERE
 WR1: ( 'ELECTROTECHNICAL_DESIGN.'+ 'SET_REPRESENTATION_ITEM' IN
     TYPEOF ( item_element ) ) AND value_range_wr1 (
     item_element ) ;
 WR2:value_range_wr2 ( item_element ) ;
 WR3:value_range_wr3 ( item_element ) ;
END_ENTITY;

RULE action_subtype_exclusiveness FOR
    (action);
WHERE
  WR1:  SIZEOF(QUERY(a <* action |
                 SIZEOF(TYPEOF(a) *
                          ['ELECTROTECHNICAL_DESIGN.EXECUTED_ACTION',
                           'ELECTROTECHNICAL_DESIGN.RETENTION']
                 ) > 1 )
        ) = 0;
END_RULE;

RULE application_protocol_definition_required FOR
    (application_context);
WHERE
 WR1: SIZEOF ( QUERY ( ac <* application_context | ( SIZEOF (
     QUERY ( apd <* USEDIN ( ac ,
     'ELECTROTECHNICAL_DESIGN.APPLICATION_PROTOCOL_DEFINITION.APPLICATION'
     ) | apd. application_interpreted_model_schema_name
     ='electrotechnical_design' ) ) >0 ) ) ) >0;
END_RULE;

RULE approval_person_organization_requires_date_time FOR
    (approval_person_organization);
WHERE
 WR1: SIZEOF ( QUERY ( apo <* approval_person_organization | (
     SIZEOF ( QUERY ( u <* USEDIN ( apo ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_DATE_ASSIGNMENT.'+ 'ITEMS') | 
     ( u.role. name = 'sign off' ) ) ) +  SIZEOF ( QUERY (
     u <* USEDIN ( apo ,
     'ELECTROTECHNICAL_DESIGN.'+ 'APPLIED_DATE_AND_TIME_ASSIGNMENT.'+
     'ITEMS' ) | 	 ( u.role. name = 'sign off' ) ) ) ) <>1 ) )
     =0;
END_RULE;

RULE approval_requires_approval_assignment FOR
    (approval);
WHERE
 WR1: SIZEOF ( QUERY ( a <* approval | SIZEOF ( USEDIN ( a ,
     'ELECTROTECHNICAL_DESIGN.APPROVAL_ASSIGNMENT.ASSIGNED_APPROVAL' )
     ) =0 ) ) =0;
END_RULE;

RULE assembly_component_usage_reference_designation_constraint FOR
    (assembly_component_usage);
WHERE
  WR1:  SIZEOF(QUERY(assy_rel <*
                     QUERY(acu <* assembly_component_usage |
                       acu\product_definition_relationship.
                       related_product_definition.
                       frame_of_reference\application_context_element.name
                       IN ['functional occurrence', 'part occurrence']) |
               SIZEOF(QUERY(primary <*
                        QUERY(orda <*
                              USEDIN(assy_rel.related_product_definition,
                              'ELECTROTECHNICAL_DESIGN.' +
                              'ITEM_DESIGNATION_ASSIGNMENT.' +
                              'ITEMS') |
                          orda\identification_assignment.role.description
                          = 'primary') |
                      NOT(assy_rel.reference_designator =
                          primary\identification_assignment.assigned_id))
               ) > 0 )
        ) = 0;
  WR2:  SIZEOF(QUERY(acu <* assembly_component_usage |
               SIZEOF(QUERY(orda <*
                            USEDIN(acu,
                            'ELECTROTECHNICAL_DESIGN.' +
                            'ITEM_DESIGNATION_ASSIGNMENT.' +
                            'ITEMS') |
                        orda\identification_assignment.role.description
                        = 'primary')
               ) > 1 )
        ) = 0;
  WR3:  SIZEOF(QUERY(acu <* assembly_component_usage |
               SIZEOF(QUERY(primary <*
                        QUERY(orda <*
                              USEDIN(acu,
                              'ELECTROTECHNICAL_DESIGN.' +
                              'ITEM_DESIGNATION_ASSIGNMENT.' +
                              'ITEMS') |
                          orda\identification_assignment.role.description
                          = 'primary') |
                      NOT(acu.reference_designator =
                          primary\identification_assignment.assigned_id))
               ) > 0 )
        ) = 0;
END_RULE;

RULE characterized_object_subtype_exclusiveness FOR
    (characterized_object);
WHERE
  WR1:  SIZEOF(QUERY(c <* characterized_object |
                 SIZEOF(TYPEOF(c) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'CHARACTERIZED_CLASS', 
                    'ELECTROTECHNICAL_DESIGN.' +
                    'DOCUMENT_FILE',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTIFICATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PROCESS_VARIABLE',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRODUCT_CLASS', 
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRODUCT_IDENTIFICATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRODUCT_SPECIFICATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SIGNAL']
                 ) > 1 )
        ) = 0;
END_RULE;

RULE class_reference_requires_version FOR
 (externally_defined_class);
WHERE
 WR1: SIZEOF ( QUERY ( edc <* externally_defined_class | (
     'ELECTROTECHNICAL_DESIGN.'+ 'KNOWN_SOURCE' IN TYPEOF ( edc.
     source ) ) AND ( SIZEOF ( QUERY ( aei <* USEDIN ( edc ,
     'ELECTROTECHNICAL_DESIGN.'+
     'APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.ITEMS'
     ) | aei. role.name ='version' ) ) <>1 ) ) ) =0;
 WR2: SIZEOF ( QUERY ( edc <* externally_defined_class | (
     'ELECTROTECHNICAL_DESIGN.'+ 'KNOWN_SOURCE' IN TYPEOF ( edc.
     source ) ) AND ( SIZEOF ( QUERY ( aei <* USEDIN ( edc ,
     'ELECTROTECHNICAL_DESIGN.'+
     'APPLIED_IDENTIFICATION_ASSIGNMENT.ITEMS'
     ) | aei. role.name ='version' ) ) >0 ) ) ) =0;
END_RULE;

RULE classification_assignment_subtype_exclusiveness FOR
    (classification_assignment);
WHERE
  WR1:  SIZEOF(QUERY(c <* classification_assignment |
                 SIZEOF(TYPEOF(c) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'APPLIED_CLASSIFICATION_ASSIGNMENT',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'LANGUAGE_ASSIGNMENT']
                 ) > 1 )
        ) = 0;
END_RULE;

RULE complex_product_requires_product_definition FOR
    (product_definition,
     product_definition_formation,
     product_related_product_category);
WHERE
 WR1: SIZEOF ( QUERY ( pdf <* product_definition_formation | ( (
     SIZEOF ( QUERY ( prpc <* USEDIN ( pdf. of_product ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_RELATED_PRODUCT_CATEGORY.'+
     'PRODUCTS' ) | prpc. name ='functionality' ) ) =1 ) AND (
     SIZEOF ( QUERY ( pd <* USEDIN ( pdf ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_DEFINITION.'+ 'FORMATION' ) |
     pd. frame_of_reference.name = 'functional definition' ) )
     <>1 ) ) OR ( ( SIZEOF ( QUERY ( prpc <* USEDIN ( pdf.
     of_product ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_RELATED_PRODUCT_CATEGORY.'+
     'PRODUCTS' ) | prpc. name = 'conceptual design' ) ) =1 )
     AND ( SIZEOF ( QUERY ( pd <* USEDIN ( pdf ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_DEFINITION.'+ 'FORMATION' ) |
     pd. frame_of_reference.name = 'conceptual definition' ) )
     <>1 ) ) OR ( ( SIZEOF ( QUERY ( prpc <* USEDIN ( pdf.
     of_product ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_RELATED_PRODUCT_CATEGORY.'+
     'PRODUCTS' ) | prpc. name = 'alternative solution' ) ) =1 )
     AND ( SIZEOF ( QUERY ( pd <* USEDIN ( pdf ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_DEFINITION.'+ 'FORMATION' ) |
     pd. frame_of_reference.name = 'alternative definition' ) )
     <>1 ) ) ) ) =0;
END_RULE;

RULE configuration_design_constraint FOR
    (configuration_design);
WHERE
  WR1:  SIZEOF(QUERY(cd <* configuration_design |
                 NOT(configuration_design_correlation(cd)) )
        ) = 0;
END_RULE;

RULE curve_font_usage FOR
    (curve_style_font,
     externally_defined_curve_font,
     pre_defined_curve_font);
WHERE
 WR1: SIZEOF ( QUERY ( csf <* curve_style_font | ( SIZEOF (
     USEDIN ( csf , 'ELECTROTECHNICAL_DESIGN.CURVE_STYLE.CURVE_FONT' )
     ) =0 ) ) ) =0;
 WR2: SIZEOF ( QUERY ( pdcf <* pre_defined_curve_font | ( SIZEOF
     ( USEDIN ( pdcf ,
     'ELECTROTECHNICAL_DESIGN.CURVE_STYLE.CURVE_FONT' ) ) =0 ) ) ) =0;
 WR3: SIZEOF ( QUERY ( edcf <* externally_defined_curve_font |
     NOT ( SIZEOF ( USEDIN ( edcf ,
     'ELECTROTECHNICAL_DESIGN.'+'CURVE_STYLE.'+ 'CURVE_FONT' ) ) >=1 )
     ) ) =0;
END_RULE;

RULE dependent_instantiable_action_directive FOR
    (action_directive);
WHERE
 WR1: SIZEOF ( QUERY ( a <* action_directive | NOT ( SIZEOF (
     USEDIN ( a , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_address FOR
    (address);
WHERE
  WR1:  SIZEOF(QUERY(a <* address |
                 NOT(SIZEOF(USEDIN (a, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_approval_role FOR
    (approval_role);
WHERE
  WR1:  SIZEOF(QUERY(a <* approval_role |
                 NOT(SIZEOF(USEDIN (a, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_approval_status FOR
    (approval_status);
WHERE
  WR1:  SIZEOF(QUERY(a <* approval_status |
                 NOT(SIZEOF(USEDIN (a, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_attribute_value_role FOR
    (attribute_value_role);
WHERE
 WR1: SIZEOF ( QUERY ( a <* attribute_value_role | NOT ( SIZEOF
     ( USEDIN ( a , '' ) ) >0 ) ) ) =0;
END_RULE;
 
RULE dependent_instantiable_classification_role FOR
    (classification_role);
WHERE
  WR1:  SIZEOF(QUERY(c <* classification_role |
                 NOT(SIZEOF(USEDIN (c, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_colour_rgb FOR
    (colour_rgb);
WHERE
 WR1: SIZEOF ( QUERY ( c <* colour_rgb | NOT ( SIZEOF ( USEDIN (
     c , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_curve_style FOR
    (curve_style);
WHERE
 WR1: SIZEOF ( QUERY ( c <* curve_style | NOT ( SIZEOF ( USEDIN
     ( c , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_date FOR
    (date);
WHERE
  WR1:  SIZEOF(QUERY(d <* date |
                 NOT(SIZEOF(USEDIN(d, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_date_and_time FOR
    (date_and_time);
WHERE
  WR1:  SIZEOF(QUERY(d <* date_and_time |
                 NOT(SIZEOF(USEDIN(d, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_date_role FOR
    (date_role);
WHERE
  WR1:  SIZEOF(QUERY(d <* date_role |
                 NOT (SIZEOF(USEDIN(d, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_date_time_role FOR
    (date_time_role);
WHERE
  WR1:  SIZEOF(QUERY(d <* date_time_role |
                 NOT (SIZEOF(USEDIN(d, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_derived_unit FOR
    (derived_unit);
WHERE
  WR1:  SIZEOF(QUERY(d <* derived_unit |
                 NOT(SIZEOF(USEDIN (d, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_document_usage_role FOR
    (document_usage_role);
WHERE
  WR1:  SIZEOF(QUERY(d <* document_usage_role |
                 NOT(SIZEOF(USEDIN (d, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_externally_defined_symbol FOR
    (externally_defined_symbol);
WHERE
 WR1: SIZEOF ( QUERY ( e <* externally_defined_symbol | NOT (
     SIZEOF ( USEDIN ( e , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_fill_area_style FOR
    (fill_area_style);
WHERE
 WR1: SIZEOF ( QUERY ( f <* fill_area_style | NOT ( SIZEOF (
     USEDIN ( f , '' ) ) >0 ) ) ) =0;
END_RULE;
 
RULE dependent_instantiable_fill_area_style_colour FOR
    (fill_area_style_colour);
WHERE
 WR1: SIZEOF ( QUERY ( f <* fill_area_style_colour | NOT (
     SIZEOF ( USEDIN ( f , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_identification_role FOR
    (identification_role);
WHERE
  WR1:  SIZEOF(QUERY(i <* identification_role |
                 NOT(SIZEOF(USEDIN (i, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_measure_with_unit FOR
    (measure_with_unit);
WHERE
  WR1:  SIZEOF(QUERY(m <* measure_with_unit |
                 NOT(SIZEOF(USEDIN (m, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_named_unit FOR
    (named_unit);
WHERE
  WR1:  SIZEOF(QUERY(n <* named_unit |
                 NOT(SIZEOF(USEDIN(n, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_object_role FOR
    (object_role);
WHERE
  WR1:  SIZEOF(QUERY(o <* object_role |
                 NOT(SIZEOF(USEDIN (o, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_organization_role FOR
    (organization_role);
WHERE
  WR1:  SIZEOF(QUERY(o <* organization_role |
                 NOT(SIZEOF(USEDIN(o, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_organizational_project_role FOR
    (organizational_project_role);
WHERE
 WR1: SIZEOF ( QUERY ( o <* organizational_project_role | NOT (
     SIZEOF ( USEDIN ( o , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_person FOR
    (person);
WHERE
  WR1:  SIZEOF(QUERY(p <* person |
                 NOT(SIZEOF(USEDIN(p, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_person_and_organization_role FOR
    (person_and_organization_role);
WHERE
  WR1:  SIZEOF(QUERY(p <* person_and_organization_role |
                 NOT(SIZEOF(USEDIN(p, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_pre_defined_colour FOR
    (pre_defined_colour);
WHERE
 WR1: SIZEOF ( QUERY ( p <* pre_defined_colour | NOT ( SIZEOF (
     USEDIN ( p , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_pre_defined_symbol FOR
    (pre_defined_symbol);
WHERE
 WR1: SIZEOF ( QUERY ( p <* pre_defined_symbol | NOT ( SIZEOF (
     USEDIN ( p , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_precision_qualifier FOR
    (precision_qualifier);
WHERE
 WR1: SIZEOF ( QUERY ( p <* precision_qualifier | NOT ( SIZEOF (
     USEDIN ( p , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_presentation_style_by_context FOR
    (presentation_style_by_context);
WHERE
 WR1: SIZEOF ( QUERY ( p <* presentation_style_by_context | NOT
     ( SIZEOF ( USEDIN ( p , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_product_definition_context_role FOR
    (product_definition_context_role);
WHERE
 WR1: SIZEOF ( QUERY ( p <* product_definition_context_role |
     NOT ( SIZEOF ( USEDIN ( p , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_retention FOR
    (retention);
WHERE
 WR1: SIZEOF ( QUERY ( r <* retention | NOT ( SIZEOF ( USEDIN (
     r , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_security_classification_level FOR
    (security_classification_level);
WHERE
  WR1:  SIZEOF(QUERY(s <* security_classification_level |
                 NOT(SIZEOF(USEDIN(s, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_symbol_colour FOR
    (symbol_colour);
WHERE
 WR1: SIZEOF ( QUERY ( s <* symbol_colour | NOT ( SIZEOF (
     USEDIN ( s , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_text_style FOR
    (text_style);
WHERE
 WR1: SIZEOF ( QUERY ( t <* text_style | NOT ( SIZEOF ( USEDIN (
     t , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dependent_instantiable_text_style_for_defined_font FOR
    (text_style_for_defined_font);
WHERE
 WR1: SIZEOF ( QUERY ( t <* text_style_for_defined_font | NOT (
     SIZEOF ( USEDIN ( t , '' ) ) >0 ) ) ) =0;
END_RULE;
 
RULE dependent_instantiable_time_interval_role FOR
    (time_interval_role);
WHERE
  WR1:  SIZEOF(QUERY(t <* time_interval_role |
                 NOT(SIZEOF(USEDIN(t, '')) > 0 ))) = 0;
END_RULE;

RULE dependent_instantiable_type_qualifier FOR
    (type_qualifier);
WHERE
 WR1: SIZEOF ( QUERY ( t <* type_qualifier | NOT ( SIZEOF (
     USEDIN ( t , '' ) ) >0 ) ) ) =0;
END_RULE;

RULE dimensionality_is_two_or_three FOR
  (geometric_representation_context);
WHERE
  WR1:  SIZEOF(QUERY(g <* geometric_representation_context |
                 NOT((g.coordinate_space_dimension = 2)
                     OR
                     (g.coordinate_space_dimension = 3))
        )) = 0;
END_RULE;

RULE draughting_model_annotation_layers FOR
    (presentation_representation);
WHERE
  WR1: SIZEOF(QUERY(pr <* presentation_representation |
         NOT(SIZEOF(QUERY(ao <* QUERY(it <* pr\representation.items |
           ('ELECTROTECHNICAL_DESIGN.ANNOTATION_OCCURRENCE'
            IN TYPEOF(it))) |
             NOT(SIZEOF(USEDIN(ao, 'ELECTROTECHNICAL_DESIGN.' +
                                   'PRESENTATION_LAYER_ASSIGNMENT.' +
                                   'ASSIGNED_ITEMS')) >= 1)
           )) = 0)
       )) = 0;
END_RULE;

RULE draughting_subfigure_representation_layers FOR
    (draughting_subfigure_representation);
WHERE
  WR1: SIZEOF(QUERY(dsr <* draughting_subfigure_representation |
         NOT(SIZEOF(QUERY (item <* dsr\representation.items |
               ('ELECTROTECHNICAL_DESIGN.ANNOTATION_OCCURRENCE'
                IN TYPEOF(item))
               AND
               (SIZEOF(USEDIN(item, 'ELECTROTECHNICAL_DESIGN.' +
                                    'PRESENTATION_LAYER_ASSIGNMENT.' +
                                    'ASSIGNED_ITEMS')) = 0 )
         )) = 0 )
       )) = 0;
END_RULE;

RULE drawing_revision_document_designation_constraint FOR
    (drawing_revision);
WHERE
  WR1:  SIZEOF(QUERY(d <* drawing_revision |
                 SIZEOF(QUERY(des <* USEDIN(d,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'ITEM_DESIGNATION_ASSIGNMENT.' +
                                     'ITEMS') |
                          SIZEOF(TYPEOF(des) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'SIGNAL_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'TERMINAL_DESIGNATION_ASSIGNMENT']
                          ) > 0 )
                 ) > 0 )
        ) = 0;
  WR2:  SIZEOF(QUERY(d <* drawing_revision |
                 SIZEOF(QUERY(des <* USEDIN(d,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'ITEM_DESIGNATION_ASSIGNMENT.' +
                                     'ITEMS') |
                          ('ELECTROTECHNICAL_DESIGN.' +
                           'DOCUMENT_DESIGNATION_ASSIGNMENT'
                           IN TYPEOF(des))
                          AND
                          (des.role.description = 'primary') )
                 ) > 1 )
        ) = 0;
END_RULE;

RULE drawing_sheet_annotation_layers FOR
    (drawing_sheet_revision);
WHERE
  WR1: SIZEOF(QUERY(dsr <* drawing_sheet_revision |
         NOT(SIZEOF(QUERY(ao <* QUERY(it <* dsr\representation.items |
               ('ELECTROTECHNICAL_DESIGN.ANNOTATION_OCCURRENCE'
                IN TYPEOF(it))) |
                 NOT(SIZEOF(USEDIN(ao, 'ELECTROTECHNICAL_DESIGN.' +
                                       'PRESENTATION_LAYER_ASSIGNMENT.' +
                                       'ASSIGNED_ITEMS')) >= 1)
         )) = 0)
       )) = 0;
END_RULE;

RULE drawing_sheet_layout_usage FOR
    (mapped_item);
WHERE
  WR1: SIZEOF(QUERY(dsl <* QUERY(mi <* mapped_item |
         ('ELECTROTECHNICAL_DESIGN.DRAWING_SHEET_LAYOUT'
          IN TYPEOF(mi.mapping_source.mapped_representation))) |
           NOT(SIZEOF(USEDIN(dsl, '')) =
             SIZEOF(QUERY(dsr <* USEDIN(dsl, 'ELECTROTECHNICAL_DESIGN.' +
                                             'REPRESENTATION.ITEMS') |
               ('ELECTROTECHNICAL_DESIGN.DRAWING_SHEET_REVISION'
                IN TYPEOF(dsr)))))
       )) = 0;
END_RULE;

RULE drawing_sheet_revision_document_designation_constraint FOR
    (drawing_sheet_revision);
WHERE
  WR1:  SIZEOF(QUERY(d <* drawing_sheet_revision |
                 SIZEOF(QUERY(des <* USEDIN(d,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'ITEM_DESIGNATION_ASSIGNMENT.' +
                                     'ITEMS') |
                          SIZEOF(TYPEOF(des) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'SIGNAL_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'TERMINAL_DESIGNATION_ASSIGNMENT']
                          ) > 0 )
                 ) > 0 )
        ) = 0;
  WR2:  SIZEOF(QUERY(d <* drawing_sheet_revision |
                 SIZEOF(QUERY(des <* USEDIN(d,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'ITEM_DESIGNATION_ASSIGNMENT.' +
                                     'ITEMS') |
                          ('ELECTROTECHNICAL_DESIGN.' +
                           'DOCUMENT_DESIGNATION_ASSIGNMENT'
                           IN TYPEOF(des))
                          AND
                          (des.role.description = 'primary') )
                 ) > 1 )
        ) = 0;
END_RULE;

RULE drawing_view_annotation_layers FOR
    (presentation_view);
WHERE
  WR1: SIZEOF(QUERY(pv <* presentation_view |
         NOT(SIZEOF(QUERY(ao <* QUERY(it <* pv\representation.items |
           ('ELECTROTECHNICAL_DESIGN.ANNOTATION_OCCURRENCE'
            IN TYPEOF(it))) |
             NOT(SIZEOF(USEDIN(ao, 'ELECTROTECHNICAL_DESIGN.' +
                                   'PRESENTATION_LAYER_ASSIGNMENT.' +
                                   'ASSIGNED_ITEMS')) >= 1)
         )) = 0)
       )) = 0;
END_RULE;

RULE effectivity_assignment_subtype_exclusiveness FOR
    (effectivity_assignment);
WHERE
  WR1:  SIZEOF(QUERY(e <* effectivity_assignment |
          SIZEOF(TYPEOF(e) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'APPLIED_EFFECTIVITY_ASSIGNMENT',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'APPLIED_INEFFECTIVITY_ASSIGNMENT',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'CONFIGURED_EFFECTIVITY_ASSIGNMENT']
          ) > 1 )
        ) = 0;
END_RULE;

RULE effectivity_context_assignment_subtype_exclusiveness FOR
    (effectivity_context_assignment);
WHERE
  WR1:  SIZEOF(QUERY(e <* effectivity_context_assignment |
          SIZEOF(TYPEOF(e) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'CLASS_USAGE_EFFECTIVITY_CONTEXT_ASSIGNMENT', 
                    'ELECTROTECHNICAL_DESIGN.' +
                    'CONFIGURED_EFFECTIVITY_CONTEXT_ASSIGNMENT']
          ) > 1 )
        ) = 0;
END_RULE;

RULE event_occurrence_requires_event_occurrence_assignment FOR
    (event_occurrence,
     event_occurrence_assignment,
     relative_event_occurrence);
WHERE
 WR1: SIZEOF ( QUERY ( eo <* event_occurrence | ( SIZEOF (
     USEDIN ( eo ,
     'ELECTROTECHNICAL_DESIGN.'+'RELATIVE_EVENT_OCCURRENCE.'+
     'BASE_EVENT' ) ) =0 ) AND ( SIZEOF ( USEDIN ( eo ,
     'ELECTROTECHNICAL_DESIGN.'+'EVENT_OCCURRENCE_ASSIGNMENT.'+
     'ASSIGNED_EVENT_OCCURRENCE' ) ) =0 ) ) ) =0;
END_RULE;

RULE executed_action_requires_status FOR
    (executed_action);
WHERE
 WR1: SIZEOF ( QUERY ( ea <* executed_action | SIZEOF ( USEDIN (
     ea , 'ELECTROTECHNICAL_DESIGN.'+'ACTION_STATUS.'+
     'ASSIGNED_ACTION' ) ) <>1 ) ) =0;
END_RULE;

RULE externally_defined_class_with_known_source_requirement FOR
    (externally_defined_class);
WHERE
 WR1: SIZEOF ( QUERY ( edc <* externally_defined_class | (
     'ELECTROTECHNICAL_DESIGN.'+ 'KNOWN_SOURCE' IN TYPEOF ( edc.
     source ) ) AND ( SIZEOF ( QUERY ( aoa <* USEDIN ( edc ,
     'ELECTROTECHNICAL_DESIGN.APPLIED_ORGANIZATION_ASSIGNMENT.ITEMS' )
     | aoa. role.name = 'class supplier' ) ) =0 ) ) ) =0;
END_RULE;

RULE externally_defined_item_relationship_constraint FOR
    (externally_defined_item_relationship);
WHERE
  WR1:  SIZEOF(QUERY(e <* externally_defined_item_relationship |
          NOT(externally_defined_item_relationship_correlation(e)) )
        ) = 0;
END_RULE;

RULE externally_defined_item_subtype_exclusiveness FOR
    (externally_defined_item);
WHERE
  WR1:  SIZEOF(QUERY(e <* externally_defined_item |
                 SIZEOF(TYPEOF(e) *
                          ['ELECTROTECHNICAL_DESIGN.' +
                           'EXTERNALLY_DEFINED_CLASS',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'EXTERNALLY_DEFINED_CURVE_FONT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'EXTERNALLY_DEFINED_GENERAL_PROPERTY',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'EXTERNALLY_DEFINED_HATCH_STYLE',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'EXTERNALLY_DEFINED_SYMBOL',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'EXTERNALLY_DEFINED_TEXT_FONT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'EXTERNALLY_DEFINED_TILE_STYLE']
                 ) > 1
        )) = 0;
END_RULE;

RULE fill_area_style_tile_symbol_constraint FOR
    (fill_area_style_tile_symbol_with_style);
WHERE
 WR1: SIZEOF ( QUERY ( fast <*
     fill_area_style_tile_symbol_with_style | ( (
     'ELECTROTECHNICAL_DESIGN.'+ 'DEFINED_SYMBOL' IN TYPEOF ( fast.
     symbol\styled_item. item ) ) AND NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'EXTERNALLY_DEFINED_SYMBOL' IN TYPEOF
     ( fast. symbol\styled_item.item\ defined_symbol.definition
     ) ) ) ) ) =0;
END_RULE;

RULE general_property_constraint FOR
    (general_property);
WHERE
  WR1:  SIZEOF(QUERY(g <* general_property |
                 NOT(general_property_correlation(g)) )
        ) = 0;
END_RULE;

RULE global_length_and_angle_units_2d_or_3d FOR
    (global_unit_assigned_context);
WHERE
 WR1: SIZEOF ( QUERY ( guac <* global_unit_assigned_context |
     SIZEOF ( guac. units ) <2 ) ) =0;
 WR2: SIZEOF ( QUERY ( guac <* global_unit_assigned_context | (
     SIZEOF ( QUERY ( x <* guac. units | 'ELECTROTECHNICAL_DESIGN.'+
     'LENGTH_UNIT' IN TYPEOF ( x ) ) ) <>1 ) OR ( SIZEOF ( QUERY
     ( x <* guac. units | 'ELECTROTECHNICAL_DESIGN.'+
     'PLANE_ANGLE_UNIT' IN TYPEOF ( x ) ) ) <>1 ) ) ) =0;
END_RULE;

RULE group_assignment_subtype_exclusiveness FOR
    (group_assignment);
WHERE
  WR1:  SIZEOF(QUERY(ga <* group_assignment |
                 SIZEOF(TYPEOF(ga) *
                          ['ELECTROTECHNICAL_DESIGN.' +
                           'APPLIED_GROUP_ASSIGNMENT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'CONNECTING_LINE_GROUP_ASSIGNMENT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'DRAUGHTING_GROUP_ELEMENTS_ASSIGNMENT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'PAGE_CONNECTOR_REFERENCE_GROUP_ASSIGNMENT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE']
                 ) > 1 )
        ) = 0;
END_RULE;

RULE group_relationship_constraint FOR
    (group_relationship);
WHERE
  WR1:  SIZEOF(QUERY(g <* group_relationship |
                 NOT(group_relationship_correlation(g)) )
        ) = 0;
END_RULE;

RULE group_subtype_exclusiveness FOR
    (group);
WHERE
  WR1:  SIZEOF(QUERY(g <* group |
          SIZEOF(TYPEOF(g) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'CLASS',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'CLASS_SYSTEM',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'CONNECTING_LINE_GROUP',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'LANGUAGE',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PAGE_CONNECTOR_GROUP',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PAGE_CONNECTOR_PRESENTATION_GROUP',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PAGE_CONNECTOR_REFERENCE_GROUP',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRODUCT_CONCEPT_FEATURE_CATEGORY']
          ) > 1 )
        ) = 0;
END_RULE;

RULE identification_assignment_relationship_constraint FOR
    (identification_assignment_relationship);
WHERE
  WR1:  SIZEOF(QUERY(i <* identification_assignment_relationship |
          NOT(identification_assignment_relationship_correlation(i)) )
        ) = 0;
END_RULE;

RULE identification_assignment_subtype_exclusiveness FOR
    (identification_assignment);
WHERE
  WR1:  SIZEOF(QUERY(i <* identification_assignment |
          SIZEOF(TYPEOF(i) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'APPLIED_IDENTIFICATION_ASSIGNMENT',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'EXTERNAL_IDENTIFICATION_ASSIGNMENT',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'ITEM_DESIGNATION_ASSIGNMENT']
          ) > 1 )
        ) = 0;
END_RULE;

RULE known_source_constraint FOR
    (known_source);
WHERE
  WR1:  SIZEOF(QUERY(k <* known_source |
                 NOT(k\pre_defined_item.name
                     IN ['IEC 61360 library', 'ISO 13584 library']) )
        ) = 0;
END_RULE;

RULE person_requires_person_and_organization FOR
    (person);
WHERE
 WR1: SIZEOF ( QUERY ( p <* person | 	 SIZEOF ( USEDIN ( p ,
     'ELECTROTECHNICAL_DESIGN.PERSON_AND_ORGANIZATION.THE_PERSON' ) 	
     ) =0 ) ) =0;
END_RULE;

RULE physical_instance_requires_product_definition FOR
    (product_definition,
     product_definition_formation,
     product_related_product_category);
WHERE
 WR1: SIZEOF ( QUERY ( pdf <* product_definition_formation | (
     SIZEOF ( QUERY ( prpc <* USEDIN ( pdf. of_product ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_RELATED_PRODUCT_CATEGORY.'+
     'PRODUCTS' ) | prpc. name = 'physically realized product' )
     ) >0 ) AND ( SIZEOF ( QUERY ( pd <* USEDIN ( pdf ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_DEFINITION.'+ 'FORMATION' ) |
     pd. frame_of_reference.name = 'physical occurrence' ) ) <>1
     ) ) ) =0;
END_RULE;

RULE pre_defined_item_subtype_exclusiveness FOR
    (pre_defined_item);
WHERE
  WR1:  SIZEOF(QUERY(p <* pre_defined_item|
          SIZEOF(TYPEOF(p) *
                   ['ELECTROTECHNICAL_DESIGN.KNOWN_SOURCE',
                    'ELECTROTECHNICAL_DESIGN.PRE_DEFINED_SYMBOL']
          ) > 1
        )) = 0;
END_RULE;

RULE presentation_layer_assignment_constraint_2d_or_3d FOR
    (presentation_layer_assignment);
WHERE
 WR1: SIZEOF ( QUERY ( pla <* presentation_layer_assignment |
     NOT ( SIZEOF ( QUERY ( pnt <* QUERY ( item <* pla.
     assigned_items | ( 'ELECTROTECHNICAL_DESIGN.'+ 'POINT' IN TYPEOF
     ( item ) ) ) | NOT ( SIZEOF ( QUERY ( rep <* USEDIN ( pnt ,
     'ELECTROTECHNICAL_DESIGN.REPRESENTATION.ITEMS' ) | (
     'ELECTROTECHNICAL_DESIGN.'+ 'SHAPE_REPRESENTATION' IN TYPEOF (
     rep ) ) ) ) =0 ) ) ) =0 ) ) ) =0;
 WR2: SIZEOF ( QUERY ( pla <* presentation_layer_assignment |
     NOT ( SIZEOF ( QUERY ( crv <* QUERY ( item <* pla.
     assigned_items | ( 'ELECTROTECHNICAL_DESIGN.'+ 'CURVE' IN TYPEOF
     ( item ) ) ) | NOT ( SIZEOF ( QUERY ( rep <* USEDIN ( crv ,
     'ELECTROTECHNICAL_DESIGN.REPRESENTATION.ITEMS' ) | (
     'ELECTROTECHNICAL_DESIGN.'+ 'SHAPE_REPRESENTATION' IN TYPEOF (
     rep ) ) ) ) =0 ) ) ) =0 ) ) ) =0;
 WR3: SIZEOF ( QUERY ( pla <* presentation_layer_assignment |
     NOT ( SIZEOF ( QUERY ( ao <* QUERY ( item <* pla.
     assigned_items | ( 'ELECTROTECHNICAL_DESIGN.'+
     'ANNOTATION_OCCURRENCE' IN TYPEOF ( item ) ) ) | NOT (
     SIZEOF ( QUERY ( ur <* using_representations ( ao ) | NOT (
     SIZEOF ( TYPEOF ( ur )
     *['ELECTROTECHNICAL_DESIGN.'+'DRAUGHTING_SUBFIGURE_REPRESENTATION'
     , 'ELECTROTECHNICAL_DESIGN.'+ 'DRAUGHTING_MODEL' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'PRESENTATION_AREA' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'PRESENTATION_VIEW'] ) =1 ) ) ) =0 )
     ) ) =0 ) ) ) =0;
END_RULE;

RULE presentation_size_constraint FOR
    (presentation_size);
WHERE
  WR1: SIZEOF(QUERY(ps <* presentation_size |
                NOT('ELECTROTECHNICAL_DESIGN.DRAWING_SHEET_REVISION'
                    IN TYPEOF(ps.unit)))) = 0;
END_RULE;

RULE presentation_style_by_context_constraint FOR
    (presentation_style_by_context);
WHERE
  WR1: SIZEOF(QUERY(psbc <* presentation_style_by_context |
                NOT('ELECTROTECHNICAL_DESIGN.PRESENTATION_VIEW'
                    IN TYPEOF(psbc.style_context))
       )) = 0;
  WR2: SIZEOF(QUERY(psbc <* presentation_style_by_context |
                NOT(SIZEOF(psbc\presentation_style_assignment.styles) = 1)
       )) = 0;
END_RULE;

RULE presentation_view_presented_once FOR
    (drawing_sheet_revision,
     presentation_view);
WHERE
  WR1: SIZEOF(QUERY(pv <* presentation_view |
         NOT(SIZEOF(QUERY(rm <* USEDIN(pv, 'ELECTROTECHNICAL_DESIGN.' +
                                           'REPRESENTATION_MAP.' +
                                           'MAPPED_REPRESENTATION') |
           NOT(SIZEOF(QUERY(mi <* rm.map_usage |
             NOT(SIZEOF(QUERY(dsr <* drawing_sheet_revision |
                          (mi IN dsr\representation.items))) = 1)
           )) = 0)
         )) = 0)
       )) = 0;
END_RULE;

RULE presented_item_subtype_exclusiveness FOR
    (presented_item);
WHERE
  WR1:  SIZEOF(QUERY(p <* presented_item |
                 SIZEOF(TYPEOF(p) *
                          ['ELECTROTECHNICAL_DESIGN.' +
                           'APPLIED_PRESENTED_ITEM',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'DRAUGHTING_PRESENTED_ITEM']
                 ) > 1 )
        ) = 0;
END_RULE;

RULE product_concept_feature_requires_category FOR
    (product_concept_feature,
     product_concept_feature_category);
WHERE
 WR1: SIZEOF ( QUERY ( pcf <* product_concept_feature | SIZEOF (
     QUERY ( aga <* USEDIN ( pcf ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_GROUP_ASSIGNMENT.'+ 'ITEMS' )
     | ( aga. role.name = 'specification category member' ) AND
     ( 'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_CONCEPT_FEATURE_CATEGORY'
     IN TYPEOF ( aga. assigned_group ) ) ) ) <>1 ) ) =0;
END_RULE;

RULE product_definition_constraint FOR
    (product_definition);
WHERE
  WR1:  SIZEOF(QUERY(p <* product_definition |
                 NOT(product_definition_correlation(p)) )
        ) = 0;
END_RULE;

RULE product_definition_context_association_constraint FOR
    (product_definition_context_association);
WHERE
  WR1:  SIZEOF(QUERY(p <* product_definition_context_association |
          NOT(product_definition_context_association_correlation(p)) )
        ) = 0;
END_RULE;

RULE product_definition_context_constraint FOR
    (product_definition_context);
WHERE
  WR1:  SIZEOF(QUERY(p <* product_definition_context |
                 NOT(product_definition_context_correlation(p)) )
        ) = 0;
END_RULE;

RULE product_definition_relationship_constraint FOR
    (product_definition_relationship);
WHERE
  WR1:  SIZEOF(QUERY(p <* product_definition_relationship |
                 NOT(product_definition_relationship_correlation(p)) )
        ) = 0;
END_RULE;

RULE product_requires_category FOR
    (product,
     product_related_product_category);
WHERE
 WR1: SIZEOF ( QUERY ( p <* product | SIZEOF ( USEDIN ( p ,
     'ELECTROTECHNICAL_DESIGN.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
     ) ) =0 ) ) =0;
END_RULE;
 
RULE product_requires_person_organization FOR
    (product);
WHERE
 WR1: SIZEOF ( QUERY ( prod <* product | ( SIZEOF ( QUERY ( prpc
     <* USEDIN ( prod ,
     'ELECTROTECHNICAL_DESIGN.PRODUCT_RELATED_PRODUCT_CATEGORY.PRODUCTS'
     ) | prpc. name IN ['accessory' , 'part' , 'software' ] ) )
     >0 ) AND ( SIZEOF ( QUERY ( apoa <* USEDIN ( prod ,
     'ELECTROTECHNICAL_DESIGN.'+
     'APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT.ITEMS'
     ) | apoa\ person_and_organization_assignment.role. name<>
     'id owner' ) ) =1 ) ) ) =0;
END_RULE;

RULE product_requires_version FOR
    (product);
WHERE
 WR1: SIZEOF ( QUERY ( prod <* product | ( SIZEOF ( USEDIN (
     prod ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_DEFINITION_FORMATION.'+
     'OF_PRODUCT' ) ) =0 ) ) ) =0;
END_RULE;
 
RULE property_definition_constraint FOR
    (property_definition);
WHERE
  WR1:  SIZEOF(QUERY(p <* property_definition |
                 NOT(property_definition_correlation(p)) )
        ) = 0;
END_RULE;

RULE property_definition_relationship_constraint FOR
    (property_definition_relationship);
WHERE
  WR1:  SIZEOF(QUERY(p <* property_definition_relationship |
                 NOT(property_definition_relationship_correlation(p)) )
        ) = 0;
END_RULE;

RULE property_definition_representation_constraint FOR
    (property_definition_representation);
WHERE
  WR1:  SIZEOF(QUERY(p <* property_definition_representation |
                 NOT(property_definition_representation_correlation(p)) )
        ) = 0;
END_RULE;

RULE property_reference_requires_name_scope FOR
    (externally_defined_general_property);
WHERE
 WR1: SIZEOF ( QUERY ( edgp <*
     externally_defined_general_property | (
     'ELECTROTECHNICAL_DESIGN.'+ 'KNOWN_SOURCE' IN TYPEOF ( edgp.
     source ) ) AND ( SIZEOF ( QUERY ( edir <* USEDIN ( edgp ,
     'ELECTROTECHNICAL_DESIGN.'+'EXTERNALLY_DEFINED_ITEM_RELATIONSHIP.'+
     'RELATING_ITEM' ) | ( edir. name = 'name scope' ) AND (
     'ELECTROTECHNICAL_DESIGN.'+ 'EXTERNALLY_DEFINED_CLASS' IN TYPEOF
     ( edir. related_item ) ) AND ( 'ELECTROTECHNICAL_DESIGN.'+
     'KNOWN_SOURCE' IN TYPEOF ( edir. related_item.source ) ) )
     ) <>1 ) ) ) =0;
END_RULE;

RULE property_reference_requires_version FOR
    (externally_defined_general_property);
WHERE
 WR1: SIZEOF ( QUERY ( edgp <*
     externally_defined_general_property | (
     'ELECTROTECHNICAL_DESIGN.'+ 'KNOWN_SOURCE' IN TYPEOF ( edgp.
     source ) ) AND ( SIZEOF ( QUERY ( edir <* USEDIN ( edgp ,
     'ELECTROTECHNICAL_DESIGN.'+
     'APPLIED_EXTERNAL_IDENTIFICATION_ASSIGNMENT.'+
     'ITEMS' ) | ( edir. role.name ='version' ) ) ) <>1 ) ) )
     =0;
END_RULE;

RULE reference_grid_layout_usage FOR
    (mapped_item);
WHERE
  WR1:  SIZEOF(QUERY(rgl <* QUERY(mi <* mapped_item |
                              'ELECTROTECHNICAL_DESIGN.' +
                              'REFERENCE_GRID_LAYOUT'
                              IN TYPEOF(mi\mapped_item.mapping_source.
                              mapped_representation) ) |
                 NOT(SIZEOF(USEDIN(rgl, ''))
                     =
                     SIZEOF(QUERY(items <* USEDIN(rgl,
                                           'ELECTROTECHNICAL_DESIGN.' +
                                           'REPRESENTATION.' +
                                           'ITEMS') |
                              SIZEOF(TYPEOF(items) *
                                       ['ELECTROTECHNICAL_DESIGN.' +
                                        'DRAWING_SHEET_REVISION',
                                        'ELECTROTECHNICAL_DESIGN.' +
                                        'PRESENTATION_VIEW']
                              ) = 1 ) ) ) )
        ) = 0;
END_RULE;

RULE representation_constraint FOR
    (representation);
WHERE
  WR1:  SIZEOF(QUERY(r <* representation |
                 NOT(representation_correlation(r)) )
        ) = 0;
END_RULE;

RULE representation_item_constraint FOR
    (representation_item);
WHERE
  WR1:  SIZEOF(QUERY(r <* representation_item |
                 NOT(representation_item_correlation(r)) )
        ) = 0;
END_RULE;

RULE representation_item_subtype_exclusiveness FOR
    (representation_item);
WHERE
  WR1:  SIZEOF(QUERY(r <* representation_item |
          SIZEOF(TYPEOF(r) *
            ['ELECTROTECHNICAL_DESIGN.COMPOUND_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.DESCRIPTIVE_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.GEOMETRIC_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.MEASURE_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.VALUE_REPRESENTATION_ITEM']
          ) > 1
        )) = 0;
  WR2:  SIZEOF(QUERY(r <* representation_item |
          SIZEOF(TYPEOF(r) *
            ['ELECTROTECHNICAL_DESIGN.COMPOUND_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.DESCRIPTIVE_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.MEASURE_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.TOPOLOGICAL_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.VALUE_REPRESENTATION_ITEM']
          ) > 1
        )) = 0;
  WR3:  SIZEOF(QUERY(r <* representation_item |
          SIZEOF(TYPEOF(r) *
            ['ELECTROTECHNICAL_DESIGN.COMPOUND_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.DESCRIPTIVE_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.MAPPED_ITEM',
             'ELECTROTECHNICAL_DESIGN.MEASURE_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.TOPOLOGICAL_REPRESENTATION_ITEM',
             'ELECTROTECHNICAL_DESIGN.VALUE_REPRESENTATION_ITEM']
          ) > 1
        )) = 0;
END_RULE;

RULE representation_relationship_constraint FOR
    (representation_relationship);
WHERE
  WR1:  SIZEOF(QUERY(r <* representation_relationship |
                 NOT(representation_relationship_correlation(r)) )
        ) = 0;
END_RULE;

RULE representation_subtype_exclusiveness FOR
    (representation);
WHERE
  WR1:  SIZEOF(QUERY(r <* representation |
          SIZEOF(TYPEOF(r) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 1 )
        ) = 0;
END_RULE;

RULE restrict_alternative_definition FOR
    (product_definition,
     product_definition_context);
WHERE
 WR1: SIZEOF ( QUERY ( pd <* product_definition | ( pd.
     frame_of_reference.name = 'alternative definition' ) AND (
     SIZEOF ( QUERY ( pdr <* USEDIN ( pd ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_DEFINITION_RELATIONSHIP.'+
     'RELATED_PRODUCT_DEFINITION' ) | pdr. name =
     'solution alternative definition' ) ) <>1 ) ) ) =0;
 WR2: SIZEOF ( QUERY ( pd <* product_definition | ( pd.
     frame_of_reference.name = 'alternative definition' ) AND
     NOT ( pd. name IN ['technical' , 'supplier' , 'final' ,
     'technical supplier' , 'technical final' , 'supplier final'
     , 'technical supplier final' , ''] ) ) ) =0;
 WR3: SIZEOF ( QUERY ( pd <* product_definition | ( pd.
     frame_of_reference.name = 'alternative definition' ) AND (
     pd. name IN ['supplier' , 'technical supplier' ,
     'supplier final' , 'technical supplier final' ] ) AND (
     SIZEOF ( QUERY ( aoa <* USEDIN ( pd ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_ORGANIZATION_ASSIGNMENT.'+
     'ITEMS' ) | aoa. role.name ='supplier' ) ) <>1 ) ) ) =0;
 WR4: SIZEOF ( QUERY ( pd <* product_definition | ( pd.
     frame_of_reference.name = 'alternative definition' ) AND (
     pd. name IN ['final' , 'technical final' , 'supplier final'
     , 'technical supplier final' ] ) AND ( SIZEOF ( QUERY ( pdr
     <* USEDIN ( pd ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_DEFINITION_RELATIONSHIP.'+
     'RELATING_PRODUCT_DEFINITION' ) | pdr. name =
     'final specification' ) ) =0 ) AND ( SIZEOF ( QUERY ( pd <*
     USEDIN ( pd , 'ELECTROTECHNICAL_DESIGN.'+'PROPERTY_DEFINITION.'+
     'DEFINITION' ) | SIZEOF ( QUERY ( pdr <* USEDIN ( pd ,
     'ELECTROTECHNICAL_DESIGN.'+'PROPERTY_DEFINITION_REPRESENTATION.'+
     'DEFINITION' ) | ( pdr. used_representation.name =
     'final item characteristics' ) AND ( SIZEOF ( QUERY ( i <*
     pdr. used_representation.items | 'ELECTROTECHNICAL_DESIGN.'+
     'DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF ( i ) ) ) =
     SIZEOF ( pdr. used_representation.items ) ) AND ( SIZEOF (
     pdr. used_representation.items ) >=2 ) AND ( SIZEOF ( QUERY
     ( i <* pdr. used_representation.items | i.name =
     'final item status' ) ) =1 ) ) ) >0 ) ) =0 ) ) ) =0;
END_RULE;

RULE restrict_applied_action_assignment FOR
    (applied_action_assignment,
     object_role);
WHERE
 WR1: SIZEOF ( QUERY ( aaa <* applied_action_assignment | ( aaa.
     role.description = 'activity element' ) AND NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'EXECUTED_ACTION' IN TYPEOF ( aaa.
     assigned_action ) ) ) ) =0;
 WR2: SIZEOF ( QUERY ( aaa <* applied_action_assignment | ( aaa.
     role.description = 'activity element' ) AND NOT
     item_correlation ( aaa. items , ['ACTION' , 'ACTION_METHOD'
     , 'ACTION_PROPERTY' , 'ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE'
     , 'CONFIGURATION_ITEM' , 'CONFIGURATION_EFFECTIVITY' ,
     'CONFIGURED_EFFECTIVITY_ASSIGNMENT' , 'DOCUMENT_FILE' ,
     'DRAUGHTING_MODEL' , 'DRAWING_REVISION' ,
     'GENERAL_PROPERTY' , 'PRESENTATION_AREA' , 'PRODUCT' , 
     'PRODUCT_CONCEPT' , 'PRODUCT_CONCEPT_FEATURE' ,
     'PRODUCT_CONCEPT_FEATURE_ASSOCIATION' ,
     'PRODUCT_CONCEPT_FEATURE_CATEGORY' ,
     'PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE' ,
     'PRODUCT_DEFINITION' , 'PRODUCT_DEFINITION_FORMATION' ,
     'PRODUCT_DEFINITION_RELATIONSHIP' ,
     'PRODUCT_DEFINITION_SUBSTITUTE' , 'PROPERTY_DEFINITION' ,
     'SHAPE_ASPECT' , 'SHAPE_REPRESENTATION'] ) ) ) =0;
 WR3: SIZEOF ( QUERY ( aaa <* applied_action_assignment | ( NOT
     EXISTS ( aaa. role ) OR ( aaa. role.description =
     'activity element' ) ) AND ( SIZEOF ( QUERY ( i <* aaa.
     items | 'ELECTROTECHNICAL_DESIGN.'+ 'APPLIED_ACTION_ASSIGNMENT'
     IN TYPEOF ( i ) ) ) >0 ) ) ) =0;
 WR4: SIZEOF ( QUERY ( aaa <* applied_action_assignment | ( aaa.
     role.name ='retention' ) AND NOT ( 'ELECTROTECHNICAL_DESIGN.'+
     'RETENTION' IN TYPEOF ( aaa. assigned_action ) ) ) ) =0;
 WR5: SIZEOF ( QUERY ( aaa <* applied_action_assignment | ( aaa.
     role.name ='retention' ) AND NOT item_correlation ( aaa.
     items , ['ACTION' , 'ACTION_DIRECTIVE' , 'ACTION_PROPERTY'
     , 'ACTION_RELATIONSHIP' , 'APPLIED_ACTION_ASSIGNMENT' ,
     'APPLIED_CLASSIFICATION_ASSIGNMENT' ,
     'ASSEMBLY_COMPONENT_USAGE_SUBSTITUTE' , 'CERTIFICATION' ,
     'CLASS_SYSTEM' , 'CONFIGURATION_EFFECTIVITY' ,
     'CONFIGURATION_ITEM' , 'CONFIGURED_EFFECTIVITY_ASSIGNMENT'
     , 'DOCUMENT_FILE' , 'DRAUGHTING_MODEL' , 'DRAWING_REVISION'
     , 'GENERAL_PROPERTY' , 'ORGANIZATIONAL_PROJECT' , 
     'PRESENTATION_AREA' , 'PRODUCT' , 'PRODUCT_CONCEPT' ,
     'PRODUCT_CONCEPT_FEATURE' , 'PRODUCT_CONCEPT_FEATURE_ASSOCIATION' ,
     'PRODUCT_CONCEPT_FEATURE_CATEGORY' ,
     'PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE' ,
     'PRODUCT_DEFINITION' , 'PRODUCT_DEFINITION_FORMATION' ,
     'PRODUCT_DEFINITION_RELATIONSHIP' ,
     'PRODUCT_DEFINITION_SUBSTITUTE' , 'PROPERTY_DEFINITION' ,
     'SHAPE_REPRESENTATION' ,
     'VERSIONED_ACTION_REQUEST'] ) ) ) =0;
 WR6: SIZEOF ( QUERY ( aaa <* applied_action_assignment | ( aaa.
     role.name = 'test activity' ) AND NOT item_correlation (
     aaa. items , ['PROPERTY_DEFINITION'] ) ) ) =0;
END_RULE;

RULE restrict_applied_action_request_assignment FOR
    (applied_action_request_assignment,
     object_role);
WHERE
 WR1: SIZEOF ( QUERY ( aara <* applied_action_request_assignment
     | aara. role.name<>'scope' ) ) =0;
END_RULE;

RULE restrict_applied_classification_assignment_role FOR
    (applied_classification_assignment);
WHERE
 WR1: SIZEOF ( QUERY ( aca <* applied_classification_assignment
     | ( 'ELECTROTECHNICAL_DESIGN.'+ 'CLASS' IN TYPEOF ( aca.
     assigned_class ) ) AND NOT ( aca. role.name IN
     ['definitional' , 'nondefinitional' , ''] ) ) ) =0;
 WR2: SIZEOF ( QUERY ( aca <* applied_classification_assignment
     | ( aca. role.name IN ['definitional' , 'nondefinitional'
     , ''] ) AND NOT ( 'ELECTROTECHNICAL_DESIGN.'+ 'CLASS' IN TYPEOF (
     aca. assigned_class ) ) ) ) =0;
 WR3: SIZEOF ( QUERY ( aca <* applied_classification_assignment
     | ( 'ELECTROTECHNICAL_DESIGN.'+ 'CLASS_SYSTEM' IN TYPEOF ( aca.
     assigned_class ) ) AND ( aca. role.name<>
     'class system membership' ) ) ) =0;
 WR4: SIZEOF ( QUERY ( aca <* applied_classification_assignment
     | ( aca. role.name = 'class system membership' ) AND NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'CLASS_SYSTEM' IN TYPEOF ( aca.
     assigned_class ) ) ) ) =0;
END_RULE;

RULE restrict_applied_event_occurrence_assignment FOR
    (applied_event_occurrence_assignment);
WHERE
 WR1: SIZEOF ( QUERY ( eo <* applied_event_occurrence_assignment
     | ( eo\ event_occurrence_assignment.role. name =
     'event context' ) AND ( SIZEOF ( eo. items ) >1 ) ) ) =0;
END_RULE;

RULE restrict_applied_organizational_project_assignment FOR
    (applied_organizational_project_assignment,
     object_role);
WHERE
 WR1: SIZEOF ( QUERY ( aopa <*
     applied_organizational_project_assignment | ( aopa.
     role.name = 'affecting project' ) AND NOT item_correlation
     ( aopa. items , ['PRODUCT_CONCEPT'] ) ) ) =0;
 WR2: SIZEOF ( QUERY ( aopa <*
     applied_organizational_project_assignment | ( aopa.
     role.name = 'work program' ) AND NOT item_correlation (
     aopa. items , ['EXECUTED_ACTION'] ) ) ) =0;
END_RULE;

RULE restrict_camera_image_in_view FOR
    (camera_image,
     presentation_view);
WHERE
 WR1: SIZEOF ( QUERY ( ci <* camera_image | ( SIZEOF ( QUERY ( r
     <* USEDIN ( ci , 'ELECTROTECHNICAL_DESIGN.REPRESENTATION.ITEMS' )
     | ( 'ELECTROTECHNICAL_DESIGN.'+ 'PRESENTATION_VIEW' IN TYPEOF ( r
     ) ) ) ) ) <>1 ) ) =0;
 WR2: SIZEOF ( QUERY ( pv <* presentation_view | ( SIZEOF (
     QUERY ( ri <* pv\ representation.items |
     'ELECTROTECHNICAL_DESIGN.'+ 'CAMERA_IMAGE' IN TYPEOF ( ri ) ) ) )
     >1 ) ) =0;
END_RULE;

RULE restrict_class_system_assignment_for_approval_status FOR
    (applied_classification_assignment,
     approval_status);
WHERE
 WR1: SIZEOF ( QUERY ( ent <* approval_status | SIZEOF ( QUERY (
     ia <* USEDIN ( ent ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_CLASSIFICATION_ASSIGNMENT.'+
     'ITEMS' ) | ia. role.name = 'class system membership' ) )
     >1 ) ) =0;
END_RULE;

RULE restrict_class_system_assignment_for_class FOR
    (applied_classification_assignment,
     class);
WHERE
 WR1: SIZEOF ( QUERY ( c <* class | SIZEOF ( QUERY ( aca <*
     USEDIN ( c ,
     'ELECTROTECHNICAL_DESIGN.'+'CLASSIFICATION_ASSIGNMENT.'+
     'ASSIGNED_CLASS' ) | ( ( aca. role.name =
     'class system membership' ) AND ( 'ELECTROTECHNICAL_DESIGN.'+
     'APPLIED_CLASSIFICATION_ASSIGNMENT' IN TYPEOF ( aca ) ) ) )
     ) >1 ) ) =0;
END_RULE;

RULE restrict_class_system_assignment_for_document_type FOR
    (applied_classification_assignment,
     document_type);
WHERE
 WR1: SIZEOF ( QUERY ( ent <* document_type | SIZEOF ( QUERY (
     ia <* USEDIN ( ent ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_CLASSIFICATION_ASSIGNMENT.'+
     'ITEMS' ) | ia. role.name = 'class system membership' ) )
     >1 ) ) =0;
END_RULE;

RULE restrict_class_system_assignment_for_planar_extent FOR
    (applied_classification_assignment,
     planar_extent);
WHERE
 WR1: SIZEOF ( QUERY ( pe <* planar_extent | ( pe\
     representation_item.name = 'size format' ) AND ( SIZEOF (
     QUERY ( aca <* USEDIN ( pe ,
     'ELECTROTECHNICAL_DESIGN.APPLIED_CLASSIFICATION_ASSIGNMENT.ITEMS'
     ) | aca\ classification_assignment.role. name =
     'class system membership' ) ) >1 ) ) ) =0;
END_RULE;

RULE restrict_class_system_assignment_for_security_classification_level FOR
    (applied_classification_assignment,
     security_classification_level);
WHERE
 WR1: SIZEOF ( QUERY ( ent <* security_classification_level |
     SIZEOF ( QUERY ( ia <* USEDIN ( ent ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_CLASSIFICATION_ASSIGNMENT.'+
     'ITEMS' ) | ia. role.name = 'class system membership' ) )
     >1 ) ) =0;
END_RULE;

RULE restrict_concept_feature_operator FOR
    (concept_feature_operator);
WHERE
 WR1: SIZEOF ( QUERY ( cfo <* concept_feature_operator | NOT (
     cfo. name IN ['and' , 'or ' , 'oneof' , 'not' ,
     'implication'] ) ) ) =0;
 WR2: SIZEOF ( QUERY ( cfo <* concept_feature_operator | ( cfo.
     name ='implication' ) AND ( SIZEOF ( QUERY ( cfrwc <*
     USEDIN ( cfo ,
     'ELECTROTECHNICAL_DESIGN.'+
     'CONCEPT_FEATURE_RELATIONSHIP_WITH_CONDITION.'+
     'CONDITIONAL_OPERATOR' ) | SIZEOF ( QUERY ( ccf <* USEDIN (
     cfrwc ,
     'ELECTROTECHNICAL_DESIGN.'+'CONDITIONAL_CONCEPT_FEATURE.'+
     'CONDITION' ) | NOT ( 'ELECTROTECHNICAL_DESIGN.'+
     'INCLUSION_PRODUCT_CONCEPT_FEATURE' IN TYPEOF ( ccf ) ) ) )
     >0 ) ) >0 ) ) ) =0;
END_RULE;

RULE restrict_configuration_design_for_product_class FOR
    (configuration_design,
     product_class);
WHERE
 WR1: SIZEOF ( QUERY ( cd <* configuration_design | ( cd. name
     ='functionality' ) AND ( NOT ( 'ELECTROTECHNICAL_DESIGN.'+
     'PRODUCT_DEFINITION' IN TYPEOF ( cd. design ) ) OR ( cd.
     design\product_definition. frame_of_reference.name<>
     'functional definition' ) ) ) ) =0;
 WR2: SIZEOF ( QUERY ( cd <* configuration_design | ( cd. name
     ='realization' ) AND ( NOT ( 'ELECTROTECHNICAL_DESIGN.'+
     'PRODUCT_DEFINITION' IN TYPEOF ( cd. design ) ) OR ( cd.
     design\product_definition. frame_of_reference.name<>
     'conceptual definition' ) ) ) ) =0;
 WR3: SIZEOF ( QUERY ( cd <* configuration_design | ( cd. name
     IN ['functionality' , 'realization'] ) AND ( NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_CLASS' IN TYPEOF ( cd.
     configuration.item_concept ) ) ) ) ) =0;
 WR4: SIZEOF ( QUERY ( cd <* configuration_design | (
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION' IN TYPEOF ( cd.
     design ) ) AND ( cd. design\product_definition.
     frame_of_reference.name<> 'design constraint definition' )
     AND ( ( cd. configuration.name<> 'design constraint usage'
     ) OR NOT ( 'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_CLASS' IN TYPEOF
     ( cd. configuration.item_concept ) ) ) ) ) =0;
 WR5: SIZEOF ( QUERY ( cd <* configuration_design | ( cd. name =
     'physical instance basis' ) AND ( NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION' IN TYPEOF ( cd.
     design ) ) OR ( cd. design\product_definition.
     frame_of_reference.name<> 'physical occurrence' ) ) ) ) =0;
 WR6: SIZEOF ( QUERY ( cd <* configuration_design | ( cd. name =
     'physical instance basis' ) AND ( NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_IDENTIFICATION' IN TYPEOF (
     cd. configuration ) ) ) ) ) =0;
END_RULE;

RULE restrict_draughting_title_for_drawing_sheet_revision FOR
    (drawing_sheet_revision);
WHERE
  WR1:  SIZEOF(QUERY(d <* drawing_sheet_revision |
                 SIZEOF(USEDIN(d, 'ELECTROTECHNICAL_DESIGN.'  +
                                  'DRAUGHTING_TITLE.' +
                                  'ITEMS')
                 ) > 1
        )) = 0;
END_RULE;

RULE restrict_effectivity_assignment_for_class_category_usage FOR
    (applied_effectivity_assignment,
     product_concept_feature_category_usage);
WHERE
 WR1: SIZEOF ( QUERY ( aea <* applied_effectivity_assignment | (
     ( SIZEOF ( QUERY ( i <* aea. items | (
     'ELECTROTECHNICAL_DESIGN.'+
     'PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE' IN TYPEOF ( i ) )
     ) ) >0 ) OR ( SIZEOF ( QUERY ( i <* aea. items | (
     'ELECTROTECHNICAL_DESIGN.'+
     'PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE' IN TYPEOF ( i ) )
     ) ) <> SIZEOF ( aea. items ) ) ) AND ( ( SIZEOF ( TYPEOF (
     aea. assigned_effectivity ) ) >1 ) OR ( aea.
     assigned_effectivity.id<> 'class usage' ) OR ( SIZEOF (
     QUERY ( cueca <* USEDIN ( aea ,
     'ELECTROTECHNICAL_DESIGN.'+'EFFECTIVITY_CONTEXT_ASSIGNMENT.'+
     'ASSIGNED_EFFECTIVITY_ASSIGNMENT' ) | 'ELECTROTECHNICAL_DESIGN.'+
     'CLASS_USAGE_EFFECTIVITY_CONTEXT_ASSIGNMENT' IN TYPEOF (
     cueca ) ) ) =0 ) ) ) ) =0;
END_RULE;

RULE restrict_effectivity_for_effectivity_relationship FOR
    (effectivity_relationship);
WHERE
 WR1: SIZEOF ( QUERY ( er <* effectivity_relationship | ( SIZEOF
     ( ['ELECTROTECHNICAL_DESIGN.'+ 'LOT_EFFECTIVITY' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'SERIAL_NUMBERED_EFFECTIVITY' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION_EFFECTIVITY']*
     TYPEOF ( er. relating_effectivity ) ) >0 ) OR ( SIZEOF (
     ['ELECTROTECHNICAL_DESIGN.'+ 'LOT_EFFECTIVITY' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'SERIAL_NUMBERED_EFFECTIVITY' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_DEFINITION_EFFECTIVITY']*
     TYPEOF ( er. related_effectivity ) ) >0 ) ) ) =0;
END_RULE;

RULE restrict_effectivity_usage FOR
    (configured_effectivity_assignment,
     effectivity);
WHERE
 WR1: SIZEOF ( QUERY ( e <* effectivity | ( SIZEOF (
     ['ELECTROTECHNICAL_DESIGN.'+ 'DATED_EFFECTIVITY' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'TIME_INTERVAL_BASED_EFFECTIVITY']*
     TYPEOF ( e ) ) =0 ) AND ( ( SIZEOF ( QUERY ( er <* USEDIN (
     e , 'ELECTROTECHNICAL_DESIGN.EFFECTIVITY_RELATIONSHIP.'
     +'RELATED_EFFECTIVITY'
     ) | er. name ='inheritance' ) ) =0 ) AND ( ( e.id =
     'configuration validity' ) AND ( SIZEOF ( QUERY ( cea <*
     USEDIN ( e ,
     'ELECTROTECHNICAL_DESIGN.EFFECTIVITY_ASSIGNMENT.ASSIGNED_EFFECTIVITY'
     ) | 'ELECTROTECHNICAL_DESIGN.'+
     'CONFIGURED_EFFECTIVITY_ASSIGNMENT' IN TYPEOF ( cea ) ) )
     =0 ) ) AND ( ( e.id = 'class usage' ) AND ( SIZEOF ( QUERY
     ( aea <* USEDIN ( e ,
     'ELECTROTECHNICAL_DESIGN.'+'EFFECTIVITY_ASSIGNMENT.'+
     'ASSIGNED_EFFECTIVITY' ) | ( 'ELECTROTECHNICAL_DESIGN.'+
     'APPLIED_EFFECTIVITY_ASSIGNMENT' IN TYPEOF ( aea ) ) AND (
     SIZEOF ( QUERY ( i <* aea. items | 'ELECTROTECHNICAL_DESIGN.'+
     'PRODUCT_CONCEPT_FEATURE_CATEGORY_USAGE' IN TYPEOF ( i ) )
     ) >0 ) ) ) =0 ) ) ) ) ) =0;
END_RULE;

RULE restrict_group_relationship_for_general_classification_hierarchy FOR
    (class,
     group_relationship);
WHERE
 WR1: SIZEOF ( QUERY ( gr <* group_relationship | ( gr. name =
     'class hierarchy' ) AND ( NOT ( 'ELECTROTECHNICAL_DESIGN.'+
     'CLASS' IN TYPEOF ( gr. related_group ) ) OR NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'CLASS' IN TYPEOF ( gr.
     relating_group ) ) ) ) ) =0;
END_RULE;

RULE restrict_group_relationship_for_specification_category FOR
    (group_relationship,
     product_concept_feature_category);
WHERE
 WR1: SIZEOF ( QUERY ( gr <* group_relationship | ( gr. name =
     'specification category hierarchy' ) AND ( NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_CONCEPT_FEATURE_CATEGORY' IN
     TYPEOF ( gr. related_group ) ) OR NOT (
     'ELECTROTECHNICAL_DESIGN.'+ 'PRODUCT_CONCEPT_FEATURE_CATEGORY' IN
     TYPEOF ( gr. relating_group ) ) ) ) ) =0;
END_RULE;

RULE restrict_identification_assignment_for_product FOR
    (product);
WHERE
  WR1:  SIZEOF(QUERY(p <* product |
                 SIZEOF(QUERY(i <* USEDIN(p,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                          i.role.name = 'id')
                 ) > 1 )
        ) = 0;
END_RULE;

RULE restrict_language_assignment_for_annotation_text_occurrence FOR
    (annotation_text_occurrence);
WHERE
  WR1:  SIZEOF(QUERY(a <* annotation_text_occurrence |
                 SIZEOF(USEDIN(a, 'ELECTROTECHNICAL_DESIGN.'  +
                                  'LANGUAGE_ASSIGNMENT.' +
                                  'ITEMS')
                 ) > 1
        )) = 0;
END_RULE;

RULE restrict_language_assignment_for_descriptive_representation_item FOR
    (descriptive_representation_item);
WHERE
  WR1:  SIZEOF(QUERY(d <* descriptive_representation_item |
                 SIZEOF(USEDIN(d, 'ELECTROTECHNICAL_DESIGN.'  +
                                  'LANGUAGE_ASSIGNMENT.' +
                                  'ITEMS')
                 ) > 1
        )) = 0;
END_RULE;

RULE restrict_language_assignment_for_representation FOR
    (representation);
WHERE
  WR1:  SIZEOF(QUERY(r <* representation |
                 SIZEOF(USEDIN(r, 'ELECTROTECHNICAL_DESIGN.'  +
                                  'LANGUAGE_ASSIGNMENT.' +
                                  'ITEMS')
                 ) > 1 )
        ) = 0;
END_RULE;

RULE restrict_product_category_for_product FOR
    (product);
WHERE
 WR1: SIZEOF ( QUERY ( p <* product | SIZEOF ( QUERY ( prpc <*
     USEDIN ( p ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_RELATED_PRODUCT_CATEGORY.'+
     'PRODUCTS' ) | prpc. name IN ['conceptual product' , 'document' ,
     'functionality' , 'part' , 'physically realized product',
     'alternative solution' , 'requirement' ,
     'technical system' , 'accesory' , 'software'] ) ) =0 ) )
     =0;
 WR2: SIZEOF ( QUERY ( p <* product | SIZEOF ( QUERY ( prpc <*
     USEDIN ( p ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_RELATED_PRODUCT_CATEGORY.'+
     'PRODUCTS' ) | prpc. name IN ['conceptual product' , 'document' ,
     'functionality' , 'part' , 'physically realized product',
     'alternative solution' , 'requirement' ,
     'technical system' ] ) ) >1 ) ) =0;
END_RULE;

RULE restrict_product_definition_substitute FOR
    (product_definition_substitute);
WHERE
 WR1: SIZEOF ( QUERY ( pds <* product_definition_substitute | (
     SIZEOF ( USEDIN ( pds ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_EFFECTIVITY_ASSIGNMENT.'+
     'ITEMS' ) ) =0 ) ) ) =0;
 WR2: SIZEOF ( QUERY ( pds <* product_definition_substitute |
     pds. substitute_definition.frame_of_reference. name<>
     'part occurrence' ) ) =0;
 WR3: SIZEOF ( QUERY ( pds <* product_definition_substitute | (
     ( 'ELECTROTECHNICAL_DESIGN.'+ 'ASSEMBLY_COMPONENT_USAGE' IN
     TYPEOF ( pds. context_relationship ) ) AND ( SIZEOF (
     USEDIN ( pds. context_relationship ,
     'ELECTROTECHNICAL_DESIGN.'+'PRODUCT_DEFINITION_OCCURRENCE_RELATIONSHIP.'+
     'OCCURRENCE_USAGE' ) ) =0 ) ) AND ( ( 'ELECTROTECHNICAL_DESIGN.'+
     'PRODUCT_DEFINITION_RELATIONSHIP' IN TYPEOF ( pds.
     context_relationship ) ) AND ( pds.
     context_relationship.related_product_definition.
     frame_of_reference.name<> 'part occurrence' ) ) ) ) =0;
END_RULE;

RULE restrict_properties_of_document_file FOR
    (document_file);
WHERE
 WR1: SIZEOF ( QUERY ( df <* document_file | SIZEOF ( QUERY ( pd
     <* USEDIN ( df ,
     'ELECTROTECHNICAL_DESIGN.'+'PROPERTY_DEFINITION.'+ 'DEFINITION' )
     | pd. name = 'document property' ) ) >1 ) ) =0;
 WR2: SIZEOF ( QUERY ( df <* document_file | SIZEOF ( QUERY ( rt
     <* df. representation_types | ( 'ELECTROTECHNICAL_DESIGN.'+
     'DOCUMENT_REPRESENTATION_TYPE' IN TYPEOF ( rt ) ) AND ( rt.
     name IN ['digital' , 'physical'] ) ) ) =0 ) ) =0;
END_RULE;

RULE restrict_property_value_format_for_general_property FOR
    (general_property);
WHERE
  WR1:  SIZEOF(QUERY(gp <* general_property |
                 SIZEOF(QUERY(pdr <*
                              USEDIN(gp,
                              'ELECTROTECHNICAL_DESIGN.' +
                              'PROPERTY_DEFINITION_REPRESENTATION.' +
                              'DEFINITION') |
                          pdr.used_representation.name
                          = 'property value format')
                     ) > 2 )
        ) = 0;
END_RULE;

RULE restrict_representation_for_document_content_property FOR
    (representation,
     representation_item);
WHERE
 WR1: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document content' ) AND ( ( SIZEOF ( r.items ) <1 ) OR (
     SIZEOF ( r.items ) >3 ) ) ) ) =0;
 WR2: SIZEOF ( QUERY ( ri <* representation_item | ( SIZEOF (
     QUERY ( r <* USEDIN ( ri ,
     'ELECTROTECHNICAL_DESIGN.REPRESENTATION.ITEMS' ) | r.name =
     'document content' ) ) >0 ) AND NOT ( ri. name IN [
     'detail level' , 'geometry type' , 'real world scale' ] ) )
     ) =0;
 WR3: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document content' ) AND ( SIZEOF ( QUERY ( i <* r.items |
     ( i.name = 'detail level' ) AND ( 'ELECTROTECHNICAL_DESIGN.'+
     'DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF ( i ) ) ) ) >1
     ) ) ) =0;
 WR4: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document content' ) AND ( SIZEOF ( QUERY ( i <* r.items |
     ( i.name = 'geometry type' ) AND ( 'ELECTROTECHNICAL_DESIGN.'+
     'DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF ( i ) ) ) ) >1
     ) ) ) =0;
 WR5: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document content' ) AND ( SIZEOF ( QUERY ( i <* r.items |
     ( i.name = 'real world scale' ) AND ( SIZEOF (
     ['ELECTROTECHNICAL_DESIGN.'+ 'MEASURE_REPRESENTATION_ITEM' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'VALUE_REPRESENTATION_ITEM']* TYPEOF
     ( i ) ) =1 ) ) ) >1 ) ) ) =0;
END_RULE;

RULE restrict_representation_for_document_creation_property FOR
    (representation,
     representation_item);
WHERE
 WR1: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document creation' ) AND ( ( SIZEOF ( r.items ) <2 ) OR (
     SIZEOF ( r.items ) >3 ) ) ) ) =0;
 WR2: SIZEOF ( QUERY ( ri <* representation_item | ( SIZEOF (
     QUERY ( r <* USEDIN ( ri ,
     'ELECTROTECHNICAL_DESIGN.REPRESENTATION.ITEMS' ) | r.name =
     'document creation' ) ) >0 ) AND NOT ( ri. name IN [
     'creating interface' , 'creating system' ,
     'operating system' ] ) ) ) =0;
 WR3: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document creation' ) AND ( SIZEOF ( QUERY ( i <* r.items |
     ( i.name = 'creating interface' ) AND (
     'ELECTROTECHNICAL_DESIGN.'+ 'DESCRIPTIVE_REPRESENTATION_ITEM' IN
     TYPEOF ( i ) ) ) ) >1 ) ) ) =0;
 WR4: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document creation' ) AND ( SIZEOF ( QUERY ( i <* r.items |
     ( i.name = 'creating system' ) AND ( 'ELECTROTECHNICAL_DESIGN.'+
     'DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF ( i ) ) ) ) <>1
     ) ) ) =0;
 WR5: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document creation' ) AND ( SIZEOF ( QUERY ( i <* r.items |
     ( i.name = 'operating system' ) AND ( 'ELECTROTECHNICAL_DESIGN.'+
     'DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF ( i ) ) ) ) >1
     ) ) ) =0;
END_RULE;

RULE restrict_representation_for_document_format_property FOR
    (representation,
     representation_item);
WHERE
 WR1: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document format' ) AND ( ( SIZEOF ( r.items ) <1 ) OR (
     SIZEOF ( r.items ) >2 ) ) ) ) =0;
 WR2: SIZEOF ( QUERY ( ri <* representation_item | ( SIZEOF (
     QUERY ( r <* USEDIN ( ri ,
     'ELECTROTECHNICAL_DESIGN.REPRESENTATION.ITEMS' ) | r.name =
     'document format' ) ) >0 ) AND NOT ( ri. name IN [
     'character code' , 'data format' ] ) ) ) =0;
 WR3: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document format' ) AND ( SIZEOF ( QUERY ( i <* r.items | (
     i.name = 'character code' ) AND ( 'ELECTROTECHNICAL_DESIGN.'+
     'DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF ( i ) ) ) ) >1
     ) ) ) =0;
 WR4: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document format' ) AND ( SIZEOF ( QUERY ( i <* r.items | (
     i.name = 'data format' ) AND ( 'ELECTROTECHNICAL_DESIGN.'+
     'DESCRIPTIVE_REPRESENTATION_ITEM' IN TYPEOF ( i ) ) ) ) >1
     ) ) ) =0;
END_RULE;

RULE restrict_representation_for_document_properties FOR
    (property_definition,
     representation,
     representation_context);
WHERE
 WR1: SIZEOF ( QUERY ( pd <* property_definition | ( pd. name =
     'document property' ) AND ( SIZEOF ( QUERY ( pdr <* USEDIN
     ( pd ,     'ELECTROTECHNICAL_DESIGN.'
      +'PROPERTY_DEFINITION_REPRESENTATION.'+'DEFINITION'
     ) | NOT ( pdr. used_representation.name IN [
     'document content' , 'document creation' ,
     'document format' , 'document size' ] ) ) ) >0 ) ) ) =0;
 WR2: SIZEOF ( QUERY ( r <* representation | ( r.name IN [
     'document content' , 'document creation' ,
     'document format' , 'document size' ] ) AND ( SIZEOF (
     QUERY ( pdr <* USEDIN ( r ,
     'ELECTROTECHNICAL_DESIGN.'+
     'PROPERTY_DEFINITION_REPRESENTATION.'+'USED_REPRESENTATION'
     ) | ( 'ELECTROTECHNICAL_DESIGN.'+ 'PROPERTY_DEFINITION' IN TYPEOF
     ( pdr. definition ) ) AND ( pdr. definition.name =
     'document property' ) ) ) =0 ) ) ) =0;
 WR3: SIZEOF ( QUERY ( r <* representation | ( r.name IN [
     'document content' , 'document creation' ,
     'document format' , 'document size' ] ) AND (
     r.context_of_items. context_type<> 'document parameters' )
     ) ) =0;
 WR4: SIZEOF ( QUERY ( rc <* representation_context | ( rc.
     context_type = 'document parameters' ) AND ( SIZEOF ( QUERY
     ( r <* USEDIN ( rc ,
     'ELECTROTECHNICAL_DESIGN.REPRESENTATION.CONTEXT_OF_ITEMS' ) | NOT
     ( r.name IN [ 'document content' , 'document creation' ,
     'document format' , 'document size' ] ) ) ) >0 ) ) ) =0;
END_RULE;

RULE restrict_representation_for_document_size_property FOR
    (representation,
     representation_item);
WHERE
 WR1: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document size' ) AND ( ( SIZEOF ( r.items ) <1 ) OR (
     SIZEOF ( r.items ) >2 ) ) ) ) =0;
 WR2: SIZEOF ( QUERY ( ri <* representation_item | ( SIZEOF (
     QUERY ( r <* USEDIN ( ri ,
     'ELECTROTECHNICAL_DESIGN.REPRESENTATION.ITEMS' ) | r.name =
     'document size' ) ) >0 ) AND NOT ( ri. name IN [
     'file size' , 'page count' ] ) ) ) =0;
 WR3: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document size' ) AND ( SIZEOF ( QUERY ( i <* r.items | (
     i.name = 'file size' ) AND ( SIZEOF (
     ['ELECTROTECHNICAL_DESIGN.'+ 'MEASURE_REPRESENTATION_ITEM' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'VALUE_RANGE' ,
     'ELECTROTECHNICAL_DESIGN.'+
     'VALUE_REPRESENTATION_ITEM']* TYPEOF ( i ) ) =1 ) ) ) >1 )
     ) ) =0;
 WR4: SIZEOF ( QUERY ( r <* representation | ( r.name =
     'document size' ) AND ( SIZEOF ( QUERY ( i <* r.items | (
     i.name = 'page count' ) AND ( SIZEOF (
     ['ELECTROTECHNICAL_DESIGN.'+ 'MEASURE_REPRESENTATION_ITEM' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'VALUE_RANGE' ,
     'ELECTROTECHNICAL_DESIGN.'+
     'VALUE_REPRESENTATION_ITEM']* TYPEOF ( i ) ) =1 ) ) ) >1 )
     ) ) =0;
END_RULE;

RULE restrict_uncertainty_in_global_uncertainty_assigned_context FOR
    (global_uncertainty_assigned_context);
WHERE
  WR1: SIZEOF(QUERY(guac <* global_uncertainty_assigned_context |
                NOT(SIZEOF(guac.uncertainty) = 2)
       )) = 0;
END_RULE;

RULE restrict_version_assignment_for_action_directive FOR
    (action_directive);
WHERE
  WR1:  SIZEOF(QUERY(a <* action_directive |
                 SIZEOF(QUERY(i <* USEDIN(a,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                          i.role.name = 'version')
                 ) > 1 )
        ) = 0;
END_RULE;

RULE restrict_version_assignment_for_applied_identification_assignment FOR
    (applied_identification_assignment);
WHERE
 WR1: SIZEOF ( QUERY ( ent <* applied_identification_assignment
     | SIZEOF ( QUERY ( ia <* USEDIN ( ent ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_IDENTIFICATION_ASSIGNMENT.'+
     'ITEMS' ) | ia. role.name ='version' ) ) >1 ) ) =0;
END_RULE;

RULE restrict_version_assignment_for_class FOR
    (class);
WHERE
 WR1: SIZEOF ( QUERY ( ent <* class | SIZEOF ( QUERY ( ia <*
     USEDIN ( ent ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_IDENTIFICATION_ASSIGNMENT.'+
     'ITEMS' ) | ia. role.name ='version' ) ) >1 ) ) =0;
END_RULE;

RULE restrict_version_assignment_for_configuration_item FOR
    (configuration_item);
WHERE
  WR1:  SIZEOF(QUERY(c <* configuration_item |
                 SIZEOF(QUERY(i <* USEDIN(c,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                          i.role.name = 'version')
                 ) > 1 )
        ) = 0;
END_RULE;

RULE restrict_version_assignment_for_document_file FOR
    (document_file);
WHERE
 WR1: SIZEOF ( QUERY ( ent <* document_file | SIZEOF ( QUERY (
     ia <* USEDIN ( ent ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_IDENTIFICATION_ASSIGNMENT.'+
     'ITEMS' ) | ia. role.name ='version' ) ) >1 ) ) =0;
END_RULE;

RULE restrict_version_assignment_for_effectivity FOR
    (effectivity);
WHERE
 WR1: SIZEOF ( QUERY ( ent <* effectivity | SIZEOF ( QUERY ( ia
     <* USEDIN ( ent ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_IDENTIFICATION_ASSIGNMENT.'+
     'ITEMS' ) | ia. role.name ='version' ) ) >1 ) ) =0;
END_RULE;

RULE restrict_version_assignment_for_general_property FOR
    (general_property);
WHERE
  WR1:  SIZEOF(QUERY(g <* general_property |
                 SIZEOF(QUERY(i <* USEDIN(g,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                          i.role.name = 'version')
                 ) > 1 )
        ) = 0;
END_RULE;

RULE restrict_version_assignment_for_path FOR
    (path);
WHERE
  WR1:  SIZEOF(QUERY(p <* path |
                 SIZEOF(QUERY(i <* USEDIN(p,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                          i.role.name = 'version')
                 ) > 1 )
        ) = 0;
END_RULE;

RULE restrict_version_assignment_for_product_concept FOR
    (product_concept);
WHERE
 WR1: SIZEOF ( QUERY ( ent <* product_concept | SIZEOF ( QUERY (
     ia <* USEDIN ( ent ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_IDENTIFICATION_ASSIGNMENT.'+
     'ITEMS' ) | ia. role.name ='version' ) ) >1 ) ) =0;
END_RULE;
 
RULE restrict_version_assignment_for_product_concept_feature FOR
    (product_concept_feature);
WHERE
  WR1:  SIZEOF(QUERY(p <* product_concept_feature |
                 SIZEOF(QUERY(i <* USEDIN(p,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                          i.role.name = 'version')
                 ) > 1 )
        ) = 0;
END_RULE;

RULE retention_requires_retention_assignment FOR
    (retention);
WHERE
 WR1: SIZEOF ( QUERY ( r <* retention | SIZEOF ( QUERY ( aa <*
     USEDIN ( r , 'ELECTROTECHNICAL_DESIGN.'+'ACTION_ASSIGNMENT.'+
     'ASSIGNED_ACTION' ) | ( 'ELECTROTECHNICAL_DESIGN.'+
     'APPLIED_ACTION_ASSIGNMENT' IN TYPEOF ( aa ) ) AND ( aa.
     role.name ='retention' ) ) ) =0 ) ) =0;
END_RULE;

RULE security_classification_requires_security_classification_assignment FOR
    (security_classification);
WHERE
 WR1: SIZEOF ( QUERY ( sc <* security_classification | SIZEOF (
     USEDIN ( sc ,
     'ELECTROTECHNICAL_DESIGN.'+'SECURITY_CLASSIFICATION_ASSIGNMENT.'+
     'ASSIGNED_SECURITY_CLASSIFICATION' ) ) =0 ) ) =0;
END_RULE;

RULE selected_instance_usage_requires_representation FOR
    (assembly_component_usage,
     representation);
WHERE
 WR1: SIZEOF ( QUERY ( acr <* assembly_component_usage | ( acr.
     name = 'selected instance usage' ) AND ( SIZEOF ( QUERY (
     pd <* USEDIN ( acr ,
     'ELECTROTECHNICAL_DESIGN.'+'PROPERTY_DEFINITION.'+ 'DEFINITION' )
     | ( pd. name = 'occurrence selection' ) AND ( SIZEOF (
     QUERY ( pdr <* USEDIN ( pd ,
     'ELECTROTECHNICAL_DESIGN.'+'PROPERTY_DEFINITION_REPRESENTATION.'+
     'DEFINITION' ) | ( pdr. used_representation.name =
     'selection criteria' ) AND ( SIZEOF ( pdr.
     used_representation.items ) =2 ) AND ( SIZEOF ( QUERY ( i
     <* pdr. used_representation.items | ( SIZEOF (
     ['ELECTROTECHNICAL_DESIGN.'+ 'MEASURE_REPRESENTATION_ITEM' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'VALUE_RANGE']* TYPEOF ( i ) ) =1 )
     AND ( i.name = 'selection quantity' ) ) ) =1 ) AND ( SIZEOF
     ( QUERY ( i <* pdr. used_representation.items | (
     'ELECTROTECHNICAL_DESIGN.'+ 'DESCRIPTIVE_REPRESENTATION_ITEM' IN
     TYPEOF ( i ) ) AND ( i.name = 'selection control' ) ) ) =1
     ) ) ) >0 ) ) ) =0 ) ) ) =0;
END_RULE;

RULE shape_aspect_relationship_constraint FOR
    (shape_aspect_relationship);
WHERE
  WR1:  SIZEOF(QUERY(s <* shape_aspect_relationship |
                 NOT(shape_aspect_relationship_correlation(s)) )
        ) = 0;
END_RULE;

RULE shape_aspect_subtype_exclusiveness FOR
    (shape_aspect);
WHERE
  WR1: SIZEOF(QUERY(s <* shape_aspect |
         SIZEOF(TYPEOF(s) *
           ['ELECTROTECHNICAL_DESIGN.CONNECTIVITY_DEFINITION',
            'ELECTROTECHNICAL_DESIGN.EQUIPMENT_MARKING',
            'ELECTROTECHNICAL_DESIGN.INSTALLATION_LOCATION',
            'ELECTROTECHNICAL_DESIGN.INSTALLATION_NODE',
            'ELECTROTECHNICAL_DESIGN.INSTALLATION_ROUTE',
            'ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION',
            'ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION_END',
            'ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION_INTERFACE',
            'ELECTROTECHNICAL_DESIGN.INSTALLATION_SEGMENT',
            'ELECTROTECHNICAL_DESIGN.INTERFACE',
            'ELECTROTECHNICAL_DESIGN.TERMINAL']
            ) > 1 )
       ) = 0;
END_RULE;

RULE sheets_belong_to_one_drawing FOR
    (drawing_sheet_revision);
WHERE
 WR1: SIZEOF ( QUERY ( dsr <* drawing_sheet_revision | SIZEOF (
     QUERY ( dsru <* USEDIN ( dsr ,
     'ELECTROTECHNICAL_DESIGN.AREA_IN_SET.AREA' ) | (
     'ELECTROTECHNICAL_DESIGN.'+ 'DRAWING_SHEET_REVISION_USAGE' IN
     TYPEOF ( dsru ) ) ) ) <>1 ) ) =0;
END_RULE;

RULE subtype_mandatory_address FOR
    (address);
WHERE
 WR1: SIZEOF ( QUERY ( a <* address | NOT ( type_check_function
     ( a , ['ELECTROTECHNICAL_DESIGN.'+ 'ORGANIZATIONAL_ADDRESS' ,
     'ELECTROTECHNICAL_DESIGN.'+ 'PERSONAL_ADDRESS'] , 0 ) ) ) ) =0;
END_RULE;

RULE subtype_mandatory_annotation_occurrence FOR
    (annotation_occurrence);
WHERE
  WR1: SIZEOF(QUERY(ao <* annotation_occurrence |
         NOT('ELECTROTECHNICAL_DESIGN.DRAUGHTING_ANNOTATION_OCCURRENCE'
             IN TYPEOF(ao))
       )) = 0;
END_RULE;

RULE subtype_mandatory_bounded_curve FOR
    (bounded_curve);
WHERE
  WR1: SIZEOF(QUERY(c <* bounded_curve |
         NOT(SIZEOF(TYPEOF(c) *
               ['ELECTROTECHNICAL_DESIGN.B_SPLINE_CURVE',
                'ELECTROTECHNICAL_DESIGN.COMPOSITE_CURVE',
                'ELECTROTECHNICAL_DESIGN.POLYLINE',
                'ELECTROTECHNICAL_DESIGN.TRIMMED_CURVE']) = 1
       ))) = 0;
END_RULE;

RULE subtype_mandatory_camera_image FOR
    (camera_image);
WHERE
  WR1: SIZEOF(QUERY(ci <* camera_image |
                NOT('ELECTROTECHNICAL_DESIGN.CAMERA_IMAGE_2D_WITH_SCALE'
                    IN TYPEOF(ci))
       )) = 0;
END_RULE;

RULE subtype_mandatory_camera_model FOR
    (camera_model);
WHERE
  WR1: SIZEOF(QUERY(cm <* camera_model |
                NOT('ELECTROTECHNICAL_DESIGN.CAMERA_MODEL_D2'
                    IN TYPEOF(cm))
       )) = 0;
END_RULE;

RULE subtype_mandatory_curve FOR
    (curve);
WHERE
  WR1: SIZEOF(QUERY(c <* curve |
         NOT(SIZEOF(TYPEOF(c) *
               ['ELECTROTECHNICAL_DESIGN.BOUNDED_CURVE',
                'ELECTROTECHNICAL_DESIGN.CONIC',
                'ELECTROTECHNICAL_DESIGN.LINE']) = 1
       ))) = 0;
END_RULE;

RULE subtype_mandatory_date FOR
    (date);
WHERE
  WR1:  SIZEOF(QUERY(d <* date |
                 NOT('ELECTROTECHNICAL_DESIGN.CALENDAR_DATE'
                     IN TYPEOF(d)) )
        ) = 0;
END_RULE;

RULE subtype_mandatory_draughting_callout FOR
    (draughting_callout);
WHERE
  WR1:  SIZEOF(QUERY(dc <* draughting_callout |
                 NOT('ELECTROTECHNICAL_DESIGN.DRAUGHTING_ELEMENTS'
                     IN TYPEOF(dc)) )
        ) = 0;
END_RULE;

RULE subtype_mandatory_pre_defined_curve_font FOR
    (pre_defined_curve_font);
WHERE
  WR1: SIZEOF(QUERY(pdcf <* pre_defined_curve_font |
         NOT('ELECTROTECHNICAL_DESIGN.DRAUGHTING_PRE_DEFINED_CURVE_FONT'
             IN TYPEOF(pdcf))
       )) = 0;
END_RULE;

RULE subtype_mandatory_pre_defined_symbol FOR
    (pre_defined_symbol);
WHERE
  WR1: SIZEOF(QUERY(pds <* pre_defined_symbol |
         NOT(SIZEOF(TYPEOF(pds) *
                     ['ELECTROTECHNICAL_DESIGN.' +
                      'PRE_DEFINED_GEOMETRICAL_TOLERANCE_SYMBOL',
                      'ELECTROTECHNICAL_DESIGN.' +
                      'PRE_DEFINED_DIMENSION_SYMBOL',
                      'ELECTROTECHNICAL_DESIGN.' +
                      'PRE_DEFINED_POINT_MARKER_SYMBOL',
                      'ELECTROTECHNICAL_DESIGN.' +
                      'PRE_DEFINED_TERMINATOR_SYMBOL']) = 1)
       )) = 0;
END_RULE;

RULE text_font_usage FOR
    (externally_defined_text_font,
     pre_defined_text_font);
WHERE
 WR1: SIZEOF ( QUERY ( pdtf <* pre_defined_text_font | SIZEOF (
     USEDIN ( pdtf , 'ELECTROTECHNICAL_DESIGN.TEXT_LITERAL.FONT' ) )
     =0 ) ) =0;
 WR2: SIZEOF ( QUERY ( edtf <* externally_defined_text_font |
     SIZEOF ( USEDIN ( edtf ,
     'ELECTROTECHNICAL_DESIGN.TEXT_LITERAL.FONT' ) ) =0 ) ) =0;
END_RULE;

RULE versioned_action_request_requires_date_and_person_or_organization FOR
    (versioned_action_request);
WHERE
 WR1: SIZEOF ( QUERY ( va <* versioned_action_request | ( SIZEOF
     ( QUERY ( adapaoa <* USEDIN ( va ,
     'ELECTROTECHNICAL_DESIGN.'+
     'APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT.'+
     'ITEMS' ) | adapaoa. role.name ='requestor ' ) ) + SIZEOF (
     QUERY ( adaoa <* USEDIN ( va ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_ORGANIZATION_ASSIGNMENT.'+
     'ITEMS' ) | adaoa. role.name ='requestor ' ) ) ) =0 ) ) =0;
 WR2: SIZEOF ( QUERY ( va <* versioned_action_request | ( SIZEOF
     ( QUERY ( adapaoa <* USEDIN ( va ,
     'ELECTROTECHNICAL_DESIGN.'+
     'APPLIED_PERSON_AND_ORGANIZATION_ASSIGNMENT.'+
     'ITEMS' ) | adapaoa. role.name =
     'notified person or organization' ) ) + SIZEOF ( QUERY (
     adaoa <* USEDIN ( va ,
     'ELECTROTECHNICAL_DESIGN.'+'APPLIED_ORGANIZATION_ASSIGNMENT.'+
     'ITEMS' ) | adaoa. role.name =
     'notified person or organization' ) ) ) =0 ) ) =0;
END_RULE;

RULE versioned_action_request_requires_status FOR
    (action_request_status,
     versioned_action_request);
WHERE
  WR1:  SIZEOF(QUERY(ar <* versioned_action_request |
                 (NOT(SIZEOF(QUERY(ars <* action_request_status |
                               (ar :=: ars.assigned_request) )
                      ) = 1 )) )
        ) = 0;
END_RULE;

FUNCTION acyclic_shape_aspect_relationship
    (relation          : shape_aspect_relationship;
     relatives         : SET [1:?] OF shape_aspect;
     specific_relation : STRING) : LOGICAL;
LOCAL
  x : SET OF shape_aspect_relationship;
END_LOCAL;

    IF relation.relating_shape_aspect IN relatives THEN 
      RETURN (FALSE);
    END_IF;
    x := QUERY (sa <* bag_to_set 
               (USEDIN (relation.relating_shape_aspect,
               'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' +
               'SHAPE_ASPECT_RELATIONSHIP.' +
               'RELATED_SHAPE_ASPECT')) |
                specific_relation IN TYPEOF (sa));
    REPEAT i := 1 TO HIINDEX(x);
      IF NOT acyclic_shape_aspect_relationship
        (x[i],
         relatives + relation.relating_shape_aspect,
         specific_relation) THEN
        RETURN(FALSE);
      END_IF;
    END_REPEAT;
    RETURN(TRUE);
  END_FUNCTION;

FUNCTION applied_classification_assignment_correlation
    (aca : applied_classification_assignment) : BOOLEAN;
LOCAL
  role_name : STRING;
END_LOCAL;

  role_name := aca.role.name;
  CASE role_name OF
    'class system membership':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.CLASS_SYSTEM'
              IN TYPEOF(aca.assigned_class))
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aca.items |
                   SIZEOF(TYPEOF(i) * 
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'APPLIED_IDENTIFICATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'APPROVAL_STATUS',
                             'ELECTROTECHNICAL_DESIGN.CLASS',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'COLOUR_REPRESENTATION_ITEM',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'EQUIPMENT_MARKING',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'ITEM_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'SECURITY_CLASSIFICATION_LEVEL']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'definitional', 'non definitional', '':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.CLASS'
              IN TYPEOF(aca.assigned_class))
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aca.items |
                   SIZEOF(TYPEOF(i) * 
                          ['ELECTROTECHNICAL_DESIGN.' +
                           'ASSEMBLY_COMPONENT_USAGE',
                           'ELECTROTECHNICAL_DESIGN.CAMERA_MODEL_D2',
                           'ELECTROTECHNICAL_DESIGN.CONFIGURATION_ITEM',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'CONNECTIVITY_DEFINITION',
                           'ELECTROTECHNICAL_DESIGN.DOCUMENT',
                           'ELECTROTECHNICAL_DESIGN.DOCUMENT_FILE',
                           'ELECTROTECHNICAL_DESIGN.DRAWING_REVISION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'DRAWING_SHEET_REVISION',
                           'ELECTROTECHNICAL_DESIGN.EQUIPMENT_MARKING',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'INSTALLATION_LOCATION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'INSTALLATION_SECTION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'INSTALLATION_SECTION_INTERFACE',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'ITEM_DESIGNATION_ASSIGNMENT',
                           'ELECTROTECHNICAL_DESIGN.PRODUCT',
                           'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'PRODUCT_DEFINITION_FORMATION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'PRODUCT_DEFINITION_RELATIONSHIP',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'SECURITY_CLASSIFICATION',
                           'ELECTROTECHNICAL_DESIGN.SIGNAL',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'SYMBOL_REPRESENTATION_MAP',
                           'ELECTROTECHNICAL_DESIGN.TERMINAL']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'instance requirement':
      BEGIN
       IF NOT(aca.assigned_class.name
              = 'product component with required instances')
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(aca.assigned_class) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'CLASS',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'CLASS_SYSTEM',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'CONNECTING_LINE_GROUP',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PAGE_CONNECTOR_GROUP',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PAGE_CONNECTOR_PRESENTATION_GROUP',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PAGE_CONNECTOR_REFERENCE_GROUP',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRODUCT_CONCEPT_FEATURE_CATEGORY']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'system composition':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.CLASS_SYSTEM'
              IN TYPEOF(aca.assigned_class))
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aca.items |
                   NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aca.items |
                   NOT(i.frame_of_reference.name = 'system definition') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION applied_document_reference_correlation
    (adr : applied_document_reference) : BOOLEAN;
LOCAL
  role_name : STRING;
END_LOCAL;

  role_name := adr.role.name;
  CASE role_name OF
    'documentation',
    'verification':
      BEGIN
       IF SIZEOF(QUERY(i <* adr.items |
                   NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* adr.items |
                   ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                    IN TYPEOF(i))
                   AND
                   NOT(i.frame_of_reference.name
                       = 'requirement definition') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'referenced standard':
       IF SIZEOF(QUERY(i <* adr.items |
                   NOT('ELECTROTECHNICAL_DESIGN.PLANAR_BOX'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION applied_document_usage_constraint_assignment_correlation
    (aduca : applied_document_usage_constraint_assignment) : BOOLEAN;
LOCAL
  role_name : STRING;
END_LOCAL;

  role_name := aduca.role.name;
  CASE role_name OF
    'documentation',
    'verification':
      BEGIN
       IF SIZEOF(QUERY(i <* aduca.items |
                   NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aduca.items |
                   ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                    IN TYPEOF(i))
                   AND
                   NOT(i.frame_of_reference.name
                       = 'requirement definition') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION applied_group_assignment_correlation
    (aga : applied_group_assignment) : BOOLEAN;
LOCAL
  role_name : STRING;
END_LOCAL;

  role_name := aga.role.name;
  CASE role_name OF
    'specification category member':
      BEGIN
       IF SIZEOF(QUERY(i <* aga.items |
                   NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_CONCEPT_FEATURE'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aga.items |
                   'ELECTROTECHNICAL_DESIGN.CONDITIONAL_CONCEPT_FEATURE'
                   IN TYPEOF(i) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_CONCEPT_FEATURE_CATEGORY'
              IN TYPEOF(aga.assigned_group))
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION applied_identification_assignment_correlation
    (aia : applied_identification_assignment) : BOOLEAN;
LOCAL
  role_name : STRING;
END_LOCAL;

  role_name := aia.role.name;
  CASE role_name OF
    'alias':
      BEGIN
       IF SIZEOF(QUERY(i <* aia.items |
                   SIZEOF(TYPEOF(i) * 
                          ['ELECTROTECHNICAL_DESIGN.APPROVAL_STATUS',
                           'ELECTROTECHNICAL_DESIGN.CLASS_SYSTEM',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'COLOUR_REPRESENTATION_ITEM',
                           'ELECTROTECHNICAL_DESIGN.CONFIGURATION_ITEM',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'CONNECTIVITY_DEFINITION',
                           'ELECTROTECHNICAL_DESIGN.DOCUMENT_FILE',
                           'ELECTROTECHNICAL_DESIGN.GENERAL_PROPERTY',
                           'ELECTROTECHNICAL_DESIGN.INSTALLATION_NODE',
                           'ELECTROTECHNICAL_DESIGN.INSTALLATION_ROUTE',
                           'ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'INSTALLATION_SECTION_INTERFACE',
                           'ELECTROTECHNICAL_DESIGN.NOTIFICATION',
                           'ELECTROTECHNICAL_DESIGN.ORGANIZATION',
                           'ELECTROTECHNICAL_DESIGN.PATH',
                           'ELECTROTECHNICAL_DESIGN.PROCESS_VARIABLE',
                           'ELECTROTECHNICAL_DESIGN.PRODUCT',
                           'ELECTROTECHNICAL_DESIGN.PRODUCT_CLASS',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'PRODUCT_CONCEPT_FEATURE',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'PRODUCT_CONCEPT_FEATURE_CATEGORY',
                           'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION',
                           'ELECTROTECHNICAL_DESIGN.PROPERTY_DEFINITION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'SECURITY_CLASSIFICATION_LEVEL',
                           'ELECTROTECHNICAL_DESIGN.TERMINAL',
                           'ELECTROTECHNICAL_DESIGN.VERTEX']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* USEDIN(aia,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                   i.role.name = 'version')
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* USEDIN(aia,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_ORGANIZATION_ASSIGNMENT.' +
                                   'ITEMS') |
                   i.role.name = 'alias scope')
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
      END;

    'id':
      BEGIN
       IF SIZEOF(QUERY(i <* aia.items |
                   NOT('ELECTROTECHNICAL_DESIGN.PRODUCT'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aia.items |
                   ('ELECTROTECHNICAL_DESIGN.PRODUCT'
                    IN TYPEOF(i))
                   AND
                   NOT(SIZEOF(QUERY(cat <*
                                    USEDIN(i,
                                    'ELECTROTECHNICAL_DESIGN.' +
                                    'PRODUCT_RELATED_PRODUCT_CATEGORY.' +
                                    'PRODUCTS') |
                                cat.name IN ['accessory', 'other',
                                             'part', 'software'] )
                       ) = 1 ) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'inventory number':
      BEGIN
       IF SIZEOF(QUERY(i <* aia.items |
                   NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aia.items |
                   ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                    IN TYPEOF(i))
                   AND
                   NOT(i\product_definition.frame_of_reference.name
                       = 'physical instance') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'version':
      BEGIN
       IF SIZEOF(QUERY(i <* aia.items |
                   SIZEOF(TYPEOF(i) *
                          ['ELECTROTECHNICAL_DESIGN.ACTION',
                           'ELECTROTECHNICAL_DESIGN.ACTION_DIRECTIVE',
                           'ELECTROTECHNICAL_DESIGN.CLASS',
                           'ELECTROTECHNICAL_DESIGN.CONFIGURATION_ITEM',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'CONNECTIVITY_DEFINITION',
                           'ELECTROTECHNICAL_DESIGN.DOCUMENT_FILE',
                           'ELECTROTECHNICAL_DESIGN.EFFECTIVITY',
                           'ELECTROTECHNICAL_DESIGN.GENERAL_PROPERTY',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'IDENTIFICATION_ASSIGNMENT',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'INSTALLATION_LOCATION',
                           'ELECTROTECHNICAL_DESIGN.INSTALLATION_ROUTE',
                           'ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'INSTALLATION_SECTION_INTERFACE',
                           'ELECTROTECHNICAL_DESIGN.NOTIFICATION',
                           'ELECTROTECHNICAL_DESIGN.PATH',
                           'ELECTROTECHNICAL_DESIGN.PRODUCT_CLASS',
                           'ELECTROTECHNICAL_DESIGN.' +
                           'PRODUCT_CONCEPT_FEATURE',
                           'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION',
                           'ELECTROTECHNICAL_DESIGN.REPRESENTATION',
                           'ELECTROTECHNICAL_DESIGN.SIGNAL']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aia.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'LOT_EFFECTIVITY',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'SERIAL_NUMBERED_EFFECTIVITY']
                   ) > 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aia.items |
                   ('ELECTROTECHNICAL_DESIGN.IDENTIFICATION_ASSIGNMENT'
                    IN TYPEOF(i))
                   AND
                   (SIZEOF(TYPEOF(i) *
                             ['ELECTROTECHNICAL_DESIGN.' +
                              'APPLIED_IDENTIFICATION_ASSIGNMENT',
                              'ELECTROTECHNICAL_DESIGN.' +
                              'ITEM_DESIGNATION_ASSIGNMENT']
                    ) = 0 ) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aia.items |
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'APPLIED_IDENTIFICATION_ASSIGNMENT'
                    IN TYPEOF(i))
                   AND
                   NOT(i.role.name = 'alias') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aia.items |
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'ITEM_DESIGNATION_ASSIGNMENT'
                    IN TYPEOF(i))
                   AND
                   NOT(i.role.description = 'alias') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION applied_organization_assignment_correlation
    (aoa : applied_organization_assignment) : BOOLEAN;
LOCAL
  role_name : STRING;
END_LOCAL;

  role_name:= aoa.role.name;
  CASE role_name OF
    'alias scope':
       IF SIZEOF(QUERY(i <* aoa.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'APPLIED_IDENTIFICATION_ASSIGNMENT'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;

    'class supplier':
       IF SIZEOF(QUERY(i <* aoa.items |
                   NOT('ELECTROTECHNICAL_DESIGN.EXTERNALLY_DEFINED_CLASS'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;

    'concerned organization',
    'supplying organization':
      BEGIN
       IF SIZEOF(QUERY(i <* aoa.items |
                   NOT('ELECTROTECHNICAL_DESIGN.ACTION'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aoa.items |
                   'ELECTROTECHNICAL_DESIGN.RETENTION'
                   IN TYPEOF(i) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'item designation scope':
       IF SIZEOF(QUERY(i <* aoa.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'ITEM_DESIGNATION_ASSIGNMENT'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;

    'notified person or organization':
       IF SIZEOF(QUERY(i <* aoa.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'VERSIONED_ACTION_REQUEST'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;

    'organization in contract':
       IF SIZEOF(QUERY(i <* aoa.items |
                   NOT('ELECTROTECHNICAL_DESIGN.CONTRACT'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;

    'requestor':
      BEGIN
       IF SIZEOF(QUERY(i <* aoa.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'ACTION',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'VERSIONED_ACTION_REQUEST']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aoa.items |
                   'ELECTROTECHNICAL_DESIGN.RETENTION'
                   IN TYPEOF(i) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(da <* USEDIN(aoa,
                                    'ELECTROTECHNICAL_DESIGN.' +
                                    'APPLIED_DATE_ASSIGNMENT.' +
                                    'ITEMS') |
                   da.role.name = 'actual') )
          +
          SIZEOF(QUERY(dta <* USEDIN(aoa,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'APPLIED_DATE_AND_TIME_ASSIGNMENT.' +
                                'ITEMS') |
                   dta.role.name = 'actual') )
          = 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'signing for contract':
      BEGIN
       IF SIZEOF(QUERY(i <* aoa.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'APPLIED_ORGANIZATION_ASSIGNMENT'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* aoa.items |
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'APPLIED_ORGANIZATION_ASSIGNMENT'
                    IN TYPEOF(i))
                   AND
                   NOT(i.role.name = 'organization in contract') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'validity context':
       IF SIZEOF(QUERY(i <* aoa.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'ACTION_PROPERTY',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'PROPERTY_DEFINITION',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'REPRESENTATION_RELATIONSHIP']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION applied_person_and_organization_assignment_correlation
    (apoa : applied_person_and_organization_assignment) : BOOLEAN;
LOCAL
  role_name : STRING;
END_LOCAL;

  role_name:= apoa.role.name;
  CASE role_name OF
    'notified person or organization':
       IF SIZEOF(QUERY(i <* apoa.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'VERSIONED_ACTION_REQUEST'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;

    'requestor':
      BEGIN
       IF SIZEOF(QUERY(i <* apoa.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'ACTION',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'VERSIONED_ACTION_REQUEST']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* apoa.items |
                   'ELECTROTECHNICAL_DESIGN.RETENTION'
                   IN TYPEOF(i) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(da <* USEDIN(apoa,
                                    'ELECTROTECHNICAL_DESIGN.' +
                                    'APPLIED_DATE_ASSIGNMENT.' +
                                    'ITEMS') |
                   da.role.name = 'actual') )
          +
          SIZEOF(QUERY(dta <* USEDIN(apoa,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'APPLIED_DATE_AND_TIME_ASSIGNMENT.' +
                                'ITEMS') |
                   dta.role.name = 'actual') )
          = 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'signing for contract':
      BEGIN
       IF SIZEOF(QUERY(i <* apoa.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'APPLIED_ORGANIZATION_ASSIGNMENT'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* apoa.items |
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'APPLIED_ORGANIZATION_ASSIGNMENT'
                    IN TYPEOF(i))
                   AND
                   NOT(i.role.name = 'organization in contract') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION aspect_ratio (p : planar_box) : positive_ratio_measure;
  RETURN (p.size_in_x / p.size_in_y);
END_FUNCTION;

FUNCTION bag_to_set
    (the_bag : BAG OF GENERIC : intype) : SET OF GENERIC : intype;
LOCAL
  the_set : SET OF GENERIC : intype := [];
END_LOCAL;
  IF SIZEOF (the_bag) > 0 THEN
    REPEAT i := 1 to HIINDEX (the_bag);
      the_set := the_set + the_bag [i];
    END_REPEAT;
  END_IF;
  RETURN (the_set);
END_FUNCTION;

FUNCTION configuration_design_correlation
    (cd : configuration_design) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := cd.name;
  CASE name OF
    'functionality':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_CLASS'
              IN TYPEOF(cd.configuration.item_concept))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
              IN TYPEOF(cd.design))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(cd.design.frame_of_reference\
              application_context_element.name
              IN ['functional definition',
                  'functional occurrence'])
       THEN RETURN(FALSE);
       END_IF;
      END;

    'occurrence usage definition':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
              IN TYPEOF(cd.design))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(cd.design.name
              IN ['quantified instance',
                  'selected instance',
                  'single instance'])
       THEN RETURN(FALSE);
       END_IF;
      END;

    'physical instance basis':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
              IN TYPEOF(cd.design))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(cd.design.name = 'physical instance')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'realization':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_CLASS'
              IN TYPEOF(cd.configuration.item_concept))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
              IN TYPEOF(cd.design))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(cd.design.frame_of_reference\
              application_context_element.name
              = 'conceptual definition')
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION externally_defined_item_relationship_correlation
    (edir : externally_defined_item_relationship) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := edir.name;
  CASE name OF
    'name scope':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.EXTERNALLY_DEFINED_CLASS'
              IN TYPEOF(edir.related_item))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'EXTERNALLY_DEFINED_GENERAL_PROPERTY'
              IN TYPEOF(edir.relating_item))
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION general_property_correlation
    (gp : general_property) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := gp.name;
  CASE name OF
    'body breadth',
    'body height',
    'body length',
    'component colour',
    'cross section area',
    'mass',
    'material specification',
    'mounting features specification',
    'operating temperature',
    'outside diameter',
    'rated current',
    'rated power',
    'rated voltage',
    'storage temperature':
      BEGIN
       IF SIZEOF(QUERY(pdr <* USEDIN(gp,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'DEFINITION') |
                   pdr.used_representation.name = 'property value format')
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(gp,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'DEFINITION') |
                   pdr.used_representation.name = 'property specification')
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION get_multi_language 
(x : attribute_value_assignment) : label;
LOCAL
alas : BAG OF attribute_language_assignment := 
         USEDIN(x, 'ELECTROTECHNICAL_DESIGN.'+
               'ATTRIBUTE_LANGUAGE_ASSIGNMENT.ITEMS');
-- note: sizeof(alas) has to be 1 due to
-- multi_language_attribute_assignment.wr2
END_LOCAL;
IF SIZEOF(alas) > 0 THEN RETURN(alas[1].language);
END_IF;
RETURN (?);
END_FUNCTION;

FUNCTION group_relationship_correlation
    (gr : group_relationship) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := gr.name;
  CASE name OF
    'class hierarchy':
       IF NOT( ('ELECTROTECHNICAL_DESIGN.CLASS'
                IN TYPEOF(gr.related_group))
               AND
               ('ELECTROTECHNICAL_DESIGN.CLASS'
                IN TYPEOF(gr.relating_group)) )
       THEN RETURN(FALSE);
       END_IF;

    'connecting line ownership':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.PAGE_CONNECTOR_GROUP'
              IN TYPEOF(gr.related_group))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.CONNECTING_LINE_GROUP'
              IN TYPEOF(gr.relating_group))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'page connector ownership':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'PAGE_CONNECTOR_PRESENTATION_GROUP'
              IN TYPEOF(gr.related_group))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.PAGE_CONNECTOR_GROUP'
              IN TYPEOF(gr.relating_group))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'page connector presentation ownership':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'PAGE_CONNECTOR_REFERENCE_GROUP'
              IN TYPEOF(gr.related_group))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'PAGE_CONNECTOR_PRESENTATION_GROUP'
              IN TYPEOF(gr.relating_group))
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION identification_assignment_relationship_correlation
    (iar : identification_assignment_relationship) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := iar.name;
  CASE name OF
    'item designation composition':
       IF NOT( ('ELECTROTECHNICAL_DESIGN.ITEM_DESIGNATION_ASSIGNMENT'
                IN TYPEOF(iar.related_identification_assignment))
               AND
               ('ELECTROTECHNICAL_DESIGN.ITEM_DESIGNATION_ASSIGNMENT'
                IN TYPEOF(iar.relating_identification_assignment)) )
       THEN RETURN(FALSE);
       END_IF;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION item_correlation 
         (items :   SET OF GENERIC;
          c_items:  SET OF STRING):LOGICAL;
 LOCAL
  c_types   : SET OF STRING := [];
  c_hit     : INTEGER := 0;
 END_LOCAL;
 
 REPEAT i:=1 TO HIINDEX(c_items);
  c_types := c_types + ['ELECTROTECHNICAL_DESIGN.' + c_items[i]];
 END_REPEAT;

 REPEAT i:=1 TO HIINDEX(items);
  IF (SIZEOF(c_types * TYPEOF(items[i])) = 1)
   THEN
    c_hit := c_hit + 1;
  END_IF;
 END_REPEAT;

 IF (SIZEOF(items) = c_hit)
  THEN
   RETURN(TRUE);
  ELSE
   RETURN(FALSE);
 END_IF;
 END_FUNCTION;
 
FUNCTION product_definition_context_association_correlation
         (pdca : product_definition_context_association) : BOOLEAN;
LOCAL
  role_name : STRING;
END_LOCAL;

  role_name := pdca.role.name;
  CASE role_name OF
    'application context':
       IF NOT(pdca.definition.frame_of_reference.name
              IN ['conceptual definition',
                  'functional definition',
                  'part definition'])
       THEN RETURN(FALSE);
       END_IF;

    'external':
       IF NOT(pdca.frame_of_reference.name = 'external')
       THEN RETURN(FALSE);
       END_IF;

    'part definition type':
      BEGIN
       IF NOT(pdca.definition.frame_of_reference.name
              = 'part definition')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdca.frame_of_reference.name
              = 'assembly definition')
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION product_definition_context_correlation
         (pdc : product_definition_context) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := pdc\application_context_element.name;
  CASE name OF
    'assembly definition':
      BEGIN
       IF SIZEOF(USEDIN(pdc, 'ELECTROTECHNICAL_DESIGN.' +
                             'PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.' +
                             'FRAME_OF_REFERENCE')
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(a <* USEDIN(pdc,
                             'ELECTROTECHNICAL_DESIGN.' +
                             'PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.' +
                             'FRAME_OF_REFERENCE') |
                   NOT(a.role.name = 'part definition type')
                   OR
                   NOT(a.definition.frame_of_reference.name
                       = 'part definition') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(USEDIN(pdc, 'ELECTROTECHNICAL_DESIGN.' +
                             'PRODUCT_DEFINITION.' +
                             'FRAME_OF_REFERENCE')
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'external':
      BEGIN
       IF SIZEOF(USEDIN(pdc, 'ELECTROTECHNICAL_DESIGN.' +
                             'PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.' +
                             'FRAME_OF_REFERENCE')
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(a <* USEDIN(pdc,
                             'ELECTROTECHNICAL_DESIGN.' +
                             'PRODUCT_DEFINITION_CONTEXT_ASSOCIATION.' +
                             'FRAME_OF_REFERENCE') |
                   NOT(a.role.name = 'external') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(USEDIN(pdc, 'ELECTROTECHNICAL_DESIGN.' +
                             'PRODUCT_DEFINITION.' +
                             'FRAME_OF_REFERENCE')
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION product_definition_correlation
    (pd : product_definition) : BOOLEAN;
LOCAL
  context_name : STRING;
  name         : STRING;
END_LOCAL;

  context_name := pd.frame_of_reference.name;
  CASE context_name OF
    'alternative definition':
      BEGIN
       IF SIZEOF(QUERY(i <* USEDIN(pd,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                   i.role.name = 'version')
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
      END;

    'conceptual definition':
      BEGIN
       IF SIZEOF(QUERY(des <* USEDIN(pd, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                   SIZEOF(TYPEOF(des) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'DOCUMENT_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'SIGNAL_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'TERMINAL_DESIGNATION_ASSIGNMENT']
                   ) > 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(des <* USEDIN(pd, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT'
                    IN TYPEOF(des))
                   AND
                   (des.role.description = 'primary') )
          ) <> 1
       THEN RETURN(FALSE);
       END_IF; 
      END;

    'digital document definition',
    'physical document definition',
    'physical model occurrence':
      BEGIN
       IF SIZEOF(QUERY(cat <* USEDIN(pd.formation.of_product,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRODUCT_RELATED_PRODUCT_CATEGORY.' +
                                     'PRODUCTS') |
                   NOT(cat.name = 'document') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(des <* USEDIN(pd, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                   SIZEOF(TYPEOF(des) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'SIGNAL_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'TERMINAL_DESIGNATION_ASSIGNMENT']
                   ) > 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(des <* USEDIN(pd, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'DOCUMENT_DESIGNATION_ASSIGNMENT'
                    IN TYPEOF(des))
                   AND
                   (des.role.description = 'primary') )
          ) <> 1
       THEN RETURN(FALSE);
       END_IF;
      END;

   'functional occurrence':
      BEGIN
       IF SIZEOF(QUERY(cat <* USEDIN(pd.formation.of_product,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRODUCT_RELATED_PRODUCT_CATEGORY.' +
                                     'PRODUCTS') |
                   NOT(cat.name = 'functionality') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(des <* USEDIN(pd, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                   SIZEOF(TYPEOF(des) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'DOCUMENT_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'SIGNAL_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'TERMINAL_DESIGNATION_ASSIGNMENT']
                   ) > 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(des <* USEDIN(pd, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT'
                    IN TYPEOF(des))
                   AND
                   (des.role.description = 'primary') )
          ) <> 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdu <* USEDIN(pd,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRODUCT_DEFINITION_RELATIONSHIP.' +
                                     'RELATED_PRODUCT_DEFINITION') |
                   ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION_USAGE'
                    IN TYPEOF(pdu))
                   AND
                   (pdu.name = 'definition usage')
                   AND
                   (pdu.relating_product_definition.frame_of_reference\
                    application_context_element.name
                    = 'functional definition') ) )
          +
          SIZEOF(QUERY(cd <* USEDIN(pd,
                                    'ELECTROTECHNICAL_DESIGN.' +
                                    'CONFIGURATION_DESIGN.' +
                                    'DESIGN') |
                   cd.name = 'occurrence usage definition') )
          <> 1
       THEN RETURN(FALSE);
       END_IF; 
      END;

    'part definition':
       IF SIZEOF(QUERY(cat <* USEDIN(pd.formation.of_product,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRODUCT_RELATED_PRODUCT_CATEGORY.' +
                                     'PRODUCTS') |
                   NOT(cat.name IN ['accessory', 'other',
                                    'part', 'software']) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;

    'part occurrence':
      BEGIN
       IF SIZEOF(QUERY(cat <* USEDIN(pd.formation.of_product,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRODUCT_RELATED_PRODUCT_CATEGORY.' +
                                     'PRODUCTS') |
                   NOT(cat.name IN ['accessory', 'other',
                                    'part', 'software']) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(des <* USEDIN(pd, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                   SIZEOF(TYPEOF(des) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'DOCUMENT_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'SIGNAL_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'TERMINAL_DESIGNATION_ASSIGNMENT']
                   ) > 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(des <* USEDIN(pd, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT'
                    IN TYPEOF(des))
                   AND
                   (des.role.description = 'primary') )
          ) <> 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdu <* USEDIN(pd,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRODUCT_DEFINITION_RELATIONSHIP.' +
                                     'RELATED_PRODUCT_DEFINITION') |
                   ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION_USAGE'
                    IN TYPEOF(pdu))
                   AND
                   (pdu.name = 'definition usage')
                   AND
                   (pdu.relating_product_definition.frame_of_reference\
                    application_context_element.name
                    = 'part definition') ) )
          +
          SIZEOF(QUERY(cd <* USEDIN(pd,
                                    'ELECTROTECHNICAL_DESIGN.' +
                                    'CONFIGURATION_DESIGN.' +
                                    'DESIGN') |
                   cd.name = 'occurrence usage definition') )
          <> 1
       THEN RETURN(FALSE);
       END_IF;
      END;

    'physical occurrence':
      BEGIN
       IF SIZEOF(QUERY(cat <* USEDIN(pd.formation.of_product,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRODUCT_RELATED_PRODUCT_CATEGORY.' +
                                     'PRODUCTS') |
                   NOT(cat.name IN ['accessory', 'other',
                                    'part', 'software']) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdu <* USEDIN(pd,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRODUCT_DEFINITION_RELATIONSHIP.' +
                                     'RELATED_PRODUCT_DEFINITION') |
                   ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION_USAGE'
                    IN TYPEOF(pdu))
                   AND
                   (pdu.name = 'physical realization')
                   AND
                   (pdu.relating_product_definition.frame_of_reference\
                    application_context_element.name
                    = 'part definition') ) )
          +
          SIZEOF(QUERY(cd <* USEDIN(pd,
                                    'ELECTROTECHNICAL_DESIGN.' +
                                    'CONFIGURATION_DESIGN.' +
                                    'DESIGN') |
                   cd.name = 'physical instance basis') )
          <> 1
       THEN RETURN(FALSE);
       END_IF;
      END;

    'requirement definition':
       IF SIZEOF(QUERY(cat <* USEDIN(pd.formation.of_product,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRODUCT_RELATED_PRODUCT_CATEGORY.' +
                                     'PRODUCTS') |
                   NOT(cat.name = 'requirement') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;

    'system definition':
      BEGIN
       IF SIZEOF(QUERY(cat <* USEDIN(pd.formation.of_product,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRODUCT_RELATED_PRODUCT_CATEGORY.' +
                                     'PRODUCTS') |
                   NOT(cat.name = 'technical system') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(des <* USEDIN(pd, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                   SIZEOF(TYPEOF(des) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'DOCUMENT_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'SIGNAL_DESIGNATION_ASSIGNMENT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'TERMINAL_DESIGNATION_ASSIGNMENT']
                   ) > 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(des <* USEDIN(pd, 'ELECTROTECHNICAL_DESIGN.' +
                                         'ITEM_DESIGNATION_ASSIGNMENT.' +
                                         'ITEMS') |
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'OBJECT_REFERENCE_DESIGNATION_ASSIGNMENT'
                    IN TYPEOF(des))
                   AND
                   (des.role.description = 'primary') )
          ) <> 1
       THEN RETURN(FALSE);
       END_IF; 
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  name := pd.name;
  CASE name OF
    'physical instance':
      BEGIN
       IF NOT(pd.frame_of_reference.name = 'physical occurrence')
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* USEDIN(pd,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                   i.role.name = 'inventory number')
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
      END;

    'quantified instance':
      BEGIN
       IF NOT(pd.frame_of_reference.name = 'part occurrence')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(prop <* USEDIN(pd,
                                          'ELECTROTECHNICAL_DESIGN.' +
                                          'PROPERTY_DEFINITION.' +
                                          'DEFINITION') |
                       prop.name = 'occurrence quantity')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'selected instance':
      BEGIN
       IF NOT(pd.frame_of_reference.name = 'part occurrence')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(prop <* USEDIN(pd,
                                          'ELECTROTECHNICAL_DESIGN.' +
                                          'PROPERTY_DEFINITION.' +
                                          'DEFINITION') |
                       prop.name = 'occurrence selection control')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'single instance':
       IF NOT(pd.frame_of_reference.name
              IN ['part occurrence', 'functional occurrence'])
       THEN RETURN(FALSE);
       END_IF;

    'specified instance':
      BEGIN
       IF NOT(pd.frame_of_reference.name
              IN ['part occurrence', 'functional occurrence'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( ( (pd.frame_of_reference.name = 'functional occurrence')
                 AND
                 ('ELECTROTECHNICAL_DESIGN.' +
                  'SPECIFIED_HIGHER_USAGE_OCCURRENCE'
                  IN TYPEOF(pd)) )
               OR
               ( (pd.frame_of_reference.name = 'part occurrence')
                 AND
                 ('ELECTROTECHNICAL_DESIGN.' +
                  'SPECIFIED_HIGHER_USAGE_OCCURRENCE'
                  IN TYPEOF(pd)) ) )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'final',
    'supplier',
    'technical',
    'technical supplier',
    'technical final',
    'supplier final',
    'technical supplier final':
       IF NOT(pd.frame_of_reference.name = 'alternative definition')
       THEN RETURN(FALSE);
       END_IF;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION product_definition_relationship_correlation
         (pdr : product_definition_relationship) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := pdr.name;
  CASE name OF
    'conceptual definition allocation':
      BEGIN
       IF NOT(pdr.related_product_definition.frame_of_reference.name
              IN ['functional occurrence',
                  'part occurrence',
                  'physical occurrence'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_product_definition.frame_of_reference.name
              = 'conceptual definition')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'dedicated function',
    'offered function':
      BEGIN
       IF NOT(pdr.related_product_definition.frame_of_reference.name
              = 'functional definition')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_product_definition.frame_of_reference.name
              IN ['conceptual definition',
                  'part definition',
                  'part occurrence',
                  'physical occurrence'])
       THEN RETURN(FALSE);
       END_IF;
      END;

    'definition usage':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION_USAGE'
              IN TYPEOF(pdr))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( ( (pdr.relating_product_definition.frame_of_reference.name
                  = 'functional definition')
                 AND
                 (pdr.related_product_definition.frame_of_reference.name
                  = 'functional occurrence') )
               XOR
               ( (pdr.relating_product_definition.frame_of_reference.name
                  = 'part definition')
                 AND
                 (pdr.related_product_definition.frame_of_reference.name
                  = 'part occurrence') ) )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'final specification':
      BEGIN
       IF NOT(pdr.related_product_definition.frame_of_reference.name
              IN ['functional definition',
                  'part definition',
                  'physical occurrence'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_product_definition.frame_of_reference.name
              = 'alternative definition')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'functional unit allocation':
      BEGIN
       IF NOT(pdr.related_product_definition.frame_of_reference.name
              IN ['conceptual definition',
                  'part occurrence',
                  'physical occurrence'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_product_definition.frame_of_reference.name
              = 'functional occurrence')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'physical occurrence usage':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.ASSEMBLY_COMPONENT_USAGE'
              IN TYPEOF(pdr))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.related_product_definition.frame_of_reference.name
              = 'physical occurrence')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_product_definition.frame_of_reference.name
              = 'physical occurrence')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'physical realization':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION_USAGE'
              IN TYPEOF(pdr))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.related_product_definition.frame_of_reference.name
              = 'physical occurrence')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_product_definition.frame_of_reference.name
              = 'part definition')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'preferred item allocation':
      BEGIN
       IF NOT(pdr.related_product_definition.frame_of_reference.name
              IN ['functional definition',
                  'part definition'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_product_definition.frame_of_reference.name
              = 'functional occurrence')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'quantified instance usage':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'QUANTIFIED_ASSEMBLY_COMPONENT_USAGE'
              IN TYPEOF(pdr))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( (pdr.related_product_definition.frame_of_reference.name
                = 'part definition')
               AND
               (pdr.relating_product_definition.frame_of_reference.name
                = 'part definition') )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'selected instance usage':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.ASSEMBLY_COMPONENT_USAGE'
              IN TYPEOF(pdr))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( (pdr.related_product_definition.frame_of_reference.name
                = 'part definition')
               AND
               (pdr.relating_product_definition.frame_of_reference.name
                = 'part definition') )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(prop <* USEDIN(pdr,
                                          'ELECTROTECHNICAL_DESIGN.' +
                                          'PROPERTY_DEFINITION.' +
                                          'DEFINITION') |
                       prop.name = 'occurrence selection control')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'single instance usage':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.ASSEMBLY_COMPONENT_USAGE'
              IN TYPEOF(pdr))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( ( (pdr.relating_product_definition.frame_of_reference.name
                  = 'functional definition')
                 AND
                 (pdr.related_product_definition.frame_of_reference.name
                  = 'functional definition') )
               XOR
               ( (pdr.relating_product_definition.frame_of_reference.name
                  = 'part definition')
                 AND
                 (pdr.related_product_definition.frame_of_reference.name
                  = 'part definition') ) )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'solution alternative definition':
      BEGIN
       IF NOT(pdr.related_product_definition.frame_of_reference.name
              = 'alternative definition')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_product_definition.frame_of_reference.name
              IN ['alternative definition',
                  'conceptual product',
                  'functional occurrence'])
       THEN RETURN(FALSE);
       END_IF;
       IF (pdr.relating_product_definition.frame_of_reference.name
           = 'functional occurrence')
          AND
          NOT(pdr.relating_product_definition.name
              = 'single instance')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'specified instance usage':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'SPECIFIED_HIGHER_USAGE_OCCURRENCE'
              IN TYPEOF(pdr))
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(pdr) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'SPECIFIED_HIGHER_USAGE_OCCURRENCE']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( ( (pdr.relating_product_definition.frame_of_reference.name
                  = 'functional definition')
                 AND
                 (pdr.related_product_definition.frame_of_reference.name
                  = 'functional definition') )
               XOR
               ( (pdr.relating_product_definition.frame_of_reference.name
                  = 'part definition')
                 AND
                 (pdr.related_product_definition.frame_of_reference.name
                  = 'part definition') ) )
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION property_definition_correlation
    (pd : property_definition) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := pd.name;
  CASE name OF
    'information content':
      BEGIN
       IF SIZEOF(QUERY(pdr <* USEDIN(pd,
                              'ELECTROTECHNICAL_DESIGN.' +
                              'PROPERTY_DEFINITION_REPRESENTATION.' +
                              'DEFINITION') |
                   pdr.name = 'information content')
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.EQUIPMENT_MARKING'
              IN TYPEOF(pd.definition))
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION property_definition_relationship_correlation
         (pdr : property_definition_relationship) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := pdr.name;
  CASE name OF
    'connectivity allocation':
      BEGIN
       IF NOT( ('ELECTROTECHNICAL_DESIGN.CONNECTIVITY_DEFINITION'
                IN TYPEOF(pdr.relating_property_definition.definition))
               AND
               (pdr.relating_property_definition.definition\
                shape_aspect.of_shape.definition\
                product_definition.frame_of_reference.name
                = 'functional definition') )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_property_definition.definition\
              product_definition.frame_of_reference.name
              IN ['functional occurrence',
                  'part occurrence',
                  'physical occurrence'])
       THEN RETURN(FALSE);
       END_IF;
      END;

    'encountered object sequence':
      BEGIN
       IF NOT(pdr.related_property_definition.name
              = 'route characteristics')
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(pdr.related_property_definition.definition) *
                   ['ELECTROTECHNICAL_DESIGN.CONNECTIVITY_DEFINITION',
                    'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.related_property_definition.definition\
              product_definition.frame_of_reference.name
              IN ['conceptual definition',
                  'functional occurrence',
                  'part occurrence',
                  'physical occurrence'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_property_definition.name
              = 'route requirements')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_ROUTE'
              IN TYPEOF(pdr.relating_property_definition.definition))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'functional unit allocation':
      BEGIN
       IF NOT(pdr.related_property_definition.definition\
              product_definition.frame_of_reference.name
              IN ['conceptual definition',
                  'part occurrence',
                  'physical occurrence'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_property_definition.definition\
              product_definition_relationship.name
              IN ['single instance usage',
                  'specified instance usage'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_property_definition.definition\
              product_definition_relationship.related_product_definition.
              frame_of_reference.name = 'functional definition')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'item allocation':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.SHAPE_ASPECT_RELATIONSHIP'
              IN TYPEOF(pdr.related_property_definition.definition))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.related_property_definition.definition\
              shape_aspect_relationship.name
              IN ['preferred item terminal allocation',
                  'terminal allocation'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION_RELATIONSHIP'
              IN TYPEOF(pdr.relating_property_definition.definition))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.relating_property_definition.definition\
              product_definition_relationship.name
              IN ['functional unit allocation',
                  'preferred item allocation'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( (pdr.related_property_definition.definition\
                shape_aspect_relationship.name
                = 'terminal allocation')
               AND
               (pdr.relating_property_definition.definition\
                product_definition_relationship.name
                = 'functional unit allocation') )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( (pdr.related_property_definition.definition\
                shape_aspect_relationship.name
                = 'preferred item terminal allocation')
               AND
               (pdr.relating_property_definition.definition\
                product_definition_relationship.name
                = 'preferred item allocation') )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'parameter association':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.PROCESS_VARIABLE'
              IN TYPEOF(pdr.related_property_definition.definition))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.SIGNAL'
              IN TYPEOF(pdr.relating_property_definition.definition))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'preferred equipment':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
              IN TYPEOF(pdr.related_property_definition.definition))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.SIGNAL'
              IN TYPEOF(pdr.relating_property_definition.definition))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.related_property_definition.definition\
              product_definition.frame_of_reference.name
              IN ['functional definition',
                  'part definition'])
       THEN RETURN(FALSE);
       END_IF;
      END;

    'trigger':
      BEGIN
       IF SIZEOF(TYPEOF(pdr.related_property_definition.definition) *
                   ['ELECTROTECHNICAL_DESIGN.PROCESS_VARIABLE',
                    'ELECTROTECHNICAL_DESIGN.SIGNAL']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.NOTIFICATION'
              IN TYPEOF(pdr.relating_property_definition.definition))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'validity context':
      BEGIN
       IF SIZEOF(TYPEOF(pdr.relating_property_definition.definition) *
                   ['ELECTROTECHNICAL_DESIGN.PRODUCT_CLASS',
                    'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF 'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
          IN TYPEOF(pdr.relating_property_definition.definition)
       THEN IF NOT(pdr.relating_property_definition.definition\
                   product_definition.frame_of_reference.name
                   = 'system definition')
            THEN RETURN(FALSE);
            END_IF;
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION property_definition_representation_correlation
    (pdr : property_definition_representation) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := pdr.name;
  CASE name OF
    'information content':
      BEGIN
       IF NOT( ('ELECTROTECHNICAL_DESIGN.PROPERTY_DEFINITION'
                IN TYPEOF(pdr.definition))
               AND
               (pdr.definition\property_definition.name
                = 'information content') )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( ('ELECTROTECHNICAL_DESIGN.NOTE_REPRESENTATION'
                IN TYPEOF(pdr.used_representation))
               XOR
               (pdr.used_representation.name = 'property value') )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'parameter association':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.PROCESS_VARIABLE'
              IN TYPEOF(pdr.definition.definition))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.used_representation.name = 'signal value')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'trigger':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.NOTIFICATION'
              IN TYPEOF(pdr.definition.definition))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(pdr.used_representation.name = 'signal value')
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION representation_correlation
    (rep : representation) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := rep.name;
  CASE name OF
    'admitted qualifier':
      BEGIN
       IF SIZEOF(rep.items) <> 1
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.QUALIFIED_REPRESENTATION_ITEM'
              IN TYPEOF(rep.items[1]))
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(tq <* rep.items[1]\
                             qualified_representation_item.
                             qualifiers |
                   NOT( ('ELECTROTECHNICAL_DESIGN.TYPE_QUALIFIER'
                         IN TYPEOF(tq))
                        AND
                        (tq.name IN ['nominal',
                                     'specified',
                                     'typical']) ) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'allowed units':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.GLOBAL_UNIT_ASSIGNED_CONTEXT'
              IN TYPEOF(rep.context_of_items))
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.GENERAL_PROPERTY'
                       IN TYPEOF(pdr.definition)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'cable pull information':
      BEGIN
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   'ELECTROTECHNICAL_DESIGN.SHAPE_ASPECT_RELATIONSHIP'
                   IN TYPEOF(pdr.definition.definition) )
          ) < 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.SHAPE_ASPECT_RELATIONSHIP'
                       IN TYPEOF(pdr.definition.definition))
                   OR
                   NOT(pdr.definition.definition\
                       shape_aspect_relationship.name
                       = 'arrangement sequence') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* USEDIN(rep,
                                   'ELECTROTECHNICAL_DESIGN.' +
                                   'APPLIED_IDENTIFICATION_ASSIGNMENT.' +
                                   'ITEMS') |
                   i.role.name = 'version')
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
      END;

    'direction range':
      BEGIN
       IF NOT(SIZEOF(rep.items) = 2)
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'PLANE_ANGLE_MEASURE_WITH_UNIT'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(max <* rep.items |
                       max.name = 'maximum angle')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(min <* rep.items |
                       min.name = 'minimum angle')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(rr <* USEDIN(rep,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'REPRESENTATION_RELATIONSHIP.' +
                                     'REP_1') |
                   rr.name = 'connect area')
          ) <> 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'final item characteristics':
      BEGIN
       IF NOT(SIZEOF(rep.items) = 2)
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'DESCRIPTIVE_REPRESENTATION_ITEM'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(stat <* rep.items |
                       stat.name = 'final item status')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(spec <* rep.items |
                       spec.name = 'final specification')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                       IN TYPEOF(pdr.definition.definition))
                   OR
                   NOT(pdr.definition.definition\
                       product_definition.name
                       IN ['final',
                           'supplier final',
                           'technical final',
                           'technical supplier final']) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'gis position':
      BEGIN
       IF NOT(SIZEOF(rep.items) = 7)
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'DESCRIPTIVE_REPRESENTATION_ITEM',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'MEASURE_REPRESENTATION_ITEM']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(d <* rep.items |
                       (d.name = 'height')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'MEASURE_REPRESENTATION_ITEM'
                        IN TYPEOF(d)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(d <* rep.items |
                       (d.name = 'scale')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'MEASURE_REPRESENTATION_ITEM'
                        IN TYPEOF(d)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(d <* rep.items |
                       (d.name = 'x-axis delta x')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'MEASURE_REPRESENTATION_ITEM'
                        IN TYPEOF(d)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(d <* rep.items |
                       (d.name = 'x-axis delta y')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'MEASURE_REPRESENTATION_ITEM'
                        IN TYPEOF(d)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(d <* rep.items |
                       (d.name = 'x coordinate')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'MEASURE_REPRESENTATION_ITEM'
                        IN TYPEOF(d)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(d <* rep.items |
                       (d.name = 'y coordinate')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'MEASURE_REPRESENTATION_ITEM'
                        IN TYPEOF(d)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(z <* rep.items |
                       (z.name = 'zone')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'MEASURE_REPRESENTATION_ITEM'
                        IN TYPEOF(z)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'GEOMETRIC_REPRESENTATION_CONTEXT'
              IN TYPEOF(rep.context_of_items))
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_LOCATION'
                       IN TYPEOF(pdr.definition.definition)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'grid layout':
      BEGIN
       IF NOT(SIZEOF(rep.items) = 3)
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'AXIS2_PLACEMENT_2D',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'LENGTH_MEASURE_WITH_UNIT']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(x <* rep.items |
                       (x.name = 'delta x')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'LENGTH_MEASURE_WITH_UNIT'
                        IN TYPEOF(x)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(y <* rep.items |
                       (y.name = 'delta y')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'LENGTH_MEASURE_WITH_UNIT'
                        IN TYPEOF(y)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(o <* rep.items |
                       (o.name = 'grid origin')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'AXIS2_PLACEMENT_2D'
                        IN TYPEOF(o)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(o <* rep.items |
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'AXIS2_PLACEMENT_2D'
                    IN TYPEOF(o))
                   AND
                   EXISTS(o\axis2_placement_2d.ref_direction) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'GEOMETRIC_REPRESENTATION_CONTEXT'
              IN TYPEOF(rep.context_of_items))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(rep.context_of_items\geometric_representation_context.
              coordinate_space_dimension = 2)
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'linear pattern location':
      BEGIN
       IF NOT(SIZEOF(rep.items) = 2)
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'AXIS2_PLACEMENT_3D',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'LENGTH_MEASURE_WITH_UNIT']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(d <* rep.items |
                       (d.name = 'pattern location distance')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'LENGTH_MEASURE_WITH_UNIT'
                        IN TYPEOF(d)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(s <* rep.items |
                       (s.name = 'pattern start location')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'AXIS2_PLACEMENT_3D'
                        IN TYPEOF(s)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'GEOMETRIC_REPRESENTATION_CONTEXT'
              IN TYPEOF(rep.context_of_items))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(rep.context_of_items\geometric_representation_context.
              coordinate_space_dimension = 3)
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.EQUIPMENT_MARKING'
                       IN TYPEOF(pdr.definition.definition)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'marking location':
      BEGIN
       IF SIZEOF(rep.items) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   NOT('ELECTROTECHNICAL_DESIGN.AXIS2_PLACEMENT_3D'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'GEOMETRIC_REPRESENTATION_CONTEXT'
              IN TYPEOF(rep.context_of_items))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(rep.context_of_items\geometric_representation_context.
              coordinate_space_dimension = 3)
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.EQUIPMENT_MARKING'
                       IN TYPEOF(pdr.definition.definition)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'notification message':
      BEGIN
       IF SIZEOF(rep.items) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   NOT('ELECTROTECHNICAL_DESIGN.AXIS2_PLACEMENT_2D'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(t <* rep.items |
                       t.name = 'message text')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.NOTIFICATION'
                       IN TYPEOF(pdr.definition.definition)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'property specification':
      BEGIN
       IF SIZEOF(rep.items) > 3
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'DESCRIPTIVE_REPRESENTATION_ITEM'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(d <* rep.items |
                       d.name = 'definition')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(n <* rep.items |
                   n.name = 'note')
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(r <* rep.items |
                   r.name = 'remark')
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   'ELECTROTECHNICAL_DESIGN.GENERAL_PROPERTY'
                   IN TYPEOF(pdr.definition))
          ) <> 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(la <* USEDIN(rep, 'ELECTROTECHNICAL_DESIGN.' +
                                         'LANGUAGE_ASSIGNMENT.' +
                                         'ITEMS') |
                   ('ELECTROTECHNICAL_DESIGN.GROUP'
                    IN TYPEOF(la.assigned_class))
                   AND
                   (la.assigned_class.description
                    = 'ISO 639-2 language code')
                   AND
                   (la.role.name = 'language'))
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'property value':
      BEGIN
       IF SIZEOF(rep.items) <> 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   'ELECTROTECHNICAL_DESIGN.GENERAL_PROPERTY'
                   IN TYPEOF(pdr.definition))
          ) <> 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'property value format' :
      BEGIN
       IF SIZEOF(rep.items) > 2
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'DESCRIPTIVE_REPRESENTATION_ITEM'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(vf <* rep.items |
                       vf.name = 'value format')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(sd <* rep.items |
                   sd.name = 'source document')
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   'ELECTROTECHNICAL_DESIGN.GENERAL_PROPERTY'
                   IN TYPEOF(pdr.definition))
          ) <> 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(la <* USEDIN(rep, 'ELECTROTECHNICAL_DESIGN.' +
                                         'LANGUAGE_ASSIGNMENT.' +
                                         'ITEMS') |
                   ('ELECTROTECHNICAL_DESIGN.GROUP'
                    IN TYPEOF(la.assigned_class))
                   AND
                   (la.assigned_class.description
                    = 'ISO 639-2 language code')
                   AND
                   (la.role.name = 'language')
                   AND
                   (la.role.description = 'default'))
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
      END;

    'quantity':
      BEGIN
       IF SIZEOF(rep.items) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'MEASURE_REPRESENTATION_ITEM'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(stat <* rep.items |
                       stat.name = 'quantity measure')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.PROPERTY_DEFINITION'
                       IN TYPEOF(pdr.definition))
                   OR
                   NOT(pdr.definition\property_definition.name
                       = 'occurrence quantity')
                   OR
                   NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                       IN TYPEOF(pdr.definition.definition))
                   OR
                   NOT(pdr.definition.definition\
                       product_definition.name
                       = 'quantified instance') )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'schematic node connect area':
      BEGIN
       IF SIZEOF(QUERY(i <* rep.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'CARTESIAN_POINT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'COMPOSITE_CURVE',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'POLYLINE',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'TRIMMED_CURVE']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'GEOMETRIC_REPRESENTATION_CONTEXT'
              IN TYPEOF(rep.context_of_items))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(rep.context_of_items\geometric_representation_context.
              coordinate_space_dimension = 2)
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'section interface parameters':
      BEGIN
       IF SIZEOF(QUERY(i <* rep.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'AREA_MEASURE_WITH_UNIT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'RATIO_MEASURE_WITH_UNIT']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(c <* rep.items |
                   (c.name = 'cross section area')
                   AND
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'AREA_MEASURE_WITH_UNIT'
                       IN TYPEOF(c)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(s <* rep.items |
                   (s.name = 'space factor')
                   AND
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'RATIO_MEASURE_WITH_UNIT'
                    IN TYPEOF(s)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'INSTALLATION_SECTION_INTERFACE'
                       IN TYPEOF(pdr.definition.definition)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'section parameters':
      BEGIN
       IF SIZEOF(QUERY(i <* rep.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'AREA_MEASURE_WITH_UNIT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'LENGTH_MEASURE_WITH_UNIT',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'RATIO_MEASURE_WITH_UNIT']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(c <* rep.items |
                   (c.name = 'cross section area')
                   AND
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'AREA_MEASURE_WITH_UNIT'
                       IN TYPEOF(c)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(c <* rep.items |
                   (c.name IN ['bending radius',
                               'section length'])
                   AND
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'LENGTH_MEASURE_WITH_UNIT'
                       IN TYPEOF(c)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(s <* rep.items |
                   (s.name = 'space factor')
                   AND
                   ('ELECTROTECHNICAL_DESIGN.' +
                    'RATIO_MEASURE_WITH_UNIT'
                    IN TYPEOF(s)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'INSTALLATION_SECTION'
                       IN TYPEOF(pdr.definition.definition)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'selection criteria':
      BEGIN
       IF NOT(SIZEOF(rep.items) = 2)
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   SIZEOF(TYPEOF(i) *
                            ['ELECTROTECHNICAL_DESIGN.' +
                             'COMPOUND_REPRESENTATION_ITEM',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'DESCRIPTIVE_REPRESENTATION_ITEM',
                             'ELECTROTECHNICAL_DESIGN.' +
                             'MEASURE_REPRESENTATION_ITEM']
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(c <* rep.items |
                       (c.name = 'selection control')
                       AND
                       ('ELECTROTECHNICAL_DESIGN.' +
                        'DESCRIPTIVE_REPRESENTATION_ITEM'
                        IN TYPEOF(c)) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(q <* rep.items |
                       (q.name = 'selection quantity')
                       AND
                       (SIZEOF(TYPEOF(q) *
                                 ['ELECTROTECHNICAL_DESIGN.' +
                                  'COMPOUND_REPRESENTATION_ITEM',
                                  'ELECTROTECHNICAL_DESIGN.' +
                                  'MEASURE_REPRESENTATION_ITEM']
                        ) = 1 ) )
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT( ('ELECTROTECHNICAL_DESIGN.PROPERTY_DEFINITION'
                         IN TYPEOF(pdr.definition))
                        AND
                        NOT(pdr.definition\property_definition.name
                            = 'occurrence selection control')
                        AND
                        ( ( ('ELECTROTECHNICAL_DESIGN.' +
                             'PRODUCT_DEFINITION'
                             IN TYPEOF(pdr.definition.definition))
                            AND
                            NOT(pdr.definition.definition\
                                product_definition.name
                                = 'selected instance') )
                          XOR
                          ( ('ELECTROTECHNICAL_DESIGN.' +
                             'ASSEMBLY_COMPONENT_USAGE'
                             IN TYPEOF(pdr.definition.definition))
                            AND
                            NOT(pdr.definition.definition\
                                product_definition_relationship.name
                                = 'selected instance usage') ) ) ) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'signal characteristics':
      BEGIN
       IF SIZEOF(rep.items) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(rep.items[1].name = 'signal level indicator')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.DESCRIPTIVE_REPRESENTATION_ITEM'
              IN TYPEOF(rep.items[1]))
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'signal value':
      BEGIN
       IF NOT(SIZEOF(USEDIN(rep, 'ELECTROTECHNICAL_DESIGN.' +
                                 'ID_ATTRIBUTE.' +
                                 'IDENTIFIED_ITEM')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   'ELECTROTECHNICAL_DESIGN.SIGNAL'
                   IN TYPEOF(pdr.definition.definition))
          ) <> 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   pdr.name = 'parameter association')
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 1
       THEN RETURN(FALSE);
       END_IF;
      END;

    'supplier probability':
      BEGIN
       IF SIZEOF(rep.items) > 1
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rep.items |
                   NOT('ELECTROTECHNICAL_DESIGN.' +
                       'RATIO_MEASURE_WITH_UNIT'
                       IN TYPEOF(i)) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(SIZEOF(QUERY(stat <* rep.items |
                       stat.name = 'probability rate')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rep,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   NOT('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                       IN TYPEOF(pdr.definition.definition))
                   OR
                   NOT(pdr.definition.definition\
                       product_definition.name
                       IN ['supplier',
                           'supplier final',
                           'technical supplier',
                           'technical supplier final']) )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(rep) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'DRAUGHTING_MODEL',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'NOTE_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'PRESENTATION_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'REFERENCE_GRID_REPRESENTATION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'SHAPE_REPRESENTATION']
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION representation_item_correlation
    (ri : representation_item) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := ri.name;
  CASE name OF
    'component colour':
       IF NOT('ELECTROTECHNICAL_DESIGN.COLOUR_REPRESENTATION_ITEM'
              IN TYPEOF(ri))
       THEN RETURN(FALSE);
       END_IF;

    'material specification',
    'mounting features specification':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.DESCRIPTIVE_REPRESENTATION_ITEM'
              IN TYPEOF(ri))
       THEN RETURN(FALSE);
       END_IF;
       IF 'ELECTROTECHNICAL_DESIGN.COLOUR_REPRESENTATION_ITEM'
          IN TYPEOF(ri)
       THEN RETURN(FALSE);
       END_IF;
      END;

    'rated current',
    'rated power',
    'rated voltage':
      BEGIN
       IF SIZEOF(TYPEOF(ri) *
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'MEASURE_REPRESENTATION_ITEM',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'QUALIFIED_REPRESENTATION_ITEM']
          ) < 2
       THEN RETURN(FALSE);
       END_IF;
       IF NOT((SIZEOF(ri\qualified_representation_item.qualifiers) > 0)
              AND
              (SIZEOF(ri\qualified_representation_item.qualifiers) < 3))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'body breadth',
    'body height',
    'body length',
    'cross section area',
    'mass',
    'operating temperature',
    'storage temperature',
    'outside diameter':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.MEASURE_REPRESENTATION_ITEM'
              IN TYPEOF(ri))
       THEN RETURN(FALSE);
       END_IF;
       IF 'ELECTROTECHNICAL_DESIGN.QUALIFIED_REPRESENTATION_ITEM'
          IN TYPEOF(ri)
       THEN BEGIN
             IF NOT(SIZEOF(ri\qualified_representation_item.qualifiers
                    ) = 1)
             THEN RETURN(FALSE);
             END_IF;
             IF NOT('ELECTROTECHNICAL_DESIGN.TYPE_QUALIFIER'
                    IN TYPEOF(ri\qualified_representation_item.
                              qualifiers[1]))
             THEN RETURN(FALSE);
             END_IF;
            END;
       END_IF;
      END;

    'body breadth',
    'body height',
    'body length',
    'component colour',
    'cross section area',
    'mass',
    'material specification',
    'operating temperature',
    'storage temperature',
    'mounting features specification',
    'outside diameter',
    'rated current',
    'rated power',
    'rated voltage':
      BEGIN
       IF NOT(SIZEOF(USEDIN(ri, 'ELECTROTECHNICAL_DESIGN.' +
                                'REPRESENTATION.' +
                                'ITEMS')
              ) = 1 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(de <* USEDIN(ri,
                                    'ELECTROTECHNICAL_DESIGN.' +
                                    'REPRESENTATION.' +
                                    'ITEMS') |
            SIZEOF(QUERY(pdr <* USEDIN(de,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                     ('ELECTROTECHNICAL_DESIGN.GENERAL_PROPERTY'
                      IN TYPEOF(pdr.definition))
                     AND
                     (pdr.definition\general_property.name
                      = ri.name) )
            ) = 1 )
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION representation_relationship_correlation
    (rr : representation_relationship) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := rr.name;
  CASE name OF
    'connect area':
      BEGIN
       IF NOT(rr.rep_1.name = 'direction range')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(rr.rep_2.name = 'schematic node connect area')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'definitional', 'non definitional', '':
      BEGIN
       IF NOT(rr.rep_1.name = 'property value')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT((SIZEOF(TYPEOF(rr.rep_2) * 
                      ['ELECTROTECHNICAL_DESIGN.DRAWING_SHEET_REVISION',
                       'ELECTROTECHNICAL_DESIGN.NOTE_REPRESENTATION']
               ) = 1 )
              XOR
              (rr.rep_2.name IN ['cable pull information',
                                 'signal value'])
              XOR
              (SIZEOF(QUERY(i <* rr.rep_2.items |
                        SIZEOF(TYPEOF(i) * 
                               ['ELECTROTECHNICAL_DESIGN.PATH',
                                'ELECTROTECHNICAL_DESIGN.VERTEX']
                        ) = 1 )
               ) > 0 ) )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'instance placement':
      BEGIN
       IF NOT(SIZEOF(TYPEOF(rr) *
                     ['ELECTROTECHNICAL_DESIGN.' +
                      'SHAPE_REPRESENTATION_RELATIONSHIP',
                      'ELECTROTECHNICAL_DESIGN.' +
                      'REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION']
              ) = 2 )
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rr.rep_1,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                   IN TYPEOF(pdr.definition.definition) )
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rr.rep_2,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   'ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                   IN TYPEOF(pdr.definition.definition) )
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rr.rep_1,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                    IN TYPEOF(pdr.definition.definition))
                   AND
                   (pdr.definition.definition\product_definition.name
                    = 'single instance') )
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pdr <* USEDIN(rr.rep_2,
                                'ELECTROTECHNICAL_DESIGN.' +
                                'PROPERTY_DEFINITION_REPRESENTATION.' +
                                'USED_REPRESENTATION') |
                   ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                    IN TYPEOF(pdr.definition.definition))
                   AND
                   (pdr.definition.definition\product_definition.
                    frame_of_reference.name = 'conceptual definition') )
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'node area':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'DRAUGHTING_SYMBOL_REPRESENTATION'
              IN TYPEOF(rr.rep_1))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(rr.rep_2.name = 'schematic node connect area')
       THEN RETURN(FALSE);
       END_IF;
      END;

    'note presentation reference':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'PRESENTATION_WITH_ASSOCIATION'
              IN TYPEOF(rr.rep_1))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'PRESENTATION_WITH_ASSOCIATION'
              IN TYPEOF(rr.rep_2))
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(pir <* USEDIN(rr.rep_2,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PRESENTED_ITEM_REPRESENTATION.' +
                                     'PRESENTATION') |
                   SIZEOF(QUERY(i <* pir.item\
                                     presented_item_with_association.
                                     items |
                            'ELECTROTECHNICAL_DESIGN.' +
                            'NOTE_REPRESENTATION'
                            IN TYPEOF(i) )
                   ) = 0 )
          ) > 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'note representation set':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'NOTE_REPRESENTATION'
              IN TYPEOF(rr.rep_1))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'NOTE_REPRESENTATION'
              IN TYPEOF(rr.rep_2))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'reference grid':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'REFERENCE_GRID_LAYOUT'
              IN TYPEOF(rr.rep_1))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.' +
              'REFERENCE_GRID_REPRESENTATION'
              IN TYPEOF(rr.rep_2))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'schematic node ownership':
      BEGIN
       IF SIZEOF(QUERY(sn <* rr.rep_1.items |
                   'ELECTROTECHNICAL_DESIGN.' +
                   'ANNOTATION_SYMBOL_OCCURRENCE'
                   IN TYPEOF(sn) )
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(uds <* rr.rep_2.items |
                   'ELECTROTECHNICAL_DESIGN.' +
                   'ANNOTATION_SYMBOL_OCCURRENCE'
                   IN TYPEOF(uds) )
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'schematic text ownership':
      BEGIN
       IF SIZEOF(QUERY(sn <* rr.rep_1.items |
                   'ELECTROTECHNICAL_DESIGN.' +
                   'ANNOTATION_TEXT_OCCURRENCE'
                   IN TYPEOF(sn) )
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(QUERY(i <* rr.rep_2.items |
                   'ELECTROTECHNICAL_DESIGN.' +
                   'ANNOTATION_SYMBOL_OCCURRENCE'
                   IN TYPEOF(i) )
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION shape_aspect_relationship_correlation
    (sar : shape_aspect_relationship) : BOOLEAN;
LOCAL
  name : STRING;
END_LOCAL;

  name := sar.name;
  CASE name OF
    'arrangement sequence':
      BEGIN
       IF SIZEOF(TYPEOF(sar.related_shape_aspect) * 
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'FREE_SEGMENT',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'ROUTED_SEGMENT']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( ('ELECTROTECHNICAL_DESIGN.CONNECTIVITY_DEFINITION'
                IN TYPEOF(sar.relating_shape_aspect))
              OR
               ( NOT('ELECTROTECHNICAL_DESIGN.CONNECTIVITY_DEFINITION'
                     IN TYPEOF(sar.relating_shape_aspect))
                AND
                 ('ELECTROTECHNICAL_DESIGN.PRODUCT_DEFINITION'
                  IN TYPEOF(sar.relating_shape_aspect.of_shape.definition))
                AND
                 (sar.relating_shape_aspect.of_shape.definition\
                  product_definition.frame_of_reference.name
                  IN ['conceptual definition',
                      'functional occurrence',
                      'part occurrence',
                      'physical occurrence']) ) )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'connectivity':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.CONNECTIVITY_DEFINITION'
              IN TYPEOF(sar.relating_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(sar.related_shape_aspect) * 
                   ['ELECTROTECHNICAL_DESIGN.TERMINAL']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
      END;

    'connectivity allocation':
      BEGIN
       IF NOT( ('ELECTROTECHNICAL_DESIGN.CONNECTIVITY_DEFINITION'
                IN TYPEOF(sar.relating_shape_aspect))
               AND
               (sar.relating_shape_aspect.of_shape.definition\
                product_definition.frame_of_reference.name
                = 'functional definition') )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( ('ELECTROTECHNICAL_DESIGN.CONNECTIVITY_DEFINITION'
                IN TYPEOF(sar.related_shape_aspect))
               AND
               (sar.related_shape_aspect.of_shape.definition\
                product_definition.frame_of_reference.name
                = 'part definition') )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'course sequence':
      BEGIN
       IF SIZEOF(TYPEOF(sar.related_shape_aspect) * 
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'INSTALLATION_NODE',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'INSTALLATION_ROUTE',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'INSTALLATION_SECTION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'INSTALLATION_SECTION_INTERFACE']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.ROUTED_SEGMENT'
              IN TYPEOF(sar.relating_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'correspondence',
    'definition usage':
      BEGIN
       IF NOT( ( ('ELECTROTECHNICAL_DESIGN.TERMINAL'
                  IN TYPEOF(sar.related_shape_aspect))
                 AND
                 ('ELECTROTECHNICAL_DESIGN.TERMINAL'
                  IN TYPEOF(sar.relating_shape_aspect)) ) )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(sar.related_shape_aspect.of_shape.definition\
              product_definition.name = 'single instance')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( ( (sar.relating_shape_aspect.of_shape.definition\
                  product_definition.frame_of_reference.name
                  = 'functional definition')
                 AND
                 (sar.related_shape_aspect.of_shape.definition\
                  product_definition.frame_of_reference.name
                  = 'functional occurrence') )
               XOR
               ( (sar.relating_shape_aspect.of_shape.definition\
                  product_definition.frame_of_reference.name
                  = 'part definition')
                 AND
                 (sar.related_shape_aspect.of_shape.definition\
                  product_definition.frame_of_reference.name
                  = 'part occurrence') ) )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'decomposition hierarchy',
    'neighbourhood':
       IF NOT( ('ELECTROTECHNICAL_DESIGN.INSTALLATION_LOCATION'
                IN TYPEOF(sar.related_shape_aspect))
               AND
               ('ELECTROTECHNICAL_DESIGN.INSTALLATION_LOCATION'
                IN TYPEOF(sar.relating_shape_aspect)) )
       THEN RETURN(FALSE);
       END_IF;

    'external access':
      BEGIN
       IF SIZEOF(TYPEOF(sar.related_shape_aspect) * 
                   ['ELECTROTECHNICAL_DESIGN.TERMINAL']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.INTERFACE'
              IN TYPEOF(sar.relating_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(sar.related_shape_aspect.of_shape.definition\
              product_definition.frame_of_reference.name
              IN ['functional definition', 'part definition'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(sar.relating_shape_aspect.of_shape.definition\
              product_definition.frame_of_reference.name
              IN ['functional definition', 'part definition'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( (sar.related_shape_aspect.of_shape.definition\
                product_definition.frame_of_reference.name
                = 'functional definition')
               AND
               (sar.relating_shape_aspect.of_shape.definition\
                product_definition.frame_of_reference.name
                = 'functional definition') )
       THEN RETURN(FALSE);
       END_IF;
       IF NOT( (sar.related_shape_aspect.of_shape.definition\
                product_definition.frame_of_reference.name
                = 'part definition')
               AND
               (sar.relating_shape_aspect.of_shape.definition\
                product_definition.frame_of_reference.name
                = 'part definition') )
       THEN RETURN(FALSE);
       END_IF;
     END;

    'node residence':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_LOCATION'
              IN TYPEOF(sar.related_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_NODE'
              IN TYPEOF(sar.relating_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'preferred item terminal allocation':
      BEGIN
       IF SIZEOF(TYPEOF(sar.related_shape_aspect) * 
                   ['ELECTROTECHNICAL_DESIGN.TERMINAL']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(sar.relating_shape_aspect) * 
                   ['ELECTROTECHNICAL_DESIGN.TERMINAL']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(sar.relating_shape_aspect.of_shape.definition\
              product_definition.name = 'single instance')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(sar.related_shape_aspect.of_shape.definition\
              product_definition.frame_of_reference.name
              IN ['functional definition', 'part definition'])
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(sar.relating_shape_aspect.of_shape.definition\
              product_definition.frame_of_reference.name
              = 'functional occurrence')
       THEN RETURN(FALSE);
       END_IF;
       IF (SIZEOF(QUERY(pd <* USEDIN(sar,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PROPERTY_DEFINITION.' +
                                     'DEFINITION') |
             SIZEOF(QUERY(pdr <* USEDIN(pd,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'PROPERTY_DEFINITION_RELATIONSHIP.' +
                                 'RELATED_PROPERTY_DEFINITION') |
                      pdr.name = 'item allocation')
             ) > 1 )
           ) > 0 )
          OR
          (SIZEOF(QUERY(pd <* USEDIN(sar,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PROPERTY_DEFINITION.' +
                                     'DEFINITION') |
             SIZEOF(QUERY(pdr <* USEDIN(pd,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'PROPERTY_DEFINITION_RELATIONSHIP.' +
                                 'RELATED_PROPERTY_DEFINITION') |
                      pdr.name = 'item allocation')
             ) = 1 )
           ) = 0 )
          OR
          (SIZEOF(QUERY(pd <* USEDIN(sar,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PROPERTY_DEFINITION.' +
                                     'DEFINITION') |
             SIZEOF(QUERY(pdr <* USEDIN(pd,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'PROPERTY_DEFINITION_RELATIONSHIP.' +
                                 'RELATED_PROPERTY_DEFINITION') |
                      pdr.name = 'item allocation')
             ) = 1 )
           ) > 1 )
       THEN RETURN(FALSE);
       END_IF;
      END;

    'route course sequence':
      BEGIN
       IF SIZEOF(TYPEOF(sar.related_shape_aspect) * 
                   ['ELECTROTECHNICAL_DESIGN.' +
                    'INSTALLATION_NODE',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'INSTALLATION_SECTION',
                    'ELECTROTECHNICAL_DESIGN.' +
                    'INSTALLATION_SECTION_INTERFACE']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_ROUTE'
              IN TYPEOF(sar.relating_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'section end residence':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_NODE'
              IN TYPEOF(sar.related_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION_END'
              IN TYPEOF(sar.relating_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'section interface residence':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_NODE'
              IN TYPEOF(sar.related_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION_INTERFACE'
              IN TYPEOF(sar.relating_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'section join':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION_END'
              IN TYPEOF(sar.related_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION_INTERFACE'
              IN TYPEOF(sar.relating_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'section termination':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION'
              IN TYPEOF(sar.related_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_SECTION_END'
              IN TYPEOF(sar.relating_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'segment termination':
      BEGIN
       IF NOT('ELECTROTECHNICAL_DESIGN.INSTALLATION_NODE'
              IN TYPEOF(sar.related_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
       IF NOT('ELECTROTECHNICAL_DESIGN.FREE_SEGMENT'
              IN TYPEOF(sar.relating_shape_aspect))
       THEN RETURN(FALSE);
       END_IF;
      END;

    'terminal allocation':
      BEGIN
       IF SIZEOF(TYPEOF(sar.related_shape_aspect) * 
                   ['ELECTROTECHNICAL_DESIGN.TERMINAL']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF SIZEOF(TYPEOF(sar.relating_shape_aspect) * 
                   ['ELECTROTECHNICAL_DESIGN.TERMINAL']
          ) = 0
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(sar.related_shape_aspect.of_shape.definition\
              product_definition.name = 'single instance')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(sar.relating_shape_aspect.of_shape.definition\
              product_definition.name = 'single instance')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(sar.related_shape_aspect.of_shape.definition\
              product_definition.frame_of_reference.name
              = 'part occurrence')
       THEN RETURN(FALSE);
       END_IF;
       IF NOT(sar.relating_shape_aspect.of_shape.definition\
              product_definition.frame_of_reference.name
              = 'functional occurrence')
       THEN RETURN(FALSE);
       END_IF;
       IF (SIZEOF(QUERY(pd <* USEDIN(sar,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PROPERTY_DEFINITION.' +
                                     'DEFINITION') |
             SIZEOF(QUERY(pdr <* USEDIN(pd,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'PROPERTY_DEFINITION_RELATIONSHIP.' +
                                 'RELATED_PROPERTY_DEFINITION') |
                      pdr.name = 'item allocation')
             ) > 1 )
           ) > 0 )
          OR
          (SIZEOF(QUERY(pd <* USEDIN(sar,
                                     'ELECTROTECHNICAL_DESIGN.' +
                                     'PROPERTY_DEFINITION.' +
                                     'DEFINITION') |
             SIZEOF(QUERY(pdr <* USEDIN(pd,
                                 'ELECTROTECHNICAL_DESIGN.' +
                                 'PROPERTY_DEFINITION_RELATIONSHIP.' +
                                 'RELATED_PROPERTY_DEFINITION') |
                      pdr.name = 'item allocation')
             ) = 1 )
           ) > 1 )
       THEN RETURN(FALSE);
       END_IF;
      END;

    OTHERWISE: RETURN(TRUE);
  END_CASE;

  RETURN(TRUE);

END_FUNCTION;

FUNCTION value_range_wr1(
     agg: AGGREGATE OF representation_item): BOOLEAN;
  BEGIN
    IF (SIZEOF(agg) = 2) AND ((SIZEOF(QUERY ( i1 <* agg | (
    'ELECTROTECHNICAL_DESIGN.MEASURE_REPRESENTATION_ITEM' IN TYPEOF
    (i1)) ))
    = 2) OR (SIZEOF(QUERY ( i2 <* agg | (
    'ELECTROTECHNICAL_DESIGN.VALUE_REPRESENTATION_ITEM' IN TYPEOF
    (i2)) ))
    = 2)) THEN
      RETURN(TRUE);
    ELSE
      RETURN(FALSE);
    END_IF;
  END;

END_FUNCTION; -- value_range_wr1

FUNCTION value_range_wr2(
      agg: AGGREGATE OF representation_item): BOOLEAN;
  BEGIN
    IF (SIZEOF(QUERY ( i <* agg | (i.name = 'upper limit')
        )) = 1)
    AND (SIZEOF(QUERY ( i <* agg | (i.name = 'lower limit')
         )) = 1)
     THEN
      RETURN(TRUE);
    ELSE
      RETURN(FALSE);
    END_IF;
  END;
 
END_FUNCTION; -- value_range_wr2

FUNCTION value_range_wr3(
    agg: AGGREGATE OF representation_item): BOOLEAN;
  BEGIN
    IF (SIZEOF(QUERY ( i <* agg | (
    'ELECTROTECHNICAL_DESIGN.MEASURE_REPRESENTATION_ITEM' IN 
    TYPEOF(i)) ))
    <> 2) OR (SIZEOF(QUERY ( i1 <* agg | 
     ('ELECTROTECHNICAL_DESIGN.MEASURE_REPRESENTATION_ITEM' 
     IN TYPEOF (i1))
     AND
     (SIZEOF(QUERY ( i2 <* agg
     | ((i1\measure_with_unit.unit_component
    :=: i2\measure_with_unit.unit_component) OR
     (i1\measure_with_unit.unit_component :=:
     i2\measure_with_unit.unit_component)) ))
    = 2) )) = 2) THEN
      RETURN(TRUE);
    ELSE
      RETURN(FALSE);
    END_IF;
  END;

END_FUNCTION; -- value_range_wr3

END_SCHEMA; -- electrotechnical_design
