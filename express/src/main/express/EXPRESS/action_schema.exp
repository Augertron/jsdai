-- 2000-09-08

(*

	WG12 N525 								2000-05-30

	EXPRESS Declarations for ISO 10303-41: 2nd Edition
*)

SCHEMA action_schema;
REFERENCE FROM basic_attribute_schema                  -- ISO 10303-41
  (description_attribute,
   get_description_value,
   get_id_value,
   get_name_value,
   id_attribute,
   name_attribute);
REFERENCE FROM support_resource_schema                 -- ISO 10303-41
  (bag_to_set,
   identifier,
   label,
   text);

TYPE supported_item = SELECT
  (action_directive,
   action,
   action_method);
END_TYPE; -- supported_item

ENTITY action;
  name          : label;
  description   : OPTIONAL text;
  chosen_method : action_method;
DERIVE
  id            : identifier := get_id_value (SELF);
WHERE
  WR1 : SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                       'ID_ATTRIBUTE.IDENTIFIED_ITEM')) <= 1;
END_ENTITY; -- action

ENTITY action_directive;
  name        : label;
  description : OPTIONAL text;
  analysis    : text;
  comment     : text;
  requests    : SET[1:?] OF versioned_action_request;
END_ENTITY; -- action_directive

ENTITY action_method;
  name        : label;
  description : OPTIONAL text;
  consequence : text;
  purpose     : text;
END_ENTITY; -- action_method

ENTITY action_method_relationship;
  name            : label;
  description     : OPTIONAL text;
  relating_method : action_method;
  related_method  : action_method;
END_ENTITY; -- action_method_relationship

ENTITY action_relationship;
  name            : label;
  description     : OPTIONAL text;
  relating_action : action;
  related_action  : action;
END_ENTITY; -- action_relationship

ENTITY action_request_solution;
  method      : action_method;
  request     : versioned_action_request;
DERIVE
  description : text := get_description_value (SELF);
  name        : label := get_name_value (SELF);
WHERE
  WR1 : SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                       'DESCRIPTION_ATTRIBUTE.DESCRIBED_ITEM')) <= 1;
  WR2 : SIZEOF (USEDIN (SELF, 'BASIC_ATTRIBUTE_SCHEMA.' +
                       'NAME_ATTRIBUTE.NAMED_ITEM')) <= 1;
END_ENTITY; -- action_request_solution

ENTITY action_request_status;
  status           : label;
  assigned_request : versioned_action_request;
END_ENTITY; -- action_request_status

ENTITY action_resource;
  name        : label;
  description : OPTIONAL text;
  usage       : SET [1:?] OF supported_item;
  kind        : action_resource_type;
END_ENTITY; -- action_resource

ENTITY action_resource_relationship;
  name              : label;
  description       : OPTIONAL text;
  relating_resource : action_resource;
  related_resource  : action_resource;
END_ENTITY; -- action_resource_relationship

ENTITY action_resource_type;
  name : label;
END_ENTITY; -- action_resource_type

ENTITY action_status;
  status          : label;
  assigned_action : executed_action;
END_ENTITY; -- action_status

ENTITY directed_action
  SUBTYPE OF (executed_action);
  directive : action_directive;
END_ENTITY; -- directed_action

ENTITY executed_action
  SUBTYPE OF (action);
END_ENTITY; -- executed_action

ENTITY versioned_action_request;
  id          : identifier;
  version     : label;
  purpose     : text;
  description : OPTIONAL text;
END_ENTITY; -- versioned_action_request

FUNCTION acyclic_action_method_relationship
  (relation          : action_method_relationship;
   relatives         : SET [1:?] OF action_method;
   specific_relation : STRING) : BOOLEAN;
  LOCAL
    x                : SET OF action_method_relationship;
  END_LOCAL;
  IF relation.relating_method IN relatives THEN 
    RETURN (FALSE);
  END_IF;
  x := QUERY (am <* bag_to_set 
             (USEDIN (relation.relating_method,
             'ACTION_SCHEMA.' + 
             'ACTION_METHOD_RELATIONSHIP.' +
             'RELATED_METHOD')) |
              specific_relation IN TYPEOF (am));
  REPEAT i := 1 TO HIINDEX(x);
    IF NOT acyclic_action_method_relationship
      (x[i], 
       relatives + relation.relating_method, 
       specific_relation) THEN
      RETURN(FALSE);
    END_IF;
  END_REPEAT;
  RETURN(TRUE);
END_FUNCTION; -- acyclic_action_method_relationship

FUNCTION acyclic_action_relationship
  (relation          : action_relationship;
   relatives         : SET [1:?] OF action;
   specific_relation : STRING) : BOOLEAN;
  LOCAL
    x                : SET OF action_relationship;
  END_LOCAL;
  IF relation.relating_action IN relatives THEN 
    RETURN (FALSE);
  END_IF;
  x := QUERY (actn <* bag_to_set 
             (USEDIN (relation.relating_action,
             'ACTION_SCHEMA.' + 
             'ACTION_RELATIONSHIP.' +
             'RELATED_ACTION')) |
              specific_relation IN TYPEOF (actn));
  REPEAT i := 1 TO HIINDEX(x);
    IF NOT acyclic_action_relationship
      (x[i], 
       relatives + relation.relating_action, 
       specific_relation) THEN
      RETURN(FALSE);
    END_IF;
  END_REPEAT;
  RETURN(TRUE);
END_FUNCTION; -- acyclic_action_relationship

FUNCTION acyclic_action_resource_relationship
  (relation          : action_resource_relationship;
   relatives         : SET [1:?] OF action_resource;
   specific_relation : STRING) : BOOLEAN;
  LOCAL
    x                : SET OF action_resource_relationship;
  END_LOCAL;
  IF relation.relating_resource IN relatives THEN 
    RETURN (FALSE);
  END_IF;
  x := QUERY (ar <* bag_to_set 
             (USEDIN (relation.relating_resource,
             'ACTION_SCHEMA.' + 
             'ACTION_RESOURCE_RELATIONSHIP.' +
             'RELATED_RESOURCE')) |
              specific_relation IN TYPEOF (ar));
  REPEAT i := 1 TO HIINDEX(x);
    IF NOT acyclic_action_resource_relationship
      (x[i], 
       relatives + relation.relating_resource, 
       specific_relation) THEN
      RETURN(FALSE);
    END_IF;
  END_REPEAT;
  RETURN(TRUE);
END_FUNCTION; -- acyclic_action_resource_relationship

END_SCHEMA; -- action_schema
