<?xml version="1.0"?>
<!--
/*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 */
-->

<project name="core" default="build" basedir=".">

	<!-- properties provided from the master and local properties files -->
	<property environment="env"/>
	<property file="local.properties"/>
	<property file="properties"/>
	<property file="${user.home}/.ant-global.properties"/>

	<!-- Directory for CVS checkout -->
	<property name="cvs.dir" location="." />
	<property name="core.cvs.modules" value="." />
	<property name="cvs.rsh" value="ssh" />

	<target name="-base.environment">
		<!-- Directory tree definition -->
		<!-- Directories in which the build is done -->
		<property name="build.dir" location="build"/>
		<property name="main.dir" location="${build.dir}/main"/>
        <property name="build-doc.dir" location="${build.dir}/doc"/>
		<property name="src-generated.dir" location="${build.dir}/src-generated"/>
		<property name="expressCompiler.dir" location="${build.dir}/ExpressCompiler"/>
		<property name="src-doc.dir" location="${build.dir}/src-doc"/>
        <property name="express.dicmap.dir" location="${build.dir}/express/EXPRESS_DICMAP"/>
		<property name="docs.dir" location="docs"/>

		<!-- Directory in which the created jars are placed -->
		<property name="out.dir" location="out"/>

		<!-- Directories in which source files are placed -->
		<property name="src.dir" location="src"/>

		<!-- Directory in which source files are placed -->
		<property name="lib.dir" location="lib"/>

		<!-- Directories in which EXPRESS file hierarchy is placed -->
		<property name="express.dir" location="express/EXPRESS"/>
		<property name="complex.entities.dir" location="express/COMPLEX_ENTITIES"/>

		<!-- Common Java VM parameters -->
		<property name="javac.optimize.flag" value="yes"/>
		<property name="javac.debug.flag" value="yes"/>
		<property name="javac.code.version" value="1.4"/>

		<!-- Javacc V2.1 directory -->
		<property name="javacc.home.dir" location="${lib.dir}"/>

		<!-- Specific Java VM parameters for express compiler -->
		<property name="expressCompiler.jvmargs" value="-Xms96M -Xmx448M"/>
		<condition property="jsdai.eclipse.notrequired.true">
			<istrue value="${jsdai.eclipse.notrequired}"/>
		</condition>
	</target>

	<target name="-environment" depends="-base.environment">
		<!-- Try to load previous build time properties and save them for the next build -->
		<mkdir dir="${build.dir}"/>
		<property file="${build.dir}/tstamp.properties"/>
		<tstamp>
			<format property="build.time" pattern="yyyy-MM-dd'T'HH:mm:ss"/>
			<format property="touch.time" pattern="MM/dd/yyyy hh:mm aa"/>
			<format property="buildId" pattern="yy-DDD-HHmm"/>
			<format property="env.BUILD_ID" pattern="yyyyMMdd-hhmm"/>
		</tstamp>
		<echo file="${build.dir}/tstamp.properties"
>DSTAMP=${DSTAMP}
TSTAMP=${TSTAMP}
TODAY=${TODAY}
env.BUILD_ID=${env.BUILD_ID}
build.time=${build.time}
touch.time=${touch.time}
buildId=${buildId}
</echo>
	</target>

	<target name="clean" depends="-base.environment" description="Clean all the data from previous builds">
		<delete dir="${build.dir}"/>
		<delete dir="${out.dir}"/>
		<!-- Delete files generated by anltr and javacc -->
		<delete>
			<fileset dir="${src.dir}/jsdai/mappingUtils/paths">
				<include name="MappingDataWalker*"/>
				<include name="MappingInfoWalker*"/>
				<include name="MappingPathLexer*"/>
				<include name="MappingPathParser*"/>
				<include name="MappingPathPreparser*"/>
				<include name="MappingPathWalker*"/>
				<include name="PathExtractorM*"/>
				<include name="PathExtractorSgml*"/>
			</fileset>
            <fileset dir="${src.dir}/jsdai/expressCompiler">
                <include name="Compiler2*.java"/>
                <include name="Express2.jj"/>
                <include name="ParseException.java"/>
                <include name="SimpleCharStream.java"/>
                <include name="Token*.java"/>
            </fileset>
		</delete>
		
	</target>

	<target name="-set.classpath">
		<!-- Set classpath for the project -->
		<path id="classpath">
			<pathelement location="${main.dir}" />
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
		</path>
		<property name="classpath" refid="classpath"/>
	</target>

	<target name="-get.cvs.status" unless="core.version.available">
        <loadfile property="cvs.root" srcfile="CVS/Root">
            <filterchain>
                <striplinebreaks />
            </filterchain>
        </loadfile>
		<cvs quiet="true" command="-Q status ${core.cvs.modules}"
			 output="${main.dir}/core.version" dest="${cvs.dir}" cvsrsh="${cvs.rsh}" cvsroot="${cvs.root}"/>
	</target>

	<target name="prepare.dirs" depends="-environment, -set.classpath"
			description="Set properties and other initial environment">
		<mkdir dir="${out.dir}"/>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${main.dir}"/>
		<condition property="core.version.available">
			<or>
				<available file="${main.dir}/core.version"/>
				<not>
					<available file="CVS/Root"/>
			    </not>
			</or>
		</condition>
		<antcall target="-get.cvs.status" inheritall="true"/>
		<mkdir dir="${src-generated.dir}"/>
		<filter token="JSDAI.BUILD" value="${DSTAMP}-${TSTAMP}"/>
		<filter token="JSDAI.VERSION.MAJOR" value="${jsdai.version.major}"/>
		<filter token="JSDAI.VERSION.MIDDLE" value="${jsdai.version.middle}"/>
		<filter token="JSDAI.VERSION.MINOR" value="${jsdai.version.minor}"/>
		<filter token="RUNTIME.VERSION.MAJOR" value="${runtime.version.major}"/>
		<filter token="RUNTIME.VERSION.MIDDLE" value="${runtime.version.middle}"/>
		<filter token="RUNTIME.VERSION.MINOR" value="${runtime.version.minor}"/>
		<filter token="JSDAI.COPYRIGHT" value="${jsdai.copyright}"/>
        <filter token="JSDAI.COPYRIGHT.HTML" value="${jsdai.copyright.html}"/>
		<filter token="TODAY" value="${build.time}"/>
		<copy todir="${main.dir}" filtering="yes">
			<fileset dir="${src.dir}">
				<include name="**/*.txt"/>
			</fileset>
		</copy>
		<copy todir="${main.dir}">
			<fileset dir="${src.dir}">
				<include name="**/*.jpg"/>
				<include name="**/*.gif"/>
				<include name="**/*.png"/>
				<include name="**/*.xml"/>
				<include name="**/*.dtd"/>
				<include name="**/*_DATA"/>
				<include name="**/*.txt"/>
				<include name="**/*.properties"/>
				<include name="**/*.sql"/>
				<include name="**/*.dxf"/>
				<include name="**/*.wsdd"/>
				<include name="**/infoText.html"/>
				<exclude name="jsdai/M*/*_DATA"/>
				<exclude name="jsdai/S*/*_DATA"/>
				<exclude name="**/build.xml"/>
				<exclude name="**/build_*.xml"/>
			</fileset>
			<fileset dir="${src.dir}">
				<include name="jsdai/SExtended_dictionary_schema/*_DATA"/>
			</fileset>
		</copy>
		<copy todir="${src-generated.dir}" filtering="yes">
			<fileset dir="${src.dir}">
				<include name="jsdai/**/manifest"/>
			</fileset>
		</copy>
	</target>

	<target name="-echo.debug.properties" unless="jsdai.util.debug.properties.output">
		<echo file="${main.dir}/jsdai/util/debug.properties" 
			  message="output=no"/>
	</target>

	<target name="compile.lang" depends="prepare.dirs"
			description="Compiles and copies sources for the jsdai_lang.jar">
		<copy todir="${src-generated.dir}" filtering="yes">
			<fileset dir="${src.dir}">
				<include name="jsdai/lang/Implementation.java"/>
			</fileset>
		</copy>
		<javac classpathref="classpath" destdir="${main.dir}" optimize="${javac.optimize.flag}"
			   debug="${javac.debug.flag}" srcdir="${src-generated.dir}/jsdai/lang:${src.dir}"
			   source="${javac.code.version}" target="${javac.code.version}">
			<include name="Implementation.java"/>
			<include name="jsdai/beans/**"/>
			<include name="jsdai/client/**"/>
			<include name="jsdai/dictionary/**"/>
			<include name="jsdai/lang/**"/>
			<include name="jsdai/mapping/**"/>
			<include name="jsdai/query/**"/>
			<include name="jsdai/util/**"/>
			<include name="jsdai/xml/**"/>
			<include name="jsdai/io/ResettableFileInputStream.*"/>
			<exclude name="jsdai/lang/Implementation.java"/>
		</javac>
		<copy file="${main.dir}/jsdai/lang/Implementation.class" tofile="${main.dir}/Implementation.class"
			  preservelastmodified="true"/>
		<property file="${main.dir}/jsdai/util/debug.properties" prefix="jsdai.util.debug.properties"/>
		<antcall target="-echo.debug.properties"/>
	</target>

	<target name="-compile.expressCompiler.javacc.check">
		<uptodate targetfile="${src.dir}/jsdai/expressCompiler/Compiler2.java"
				  srcfile="${src.dir}/jsdai/expressCompiler/Express2.jjt"
				  property="compile.expressCompiler.javacc.notrequired" />
	</target>

	<!-- This target creates Express Compiler for future use -->
	<target name="compile.expressCompiler.javacc" unless="compile.expressCompiler.javacc.notrequired"
			depends="-environment, -compile.expressCompiler.javacc.check">
		<jjtree javacchome="${javacc.home.dir}" outputdirectory="${src.dir}/jsdai/expressCompiler"
				target="${src.dir}/jsdai/expressCompiler/Express2.jjt"/>
		<javacc javacchome="${javacc.home.dir}" outputdirectory="${src.dir}/jsdai/expressCompiler"
				target="${src.dir}/jsdai/expressCompiler/Express2.jj"/>
	</target>

	<target name="compile.expressCompiler" depends="compile.lang, compile.expressCompiler.javacc"
			description="Compiles Express Compiler sources">
		<javac classpathref="classpath" destdir="${main.dir}" optimize="${javac.optimize.flag}" 
               debug="${javac.debug.flag}" srcdir="${src.dir}"
            source="${javac.code.version}" target="${javac.code.version}">
			<include name="jsdai/SExtended_dictionary_schema/**"/>
			<include name="jsdai/expressCompiler/**"/>
			<exclude name="jsdai/expressCompiler/SelectCaseGenerator.*"/>
		</javac>
	</target>

	<target name="jar.express" depends="compile.expressCompiler, compile.jsdai.tools"
			description="Creates Express Compiler jar">
		<!--
		<delete file="${out.dir}/jsdai_express.jar"/>
-->
		<jar jarfile="${out.dir}/jsdai_express.jar" update="true">
			<metainf dir="${main.dir}">
				<include name="core.version"/>
			</metainf>
			<manifest>
				<attribute name="Specification-Title" value="JSDAI Core"/>
				<attribute name="Specification-Version" 
						   value="${express.version.major}.${express.version.middle}.${express.version.minor}"/>
				<attribute name="Specification-Vendor" value="${jsdai.vendor}"/>
				<attribute name="Implementation-Title" value="${express.implementation}"/>
				<attribute name="Implementation-Version" value="${env.BUILD_ID}"/>
				<attribute name="Implementation-Vendor" value="${jsdai.vendor}"/>
			</manifest>
			<fileset dir="${main.dir}">
				<include name="jsdai/expressCompiler/**"/>
				<include name="jsdai/tools/RepositoryChanges*"/>
			</fileset>
		</jar>
	</target>

	<target name="compile.utils" depends="prepare.dirs">
		<javac classpathref="classpath" destdir="${main.dir}" optimize="${javac.optimize.flag}" 
			   debug="${javac.debug.flag}" srcdir="${src.dir}"
			   source="${javac.code.version}" target="${javac.code.version}">
			<include name="com/lksoft/util/**/*.java"/>
		</javac>
	</target>

	<target name="generate.library.prep" unless="generate.library.notrequired"
			depends="-environment, -generate.library.condition">
		<delete dir="${expressCompiler.dir}/COMPLEX"/>
		<delete dir="${expressCompiler.dir}/jsdai"/>
		<delete dir="${expressCompiler.dir}/REPOSITORIES"/>
		<delete file="${expressCompiler.dir}/isGenerated"/>
		<mkdir dir="${expressCompiler.dir}"/>
		<mkdir dir="${expressCompiler.dir}/COMPLEX"/>
		<mkdir dir="${expressCompiler.dir}/jsdai"/>
		<mkdir dir="${expressCompiler.dir}/REPOSITORIES"/>
		<property name="jsdai.repository.dir" location="${expressCompiler.dir}/REPOSITORIES"/>
		<propertyfile file="${expressCompiler.dir}/jsdai.properties" comment="Generated by Ant">
			<entry key="repositories" value="${jsdai.repository.dir}"/>
			<entry key="new.repository.format" value="SDAI"/>
		</propertyfile>
		<copy todir="${expressCompiler.dir}">
			<fileset dir="${complex.entities.dir}" includes="**.ce"/>
		</copy>
	</target>

	<target name="generate.library.dicmap" unless="generate.library.notrequired"
			depends="-environment, -generate.library.condition">
		<copy tofile="${express.dicmap.dir}/SDAI_dictionary_schema.exp" 
			  file="${express.dir}/extended_dictionary_schema.exp" overwrite="yes"/>
		<replace file="${express.dicmap.dir}/SDAI_dictionary_schema.exp"
				 token="SCHEMA extended_dictionary_schema;"
				 value="SCHEMA SDAI_dictionary_schema;"/>
		<copy tofile="${express.dicmap.dir}/SDAI_mapping_schema.exp" 
			  file="${express.dir}/mapping_schema.exp" overwrite="yes"/>
		<replace file="${express.dicmap.dir}/SDAI_mapping_schema.exp"
				 token="SCHEMA mapping_schema;"
				 value="SCHEMA sdai_mapping_schema;"/>
		<replace file="${express.dicmap.dir}/SDAI_mapping_schema.exp"
				 token="REFERENCE FROM extended_dictionary_schema;"
				 value="REFERENCE FROM sdai_dictionary_schema;"/>
	</target>

	<target name="generate.library.system" unless="generate.library.notrequired" 
			depends="compile.expressCompiler, -generate.library.condition, generate.library.prep, generate.library.dicmap">
		<concat append="false" destfile="${expressCompiler.dir}/ExpressCompilerRepo.exp">
			<fileset file="${express.dicmap.dir}/SDAI_dictionary_schema.exp"/>
            <fileset file="${express.dicmap.dir}/SDAI_mapping_schema.exp"/>
		</concat>
		<java fork="yes" dir="${expressCompiler.dir}" classname="jsdai.expressCompiler.Main"
			  failonerror="yes">
			<classpath>
				<pathelement location="${build.dir}/config-licensing-off"/>
				<path refid="classpath"/>
			</classpath>
			<sysproperty key="jsdai.properties" value="${expressCompiler.dir}"/>
			<jvmarg line="${expressCompiler.jvmargs}"/>
			<arg line="-repository -is -relax -binaries -java -no_active_nodes -no_amendment"/>
			<arg value="-express"/>
			<arg file="${expressCompiler.dir}/ExpressCompilerRepo.exp"/>
			<arg value="-complex"/>
			<arg value="dictionary.ce"/>
			<arg value="-compilation_sn"/>
			<arg value="0"/>
			<arg value="-index_file"/>
		</java>
		<!-- Manual updates to mapping classes -->
		<replace file="${expressCompiler.dir}/jsdai/mapping/CEntity_mapping.java">
			<replacetoken>public class CEntity_mapping extends CEntity implements EEntity_mapping {</replacetoken>
			<replacevalue>public class CEntity_mapping extends CEntityMappingBase implements EEntity_mapping {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CAggregate_member_constraint.java">
			<replacetoken>public class CAggregate_member_constraint extends CConstraint_attribute implements EAggregate_member_constraint {</replacetoken>
			<replacevalue>public class CAggregate_member_constraint extends CMappingAggregate_member_constraint implements EAggregate_member_constraint {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CAnd_constraint_relationship.java">
			<replacetoken>public class CAnd_constraint_relationship extends CInstance_constraint implements EAnd_constraint_relationship {</replacetoken>
			<replacevalue>public class CAnd_constraint_relationship extends CMappingAnd_constraint_relationship implements EAnd_constraint_relationship {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CAttribute_mapping.java">
			<replacetoken>public class CAttribute_mapping extends CGeneric_attribute_mapping implements EAttribute_mapping {</replacetoken>
			<replacevalue>public class CAttribute_mapping extends CMappingAttribute_mapping implements EAttribute_mapping {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CAttribute_mapping_boolean_value.java">
			<replacetoken>public class CAttribute_mapping_boolean_value extends CAttribute_mapping_value implements EAttribute_mapping_boolean_value {</replacetoken>
			<replacevalue>public class CAttribute_mapping_boolean_value extends CMappingAttribute_mapping_boolean_value implements EAttribute_mapping_boolean_value {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CAttribute_mapping_enumeration_value.java">
			<replacetoken>public class CAttribute_mapping_enumeration_value extends CAttribute_mapping_value implements EAttribute_mapping_enumeration_value {</replacetoken>
			<replacevalue>public class CAttribute_mapping_enumeration_value extends CMappingAttribute_mapping_enumeration_value implements EAttribute_mapping_enumeration_value {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CAttribute_mapping_int_value.java">
			<replacetoken>public class CAttribute_mapping_int_value extends CAttribute_mapping_value implements EAttribute_mapping_int_value {</replacetoken>
			<replacevalue>public class CAttribute_mapping_int_value extends CMappingAttribute_mapping_int_value implements EAttribute_mapping_int_value {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CAttribute_mapping_logical_value.java">
			<replacetoken>public class CAttribute_mapping_logical_value extends CAttribute_mapping_value implements EAttribute_mapping_logical_value {</replacetoken>
			<replacevalue>public class CAttribute_mapping_logical_value extends CMappingAttribute_mapping_logical_value implements EAttribute_mapping_logical_value {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CAttribute_mapping_real_value.java">
			<replacetoken>public class CAttribute_mapping_real_value extends CAttribute_mapping_value implements EAttribute_mapping_real_value {</replacetoken>
			<replacevalue>public class CAttribute_mapping_real_value extends CMappingAttribute_mapping_real_value implements EAttribute_mapping_real_value {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CAttribute_mapping_string_value.java">
			<replacetoken>public class CAttribute_mapping_string_value extends CAttribute_mapping_value implements EAttribute_mapping_string_value {</replacetoken>
			<replacevalue>public class CAttribute_mapping_string_value extends CMappingAttribute_mapping_string_value implements EAttribute_mapping_string_value {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CEnd_of_path_constraint.java">
			<replacetoken>public class CEnd_of_path_constraint extends CConstraint implements EEnd_of_path_constraint {</replacetoken>
			<replacevalue>public class CEnd_of_path_constraint extends CMappingEnd_of_path_constraint implements EEnd_of_path_constraint {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CEntity_constraint.java">
			<replacetoken>public class CEntity_constraint extends CConstraint_attribute implements EEntity_constraint {</replacetoken>
			<replacevalue>public class CEntity_constraint extends CMappingEntity_constraint implements EEntity_constraint {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CIntersection_constraint.java">
			<replacetoken>public class CIntersection_constraint extends CConstraint implements EIntersection_constraint {</replacetoken>
			<replacevalue>public class CIntersection_constraint extends CMappingIntersection_constraint implements EIntersection_constraint {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CInverse_attribute_constraint.java">
			<replacetoken>public class CInverse_attribute_constraint extends CConstraint implements EInverse_attribute_constraint {</replacetoken>
			<replacevalue>public class CInverse_attribute_constraint extends CMappingInverse_attribute_constraint implements EInverse_attribute_constraint {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CPath_constraint.java">
			<replacetoken>public class CPath_constraint extends CConstraint_relationship implements EPath_constraint {</replacetoken>
			<replacevalue>public class CPath_constraint extends CMappingPath_constraint implements EPath_constraint {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CSelect_constraint.java">
			<replacetoken>public class CSelect_constraint extends CConstraint_attribute implements ESelect_constraint {</replacetoken>
			<replacevalue>public class CSelect_constraint extends CMappingSelect_constraint implements ESelect_constraint {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CType_constraint.java">
			<replacetoken>public class CType_constraint extends CConstraint implements EType_constraint {</replacetoken>
			<replacevalue>public class CType_constraint extends CMappingType_constraint implements EType_constraint {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/dictionary/CDerived_attribute.java">
			<replacetoken>public class CDerived_attribute extends CEntity implements EDerived_attribute {</replacetoken>
			<replacevalue>public class CDerived_attribute extends CMappingDerived_attribute implements EDerived_attribute {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/dictionary/CExplicit_attribute.java">
			<replacetoken>public class CExplicit_attribute extends AttributeDefinition implements EExplicit_attribute {</replacetoken>
			<replacevalue>public class CExplicit_attribute extends CMappingExplicit_attribute implements EExplicit_attribute {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/dictionary/CInverse_attribute.java">
			<replacetoken>public class CInverse_attribute extends CEntity implements EInverse_attribute {</replacetoken>
			<replacevalue>public class CInverse_attribute extends CMappingInverse_attribute implements EInverse_attribute {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CNegation_constraint.java">
			<replacetoken>public class CNegation_constraint extends CConstraint implements ENegation_constraint {</replacetoken>
			<replacevalue>public class CNegation_constraint extends CMappingNegation_constraint implements ENegation_constraint {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/COr_constraint_relationship.java">
			<replacetoken>public class COr_constraint_relationship extends CInstance_constraint implements EOr_constraint_relationship {</replacetoken>
			<replacevalue>public class COr_constraint_relationship extends CMappingOr_constraint_relationship implements EOr_constraint_relationship {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CInstance_equal.java">
			<replacetoken>public class CInstance_equal extends CInstance_constraint implements EInstance_equal {</replacetoken>
			<replacevalue>public class CInstance_equal extends CMappingInstance_equal implements EInstance_equal {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/mapping/CAttribute_value_constraint.java">
			<replacetoken>public class CAttribute_value_constraint extends CConstraint_attribute implements EAttribute_value_constraint {</replacetoken>
			<replacevalue>public class CAttribute_value_constraint extends CMappingAttribute_value_constraint implements EAttribute_value_constraint {</replacevalue>
		</replace>
		<!--replace file="${expressCompiler.dir}/jsdai/mapping/CString_constraint.java">
      <replacetoken>public class CString_constraint extends CAttribute_value_constraint implements EString_constraint {</replacetoken>
      <replacevalue>public class CString_constraint extends CMappingString_constraint implements EString_constraint {</replacevalue>
    </replace>
    <replace file="${expressCompiler.dir}/jsdai/mapping/CReal_constraint.java">
      <replacetoken>public class CReal_constraint extends CAttribute_value_constraint implements EReal_constraint {</replacetoken>
      <replacevalue>public class CReal_constraint extends CMappingReal_constraint implements EReal_constraint {</replacevalue>
    </replace>
    <replace file="${expressCompiler.dir}/jsdai/mapping/CLogical_constraint.java">
      <replacetoken>public class CLogical_constraint extends CAttribute_value_constraint implements ELogical_constraint {</replacetoken>
      <replacevalue>public class CLogical_constraint extends CMappingLogical_constraint implements ELogical_constraint {</replacevalue>
    </replace>
    <replace file="${expressCompiler.dir}/jsdai/mapping/CInteger_constraint.java">
      <replacetoken>public class CInteger_constraint extends CAttribute_value_constraint implements EInteger_constraint {</replacetoken>
      <replacevalue>public class CInteger_constraint extends CMappingInteger_constraint implements EInteger_constraint {</replacevalue>
    </replace>
    <replace file="${expressCompiler.dir}/jsdai/mapping/CEnumeration_constraint.java">
      <replacetoken>public class CEnumeration_constraint extends CAttribute_value_constraint implements EEnumeration_constraint {</replacetoken>
      <replacevalue>public class CEnumeration_constraint extends CMappingEnumeration_constraint implements EEnumeration_constraint {</replacevalue>
    </replace>
    <replace file="${expressCompiler.dir}/jsdai/mapping/CBoolean_constraint.java">
      <replacetoken>public class CBoolean_constraint extends CAttribute_value_constraint implements EBoolean_constraint {</replacetoken>
      <replacevalue>public class CBoolean_constraint extends CMappingBoolean_constraint implements EBoolean_constraint {</replacevalue>
    </replace-->
		<!--delete file="${expressCompiler.dir}/ExpressCompilerRepo.exp"/-->
		<delete>
			<fileset dir="${expressCompiler.dir}/jsdai/dictionary">
				<include name="*.java"/>
			</fileset>
		</delete>
		<touch file="${expressCompiler.dir}/isGenerated"/>
	</target>

	<target name="generate.library.mapping" 
			depends="generate.library.system"
			unless="generate.library.notrequired">
        <concat destfile="${expressCompiler.dir}/mapping_schemas.exp">
            <fileset dir="${express.dir}">
                <include name="extended_dictionary_schema.exp"/>
                <include name="mapping_schema.exp"/>
            </fileset>
        </concat>
		<java fork="yes" dir="${expressCompiler.dir}" classname="jsdai.expressCompiler.Main" 
			  failonerror="yes">
			<classpath>
				<pathelement location="${build.dir}/config-licensing-off"/>
				<path refid="classpath"/>
			</classpath>
			<sysproperty key="jsdai.properties" value="${expressCompiler.dir}"/>
			<jvmarg line="${expressCompiler.jvmargs}"/>
			<arg line="-java -is -relax -inst -binaries -no_active_nodes -no_amendment"/>
			<arg value="-express"/>
			<arg file="${expressCompiler.dir}/mapping_schemas.exp"/>
			<arg value="-complex"/>
			<arg value="dictionary.ce"/>
			<arg value="-index_file"/>
		</java>
		<!-- Manual updates to extended_dictionary_schema classes -->
		<replace file="${expressCompiler.dir}/jsdai/SExtended_dictionary_schema/CAggregation_type.java">
			<replacetoken>public class CAggregation_type extends CData_type implements EAggregation_type {</replacetoken>
			<replacevalue>public class CAggregation_type extends CAggregationTypeDeprecated implements EAggregation_type {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/SExtended_dictionary_schema/CEntity_definition.java">
			<replacetoken>public class CEntity_definition extends CEntity_or_view_definition implements EEntity_definition {</replacetoken>
			<replacevalue>public class CEntity_definition extends CEntityDefinitionDeprecated implements EEntity_definition {</replacevalue>
		</replace>
		<replace file="${expressCompiler.dir}/jsdai/SExtended_dictionary_schema/EEntity_definition.java">
			<replacetoken>public interface EEntity_definition extends EEntity_or_view_definition {</replacetoken>
			<replacevalue>public interface EEntity_definition extends EEntityDefinitionDeprecated {</replacevalue>
		</replace>
		<!--delete file="${expressCompiler.dir}/mapping_schemas.exp"/-->
	</target>

	<target name="-generate.library.condition">
		<uptodate targetfile="${expressCompiler.dir}/isGenerated" 
				  property="generate.library.notrequired">
			<srcfiles dir="${main.dir}/jsdai/expressCompiler/" includes="*.class"/>
			<srcfiles dir="${express.dir}" includes="*"/>
			<srcfiles dir="${complex.entities.dir}" includes="*"/>
		</uptodate>
	</target>

	<target name="compile.library" depends="generate.library.mapping"
			description="Compiles part of the library for core module">
		<javac classpathref="classpath" destdir="${main.dir}" 
			   debug="${javac.debug.flag}" optimize="${javac.optimize.flag}"
			   source="${javac.code.version}" target="${javac.code.version}">
			<src>
				<pathelement location="${expressCompiler.dir}"/>
			</src>
			<include name="jsdai/mapping/"/>
			<include name="jsdai/SExtended_dictionary_schema/"/>
			<include name="jsdai/SMapping_schema/"/>
		</javac>
		<copy todir="${main.dir}">
			<fileset dir="${expressCompiler.dir}">
				<include name="jsdai/**/*_DATA"/>
			</fileset>
		</copy>
	</target>

	<target name="jar.runtime" depends="compile.library, compile.utils"
			description="Creates jsdai_runtime.jar">
		<!--
		<delete file="${out.dir}/jsdai_runtime.jar"/>
-->
		<jar jarfile="${out.dir}/jsdai_runtime.jar" update="true">
			<metainf dir="${main.dir}">
				<include name="core.version"/>
			</metainf>
			<manifest>
				<attribute name="Specification-Title" value="JSDAI Core"/>
				<attribute name="Specification-Version" 
						   value="${runtime.version.major}.${runtime.version.middle}.${runtime.version.minor}"/>
				<attribute name="Specification-Vendor" value="${jsdai.vendor}"/>
				<attribute name="Implementation-Title" value="${runtime.implementation}"/>
				<attribute name="Implementation-Version" value="${env.BUILD_ID}"/>
				<attribute name="Implementation-Vendor" value="${jsdai.vendor}"/>
			</manifest>
			<fileset dir="${main.dir}">
				<include name="jsdai/lang/**"/>
				<include name="jsdai/dictionary/**"/>
				<include name="jsdai/mapping/**"/>
				<include name="jsdai/beans/**"/>
				<include name="jsdai/util/**"/>
				<include name="jsdai/client/**"/>
				<include name="jsdai/xml/**"/>
				<include name="jsdai/query/**"/>
				<include name="jsdai/io/ResettableFileInputStream.*"/>
				<include name="com/lksoft/util/**"/>
			</fileset>
		</jar>
	</target>

	<target name="zip.lib" depends="generate.library.system">
		<!--delete file="${out.dir}/lib.zip"/-->
		<zip zipfile="${out.dir}/lib.zip">
			<fileset dir="${expressCompiler.dir}">
				<include name="jsdai/**"/>
				<include name="REPOSITORIES/**"/>
			</fileset>
		</zip>
	</target>

	<target name="compile.mappingPathParser.antlr" depends="-environment">
		<antlr target="${src.dir}/jsdai/mappingUtils/paths/mappingPathParser.g">
			<classpath location="${lib.dir}/antlr.jar"/>
		</antlr>
		<antlr target="${src.dir}/jsdai/mappingUtils/paths/mappingPathWalker.g">
			<classpath location="${lib.dir}/antlr.jar"/>
		</antlr>
		<antlr target="${src.dir}/jsdai/mappingUtils/paths/mappingDataWalker.g">
			<classpath location="${lib.dir}/antlr.jar"/>
		</antlr>
		<antlr target="${src.dir}/jsdai/mappingUtils/paths/mappingPathPreparser.g">
			<classpath location="${lib.dir}/antlr.jar"/>
		</antlr>
		<antlr target="${src.dir}/jsdai/mappingUtils/paths/mappingInfo.g">
			<classpath location="${lib.dir}/antlr.jar"/>
		</antlr>
		<antlr target="${src.dir}/jsdai/mappingUtils/paths/pathExtractorM.g">
			<classpath location="${lib.dir}/antlr.jar"/>
		</antlr>
		<antlr target="${src.dir}/jsdai/mappingUtils/paths/pathExtractorSgml.g">
			<classpath location="${lib.dir}/antlr.jar"/>
		</antlr>
	</target>

	<target name="compile.mappingPathParser" depends="compile.library, compile.mappingPathParser.antlr">
		<javac classpathref="classpath" destdir="${main.dir}" optimize="${javac.optimize.flag}" 
			   debug="${javac.debug.flag}" srcdir="${src.dir}"
			   source="${javac.code.version}" target="${javac.code.version}">
			<include name="jsdai/mappingUtils/paths/**"/>
			<include name="com/lksoft/ant/MappingCompiler*"/>
			<include name="com/lksoft/ant/Cut_file*"/>
		</javac>
		<javac classpathref="classpath" destdir="${main.dir}" optimize="${javac.optimize.flag}" 
			   debug="${javac.debug.flag}" srcdir="${src.dir}"
			   source="${javac.code.version}" target="${javac.code.version}">
			<include name="jsdai/mappingCompiler/tools/ReplaceUsageOfDerivedAttributes.java"/>
		</javac>
	</target>

	<target name="compile.mappingUtils" depends="compile.library">
		<javac classpathref="classpath" destdir="${main.dir}" optimize="${javac.optimize.flag}" 
			   debug="${javac.debug.flag}" srcdir="${src.dir}"
			   source="${javac.code.version}" target="${javac.code.version}">
			<include name="jsdai/mappingUtils/**"/>
			<exclude name="jsdai/mappingUtils/paths/**"/>
		</javac>
	</target>

	<target name="jar.mappingUtils" depends="compile.mappingUtils, compile.mappingPathParser"
			description="Creates jsdai_mappingUtils.jar">
		<!--
		<delete file="${out.dir}/jsdai_mappingUtils.jar"/>
-->
		<jar jarfile="${out.dir}/jsdai_mappingUtils.jar" update="true">
			<metainf dir="${main.dir}">
				<include name="core.version"/>
			</metainf>
			<manifest>
				<attribute name="Specification-Title" value="JSDAI Core"/>
				<attribute name="Specification-Version" 
						   value="${mapping.version.major}.${mapping.version.middle}.${mapping.version.minor}"/>
				<attribute name="Specification-Vendor" value="${jsdai.vendor}"/>
				<attribute name="Implementation-Title" value="${mapping.implementation}"/>
				<attribute name="Implementation-Version" value="${env.BUILD_ID}"/>
				<attribute name="Implementation-Vendor" value="${jsdai.vendor}"/>
			</manifest>
			<fileset dir="${main.dir}">
				<include name="jsdai/mappingUtils/**"/>
				<include name="com/lksoft/ant/MappingCompiler*"/>
				<include name="com/lksoft/ant/Cut_file*"/>
				<include name="jsdai/mappingCompiler/tools/ComparatorOfAttributes*"/>
				<include name="jsdai/mappingCompiler/tools/ReplaceUsageOfDerivedAttributes*"/>
				<include name="jsdai/mappingCompiler/util/**"/>
			</fileset>
		</jar>
	</target>

	<!--
	<target name="zip.SExtended_dictionary_schema" depends="compile.library">
		<jar jarfile="${out.dir}/SExtended_dictionary_schema.zip" update="true">
			<metainf dir="${main.dir}">
				<include name="core.version"/>
			</metainf>
			<manifest>
				<attribute name="Specification-Title" value="JSDAI Core"/>
				<attribute name="Specification-Version" 
						   value="${runtime.version.major}.${runtime.version.middle}.${runtime.version.minor}"/>
				<attribute name="Specification-Vendor" value="${jsdai.vendor}"/>
				<attribute name="Implementation-Title" value="jsdai SExtended dictionary schema"/>
				<attribute name="Implementation-Version" value="${env.BUILD_ID}"/> 
				<attribute name="Implementation-Vendor" value="${jsdai.vendor}"/>
			</manifest>
			<fileset dir="${main.dir}">
				<include name="jsdai/SExtended_dictionary_schema/**"/>
				<include name="jsdai/SMapping_schema/"/>
			</fileset>
			<fileset dir="${expressCompiler.dir}">
				<include name="jsdai/repository.properties"/>
			</fileset>
		</jar>
	</target>
-->

	<target name="zip.SExtended_dictionary_schema" depends="compile.library">
		<!--
		<delete file="${out.dir}/SExtended_dictionary_schema.zip"/>
-->
		<zip update="true" zipfile="${out.dir}/SExtended_dictionary_schema.zip">
			<fileset dir="${main.dir}">
				<include name="jsdai/SExtended_dictionary_schema/**"/>
				<include name="jsdai/SMapping_schema/"/>
			</fileset>
			<fileset dir="${expressCompiler.dir}">
				<include name="jsdai/repository.properties"/>
			</fileset>
		</zip>
	</target>

	<target name="compile.ExpressDoc" depends="compile.lang" description="Compiles ExpressDoc utility">
		<javac classpathref="classpath" destdir="${main.dir}" optimize="${javac.optimize.flag}" 
			   debug="${javac.debug.flag}" srcdir="${src.dir}"
			   source="${javac.code.version}" target="${javac.code.version}">
			<include name="jsdai/tools/ExpressDoc*"/>
			<!--include name="jsdai/tools/MappingDoc*"/-->
		</javac>
	</target>

	<target name="jar.jsdai_doc" depends="compile.ExpressDoc" description="Creates jsdai_doc.jar">
		<!--
		<delete file="${out.dir}/jsdai_doc.jar"/>
-->
		<jar jarfile="${out.dir}/jsdai_doc.jar" update="true">
			<metainf dir="${main.dir}">
				<include name="core.version"/>
			</metainf>
			<manifest>
				<attribute name="Specification-Title" value="JSDAI Core"/>
				<attribute name="Specification-Version" 
						   value="${express.doc.version.major}.${express.doc.version.middle}.${express.doc.version.minor}"/>
				<attribute name="Specification-Vendor" value="${jsdai.vendor}"/>
				<attribute name="Implementation-Title" value="${express.doc.implementation}"/>
				<attribute name="Implementation-Version" value="${env.BUILD_ID}"/>
				<attribute name="Implementation-Vendor" value="${jsdai.vendor}"/>
			</manifest>
			<fileset dir="${main.dir}">
				<include name="jsdai/tools/ExpressDoc*"/>
				<include name="jsdai/tools/MappingDoc*"/>
			</fileset>
		</jar>
	</target>

	<target name="compile.sdaiedit" depends="compile.library" description="Compiles sdai edit sources ">
		<javac classpathref="classpath" destdir="${main.dir}" optimize="${javac.optimize.flag}" 
			   debug="${javac.debug.flag}" srcdir="${src.dir}"
			   source="${javac.code.version}" target="${javac.code.version}">
			<include name="jsdai/edit/**"/>
		</javac>
	</target>

	<target name="jar.sdaiedit" depends="compile.sdaiedit" description="Creates jsdai_edit.jar">
		<jar jarfile="${out.dir}/jsdai_edit.jar" update="true">
			<metainf dir="${main.dir}">
				<include name="core.version"/>
			</metainf>
			<manifest>
				<attribute name="Main-class" value="jsdai.edit.SdaiEdit"/>
				<attribute name="Specification-Title" value="SdaiEdit"/>
				<attribute name="Specification-Version" 
						   value="${sdai.edit.version.major}.${sdai.edit.version.middle}.${sdai.edit.version.minor}"/>
				<attribute name="Specification-Vendor" value="${jsdai.vendor}"/>
				<attribute name="Implementation-Title" value="${sdai.edit.implementation}"/>
				<attribute name="Implementation-Version" value="${env.BUILD_ID}"/>
				<attribute name="Implementation-Vendor" value="${jsdai.vendor}"/>
			</manifest>
			<fileset dir="${main.dir}">
				<include name="jsdai/edit/**"/>
			</fileset>
		</jar>
	</target>

	<target name="compile.jsdai.tools" depends="compile.library" description="Compiles sources of jsdai tools">
		<javac classpathref="classpath" destdir="${main.dir}" optimize="${javac.optimize.flag}" 
			   debug="${javac.debug.flag}" srcdir="${src.dir}"
			   source="${javac.code.version}" target="${javac.code.version}">
			<include name="jsdai/tools/**"/>
			<exclude name="jsdai/tools/ExpressDoc*"/>
			<exclude name="jsdai/tools/MappingDoc*"/>
			<exclude name="jsdai/tools/owl/*"/>
		</javac>
	</target>

	<target name="jar.jsdai_tools" depends="compile.jsdai.tools" description="Creates jsdai_tools.jar">
		<jar jarfile="${out.dir}/jsdai_tools.jar" update="true">
			<metainf dir="${main.dir}">
				<include name="core.version"/>
			</metainf>
			<manifest>
				<attribute name="Specification-Title" value="JSDAI Core"/>
				<attribute name="Specification-Version" 
						   value="${jsdai.devel.version.major}.${jsdai.devel.version.middle}.${jsdai.devel.version.minor}"/>
				<attribute name="Specification-Vendor" value="${jsdai.vendor}"/>
				<attribute name="Implementation-Title" value="${jsdai.devel.implementation}"/>
				<attribute name="Implementation-Version" value="${env.BUILD_ID}"/>
				<attribute name="Implementation-Vendor" value="${jsdai.vendor}"/>
			</manifest>
			<fileset dir="${main.dir}">
				<include name="jsdai/tools/**"/>
				<exclude name="jsdai/tools/ExpressDoc*"/>
				<exclude name="jsdai/tools/MappingDoc*"/>
			</fileset>
		</jar>
	</target>

	<target name="-check.jsdai.documentation">
		<uptodate targetfile="${build-doc.dir}/jsdai_doc/index.html" property="jsdai.documentation.notrequired">
			<srcfiles dir="${src.dir}">
				<include name="jsdai/lang/*.java"/>
				<include name="jsdai/util/*.java"/>
				<include name="jsdai/mappingUtils/*.java"/>
				<include name="jsdai/xml/**/*.java"/>
			</srcfiles>
			<!-- 			<srcfiles dir="${expressCompiler.dir}/REPOSITORIES/r1" includes="m*"/> -->
			<srcfiles file="${expressCompiler.dir}/REPOSITORIES/ExpressCompilerRepo.sdai"/>
		</uptodate>
	</target>

	<target name="jsdai.documentation" unless="jsdai.documentation.notrequired"
			depends="compile.library, compile.ExpressDoc, -check.jsdai.documentation"
			description="Creates jsdai documentation of the core module">
		<mkdir dir="${build-doc.dir}/jsdai_doc"/>
		<mkdir dir="${build-doc.dir}/jsdai_doc/api_ref"/>
		<copy todir="${build-doc.dir}" 
			  file="${src.dir}/jsdai/beans/license.txt" filtering="on"/>
		<copy todir="${out.dir}" file="${build-doc.dir}/license.txt"/>
		<copy todir="${build-doc.dir}" filtering="on">
			<fileset dir="${docs.dir}">
				<include name="jsdai_doc/examples/**"/>
				<include name="jsdai_doc/expressCompiler/**"/>
				<include name="jsdai_doc/expressDoc/**"/>
				<include name="jsdai_doc/validate/**"/>
				<include name="jsdai_doc/guides/**"/>
				<include name="jsdai_doc/jsdai_introduction/**"/>
				<!--
				<include name="jsdai_doc/info/**"/>
				<include name="jsdai_doc/paper/**"/>
-->
				<include name="jsdai_doc/sdaiedit/**"/>
				<include name="jsdai_doc/tutorial/**"/>
				<include name="jsdai_doc/*"/>
				<exclude name="jsdai_doc/**/*.gif"/>
				<exclude name="jsdai_doc/**/*.jpg"/>
				<exclude name="jsdai_doc/**/*.JPG"/>
				<exclude name="jsdai_doc/**/*.pdf"/>
				<exclude name="jsdai_doc/**/*.ppt"/>
				<exclude name="jsdai_doc/examples/extensions/**"/>
				<!--
				<exclude name="jsdai_doc/info/features.html"/>
				<exclude name="jsdai_doc/info/license.html"/>
-->
			</fileset>
		</copy>
		<copy todir="${build-doc.dir}" filtering="off">
			<fileset dir="${docs.dir}">
				<include name="jsdai_doc/**/*.gif"/>
				<include name="jsdai_doc/**/*.jpg"/>
				<include name="jsdai_doc/**/*.JPG"/>
				<include name="jsdai_doc/**/*.pdf"/>
				<include name="jsdai_doc/**/*.ppt"/>
				<exclude name="jsdai_doc/paper/**"/>
				<exclude name="jsdai_doc/info/**"/>
				<exclude name="jsdai_doc/examples/extensions/**"/>
			</fileset>
		</copy>
		<mkdir dir="${src-doc.dir}"/>
		<copy todir="${src-doc.dir}">
			<fileset dir="${src.dir}">
				<include name="jsdai/lang/**/*.java"/>
				<include name="jsdai/util/SdaiTerm.java"/>
				<include name="jsdai/xml/InstanceReader.java"/>
				<include name="jsdai/xml/InstanceWriter.java"/>
				<include name="jsdai/xml/LateBindingReader.java"/>
				<include name="jsdai/xml/SdaiInputSource.java"/>
				<include name="jsdai/xml/SdaiXmlReader.java"/>
				<include name="jsdai/query/EEntityRef.java"/>
				<include name="**/package.html"/>
				<!-- don't include the Java package jsdai.query - L.K 2003-08-20
				<include name="jsdai/query/SchemaInstanceRef.java"/>
				<include name="jsdai/query/SdaiModelRef.java"/>
				<include name="jsdai/query/SdaiRepositoryRef.java"/>
-->
			</fileset>
		</copy>
		<!--classpathref="classpath" -->
		<javadoc public="yes" 
				 footer="${jsdai.copyright.html}" 
				 destdir="${build-doc.dir}/jsdai_doc/api_ref" 
				 windowtitle=
				 "JSDAI ${runtime.version.major}.${runtime.version.middle}.${runtime.version.minor} ${build.time}"
				 doctitle=
				 "JSDAI(TM) Version ${runtime.version.major}.${runtime.version.middle}.${runtime.version.minor}"
				 sourcepath="${src-doc.dir}" 
				 version="no" 
				 author="no"
				 overview="${docs.dir}/overview.html"
				 classpathref="classpath">
			<package name="jsdai.lang"/>
			<package name="jsdai.util"/>
			<package name="jsdai.xml"/>
			<!-- don't include the Java package jsdai.query
			<package name="jsdai.query"/>
-->
		</javadoc>
		<copy todir="${build-doc.dir}/jsdai_doc/api_ref">
			<fileset dir="${docs.dir}">
				<include name="express_to_java/**"/>
				<include name="jsdai_introduction/**"/>
			</fileset>
		</copy>
		<copy flatten="yes" todir="${build-doc.dir}/jsdai_doc/api_ref/jsdai/lang">
			<fileset dir="${docs.dir}">
				<include name="lang/SDAIFile.html"/>
				<include name="lang/SDAIFileFormat.html"/>
			</fileset>
		</copy>
		<java fork="yes" classname="jsdai.tools.ExpressDoc"
			  classpathref="classpath" failonerror="yes">
			<sysproperty key="jsdai.properties" value="${expressCompiler.dir}"/>
			<jvmarg line="${expressCompiler.jvmargs}"/>
			<arg line="-location ExpressCompilerRepo"/>
			<arg value="-output"/>
			<arg file="${build-doc.dir}/jsdai_doc/api_ref"/>
			<arg value="-complex_schema"/>
			<arg value="-title"/>
			<arg value="Meta Schemas"/>
			<arg value="-include"/>
			<arg value="SDAI_DICTIONARY_SCHEMA_DICTIONARY_DATA"/>
			<arg value="SDAI_MAPPING_SCHEMA_DICTIONARY_DATA"/>
		</java>
		<touch file="${build-doc.dir}/jsdai_doc/index.html"/>
	</target>

	<target name="zip.api_ref" depends="jsdai.documentation"
			description="Creates api_ref.zip (documentation zip file of the core module)">
		<!--delete file="${out.dir}/jsdai_doc.zip"/-->
		<zip zipfile="${out.dir}/jsdai_doc.zip" update="true">
			<fileset dir="${build-doc.dir}">
				<include name="jsdai_doc/**/*"/>
				<include name="license.txt"/>
			</fileset>
		</zip>
	</target>

	<!-- ================================= 
          target: build.jsdai.developer
         ================================= -->
	<target name="build.jsdai.developer" depends="-environment" description="--> Builds JSDAI-Developer Eclipse plugins"
			unless="jsdai.eclipse.notrequired">
		<ant dir="eclipse/net.jsdai.releng">
			<property name="build.properties.com.lksoft.modules.core" location="eclipse/com.lksoft.modules.core"/>
			<property name="build.properties.core.dir" location="${basedir}"/>
			<property name="build.properties.core.build.dir" location="${build.dir}"/>
			<property name="build.properties.core.jars.dir" location="${out.dir}"/>
			<property name="build.properties.third-party-jars.dir" location="${lib.dir}"/>
			<property name="build.properties.buildDirectory" location="${build.dir}/eclipse"/>
			<property name="build.properties.postingDirectory" location="${out.dir}/eclipse"/>
			<property name="build.properties.eclipse.home" location="${eclipse.home}"/>
			<property name="build.properties.buildId" value="${buildId}"/>
		</ant>
	</target>


	<!-- ================================= 
          target: create.buckminster.rmap
         ================================= -->
	<target name="create.buckminster.rmap" description="--> Creates buckminster.rmap file as part of integration build">
		<echo file="${out.dir}/buckminster.rmap"
>
			<![CDATA[<?xml version="1.0" encoding="UTF-8"?>

			<rmap
    xmlns="http://www.eclipse.org/buckminster/RMap-1.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:bc="http://www.eclipse.org/buckminster/Common-1.0">

				<property key="lksoftBuildBase" value="https://www.lksoft.lt/ftp/home/jsdai/builds"/>

				<searchPath name="lksoft-build-download">
					<provider readerType="url" componentTypes="jar" mutable="true" source="false">
						<uri format="{0}/core/builds/${env.BUILD_ID}/archive/lib/{1}">
							<bc:propertyRef key="lksoftBuildBase"/>
							<bc:replace>
								<bc:propertyRef key="buckminster.component"/>
								<bc:match pattern="^(.+)#.+$" replacement="$1"/>
							</bc:replace>
						</uri>
					</provider>
				</searchPath>

				<locator searchPathRef="lksoft-build-download" pattern="^.+$"/>

			</rmap>
]]></echo>
	</target>

	<target name="generate.readme" depends="prepare.dirs">
		<echo file="${out.dir}/README">
Products and versions
${jsdai.copyright}
Distributed by ${jsdai.vendor}

Core tools group products

${runtime.implementation} V${runtime.version.major}.${runtime.version.middle}.${runtime.version.minor}
${express.implementation} V${express.version.major}.${express.version.middle}.${express.version.minor}
${mapping.implementation} V${mapping.version.major}.${mapping.version.middle}.${mapping.version.minor}
${express.doc.implementation} V${express.doc.version.major}.${express.doc.version.middle}.${express.doc.version.minor}
${sdai.edit.implementation} V${sdai.edit.version.major}.${sdai.edit.version.middle}.${sdai.edit.version.minor}
${jsdai.devel.implementation} V${jsdai.devel.version.major}.${jsdai.devel.version.middle}.${jsdai.devel.version.minor}
</echo>
	</target>

	<target name="build.all" depends="clean, build"
			description="Makes clean build (equivalent to clean+build)"/>

	<target name="build" depends="jar.runtime,
								  jar.express,
								  zip.SExtended_dictionary_schema, jar.mappingUtils, jar.jsdai_doc,
								  jar.sdaiedit, jar.jsdai_tools, zip.lib, zip.api_ref,
								  generate.readme"
			description="Generates, compiles and builds all the module programs"/>
	<!-- jar.ant.tasks -->

	<target name="dtd">
		<antstructure output="build.dtd"/>
	</target>

</project>
