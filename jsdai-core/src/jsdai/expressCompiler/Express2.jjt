/*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
*/

options
{
	LOOKAHEAD              = 1;		
	CHOICE_AMBIGUITY_CHECK = 2;
	OTHER_AMBIGUITY_CHECK  = 1;
	STATIC                 = true;
	DEBUG_PARSER           = false; // was false 
	DEBUG_LOOKAHEAD        = false; // was false
	DEBUG_TOKEN_MANAGER    = false; 
	//OPTIMIZE_TOKEN_MANAGER = true;  // new JavaCC says bad option
	ERROR_REPORTING        = true; //
	JAVA_UNICODE_ESCAPE    = false;
	UNICODE_INPUT          = false;
	IGNORE_CASE            = true;
	USER_TOKEN_MANAGER     = false;
	USER_CHAR_STREAM       = false;
	BUILD_PARSER           = true;
	BUILD_TOKEN_MANAGER    = true;
	SANITY_CHECK           = true;
	FORCE_LA_CHECK         = false; 
	COMMON_TOKEN_ACTION    = false;
	CACHE_TOKENS           = true; //
	BUILD_NODE_FILES       = true;
	MULTI                  = true;
	NODE_DEFAULT_VOID      = true;
	NODE_FACTORY           = false;
	NODE_PACKAGE           = "jsdai.expressCompiler";
	NODE_PREFIX            = "X_";
	NODE_USES_PARSER       = false;
	VISITOR                = true;
	VISITOR_EXCEPTION      = "jsdai.lang.SdaiException";
	NODE_SCOPE_HOOK        = true; 
}


PARSER_BEGIN(Compiler2)

package jsdai.expressCompiler;

import java.io.*;
import java.util.regex.*;
import java.util.*;
import jsdai.tools.RepositoryChanges;

//import org.eclipse.core.runtime.IProgressMonitor;

public class Compiler2 extends Support
{

// rule inheritance yes, derived-as-derived redeclaration - temporarily removed

  static Vector compiled_schemas;


	static String progress;
	static boolean in_progress = true;

	static final String xc_build     = "467";
	static final String xc_date      = "2008-11-04";
	static final String xc_version   = "4.0.0";
	static final String xc_title     = "JSDAI(TM) Express Compiler";
	static final String xc_copyright = "Copyright (C) 1998-2006 LKSoftWare GmbH";

	// old, perhaps updated during builds? If not, remove
	static String build = "467";
	
    final static int WA_UNKNOWN             =  0;
		final static int WA_ATTRIBUTE_REF       =  1;
		final static int WA_BUILTIN_CONSTANT	  =  2;
		final static int WA_CONSTANT_REF	      =  3;
		final static int WA_FUNCTION_CALL	      =  4;
		final static int WA_POPULATION	        =  5;
		final static int WA_VIEW_ATTRIBUTE_REF	=  6;
		final static int WA_VIEW_CALL	          =  7;
		final static int WA_PARAMETER_REF	      =  8;
		final static int WA_VARIABLE_REF	      =  9;
		final static int WA_MAP_CALL	          = 10;

	static final int PI_CONSTANT = 1;
	static final int PI_MAP = 2;
	static final int PI_PARTITION = 3;
	static final int PI_SOURCE_ENTITY_OR_VIEW = 4;
	static final int PI_SCHEMA_MAP = 5;
	static final int PI_SCHEMA_MAP_OR_SCHEMA_VIEW = 6;
	static final int PI_SCHEMA_OR_SCHEMA_MAP_OR_SCHEMA_VIEW = 7;
	static final int PI_SOURCE_SCHEMA = 8;
	static final int PI_SOURCE_SCHEMA_OR_TARGET_SCHEMA_OR_SCHEMA = 9;
	static final int PI_VIEW = 10;



  static boolean artificial_exception_thrown = false;
	static HashSet domain_rule_labels;
  static long start_time, finish_time, elapsed_time;
  static long total_start_time, total_finish_time, total_elapsed_time;
  static long pass_start_time, pass_finish_time, pass_elapsed_time;

	static boolean numeric_expression_calculated = false;
//	static boolean expression_instances = false;
	// static int parser_pass;
	static boolean flag_in_redeclaring = false;
	static boolean flag_derived_expression = false;

	static boolean flag_print_attribute_not_found_error = false;
	static int no_label_nr = 0;
	static int from_order_count;
	static int target_parameter_order_count;
	static int view_attribute_order_count;
	static int attribute_order_count;
	static int explicit_attribute_order_count;
	static int derived_attribute_order_count;
	static int inverse_attribute_order_count;
	static int where_rule_order_count;
	static int error_count;
	static int function_depth = 0;
	static int unique_pdb_name = 0;
	static int unique_pdb_name2 = 0;
	static String unique_pdb1_str = null;
	static String unique_pdb2_str = null;
	static boolean self_type = false;
	static boolean self_entity = false;
	static boolean self_constructor = false;

	static Token doc_token;

	static int choice = 0;
	static int ahead = 0;
	static String global_name = null;
  static boolean is_complex_schema;
	static String short_name_dir = null;
	static String express_file_name;
	static String complex_file_name;
	static String complex_list_file = "generic.ce";
	static String physical_file = "generic.pf";
//	static Vector express_files = null;
//	static  String express_file = null;
	static  String complex_file = "";
//      static String complex_file;
//-- see if works moved to support      static Stack argument_stack = new Stack();


	static jsdai.SExtended_dictionary_schema.EAttribute	global_redeclaring = null;
	static jsdai.SExtended_dictionary_schema.EAttribute	global_redeclared = null;
	static jsdai.lang.SdaiModel model_doc = null;
	static jsdai.lang.SdaiModel model_express = null;
	static jsdai.lang.SdaiModel model_java = null;
	static jsdai.lang.SdaiModel model_const = null;
	static jsdai.lang.SdaiTransaction trans;
	static String p21_file = "generic.pf";
	static String repository_name = "ExpressCompilerRepo";
	static String model_name = "generic_model";
	static String expression_model_name = "generic_expression_model";
	//	static jsdai.SExtended_dictionary_schema.ESchema_definition sd;
	static jsdai.SExtended_dictionary_schema.EGeneric_schema_definition sd;
	static jsdai.SExtended_dictionary_schema.ESchema_definition esd;
	// Added by V.N.
	static String specialClassSuffix = "";
    static long compilation_sn = -1;  // Added by VV
    static String indexFileName = "none";  // Added by VV
	static String baseInterface = "EEntity";
	static String baseClass = "CEntity";

	static String _data_type_name;

	static String global_attribute_name;
	static jsdai.SExtended_dictionary_schema.EEntity_definition global_entity1;
	static jsdai.SExtended_dictionary_schema.EEntity_definition global_entity2;
	static Object global_reference;


//	public static X_Expression runParserDerivedExpression(String str, jsdai.lang.SdaiModel _model, jsdai.SExtended_dictionary_schema.ESchema_definition _sd, jsdai.SExtended_dictionary_schema.EEntity_definition _ed, jsdai.SExtended_dictionary_schema.EDerived_attribute _da) throws jsdai.lang.SdaiException {
	public static X_Expression runParserDerivedExpression(String str, jsdai.lang.SdaiModel _model, jsdai.SExtended_dictionary_schema.ESchema_definition _sd, jsdai.SExtended_dictionary_schema.EEntity_definition _ed, jsdai.SExtended_dictionary_schema.EDerived_attribute _da, Compiler2 parser) throws jsdai.lang.SdaiException {
		// Compiler2 parser = null;
	  X_Expression x_result = null;
		first_parsed_file = true;
	
		// here we may want to initialize some static stuff, sd, model, current_scope, argument_stack, etc.
		express_x = false;
		scope_stack = new Stack();
		argument_stack = new Stack();
		if (flag_type_tracking) 
			type_stack = new Stack();
		scope_stack.push(current_scope);
		current_scope = new Vector();
		function_depth = 0;
    model = _model;
    sd = _sd;
		active_scope = _ed;

//		parser = new Compiler2(new java.io.ByteArrayInputStream(str.getBytes()));
		parser.ReInit(new java.io.DataInputStream(new java.io.ByteArrayInputStream(str.getBytes()))); 	


		try {
			error_count = 0;
      is_complex_schema = false;
			unique_pdb_name2 = 0;
			unique_pdb_name = 0;
			parser_pass = 5;
//      initializeExpressTypes(repository);
			x_result = parser.Expression5();
		} catch (ParseException e) {
			System.out.println("Express Compiler - Derived Expression> Parser found errors in pass 5.");
			System.out.println(e.getMessage());
		}
		return x_result;
	}

	public static X_Expression runParserEntityRuleExpression(String str, jsdai.lang.SdaiModel _model, jsdai.SExtended_dictionary_schema.ESchema_definition _sd, jsdai.SExtended_dictionary_schema.EEntity_definition _ed, jsdai.SExtended_dictionary_schema.EWhere_rule _wr, Compiler2 parser) throws jsdai.lang.SdaiException {

System.out.println("RUNNING parser on STRING:");
System.out.println("\tstring: " + str);
System.out.println("\tmodel: " + _model);
System.out.println("\tschema: " + _sd);
System.out.println("\tentity: " + _ed);
System.out.println("\twhere_rule: " + _wr);
System.out.println("\tparser: " + parser);
System.out.println("------------------------------");

		// lets force non-optimal search, because optimal can't find anything
		hm_current_entity_declarations = null;

		// Compiler2 parser = null;
	  X_Expression x_result = null;
		first_parsed_file = true;
	
		// here we may want to initialize some static stuff, sd, model, current_scope, argument_stack, etc.
		express_x = false;
		scope_stack = new Stack();
		argument_stack = new Stack();
		if (flag_type_tracking) 
			type_stack = new Stack();
		scope_stack.push(current_scope);
		current_scope = new Vector();
		function_depth = 0;
    model = _model;
    sd = _sd;
		active_scope = _ed;

//		parser = new Compiler2(new java.io.ByteArrayInputStream(str.getBytes()));
		parser.ReInit(new java.io.DataInputStream(new java.io.ByteArrayInputStream(str.getBytes()))); 	


		try {
			error_count = 0;
      is_complex_schema = false;
			unique_pdb_name2 = 0;
			unique_pdb_name = 0;
			parser_pass = 5;
//      initializeExpressTypes(repository);
			x_result = parser.Expression5();
		} catch (ParseException e) {
			System.out.println("Express Compiler - entity domain rule expression> Parser found errors in pass 5.");
			System.out.println(e.getMessage());
		}
		return x_result;
	}


	public static X_AllSchemas runParser(String str) throws jsdai.lang.SdaiException {
		Compiler2 parser;
	  X_AllSchemas x_result = null;

		parser = new Compiler2(new java.io.ByteArrayInputStream(str.getBytes()));
		try {
			error_count = 0;
      is_complex_schema = false;
			unique_pdb_name2 = 0;
			unique_pdb_name = 0;
			parser_pass = 1;
//      initializeExpressTypes(repository);
			parser.AllSchemas();
		} catch (ParseException e) {
			System.out.println("Express Compiler - STRING TEST> Parser found errors in pass 1.");
			System.out.println(e.getMessage());
		}

		// void TheParser.ReInit(java.io.InputStream stream) - if parser is static 
		parser.ReInit(new java.io.ByteArrayInputStream(str.getBytes())); 
//		parser = new Compiler2(new java.io.ByteArrayInputStream(str.getBytes()));
		try {
			error_count = 0;
      is_complex_schema = false;
			unique_pdb_name2 = 0;
			unique_pdb_name = 0;
			parser_pass = 2;
//      initializeExpressTypes(repository);
			parser.AllSchemas();
		} catch (ParseException e) {
			System.out.println("Express Compiler - STRING TEST> Parser found errors in pass 1.");
			System.out.println(e.getMessage());
		}

		parser.ReInit(new java.io.ByteArrayInputStream(str.getBytes())); 
//		parser = new Compiler2(new java.io.ByteArrayInputStream(str.getBytes()));
		try {
			error_count = 0;
      is_complex_schema = false;
			unique_pdb_name2 = 0;
			unique_pdb_name = 0;
			parser_pass = 3;
//      initializeExpressTypes(repository);
			parser.AllSchemas();
		} catch (ParseException e) {
			System.out.println("Express Compiler - STRING TEST> Parser found errors in pass 1.");
			System.out.println(e.getMessage());
		}

		parser.ReInit(new java.io.ByteArrayInputStream(str.getBytes())); 
//		parser = new Compiler2(new java.io.ByteArrayInputStream(str.getBytes()));
		try {
			error_count = 0;
      is_complex_schema = false;
			unique_pdb_name2 = 0;
			unique_pdb_name = 0;
			parser_pass = 4;
			flag_in_redeclaring = false;
//      initializeExpressTypes(repository);
			parser.AllSchemas();
		} catch (ParseException e) {
			System.out.println("Express Compiler - STRING TEST> Parser found errors in pass 1.");
			System.out.println(e.getMessage());
		}
		
		parser.ReInit(new java.io.ByteArrayInputStream(str.getBytes())); 
//		parser = new Compiler2(new java.io.ByteArrayInputStream(str.getBytes()));
		try {
			error_count = 0;
      is_complex_schema = false;
			unique_pdb_name2 = 0;
			unique_pdb_name = 0;
			parser_pass = 5;
			flag_in_redeclaring = false;
//      initializeExpressTypes(repository);
			x_result = parser.AllSchemas();
		} catch (ParseException e) {
			System.out.println("Express Compiler - STRING TEST> Parser found errors in pass 1.");
			System.out.println(e.getMessage());
		}
	
		parser.ReInit(new java.io.ByteArrayInputStream(str.getBytes())); 
//		parser = new Compiler2(new java.io.ByteArrayInputStream(str.getBytes()));
		try {
			error_count = 0;
      is_complex_schema = false;
			unique_pdb_name2 = 0;
			unique_pdb_name = 0;
			parser_pass = 5;
//      initializeExpressTypes(repository);
			x_result = parser.AllSchemas();
		} catch (ParseException e) {
			System.out.println("Express Compiler - STRING TEST> Parser found errors in pass 1.");
			System.out.println(e.getMessage());
		}
		return x_result;
	}


//    public static int main(String args[], Vector par_express_files, boolean first_time_invoking, IProgressMonitor monitor, Vector compiled_schemas2) throws jsdai.lang.SdaiException, java.lang.ClassNotFoundException, java.io.IOException
    // replacing IProgressMonitor by ECMonitor for now.
    public static int main(String args[], Vector par_express_files, boolean first_time_invoking, ECMonitor monitor, Vector compiled_schemas2) throws jsdai.lang.SdaiException, java.lang.ClassNotFoundException, java.io.IOException
//	public static void main(String args[], Vector par_express_files, boolean first_time_invoking) throws jsdai.lang.SdaiException, java.lang.ClassNotFoundException, java.io.IOException
	{


		global_entity_ref = null;
		global_entity_name = null;
		global_schema_name = null;
		hm_attribute_key = null;

		int return_value = -1;

		if (compiled_schemas2 == null) {
			compiled_schemas2 = new Vector();
		}
		compiled_schemas = compiled_schemas2;

	  in_progress = true;
		Vector x_all_data = null;
		X_AllSchemas x_data = null;
//		X_AllSchemas x_tree = null;
		self_entity = false;
		self_type = false;
		self_constructor = false;
		domain_rule_labels = new HashSet();
	
		String jsdai_properties = null;
		boolean flag_allow_no_repository = false;
		boolean flag_print_nodes = false;
		boolean keep_flag = false;
		boolean keep_all_flag = false;
		Vector keep_names = null;
		boolean flag_complex_directory = false;
		boolean annex_a_flag = false;
		boolean flag_value = true;
		boolean update_flag = false;
		boolean compile_flag = false;
		boolean jar_flag = false;
		boolean zip_flag = false;
		boolean flag_relax = false;
		boolean flag_insert = false;
		boolean instance_flag = false;
		boolean flag_inherit = true;
		boolean generate_java = false;
		boolean no_parsing = true;
		boolean generate_bin = true;
	  boolean generate_p21  = false;
	  boolean create_repository  = false;
		boolean delete_declarations = true;
		boolean add_short_names = false;
		boolean delete_old = false;
		//  remove those switches, both always true, after changes to return all violations in A_string for Gintaras
		boolean flag_print_failed_domain_rule = true;
		boolean flag_process_all_domain_rules = true;
//		boolean flag_print_failed_domain_rule = false;
//		boolean flag_process_all_domain_rules = false;

		String instance_name = "DEFAULT_INSTANCE";
		String compile_string = null;
		String jar_string = null;
		String jar_string0 = null;
		String zip_string = null;
		String batch_file = null;
		String log_file = null;
		String jar_file = null;
		String zip_file = null;
		String jar_batch_file = null;
		String zip_batch_file = null;
		Compiler2 parser = null;

		// taking care of static, because from GUI the compiler may be invoked several times

    compiled_models = new Vector();
		model_file_name = null;
		express_file = null;
		express_files = null;
		Vector global_excluded = null;

		sd = null;

		hm_parameters = null;
		hm_variables = null;
		hm_current_parameters = null;
		hm_current_variables = null;
		hm_entity_declarations = null;
		hm_current_entity_declarations = null;
		hm_type_declarations = null;
		hm_current_type_declarations = null;
		hm_function_declarations = null;
		hm_current_function_declarations = null;
		hm_procedure_declarations = null;
		hm_current_procedure_declarations = null;
		hm_rule_declarations = null;
		hm_current_rule_declarations = null;
		hm_constant_declarations = null;
		hm_current_constant_declarations = null;
		hm_subtype_constraint_declarations = null;
		hm_current_subtype_constraint_declarations = null;
		hm_attributes = null;
		hs_redeclared_attribute_originals = null;

  	no_express_amendment = false;
  	flag_implicit_expressions = false;
  	flag_serialize = false;
		flag_relative_exclude = false;
		flag_stepmod = false;
		global_express_dir_name = null;
		flag_arm = false;
		flag_mim = false;
  	express_x = false;	
  	parser_pass = 0;
  	// first_parsed_file;
  	global_name1_global = null;
  	// global_kind1_global;
  	global_name2_global = null;
  	// global_kind2_global;
  	global_name3_global = null;
  	// global_kind3_global;
	flag_replace_schema = false; 
	flag_print_attribute_not_found_error = false;
  flag_xt_declarations = false; // if true, declarations are generated for standard express types, local and implicit data_type_declarations
  flag_xt_sdai = true; // if true, standard express types are generated in sdai_dictionary_schema instead of in extended_dictionary_schema
  flag_xt_init_sdai = true; // if true, standard express types are generated in sdai_dictionary_schema instead of in extended_dictionary_schema
  flag_stack = false;
  flag_scope = false;
  flag_scope_stack = false;
  flag_verbose0 = false;
  flag_verbose = false;
  flag_debug = false;
  flag_error_debug = false;
  flag_deep_debug = false;
	flag_debug_split_return = false;
	flag_no_print_active_nodes = false;
  flag_complex = false;
	flag_oc = false;
	flag_more_errors = false;
	flag_complex_off = false;
  flag_implicit_select = false;
	flag_original_expressions = true;
	flag_really_original_expressions = false;
  scope_stack = new Stack();
  current_scope = new Vector();
  variable_uid = 0;
  variable_id_stack = new Stack();
  argument_stack = new Stack();
	if (flag_type_tracking) 
	  type_stack = new Stack();
  expression_stack = new Stack();
  active_scope = null;
  active_scope_extension = null;
  active_scope_string = "";

  used_vectors = new Vector();
  referenced_vectors = new Vector();
  model_vector = new Vector();
  
  // perhaps could be final instead
  FLAG_USED = new Integer(1);
  FLAG_REFERENCED = new Integer(2);
  FLAG_IMPLICIT = new Integer(0);
  FLAG_KEEP_OUT = new Integer(-1);
  
  session = null;
  repository = null; 
  sysrepository = null;
  dic_sd = null;
  model = null;
  expression_model = null;
  _st_integer = null;
  _st_real = null;
  _st_number = null;
  _st_logical = null;
  _st_boolean = null;
  _st_string = null;
  _st_binary = null;
  _st_generic = null;

  // static EEntity_definition _st_entity;
  _st_entity = null;
  _std_entity = null;
  _st_list_string = null;
  _st_list_generic = null;
  _st_set_generic = null;
   _st_set_string = null;
   _st_bag_generic = null;
  _st_aggregate_generic = null;
  _st_schema = null;
  _st_model = null;
  _std_integer = null;
  _std_real = null;
  _std_number = null;
  _std_logical = null;
  _std_boolean = null;
  _std_string = null;
  _std_binary = null;
  _std_generic = null;
  _std_list_string = null;
  _std_list_generic = null;
  _std_set_generic = null;
  _std_set_string = null;
  _std_bag_generic = null;
  _std_aggregate_generic = null;
  the_depth = 0;
	schema_depth = 0;

	progress = null;
	in_progress = true;

	// static final String xc_build     = "273";
	// static final String xc_date      = "2004-06-03";
	// static final String xc_version   = "3.6";
	// static final String xc_title     = "JSDAI(TM) Express Compiler";
	// static final String xc_copyright = "Copyright (C) 1998-2003 LKSoftWare GmbH";

	// static String build = "273";
	
   /*
    final static int WA_UNKNOWN             =  0;
		final static int WA_ATTRIBUTE_REF       =  1;
		final static int WA_BUILTIN_CONSTANT	  =  2;
		final static int WA_CONSTANT_REF	      =  3;
		final static int WA_FUNCTION_CALL	      =  4;
		final static int WA_POPULATION	        =  5;
		final static int WA_VIEW_ATTRIBUTE_REF	=  6;
		final static int WA_VIEW_CALL	          =  7;
		final static int WA_PARAMETER_REF	      =  8;
		final static int WA_VARIABLE_REF	      =  9;
		final static int WA_MAP_CALL	          = 10;

	static final int PI_CONSTANT = 1;
	static final int PI_MAP = 2;
	static final int PI_PARTITION = 3;
	static final int PI_SOURCE_ENTITY_OR_VIEW = 4;
	static final int PI_SCHEMA_MAP = 5;
	static final int PI_SCHEMA_MAP_OR_SCHEMA_VIEW = 6;
	static final int PI_SCHEMA_OR_SCHEMA_MAP_OR_SCHEMA_VIEW = 7;
	static final int PI_SOURCE_SCHEMA = 8;
	static final int PI_SOURCE_SCHEMA_OR_TARGET_SCHEMA_OR_SCHEMA = 9;
	static final int PI_VIEW = 10;

*/

  // start_time, finish_time, elapsed_time;
  // total_start_time, total_finish_time, total_elapsed_time;
  // pass_start_time, pass_finish_time, pass_elapsed_time;

	x_tree = null;
	numeric_expression_calculated = false;
	expression_instances = false;
	// static int parser_pass;
	no_label_nr = 0;
	from_order_count = 0;
	target_parameter_order_count = 0;
	view_attribute_order_count = 0;
	attribute_order_count = 0;
	explicit_attribute_order_count = 0;
	derived_attribute_order_count = 0;
	inverse_attribute_order_count = 0;
	where_rule_order_count = 0;
	error_count = 0;
	function_depth = 0;
	unique_pdb_name2 = 0;
	unique_pdb_name = 0;

	doc_token = null;

	choice = 0;
	ahead = 0;
	global_name = null;
  is_complex_schema = false;
  output_dir = null;
	short_name_dir = null;
	express_file_name = null;
	complex_file_name = null;
	complex_list_file = "generic.ce";
	physical_file = "generic.pf";
//	static Vector express_files = null;
//	static  String express_file = null;
	complex_file = "";
//      static String complex_file;
//-- see if works moved to support      static Stack argument_stack = new Stack();


	global_redeclaring = null;
	global_redeclared = null;
	model_doc = null;
	model_express = null;
	model_java = null;
	model_const = null;
	trans = null;
	p21_file = "generic.pf";
	repository_name = "ExpressCompilerRepo";
  model_name = "generic_model";
	expression_model_name = "generic_expression_model";
	//	static jsdai.SExtended_dictionary_schema.ESchema_definition sd;
	sd = null;
	esd = null; 
	// Added by V.N.
  specialClassSuffix = "";
   compilation_sn = -1;  // Added by VV
   indexFileName = "none";  // Added by VV
	baseInterface = "EEntity";
	baseClass = "CEntity";

	_data_type_name = null; 

	global_attribute_name = null;
	global_entity1 = null;
	global_entity2 = null;
	global_reference = null;

		for (int ihi = 0; ihi < args.length; ihi++) {
			if (args[ihi].equalsIgnoreCase("-gui_express")) {
				express_files = par_express_files;
				no_parsing = false;
			}			



			if (args[ihi].equalsIgnoreCase("-express_x")) express_x = true;
			if (args[ihi].equalsIgnoreCase("-attribute_not_found")) flag_print_attribute_not_found_error = true;
			if (args[ihi].equalsIgnoreCase("-implicit_expressions")) flag_implicit_expressions = true;
			if (args[ihi].equalsIgnoreCase("-relative_exclude")) flag_relative_exclude = true;
			if (args[ihi].equalsIgnoreCase("-re")) flag_relative_exclude = true;
			if (args[ihi].equalsIgnoreCase("-stepmod")) flag_stepmod = true;
			if (args[ihi].equalsIgnoreCase("-arm")) flag_arm = true;
			if (args[ihi].equalsIgnoreCase("-mim")) flag_mim = true;
			if (args[ihi].equalsIgnoreCase("-create_repository")) flag_allow_no_repository = true;
			if (args[ihi].equalsIgnoreCase("-cr")) flag_allow_no_repository = true;
			if (args[ihi].equalsIgnoreCase("-more_errors")) flag_more_errors = true;
			if (args[ihi].equalsIgnoreCase("-original_case")) flag_oc = true;
			if (args[ihi].equalsIgnoreCase("-oc")) flag_oc = true;
			if (args[ihi].equalsIgnoreCase("-complex_off")) flag_complex_off = true;
			if (args[ihi].equalsIgnoreCase("-co")) flag_complex_off = true;
			if (args[ihi].equalsIgnoreCase("-nodes")) flag_print_nodes = true;
			if (args[ihi].equalsIgnoreCase("-all_rules")) flag_process_all_domain_rules = true;
			if (args[ihi].equalsIgnoreCase("-print_violations")) flag_print_failed_domain_rule = true;
			if (args[ihi].equalsIgnoreCase("-replace_schemas")) flag_replace_schema = true;
			if (args[ihi].equalsIgnoreCase("-replace")) flag_replace_schema = true;
			if (args[ihi].equalsIgnoreCase("-rs")) flag_replace_schema = true;
			if (args[ihi].equalsIgnoreCase("-incremental")) flag_serialize = true;
			if (args[ihi].equalsIgnoreCase("-inc")) flag_serialize = true;
			if (args[ihi].equalsIgnoreCase("-no_amendment"))   no_express_amendment = true;
			if (args[ihi].equalsIgnoreCase("-na"))   no_express_amendment = true;
			if (args[ihi].equalsIgnoreCase("-stack"))   flag_stack = true;
			if (args[ihi].equalsIgnoreCase("-split"))  flag_debug_split_return = true;
			if (args[ihi].equalsIgnoreCase("-ddebug"))  flag_deep_debug = true;
			if (args[ihi].equalsIgnoreCase("-debug"))   flag_debug = true;
			if (args[ihi].equalsIgnoreCase("-no_active_nodes"))   flag_no_print_active_nodes = true;
			if (args[ihi].equalsIgnoreCase("-make_complex_directory")) flag_complex_directory = true;
			if (args[ihi].equalsIgnoreCase("-mcd")) flag_complex_directory = true;
			if (args[ihi].equalsIgnoreCase("-xt_declarations")) flag_xt_declarations = true;
			if (args[ihi].equalsIgnoreCase("-xt_sdai")) flag_xt_sdai = false;
			if (args[ihi].equalsIgnoreCase("-xt_init_sdai")) flag_xt_init_sdai = false;
			if (args[ihi].equalsIgnoreCase("-keep_all_instances")) keep_all_flag = true;
			if (args[ihi].equalsIgnoreCase("-keep_all")) keep_all_flag = true;
			if (args[ihi].equalsIgnoreCase("-old_xp")) flag_value = false;
			if (args[ihi].equalsIgnoreCase("-annex_a")) annex_a_flag = true;
			if (args[ihi].equalsIgnoreCase("-annex_a_instance")) annex_a_flag = true;
			if (args[ihi].equalsIgnoreCase("-implicit_select")) flag_implicit_select = true;
			if (args[ihi].equalsIgnoreCase("-is")) flag_implicit_select = true;
			if (args[ihi].equalsIgnoreCase("-original_expressions")) flag_original_expressions = true; // changed to default, no longer needed
			if (args[ihi].equalsIgnoreCase("-oe")) flag_original_expressions = true;                   // changed to default, no longer needed
			if (args[ihi].equalsIgnoreCase("-parsed_expressions")) flag_original_expressions = false;
			if (args[ihi].equalsIgnoreCase("-pe")) flag_original_expressions = false;
			if (args[ihi].equalsIgnoreCase("-really_original_expressions")) flag_really_original_expressions = true;
			if (args[ihi].equalsIgnoreCase("-roe")) flag_really_original_expressions = true;
			if (args[ihi].equalsIgnoreCase("-instantiate_expressions")) expression_instances = true;
			if (args[ihi].equalsIgnoreCase("-t")) expression_instances = true;
			if (args[ihi].equalsIgnoreCase("-inst")) expression_instances = true;
			if (args[ihi].equalsIgnoreCase("-enable_expressions")) expression_instances = true;
			if (args[ihi].equalsIgnoreCase("-ee")) expression_instances = true;
			if (args[ihi].equalsIgnoreCase("-g"))   flag_debug = true;
			if (args[ihi].equalsIgnoreCase("-dd"))   flag_deep_debug = true;
			if (args[ihi].equalsIgnoreCase("-inherit_disable")) flag_inherit = false;       // it is possible that in the future this key will be inverted
			if (args[ihi].equalsIgnoreCase("-i")) flag_inherit = false;     // it is possible that in the future this key will be inversed
			// -relax disabled 
			if (args[ihi].equalsIgnoreCase("-relax"))   flag_relax = false;
			if (args[ihi].equalsIgnoreCase("-x"))   flag_relax = true;
			if (args[ihi].equalsIgnoreCase("-binaries")) flag_insert = true;          // it is possible that in the future this key will be inversed.
			if (args[ihi].equalsIgnoreCase("-b")) flag_insert = true;         // it is possible that in the future this key will be inversed.
			if (args[ihi].equalsIgnoreCase("-verbose")) flag_verbose = true;
			if (args[ihi].equalsIgnoreCase("-v")) flag_verbose = true;
			if (args[ihi].equalsIgnoreCase("-schema_verbose")) flag_verbose0 = true;
			if ((args[ihi].equalsIgnoreCase("-compile")) || (args[ihi].equalsIgnoreCase("-o"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A string must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A string must follow " + args[ihi-1] + " switch");
					return -1;
				}
				compile_string = args[ihi];
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A file name must follow as the second parameter " + args[ihi-2] + " switch");
						return -1;
					}
				} else {
					System.out.println("A file name must follow as the second parameter " + args[ihi-2] + " switch");
					return -1;
				}
				batch_file = args[ihi];
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						log_file = null;
						ihi--;
					} else {
						log_file = args[ihi];
					}
				} else {
					log_file = null;
					ihi--;
				}
				compile_flag = true;
			}
			if ((args[ihi].equalsIgnoreCase("-jar")) || (args[ihi].equalsIgnoreCase("-a"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A file name must follow as the first parameter " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A file name must follow as the first parameter " + args[ihi-1] + " switch");
					return -1;
				}
				jar_batch_file = args[ihi];
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A file name must follow as the second parameter " + args[ihi-2] + " switch");
						return -1;
					}
				} else {
					System.out.println("A file name must follow as the second parameter " + args[ihi-2] + " switch");
					return -1;
				}
				jar_file = args[ihi];
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A string must follow as the third parameter " + args[ihi-3] + " switch");
						return -1;
					}
				} else {
					System.out.println("A string must follow as the third parameter " + args[ihi-3] + " switch");
					return -1; 
				}
				jar_string = args[ihi];
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						jar_string0 = null;
						ihi--;
					} else {
						jar_string0 = args[ihi];
					}
				} else {
					jar_string0 = null;
					ihi--;
				}
				jar_flag = true;
			}

			if ((args[ihi].equalsIgnoreCase("-zip")) || (args[ihi].equalsIgnoreCase("-z"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A file name must follow as the first parameter " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A file name must follow as the first parameter " + args[ihi-1] + " switch");
					return -1;
				}
				zip_batch_file = args[ihi];
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A file name must follow as the second parameter " + args[ihi-2] + " switch");
						return -1;
					}
				} else {
					System.out.println("A file name must follow as the second parameter " + args[ihi-2] + " switch");
					return -1;
				}
				zip_file = args[ihi];
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A string must follow as the third parameter " + args[ihi-3] + " switch");
						return -1;
					}
				} else {
					System.out.println("A string must follow as the third parameter " + args[ihi-3] + " switch");
					return -1;
				}
				zip_string = args[ihi];
				zip_flag = true;
			}
			if ((args[ihi].equalsIgnoreCase("-express")) || (args[ihi].equalsIgnoreCase("-e"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A file name must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A file name must follow " + args[ihi-1] + " switch");
					return -1;
				}
				if (express_files == null) {
					express_files = new Vector();
				}
				express_files.addElement(args[ihi]);
				// express_file = args[ihi];
				no_parsing = false;
			}

			if (args[ihi].equalsIgnoreCase("-properties")) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A path must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A path must follow " + args[ihi-1] + " switch");
					return -1;
				}
				jsdai_properties = args[ihi];
			}

			if ((args[ihi].equalsIgnoreCase("-files")) || (args[ihi].equalsIgnoreCase("-f"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A file name must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A file name must follow " + args[ihi-1] + " switch");
					return -1;
				}
				if (express_files == null) {
					express_files = new Vector();
				}
				addExpressFiles(express_files, args[ihi]);
				// express_file = args[ihi];
				no_parsing = false;
			}

			if ((args[ihi].equalsIgnoreCase("-directory")) || (args[ihi].equalsIgnoreCase("-dir"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A directory path must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A directory path must follow " + args[ihi-1] + " switch");
					return -1;
				}
				String express_dir_name = args[ihi];
				global_express_dir_name = express_dir_name; // neeeded for new exclusion with relative paths
				String exclude_dir_name = "_exclude";
				if (ihi+1 < args.length) {
					if (!(args[ihi+1].substring(0,1).equals("-"))) {
          	ihi++;
						exclude_dir_name = args[ihi];
					}
				}
				if (express_files == null) {
					express_files = new Vector();
				}
				addExpressDirectory(express_files, express_dir_name, exclude_dir_name);
				// express_file = args[ihi];
				no_parsing = false;
			}

			if ((args[ihi].equalsIgnoreCase("-recurse")) || (args[ihi].equalsIgnoreCase("-dr"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A directory path must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A directory path must follow " + args[ihi-1] + " switch");
					return -1;
				}
				String express_dir_name = args[ihi];
				global_express_dir_name = express_dir_name; // neeeded for new exclusion with relative paths
				String exclude_dir_name = "_exclude";
				if (ihi+1 < args.length) {
					if (!(args[ihi+1].substring(0,1).equals("-"))) {
          	ihi++;
						exclude_dir_name = args[ihi];
					}
				}
				if (express_files == null) {
					express_files = new Vector();
				}
				addExpressDirectoryRecursively(express_files, express_dir_name, null, exclude_dir_name, false);
				// express_file = args[ihi];
				no_parsing = false;
			}

			if ((args[ihi].equalsIgnoreCase("-exclude")) || (args[ihi].equalsIgnoreCase("-ex"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A file name must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A file name must follow " + args[ihi-1] + " switch");
					return -1;
				}
				global_excluded = excludeExpressFiles(args[ihi]);
			}

			if ((args[ihi].equalsIgnoreCase("-short_name_dir")) || (args[ihi].equalsIgnoreCase("-sd"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A directory path must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A directory path must follow " + args[ihi-1] + " switch");
					return -1;
				}
				short_name_dir = args[ihi];
			}

      if ((args[ihi].equalsIgnoreCase("-output_dir")) || (args[ihi].equalsIgnoreCase("-out"))) {
	      ihi++;
        if (ihi < args.length) {
  	      if (args[ihi].substring(0,1).equals("-")) {
    		    System.out.println("A directory path must follow " + args[ihi-1] + " switch");
        		return -1;
          }
        } else {
          System.out.println("A directory path must follow " + args[ihi-1] + " switch");
          return -1;
        }
        output_dir = args[ihi];
      }

			// Added by V.N.
			if ((args[ihi].equalsIgnoreCase("-special_class_suffix")) || (args[ihi].equalsIgnoreCase("-scs"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("Name must follow " + args[ihi-1] + " switch");
						return -1;
					} 
				} else {
					System.out.println("Name must follow " + args[ihi-1] + " switch");
					return -1;
				}
				specialClassSuffix = args[ihi];
			}


			if ((args[ihi].equalsIgnoreCase("-special_class_suffix_match")) || (args[ihi].equalsIgnoreCase("-scsm"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("Regular expression  must follow " + args[ihi-1] + " switch");
						return -1;
					} 
				} else {
					System.out.println("Regular expression must follow " + args[ihi-1] + " switch");
					return -1;
				}
				specialClassSuffixMatcher = Pattern.compile(args[ihi], Pattern.CASE_INSENSITIVE).matcher("");
			}

			// typical usage of the two above switches:   
			// -special_class_suffix Base -special_class_suffix_match "\w+_xim|mixed_complex_types"


            // Added by --VV--
			if ((args[ihi].equalsIgnoreCase("-compilation_sn")) || (args[ihi].equalsIgnoreCase("-csn"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("Compilation sequence number must follow " + args[ihi-1] + " switch");
						return -1;
					} 
				} else {
					System.out.println("Compilation sequence number must follow " + args[ihi-1] + " switch");
					return -1;
				}
				compilation_sn = (long)Long.parseLong(args[ihi]);
                if (compilation_sn < 0 || compilation_sn > (2L << 15)-1) {
                    System.out.println("Compilation sequence number must be in range from 0 to "+Long.toString((long)Math.pow(2,15)-1));
					return -1;
                } 
			}
            
            // Added by --VV--
			if ((args[ihi].equalsIgnoreCase("-index_file")) || (args[ihi].equalsIgnoreCase("-idx"))) {
				indexFileName = "repository";
				if (ihi+1 < args.length) {
					if (!(args[ihi+1].substring(0,1).equals("-"))) {
          	ihi++;
						indexFileName = args[ihi];
					}
				}
			}

			if ((args[ihi].equalsIgnoreCase("-list_models")) || (args[ihi].equalsIgnoreCase("-lm"))) {
				model_file_name = "models";
				if (ihi+1 < args.length) {
					if (!(args[ihi+1].substring(0,1).equals("-"))) {
          	ihi++;
						model_file_name = args[ihi];
					}
				}
			}

			if ((args[ihi].equalsIgnoreCase("-base_interface")) || (args[ihi].equalsIgnoreCase("-bi"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("Name must follow " + args[ihi-1] + " switch");
						return -1;
					} 
				} else {
					System.out.println("Name must follow " + args[ihi-1] + " switch");
					return -1;
				}
				baseInterface = args[ihi];
			}

			if ((args[ihi].equalsIgnoreCase("-base_class")) || (args[ihi].equalsIgnoreCase("-bc"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("Name must follow " + args[ihi-1] + " switch");
						return -1;
					} 
				} else {
					System.out.println("Name must follow " + args[ihi-1] + " switch");
					return -1;
				}
				baseClass = args[ihi];
			}


			if ((args[ihi].equalsIgnoreCase("-instance")) || (args[ihi].equalsIgnoreCase("-schema_instance"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A name must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A name must follow " + args[ihi-1] + " switch");
					return -1;
				}
				instance_name = args[ihi];
				instance_name = instance_name.toUpperCase() + "_INSTANCE";
				instance_flag = true;
			}
			if ((args[ihi].equalsIgnoreCase("-keep_instance")) || (args[ihi].equalsIgnoreCase("-keep")) || (args[ihi].equalsIgnoreCase("-k"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A name must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A name must follow " + args[ihi-1] + " switch");
					return -1;
				}
				if (!keep_flag) {
					keep_names = new Vector();
					keep_flag = true;
				}
				String keep_name = args[ihi];
				keep_name = keep_name.toUpperCase() + "_INSTANCE";
				keep_names.addElement(keep_name);
			}


			if ((args[ihi].equalsIgnoreCase("-complex")) || (args[ihi].equalsIgnoreCase("-c"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A file name must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A file name must follow " + args[ihi-1] + " switch");
					return -1;
				}
				complex_list_file = args[ihi];
				flag_complex = true;
			}
			if ((args[ihi].equalsIgnoreCase("-p21")) || (args[ihi].equalsIgnoreCase("-p"))) {
				ihi++;
				if (ihi < args.length) {
					if (args[ihi].substring(0,1).equals("-")) {
						System.out.println("A file name must follow " + args[ihi-1] + " switch");
						return -1;
					}
				} else {
					System.out.println("A file name must follow " + args[ihi-1] + " switch");
					return -1;
				}
				physical_file = args[ihi];
				generate_p21 = true;
			}
			if ((args[ihi].equalsIgnoreCase("-java")) || (args[ihi].equalsIgnoreCase("-j"))) {
				generate_java = true;
      }



      if (args[ihi].equalsIgnoreCase("-update")) update_flag = true;
      if (args[ihi].equalsIgnoreCase("-u")) update_flag = true;
      if (args[ihi].equalsIgnoreCase("-delete")) delete_old = true;
      if (args[ihi].equalsIgnoreCase("-d")) delete_old = true;
      if (args[ihi].equalsIgnoreCase("-short_names")) add_short_names = true;
      if (args[ihi].equalsIgnoreCase("-s")) add_short_names = true;
      if (args[ihi].equalsIgnoreCase("-repository")) create_repository = true;
      if (args[ihi].equalsIgnoreCase("-r")) create_repository = true;
      if (args[ihi].equalsIgnoreCase("-mixed_declarations")) delete_declarations = false;
      if (args[ihi].equalsIgnoreCase("-m")) delete_declarations = false;
      if (args[ihi].equalsIgnoreCase("-nobin")) generate_bin = false;
      if (args[ihi].equalsIgnoreCase("-n")) generate_bin = false;
		}

		if ((!specialClassSuffix.equals("")) && (specialClassSuffixMatcher == null)) {
			specialClassSuffixMatcher = Pattern.compile(".+", Pattern.CASE_INSENSITIVE).matcher("");
		}


		System.out.println("");
		System.out.println(xc_title + ",   " + xc_copyright);
		System.out.println("                  version " + xc_version + ", build " + xc_build + ", " + xc_date );
		System.out.println("----------------------------------------------------------------------");
  	total_start_time = System.currentTimeMillis();

/*
		if ((!generate_java) && (!generate_bin) && (!generate_p21)) {
      System.out.println("Express Compiler> No backend was selected. The compiler will not run");
			System.out.println("Express Compiler>  Usage is:");
			System.out.println("    java jsdai.expressCompiler.Main [-verbose] [-delete_old] [-express express_file] [-complex complex_file] [-short_names] [-p21 physical_file] [-java]");
			return;
    }
*/
//              if ((args.length > 0) && (args.length < 20) && (express_file != null)){
		
//		if (!no_parsing) {

//			printVerbose("Reading from file " + express_file);
//			express_file_name = express_file.substring(0, express_file.lastIndexOf("."));
//			complex_file_name = "C$$" + express_file_name;
//			complex_file = "C$$" + express_file;
//			p21_file = express_file_name.toLowerCase() + "_dictionary.pf";


		
			hm_variables = new HashMap();
			hm_parameters = new HashMap();
			hm_entity_declarations = new HashMap();
			hm_type_declarations = new HashMap();
			hm_function_declarations = new HashMap();
			hm_procedure_declarations = new HashMap();
			hm_rule_declarations = new HashMap();
			hm_constant_declarations = new HashMap();
			hm_subtype_constraint_declarations = new HashMap();
			hm_attributes = new HashMap();
//		}


		if (jsdai_properties != null) {
//System.out.println("jsdai_properties: " + jsdai_properties);
			Properties prop = new Properties();
			File repoDir = new File(jsdai_properties);
			if (!repoDir.exists()) repoDir.mkdirs();
			prop.setProperty("repositories", jsdai_properties);
			jsdai.lang.SdaiSession.setSessionProperties(prop);
		}
		session = jsdai.lang.SdaiSession.openSession();
		trans = session.startTransactionReadWriteAccess();

//      jsdai.lang.SdaiRepository repository;


//          trans.endTransactionAccessAbort();

	repository = null;

	if (create_repository) {
			jsdai.lang.ASdaiRepository repos = session.getKnownServers();
			if (repos.getMemberCount() > 0) {
				jsdai.lang.SdaiIterator iter = repos.createIterator();
				while (iter.next()) {
					repository = repos.getCurrentMember(iter);
					if (repository.getName().equalsIgnoreCase(repository_name)) {
						if (repository.isActive()) {
						repository.closeRepository();
						}
				repository.deleteRepository();
						break;
					}
				}
			}
			repository = session.createRepository(repository_name, null);
			repository.openRepository();
	}       else {

/*
	if (create_repository) {
		repository = session.createRepository(repository_name, null);
		repository.openRepository();
	} else {
*/
		jsdai.lang.ASdaiRepository repos = session.getKnownServers();
		jsdai.lang.SdaiIterator iter = repos.createIterator();

		while (iter.next()) {

			jsdai.lang.SdaiRepository rp = repos.getCurrentMember(iter);
// System.out.println("current repository : " + repository.getName());
			if (rp.getName().equalsIgnoreCase(repository_name)) {
				repository = rp;
			} else
			if (rp.getName().equalsIgnoreCase("SystemRepository")) {
				sysrepository = rp;
			}
		}

		if (repository == null) {
			if (flag_allow_no_repository) {
				repository = session.createRepository(repository_name, null);
				repository.openRepository();
			} else {
				System.out.println("ERROR: " + repository_name + " repository not found");
				trans.endTransactionAccessAbort();
      	session.closeSession();
				return -2;
			}
		}

		if (!(repository.isActive())) {  // open repo if not open
				repository.openRepository();
		}



		if (delete_old) {
			// delete sdai models in this repository model-by-model
			deleteAllModels(repository);
		}

		if ((!no_parsing) && (update_flag)) {
//                      deleteRelatedModels(repository, express_file);
			deleteRelatedModels(repository, express_file, instance_flag, instance_name, keep_flag, keep_names);
		}

		initializeExpressTypes(repository);
  }
  if (!no_parsing) {
		initializeHashMaps(repository);
	}
    if (!(indexFileName.equalsIgnoreCase("none"))) {
        RepositoryChanges.rememberRepositoryState(repository);
    }

    if (compilation_sn >= 0) {
        repository.setNextPersistentLabel( compilation_sn << 48 ); //--VV--
    }

///////////////  - let's try setting context

		jsdai.lang.ASdaiModel a_domain = repository.getSchemas().getAssociatedModels();
		// jsdai.lang.ASchemaInstance asi= repository.getSchemas();
		// jsdai.lang.SchemaInstance si = asi.getByIndex(0);
		

// System.out.println("native schema: " + a_schema.getName(null));		
		jsdai.lang.SdaiModel work = repository.createSdaiModel("working", jsdai.SExtended_dictionary_schema.SExtended_dictionary_schema.class);
		jsdai.dictionary.ESchema_definition a_schema = work.getUnderlyingSchema();
		jsdai.lang.SdaiContext _context = new jsdai.lang.SdaiContext(a_schema, a_domain, work);
		session.setSdaiContext(_context);


//////////////
	if (monitor != null) {
		monitor.worked(1);
		monitor.subTask("Compiling express, parsing in pass 1");
	}
    
    
	// pass 1
		if (!no_parsing) {

    if (first_time_invoking) {
			parser = null;
		}
		first_parsed_file = true;
		error_count = 0;
		unique_pdb_name2 = 0;
		unique_pdb_name = 0;
		for (int file_index = 0; file_index < express_files.size(); file_index++) { 
	
			express_file = (String)express_files.elementAt(file_index);
// System.out.println("express file name: " + express_file);
		  if (global_excluded != null) {
		  	Iterator exclude_iter = global_excluded.iterator();
		  	boolean skip_file = false;
		  	while (exclude_iter.hasNext()) {
		  		String exclude_name = (String)exclude_iter.next();
// System.out.println("global excluded: " + exclude_name);
		  		if (exclude_name.equalsIgnoreCase(express_file)) {
		  			skip_file = true;
		  			break;
		  		}
		  	}
		  	if (skip_file) {
		  		continue;
		  	}
		  }
		
		progress = "parsing " + express_file + " in pass 1";
//		Gui.status_label.setText(progress);		
		printVerbose("Parsing express schema(s) in file: " + express_file);
		
			try {
/*
				if (first_parsed_file && first_time_invoking) {
					parser = new Compiler2(new java.io.DataInputStream(new java.io.FileInputStream(express_file)));
				} else {
					parser.ReInit(new java.io.DataInputStream(new java.io.FileInputStream(express_file))); 
				}
*/
//				if (first_parsed_file && first_time_invoking) {
//					parser = new Compiler2(new java.io.DataInputStream(new java.io.FileInputStream(express_file)));
//				} else {
				 
					parser.ReInit(new java.io.DataInputStream(new java.io.FileInputStream(express_file))); 

			} catch (java.io.FileNotFoundException e) {
				System.out.println("Express Compiler> File " + express_file + " not found.");
				trans.endTransactionAccessAbort();
        session.closeSession();
        return -3;
			} catch (java.lang.NullPointerException e) {
				try {
					parser = new Compiler2(new java.io.DataInputStream(new java.io.FileInputStream(express_file)));
				} catch (java.io.FileNotFoundException e2) {
					System.out.println("Express Compiler> File " + express_file + " not found.");
					trans.endTransactionAccessAbort();
          session.closeSession();
          return -3;
				} 
			}

			
			
			try {
      	is_complex_schema = false;
				parser_pass = 1;
  variable_uid = 0;
//      initializeExpressTypes(repository);
	    	pass_start_time = System.currentTimeMillis();
				parser.AllSchemas();
				first_parsed_file = false;
	    	pass_finish_time = System.currentTimeMillis();
    		pass_elapsed_time = pass_finish_time - pass_start_time;
				printVerbose("duration of pass 1: " + pass_elapsed_time);
			} catch (ParseException e) {
				System.out.println("Express Compiler> Parser found errors in pass 1.");
				System.out.println(e.getMessage());
				trans.endTransactionAccessAbort();
        session.closeSession();
        return -4;
			} catch (TokenMgrError e) {

// just see if Encountered: is <EOF>, and if after is empty
// curLexState = 1 means in single line comment, the same situation in multi-line comment occurs only if end of comment is missing,
// therefore it is a legitimate error, and better to throw it and stop parsing
   if (Compiler2TokenManager.curLexState == 1) { // single-line comment
			String error_msg = e.getMessage();
			if (error_msg.indexOf("Encountered: <EOF> after : \"\"") > 0) {
				// do nothing at all for now
				// perhaps an additional check of <EOF> can be performed - to see if <EOF> did not occur in the middle of the file (is it possible?)
				/*
						 the EOF test seems to be this:

				     try { input_stream.readChar(); input_stream.backup(1); }
     				 catch (java.io.IOException e1) {
        			 EOFSeen = true;
						 }
						 
						 so, can it occur from a garbage in the middle of the file or not?

				*/

			} else {
				printErrorMsg(e.getMessage(), null, true);
				trans.endTransactionAccessAbort();
  	    session.closeSession();
				return -4;
			}

	 } else { // better report this error and exit
				printErrorMsg(e.getMessage(), null, true);
				trans.endTransactionAccessAbort();
  	    session.closeSession();
				return -4;
	 }

// ERROR:  line: 27, column: 11. Lexical error at line 27, column 25.  Encountered: <EOF> after : ""



//System.out.println("<>: " + Compiler2TokenManager.curLexState);

				// System.out.println("Express Compiler> Parser found errors in pass 1.");
//				printError(e.getMessage());
//				printErrorMsg(e.getMessage(), null, true);
				// return;
			}
		} // going through all the express files in pass 1 - loop end	
			
// System.out.println("XXXXXXXXXXXXXXXXXX after 1st pass, error_count: " + error_count + ", flag: " + flag_relax);			
			
		if ((error_count > 0) && (!flag_relax)) {
			if (error_count == 1) {
				System.out.println(error_count + " error found in pass 1.");
			} else {
				System.out.println(error_count + " errors found in pass 1.");
			}	
			trans.endTransactionAccessAbort();
      session.closeSession();
			return -4;
		}


		// pass 2
    if (monitor != null) {
			monitor.worked(1);
			monitor.subTask("Compiling express, parsing in pass 2");
		}

		first_parsed_file = true;
		unique_pdb_name2 = 0;
		unique_pdb_name = 0;
		for (int file_index = 0; file_index < express_files.size(); file_index++) { 
	
			express_file = (String)express_files.elementAt(file_index);
		  if (global_excluded != null) {
		  	Iterator exclude_iter = global_excluded.iterator();
		  	boolean skip_file = false;
		  	while (exclude_iter.hasNext()) {
		  		String exclude_name = (String)exclude_iter.next();
		  		if (exclude_name.equalsIgnoreCase(express_file)) {
		  			skip_file = true;
		  			break;
		  		}
		  	}
		  	if (skip_file) {
		  		continue;
		  	}
		  }

		progress = "parsing " + express_file + " in pass 2";
//		Gui.status_label.setText(progress);		

			try {
				parser.ReInit(new java.io.DataInputStream(new java.io.FileInputStream(express_file))); 
//			parser = new Compiler2(new java.io.DataInputStream(new java.io.FileInputStream(express_file)));
			} catch (java.io.FileNotFoundException e) {
				System.out.println("Express Compiler> File " + express_file + " not found.");
				trans.endTransactionAccessAbort();
        session.closeSession();
        return -3;
			}

			try {
//				error_count = 0;
      	is_complex_schema = false;
  variable_uid = 0;
				parser_pass = 2;
//      initializeExpressTypes(repository);
	    	pass_start_time = System.currentTimeMillis();
				parser.AllSchemas();
				first_parsed_file = false;
	    	pass_finish_time = System.currentTimeMillis();
    		pass_elapsed_time = pass_finish_time - pass_start_time;
				printVerbose("duration of pass 2: " + pass_elapsed_time);
			} catch (ParseException e) {
				System.out.println("Express Compiler> Parser found errors in pass 2.");
				System.out.println(e.getMessage());
  			trans.endTransactionAccessAbort();
        session.closeSession();
        return -5;
			} catch (TokenMgrError e) {
//				System.out.println("Express Compiler> Parser found errors in pass 2.");
//				System.out.println(e.getMessage());
//				return;
			}
		} // going through all the express files in pass 2 - loop end	

		
		if ((error_count > 0) && (!flag_relax)) {
			if (error_count == 1) {
				System.out.println(error_count + " error found in pass 2.");
			} else {
				System.out.println(error_count + " errors found in pass 2.");
			}	
			trans.endTransactionAccessAbort();
      session.closeSession();
      return -5;
		}
    start_time = System.currentTimeMillis();
//repository.exportClearTextEncoding("before_chain.pf");
		
		chainUseFroms();
//repository.exportClearTextEncoding("after_chain.pf");
    finish_time = System.currentTimeMillis();
    elapsed_time = finish_time - start_time;
    printVerbose("duration of generation of chained USE FROM declarations: " + elapsed_time);

    // new pass 3
    if (monitor != null) {
				monitor.worked(1);
				monitor.subTask("Compiling express, parsing in pass 3");
		}

		first_parsed_file = true;
		unique_pdb_name2 = 0;
		unique_pdb_name = 0;
		for (int file_index = 0; file_index < express_files.size(); file_index++) { 
	
			express_file = (String)express_files.elementAt(file_index);
		  if (global_excluded != null) {
		  	Iterator exclude_iter = global_excluded.iterator();
		  	boolean skip_file = false;
		  	while (exclude_iter.hasNext()) {
		  		String exclude_name = (String)exclude_iter.next();
		  		if (exclude_name.equalsIgnoreCase(express_file)) {
		  			skip_file = true;
		  			break;
		  		}
		  	}
		  	if (skip_file) {
		  		continue;
		  	}
		  }
		
		progress = "parsing " + express_file + " in pass 3";
//		Gui.status_label.setText(progress);		

			try {
				parser.ReInit(new java.io.DataInputStream(new java.io.FileInputStream(express_file))); 
//			parser = new Compiler2(new java.io.DataInputStream(new java.io.FileInputStream(express_file)));
			} catch (java.io.FileNotFoundException e) {
				System.out.println("Express Compiler> File " + express_file + " not found.");
				trans.endTransactionAccessAbort();
        session.closeSession();
        return -3;
			}
			try {
//				error_count = 0;
      	is_complex_schema = false;
  variable_uid = 0;
				parser_pass = 3;
//      initializeExpressTypes(repository);
	    	pass_start_time = System.currentTimeMillis();
				parser.AllSchemas();
	    	first_parsed_file = false;
	    	pass_finish_time = System.currentTimeMillis();
    		pass_elapsed_time = pass_finish_time - pass_start_time;
				printVerbose("duration of pass 3: " + pass_elapsed_time);
			} catch (ParseException e) {
				System.out.println("Express Compiler> Parser found errors in pass 3.");
				System.out.println(e.getMessage());
				trans.endTransactionAccessAbort();
        session.closeSession();
        return -6;
			} catch (TokenMgrError e) {
//				System.out.println("Express Compiler> Parser found errors in pass 3.");
//				System.out.println(e.getMessage());
//				return;
			}
		} // going through all the express files in pass 3 - loop end	
		
		if ((error_count > 0) && (!flag_relax)) {
			if (error_count == 1) {
				System.out.println(error_count + " error found in pass 3.");
			} else {
				System.out.println(error_count + " errors found in pass 3.");
			}	
			trans.endTransactionAccessAbort();
      session.closeSession();
      return -6;
		}
// repository.exportClearTextEncoding("___testing_after_3.p21");

//repository.exportClearTextEncoding("after_pass3.pf");

    // ok, let's try to put resolving RENAMED here
    ECtRenamed.resolve(repository); 


    // new pass 4
    if (monitor != null) {
			monitor.worked(1);
			monitor.subTask("Compiling express, parsing in pass 4");
		}

		first_parsed_file = true;
		unique_pdb_name2 = 0;
		unique_pdb_name = 0;
		for (int file_index = 0; file_index < express_files.size(); file_index++) {
	
			express_file = (String)express_files.elementAt(file_index);
		  if (global_excluded != null) {
		  	Iterator exclude_iter = global_excluded.iterator();
		  	boolean skip_file = false;
		  	while (exclude_iter.hasNext()) {
		  		String exclude_name = (String)exclude_iter.next();
		  		if (exclude_name.equalsIgnoreCase(express_file)) {
		  			skip_file = true;
		  			break;
		  		}
		  	}
		  	if (skip_file) {
		  		continue;
		  	}
		  }

		progress = "parsing " + express_file + " in pass 4";
//		Gui.status_label.setText(progress);		

			try {
				parser.ReInit(new java.io.DataInputStream(new java.io.FileInputStream(express_file))); 
//			parser = new Compiler2(new java.io.DataInputStream(new java.io.FileInputStream(express_file)));
			} catch (java.io.FileNotFoundException e) {
				System.out.println("Express Compiler> File " + express_file + " not found.");
  			trans.endTransactionAccessAbort();
        session.closeSession();
        return -3;
			}
			try {
//				error_count = 0;
      	is_complex_schema = false;
  variable_uid = 0;
				parser_pass = 4;
				flag_in_redeclaring = false;
//      initializeExpressTypes(repository);
	    	pass_start_time = System.currentTimeMillis();
				parser.AllSchemas();
				first_parsed_file = false;
	    	pass_finish_time = System.currentTimeMillis();
    		pass_elapsed_time = pass_finish_time - pass_start_time;
				printVerbose("duration of pass 4: " + pass_elapsed_time);
			} catch (ParseException e) {
				System.out.println("Express Compiler> Parser found errors in pass 4.");
				System.out.println(e.getMessage());
  			trans.endTransactionAccessAbort();
        session.closeSession();
        return -7;
			} catch (TokenMgrError e) {
//				System.out.println("Express Compiler> Parser found errors in pass 4.");
//				System.out.println(e.getMessage());
//				return;
			}
		} // going through all the express files in pass 4 - loop end	

		if ((error_count > 0) && (!flag_relax)) {
			if (error_count == 1) {
				System.out.println(error_count + " error found in pass 4.");
			} else {
				System.out.println(error_count + " errors found in pass 4.");
			}	
    	trans.endTransactionAccessAbort();
      session.closeSession();
      return -7;
		}

// repository.exportClearTextEncoding("___testing_after_4.p21");

//repository.exportClearTextEncoding("after_pass4.pf");

    // pass 5
//              argument_stack.clear();
      if (monitor != null) {
				monitor.worked(1);
				monitor.subTask("Compiling express, parsing in pass 5");
			}

		first_parsed_file = true;
		unique_pdb_name2 = 0;
		unique_pdb_name = 0;
		for (int file_index = 0; file_index < express_files.size(); file_index++) { 
	
			express_file = (String)express_files.elementAt(file_index);
		  if (global_excluded != null) {
		  	Iterator exclude_iter = global_excluded.iterator();
		  	boolean skip_file = false;
		  	while (exclude_iter.hasNext()) {
		  		String exclude_name = (String)exclude_iter.next();
		  		if (exclude_name.equalsIgnoreCase(express_file)) {
		  			skip_file = true;
		  			break;
		  		}
		  	}
		  	if (skip_file) {
		  		continue;
		  	}
		  }

			if (x_all_data == null) {
				x_all_data = new Vector();
			}

		progress = "parsing " + express_file + " in pass 5";
//		Gui.status_label.setText(progress);		

			try {
				parser.ReInit(new java.io.DataInputStream(new java.io.FileInputStream(express_file))); 
//			parser = new Compiler2(new java.io.DataInputStream(new java.io.FileInputStream(express_file)));
			} catch (java.io.FileNotFoundException e) {
				System.out.println("Express Compiler> File " + express_file + " not found.");
  			trans.endTransactionAccessAbort();
        session.closeSession();
        return -3;
			}
		// creating sdai model for the expressions of the current file - set of short form schemas
			if (expression_instances) {
		    // expression_model_name = "_EXPRESSIONS_" + express_file_name;
// printDebug("before creating expression_model Sdai Model");
//                              expression_model = repository.createSdaiModel(expression_model_name, jsdai.SSdai_expressions_schema.SSdai_expressions_schema.class);
// printDebug("after creating expression_model Sdai Model, before creating schema definition");
//                      expression_model.startReadWriteAccess();
//                              esd = (jsdai.SExtended_dictionary_schema.ESchema_definition)expression_model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSchema_definition.class);
// printDebug("after creating schema definition");
//                              esd.setName(null, express_file_name.toUpperCase());
			}
			try {
      	is_complex_schema = false;
//				error_count = 0;
  variable_uid = 0;
				parser_pass = 5;
			flag_in_redeclaring = false;
//                      X_AllSchemas x_data = parser.AllSchemas();
//      initializeExpressTypes(repository);
	    	pass_start_time = System.currentTimeMillis();
				x_data = parser.AllSchemas5();
	    	x_all_data.addElement(x_data);
	    	first_parsed_file = false;
	    	pass_finish_time = System.currentTimeMillis();
    		pass_elapsed_time = pass_finish_time - pass_start_time;
				printVerbose("duration of pass 5: " + pass_elapsed_time);
      // Compiler2Visitor v = new ECxDebugPrint();
			// System.out.println("    Printing Node names: ");
			// System.out.println("");
				if (expression_instances) {
	   //  x_data.jjtAccept(v, null);
				}
			// System.out.println("");
			// System.out.println(" A simpler way to dump: ");
			// System.out.println("");
// System.out.println("XAXA1 - before dumping");
				if (expression_instances) {
// System.out.println("XAXA2 - dumping");

//				if (flag_print_nodes) {
// 					x_data.dump("MULTI: ");
//				}	

 // key would be good				x_data.dump("NODE: ");
				}
//				System.out.println("");
			} catch (ParseException e) {
				System.out.println("Express Compiler> Parser found errors in pass 5.");
				System.out.println(e.getMessage());
    		trans.endTransactionAccessAbort();
        session.closeSession();
        return -8;
//			} catch (TokenMgrError e) {

// x_data = jjtThis;
// System.out.println("<> x_data: " + x_data);
// x_all_data.addElement(x_data);
// first_parsed_file = false;
// pass_finish_time = System.currentTimeMillis();
// pass_elapsed_time = pass_finish_time - pass_start_time;

//				System.out.println("Express Compiler> Parser found errors in pass 5.");
//				System.out.println(e.getMessage());
//				return;
			} catch (java.util.EmptyStackException ex) {
				System.out.println("Express Compiler> Empty argument stack in pass 5.");
				throw ex;
			}
		} // going through all the express files in pass 5 - loop end	
	
//repository.exportClearTextEncoding("after_pass5.pf");
	
	
		x_data = makeOneRoot(x_all_data);
				if ((flag_print_nodes) && (expression_instances)) {
 					x_data.dump("NODE: ");
 				}	
		if ((error_count > 0) && (!flag_relax)) {
			if (error_count == 1) {
				System.out.println(error_count + " error found in pass 5.");
			} else {
				System.out.println(error_count + " errors found in pass 5.");
			}	
    	trans.endTransactionAccessAbort();
      session.closeSession();
      return -8;
		}

    if (monitor != null) {
			monitor.worked(1);
			monitor.subTask("Compiling express, implicit declarations, complex entities, etc.");
  	}

    start_time = System.currentTimeMillis();
		if (expression_instances) {
//                      expression_model.reduceSdaiModelToRO();
		}
//repository.exportClearTextEncoding("before_implicit.pf");
		generateImplicitDeclarations(x_data, parser);

//repository.exportClearTextEncoding("after_implicit.pf");


// repository.exportClearTextEncoding("___testing_after_implicit.p21");
    finish_time = System.currentTimeMillis();
    elapsed_time = finish_time - start_time;
    printVerbose("duration of generation of implicit declarations: " + elapsed_time);
    total_finish_time = System.currentTimeMillis();
   	total_elapsed_time = total_finish_time - total_start_time;
		printVerbose("duration of parsing: " + total_elapsed_time);
		} // if !no_parsing
		else { // noparsing
			setAllReadWrite(repository);
		}
		if (!flag_complex_off) {
		progress = "generator of complex entities is running";
//		Gui.status_label.setText(progress);		

			AddComplex add_complex = new AddComplex();
	    boolean complex_added = false;
	    pass_start_time = System.currentTimeMillis();

			if (flag_complex) {
				complex_added = add_complex.runMe(repository, trans, complex_list_file, flag_verbose, flag_debug, flag_complex_directory);
	    } else {
				complex_added = add_complex.runMe(repository, trans, null, flag_verbose, flag_debug, flag_complex_directory);
	    }
	  	if (complex_added) {
				compiled_schemas.addElement("mixed_complex_types");
	  	}
	    pass_finish_time = System.currentTimeMillis();
    	pass_elapsed_time = pass_finish_time - pass_start_time;
			printVerbose("duration of generation of complex entities: " + pass_elapsed_time);
		}
//repository.exportClearTextEncoding("after_complex.pf");
		if (add_short_names) {
			AddShortNames short_names = new AddShortNames();
//                      short_names.runMe(repository, flag_verbose, flag_debug);
			short_names.runMe(repository, flag_verbose, flag_debug, short_name_dir);
		}
//RR temp
//		if (generate_p21) {
//			repository.exportClearTextEncoding(physical_file);
//		}
		
		// hey, garbage collector, take them
//repository.exportClearTextEncoding("after_short_names.pf");
		
		Set keys = hm_entity_declarations.keySet();
		Iterator iter = keys.iterator();
		while (iter.hasNext()) {
			Object key = iter.next();
			HashMap current = (HashMap)hm_entity_declarations.get(key);
			current.clear();
			current = null;
			key = null;
		}
		hm_entity_declarations.clear();
		hm_entity_declarations = null;
	  if (hm_current_entity_declarations != null) {
	  	hm_current_entity_declarations.clear();
	  	hm_current_entity_declarations = null;
		}

		keys = hm_type_declarations.keySet();
		iter = keys.iterator();
		while (iter.hasNext()) {
			Object key = iter.next();
			HashMap current = (HashMap)hm_type_declarations.get(key);
			current.clear();
			current = null;
			key = null;
		}
		hm_type_declarations.clear();
		hm_type_declarations = null;
	  if (hm_current_type_declarations != null) {
	  	hm_current_type_declarations.clear();
	  	hm_current_type_declarations = null;
		}
		
		keys = hm_function_declarations.keySet();
		iter = keys.iterator();
		while (iter.hasNext()) {
			Object key = iter.next();
			HashMap current = (HashMap)hm_function_declarations.get(key);
			current.clear();
			current = null;
			key = null;
		}
		hm_function_declarations.clear();
		hm_function_declarations = null;
	  if (hm_current_function_declarations != null) {
	  	hm_current_function_declarations.clear();
	  	hm_current_function_declarations = null;
		}

		keys = hm_procedure_declarations.keySet();
		iter = keys.iterator();
		while (iter.hasNext()) {
			Object key = iter.next();
			HashMap current = (HashMap)hm_procedure_declarations.get(key);
			current.clear();
			current = null;
			key = null;
		}
		hm_procedure_declarations.clear();
		hm_procedure_declarations = null;
	  if (hm_current_procedure_declarations != null) {
	  	hm_current_procedure_declarations.clear();
	  	hm_current_procedure_declarations = null;
		}

		keys = hm_rule_declarations.keySet();
		iter = keys.iterator();
		while (iter.hasNext()) {
			Object key = iter.next();
			HashMap current = (HashMap)hm_rule_declarations.get(key);
			current.clear();
			current = null;
			key = null;
		}
		hm_rule_declarations.clear();
		hm_rule_declarations = null;
	  if (hm_current_rule_declarations != null) {
	  	hm_current_rule_declarations.clear();
	  	hm_current_rule_declarations = null;
		}

		keys = hm_constant_declarations.keySet();
		iter = keys.iterator();
		while (iter.hasNext()) {
			Object key = iter.next();
			HashMap current = (HashMap)hm_constant_declarations.get(key);
			current.clear();
			current = null;
			key = null;
		}
		hm_constant_declarations.clear();
		hm_constant_declarations = null;
	  if (hm_current_constant_declarations != null) {
	  	hm_current_constant_declarations.clear();
	  	hm_current_constant_declarations = null;
		}
		
		keys = hm_subtype_constraint_declarations.keySet();
		iter = keys.iterator();
		while (iter.hasNext()) {
			Object key = iter.next();
			HashMap current = (HashMap)hm_subtype_constraint_declarations.get(key);
			current.clear();
			current = null;
			key = null;
		}
		hm_subtype_constraint_declarations.clear();
		hm_subtype_constraint_declarations = null;
	  if (hm_current_subtype_constraint_declarations != null) {
	  	hm_current_subtype_constraint_declarations.clear();
	  	hm_current_subtype_constraint_declarations = null;
		}


		keys = hm_parameters.keySet();
		iter = keys.iterator();
		while (iter.hasNext()) {
			Object key = iter.next();
			HashMap current = (HashMap)hm_parameters.get(key);
			current.clear();
			current = null;
			key = null;
		}
		hm_parameters.clear();
		hm_parameters = null;
	  if (hm_current_parameters != null) {
	  	hm_current_parameters.clear();
	  	hm_current_parameters = null;
		}

		keys = hm_variables.keySet();
		iter = keys.iterator();
		while (iter.hasNext()) {
			Object key = iter.next();
			HashMap current = (HashMap)hm_variables.get(key);
			current.clear();
			current = null;
			key = null;
		}
		hm_variables.clear();
		hm_variables = null;
	  if (hm_current_variables != null) {
	  	hm_current_variables.clear();
	  	hm_current_variables = null;
		}

		
		hm_attributes.clear();
		hm_attributes = null;

		keys.clear();
		keys = null;

    if (monitor != null) {
			monitor.worked(1);
			monitor.subTask("Compiling express, java backend");
		}

//repository.exportClearTextEncoding("before_java.pf");

		if (generate_java) {
		progress = "java backend is running";
//		Gui.status_label.setText(progress);		

			JavaBackend java_backend = new JavaBackend();
			if (flag_print_failed_domain_rule) {
				java_backend.flag_print_failed_domain_rule = true;
			} else {
//				java_backend.flag_print_failed_domain_rule = false;
				java_backend.flag_print_failed_domain_rule = true;
			}
			if (flag_process_all_domain_rules) {
				java_backend.flag_process_all_domain_rules = true;
			} else {
//				java_backend.flag_process_all_domain_rules = false;
				java_backend.flag_process_all_domain_rules = true;
			}
			if (flag_debug) {
				java_backend.debug_mode = true;
			} else {
				java_backend.debug_mode = false;
			}
			if (flag_debug) {
				java_backend.flag_debug = true;
			} else {
				java_backend.flag_debug = false;
			}
			if (flag_debug_split_return) {
				java_backend.flag_split_debug = true;
			} else {
				java_backend.flag_split_debug = false;
			}
			if (flag_deep_debug) {
				java_backend.flag_deep_debug = true;
			} else {
				java_backend.flag_deep_debug = false;
			}
			if (flag_no_print_active_nodes) {
				java_backend.flag_no_print_active_nodes = true;
			} else {
				java_backend.flag_no_print_active_nodes = false;
			}
			if (flag_verbose) {
				java_backend.verbose_mode = true;
			}       else {
				java_backend.verbose_mode = false;
			}
    	pass_start_time = System.currentTimeMillis();
//			java_backend.runMe(repository, flag_inherit, flag_verbose, flag_debug, flag_value, expression_instances, x_data, flag_serialize, xc_version, xc_build, xc_date);	
//			java_backend.runMe(repository, flag_inherit, flag_verbose, flag_debug, flag_value, expression_instances, x_data, flag_serialize, xc_version, xc_build, xc_date, parser);
			java_backend.runMe(repository, flag_inherit, flag_verbose, flag_debug, flag_value, expression_instances, x_data, flag_serialize, xc_version, xc_build, xc_date, parser, output_dir);
    	pass_finish_time = System.currentTimeMillis();
   		pass_elapsed_time = pass_finish_time - pass_start_time;
			printVerbose("duration of backend: " + pass_elapsed_time);
		}

//repository.exportClearTextEncoding("after_java.pf");

		// after all passes
		if (delete_declarations) {
			deleteInterfacedDeclarations();
		}
//		if (generate_p21) {
//			repository.exportClearTextEncoding(physical_file);
//		}
		if (compile_flag) {
			generateCompileBatch(repository, compile_string, batch_file, log_file);
		}
		if (jar_flag) {
			generateJarBatch(repository, jar_string, jar_file, jar_string0, jar_batch_file);
		}
		if (zip_flag) {
			generateZipBatch(repository, zip_string, zip_file, zip_batch_file);
		}

	  if (model_file_name != null) {
			generateModelFile();
		}

		if (!create_repository) {
			if (!(sysrepository.isActive())) {  // open repo if not open
					sysrepository.openRepository();
			}
		  jsdai.lang.ASdaiModel models3 = sysrepository.getModels();
			jsdai.lang.SdaiIterator iter_model3 = models3.createIterator();
			while (iter_model3.next()) {
				jsdai.lang.SdaiModel model3 = models3.getCurrentMember(iter_model3);
				String m_name = model3.getName();
				if (m_name.equalsIgnoreCase("SDAI_DICTIONARY_SCHEMA_DICTIONARY_DATA")) {
					jsdai.lang.Aggregate ia = model3.getEntityExtentInstances(jsdai.dictionary.ESchema_definition.class);
					jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
					while (iter_inst.next()) {
						dic_sd = (jsdai.dictionary.ESchema_definition)ia.getCurrentMemberObject(iter_inst);
						break;
					}
					break;
				}
				// break;
			}
//                      updateSchemaInstances(dic_sd, repository, repository_name, express_file);
			updateSchemaInstances(dic_sd, repository, repository_name, express_file, instance_flag, instance_name);
			deleteSchemaInstances(dic_sd, repository, repository_name, express_file, instance_flag, instance_name, annex_a_flag, keep_flag, keep_names, keep_all_flag);
		}
	  work.deleteSdaiModel();
//repository.exportClearTextEncoding("before_remove_duplicates.pf");
  	removeDuplicateDataTypes(repository);
//repository.exportClearTextEncoding("after_remove_duplicates.pf");
		if (generate_p21) {
			repository.exportClearTextEncoding(physical_file);
		}
		if (generate_bin) {
			trans.commit();
            if (!(indexFileName.equalsIgnoreCase("none"))) {
							String indexFilePath = null;
							if (output_dir != null) {
								if (indexFileName.endsWith(".properties")) {
									indexFilePath = output_dir + File.separator + indexFileName;
								} else {
									indexFilePath = output_dir + File.separator + "jsdai" + File.separator + indexFileName + ".properties";
								}
							} else {
								indexFilePath = indexFileName;
							}
                RepositoryChanges.trackRepositoryChanges(repository, indexFilePath);
//                RepositoryChanges.trackRepositoryChanges(repository, indexFileName);
//                RepositoryChanges.trackRepositoryChanges(repository, indexFileName, output_dir);
            }
		}
		if (flag_insert) {
			insertBinaries(repository, x_data, true);
		}
		if (!generate_bin) {
	    trans.endTransactionAccessAbort();
		repository.closeRepository();
	repository.deleteRepository();
		}
		session.closeSession();
  	total_finish_time = System.currentTimeMillis();
   	total_elapsed_time = total_finish_time - total_start_time;
		printVerbose("total duration: " + total_elapsed_time);
		System.out.println("Express Compiler ended");
		in_progress = false;
 		return 0;
	}

}

PARSER_END(Compiler2)

SKIP : /* WHITE SPACE */
{
	" "
| "\t"
| "\n"
| "\r"
| "\f"
| "\0"
}



/* COMMENTS */

MORE :
{
	"--" : IN_SINGLE_LINE_COMMENT
|
	"(**" : IN_DOCUMENT_COMMENT
|
	"(*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
	<SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" | "<EOF>" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
	< ~[] >
}

<IN_DOCUMENT_COMMENT>
SPECIAL_TOKEN :
{
	<DOCUMENT_COMMENT: "*)" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
	<MULTI_LINE_COMMENT: "*)" > : DEFAULT
}

<IN_DOCUMENT_COMMENT>
MORE :
{
	< ~[] >
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
	< ~[] >
}


TOKEN : /* SEPARATORS */
{
< LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < COLON: ":" >
}

TOKEN : /* OPERATORS */
{
< EQ: "=" >
| < ASSIGN: ":=" >
| < GT: ">" >
| < BPATH: "<-" >
| < FPATH: "::" >
| < LT: "<" >
| < HOOK: "?" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "<>" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < STARS: "**" >
| < SLASH: "/" >
| < BACKSLASH: "\\" >
| < BIT_OR: "|" >
| < OP_AT: "@" >
| < COMPLEX_AND: "&" >
| < OP_UNDERSCORE: "_" >
}



TOKEN : /* Keywords */
{
< ABS: "abs" >                     /* ISO 10303-11:A.1.1.000 */
| < ABSTRACT: "abstract" >           /* ISO 10303-11:A.1.1.001 */
| < ACOS: "acos" >                   /* ISO 10303-11:A.1.1.002 */
| < AGGREGATE: "aggregate" >         /* ISO 10303-11:A.1.1.003 */
| < ALIAS: "alias" >                 /* ISO 10303-11:A.1.1.004 */
| < AND: "and" >                     /* ISO 10303-11:A.1.1.005 */
| < ANDOR: "andor" >                 /* ISO 10303-11:A.1.1.006 */
| < ARRAY: "array" >                 /* ISO 10303-11:A.1.1.007 */
| < AS: "as" >                       /* ISO 10303-11:A.1.1.008 */
| < ASIN: "asin" >                   /* ISO 10303-11:A.1.1.009 */
| < ATAN: "atan" >                   /* ISO 10303-11:A.1.1.010 */
| < BAG: "bag" >                     /* ISO 10303-11:A.1.1.011 */
//| < BASED_ON: "based on" >           /* ISO 10303-11:AMENDMENT */
| < BASED_ON: "based_on" > { if (Support.no_express_amendment) matchedToken.kind = SIMPLE_ID; }  /* ISO 10303-11:AMENDMENT */
| < BEGIN: "begin" >                 /* ISO 10303-11:A.1.1.012 */
| < BINARY: "binary" >               /* ISO 10303-11:A.1.1.013 */
| < BLENGTH: "blength" >             /* ISO 10303-11:A.1.1.014 */
| < BOOLEAN: "boolean" >             /* ISO 10303-11:A.1.1.015 */
| < BY: "by" >                       /* ISO 10303-11:A.1.1.016 */
| < CASE: "case" >                   /* ISO 10303-11:A.1.1.017 */
| < CONNOTATIONAL: "connotational" > 
| < CONSTANT: "constant" >           /* ISO 10303-11:A.1.1.018 */
| < CONST_E: "const_e" >             /* ISO 10303-11:A.1.1.019 */
| < CONTEXT: "context" >             /* ISO 10303-11:A.1.1.020 */
| < COS: "cos" >                     /* ISO 10303-11:A.1.1.021 */
| < CREATE: "create" >  { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.001 - REMOVED in DIS */
| < DEPENDENT_MAP: "dependent_map" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; }  /* ISO 10303-14:B.1.1.002 */
| < DERIVE: "derive" >               /* ISO 10303-11:A.1.1.022 */
| < DIV: "div" >                     /* ISO 10303-11:A.1.1.023 */
//| < EACH: "each" >
| < EACH: "each" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.003 */
| < ELSE: "else" >                   /* ISO 10303-11:A.1.1.024 */
| < ELSIF: "elsif" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.012 */
// | < ELSIF: "elsif" >  /* currently, express_x switch is ignored, always true for schema_maps, always false for ordinary schemas, enabling in express */
// | < ELSIF: "elsif" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.MISSING */
| < END: "end" >                     /* ISO 10303-11:A.1.1.025 */
| < END_ALIAS: "end_alias" >         /* ISO 10303-11:A.1.1.026 */
| < END_CASE: "end_case" >           /* ISO 10303-11:A.1.1.027 */
| < END_CONSTANT: "end_constant" >   /* ISO 10303-11:A.1.1.028 */
| < END_CONTEXT: "end_context" >     /* ISO 10303-11:A.1.1.029 */
| < END_CREATE: "end_create" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.004 - REMOVED IN DIS */
| < END_DEPENDENT_MAP: "end_dependent_map" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.005 */
| < END_ENTITY: "end_entity" >       /* ISO 10303-11:A.1.1.030 */
| < END_FUNCTION: "end_function" >   /* ISO 10303-11:A.1.1.031 */
| < END_IF: "end_if" >               /* ISO 10303-11:A.1.1.032 */
| < END_LOCAL: "end_local" >         /* ISO 10303-11:A.1.1.033 */
| < END_MAP: "end_map" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.006 */
| < END_MODEL: "end_model" >         /* ISO 10303-11:A.1.1.034 */
| < END_PROCEDURE: "end_procedure" > /* ISO 10303-11:A.1.1.035 */
| < END_REPEAT: "end_repeat" >       /* ISO 10303-11:A.1.1.036 */
| < END_RULE: "end_rule" >           /* ISO 10303-11:A.1.1.037 */
| < END_SCHEMA: "end_schema" >       /* ISO 10303-11:A.1.1.038 */
| < END_SCHEMA_MAP: "end_schema_map" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.007 */
| < END_SCHEMA_VIEW: "end_schema_view" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.008 */
| < END_SUBTYPE_CONSTRAINT: "end_subtype_constraint" > { if (Support.no_express_amendment) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-11:AMENDMENT */
| < END_TYPE: "end_type" >           /* ISO 10303-11:A.1.1.039 */
| < END_VIEW: "end_view" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.009 */
| < ENTITY: "entity" >               /* ISO 10303-11:A.1.1.040 */
| < ENUMERATION: "enumeration" >     /* ISO 10303-11:A.1.1.041 */
| < ESCAPE: "escape" >               /* ISO 10303-11:A.1.1.042 */
| < EXISTS: "exists" >               /* ISO 10303-11:A.1.1.043 */
| < EXP: "exp" >                     /* ISO 10303-11:A.1.1.044 */
| < EXTENSIBLE: "extensible" > { if (Support.no_express_amendment) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-11:AMENDMENT */
| < EXTENT: "extent" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.010 */
| < FALSE: "false" >                 /* ISO 10303-11:A.1.1.045 */
| < FIXED: "fixed" >                 /* ISO 10303-11:A.1.1.046 */
| < FOR: "for" >                     /* ISO 10303-11:A.1.1.047 */
| < FORMAT: "format" >               /* ISO 10303-11:A.1.1.048 */
| < FROM: "from" >                   /* ISO 10303-11:A.1.1.049 */
| < FUNCTION: "function" >           /* ISO 10303-11:A.1.1.050 */
| < GENERIC_ENTITY: "generic_entity" > { if (Support.no_express_amendment) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-11:AMENDMENT */
| < GENERIC: "generic" >             /* ISO 10303-11:A.1.1.051 */
| < HIBOUND: "hibound" >             /* ISO 10303-11:A.1.1.052 */
| < HIINDEX: "hiindex" >             /* ISO 10303-11:A.1.1.053 */
| < IDENTIFIED_BY: "identified_by" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:A.1.1.011 */
| < IF: "if" >                       /* ISO 10303-11:A.1.1.054 */
| < IN: "in" >                       /* ISO 10303-11:A.1.1.055 */
| < INDEXING: "indexing" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.MISSING */
| < INSERT: "insert" >               /* ISO 10303-11:A.1.1.056 */
| < INTEGER: "integer" >             /* ISO 10303-11:A.1.1.057 */
| < INVERSE: "inverse" >             /* ISO 10303-11:A.1.1.058 */
| < LENGTH: "length" >               /* ISO 10303-11:A.1.1.059 */
| < LIKE: "like" >                   /* ISO 10303-11:A.1.1.060 */
| < LIST: "list" >                   /* ISO 10303-11:A.1.1.061 */
| < LOBOUND: "lobound" >             /* ISO 10303-11:A.1.1.062 */
| < LOCAL: "local" >                 /* ISO 10303-11:A.1.1.063 */
| < LOG: "log" >                     /* ISO 10303-11:A.1.1.064 */
| < LOG10: "log10" >                 /* ISO 10303-11:A.1.1.065 */
| < LOG2: "log2" >                   /* ISO 10303-11:A.1.1.066 */
| < LOGICAL: "logical" >             /* ISO 10303-11:A.1.1.067 */
| < LOINDEX: "loindex" >             /* ISO 10303-11:A.1.1.068 */
| < MAP: "map" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.012 */
| < MOD: "mod" >                     /* ISO 10303-11:A.1.1.069 */
| < MODEL: "model" >                 /* ISO 10303-11:A.1.1.070 */
| < NOT: "not" >                     /* ISO 10303-11:A.1.1.071 */
| < NUMBER: "number" >               /* ISO 10303-11:A.1.1.072 */
| < NVL: "nvl" >                     /* ISO 10303-11:A.1.1.073 */
| < ODD: "odd" >                     /* ISO 10303-11:A.1.1.074 */
| < OF: "of" >                       /* ISO 10303-11:A.1.1.075 */
| < ONEOF: "oneof" >                 /* ISO 10303-11:A.1.1.076 */
| < OPTIONAL: "optional" >           /* ISO 10303-11:A.1.1.077 */
| < OR: "or" >                       /* ISO 10303-11:A.1.1.078 */
| < ORDERED_BY: "ordered_by" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.013 */
	| < OTHERWISE: "otherwise" >         /* ISO 10303-11:A.1.1.079 */
| < PARTITION: "partition" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.014 */
| < PI: "pi" >                       /* ISO 10303-11:A.1.1.080 */
| < PROCEDURE: "procedure" >         /* ISO 10303-11:A.1.1.081 */
| < QUERY: "query" >                 /* ISO 10303-11:A.1.1.082 */
| < REAL: "real" >                   /* ISO 10303-11:A.1.1.083 */
| < REFERENCE: "reference" >         /* ISO 10303-11:A.1.1.084 */
| < REMOVE: "remove" >               /* ISO 10303-11:A.1.1.085 */
| < RENAMED: "renamed" > { if (Support.no_express_amendment) matchedToken.kind = SIMPLE_ID; }  /* ISO 10303-11:AMENDMENT */
| < REPEAT: "repeat" >               /* ISO 10303-11:A.1.1.086 */
| < RETURN: "return" >               /* ISO 10303-11:A.1.1.087 */
| < ROLESOF: "rolesof" >             /* ISO 10303-11:A.1.1.088 */
| < RULE: "rule" >                   /* ISO 10303-11:A.1.1.089 */
| < SCHEMA: "schema" >               /* ISO 10303-11:A.1.1.090 */
| < SCHEMA_MAP: "schema_map" >       /* ISO 10303-14:B.1.1.015 */
| < SCHEMA_VIEW: "schema_view" >     /* ISO 10303-14:B.1.1.016 */
// | < SCHEMA_MAP: "schema_map" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.015 */
// | < SCHEMA_VIEW: "schema_view" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.016 */
| < SELECT: "select" >               /* ISO 10303-11:A.1.1.091 */
| < SELF: "self" >                   /* ISO 10303-11:A.1.1.092 */
| < SET: "set" >                     /* ISO 10303-11:A.1.1.093 */
| < SIN: "sin" >                     /* ISO 10303-11:A.1.1.094 */
| < SIZEOF: "sizeof" >               /* ISO 10303-11:A.1.1.095 */
| < SOURCE: "source" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; }  /* ISO 10303-14:B.1.1.017 */
| < SUBTYPE_CONSTRAINT: "subtype_constraint" > { if (Support.no_express_amendment) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-11:AMENDMENT */
// | < SUBTYPE_CONSTRAINT: "subtype_constraint" >  { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-11:AMENDMENT */
| < KW_SKIP: "skip" >                /* ISO 10303-11:A.1.1.096 */
| < SQRT: "sqrt" >                   /* ISO 10303-11:A.1.1.097 */
| < STRING: "string" >               /* ISO 10303-11:A.1.1.098 */
| < SUBTYPE: "subtype" >             /* ISO 10303-11:A.1.1.099 */
| < SUPERTYPE: "supertype" >         /* ISO 10303-11:A.1.1.100 */
| < TAN: "tan" >                     /* ISO 10303-11:A.1.1.101 */
| < TARGET: "target" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; }  /* ISO 10303-14:B.1.1.018 */
| < THEN: "then" >                   /* ISO 10303-11:A.1.1.102 */
| < TO: "to" >                       /* ISO 10303-11:A.1.1.103 */
| < TOTAL_OVER: "total_over" > { if (Support.no_express_amendment) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-11:AMENDMENT */
| < TRUE: "true" >                   /* ISO 10303-11:A.1.1.104 */
| < TYPE: "type" >                   /* ISO 10303-11:A.1.1.105 */
| < TYPEOF: "typeof" >               /* ISO 10303-11:A.1.1.106 */
| < UNIQUE: "unique" >               /* ISO 10303-11:A.1.1.107 */
| < UNKNOWN: "unknown" >             /* ISO 10303-11:A.1.1.108 */
| < UNTIL: "until" >                 /* ISO 10303-11:A.1.1.109 */
| < USE: "use" >                     /* ISO 10303-11:A.1.1.110 */
| < USEDIN: "usedin" >               /* ISO 10303-11:A.1.1.111 */
| < VALUE: "value" >                 /* ISO 10303-11:A.1.1.112 */
| < VALUE_IN: "value_in" >           /* ISO 10303-11:A.1.1.113 */
| < VALUE_UNIQUE: "value_unique" >   /* ISO 10303-11:A.1.1.114 */
| < VAR: "var" >                     /* ISO 10303-11:A.1.1.115 */
| < VIEW: "view" > { if (!Support.express_x) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-14:B.1.1.019 */
| < WITH: "with" > { if (Support.no_express_amendment) matchedToken.kind = SIMPLE_ID; } /* ISO 10303-11:AMENDMENT */
| < WHERE: "where" >                 /* ISO 10303-11:A.1.1.116 */
| < WHILE: "while" >                 /* ISO 10303-11:A.1.1.117 */
| < XOR: "xor" >                     /* ISO 10303-11:A.1.1.118 */
// | < HARD_SEPARATOR: "\0" >                     /* ISO 10303-11:A.1.1.118 */
}

TOKEN : /* ISO 10303-11:A.1.3 Lexical elements */
{	
< BINARY_LITERAL : "%" (<BIT>)+ >                                                      /* ISO 10303-11:A.1.3.136 */
| < ENCODED_STRING_LITERAL : "\"" (<ENCODED_CHARACTER>)+ "\"" >                          /* ISO 10303-11:A.1.3.137 */
| < INTEGER_LITERAL : <DIGITS> >                                                         /* ISO 10303-11:A.1.3.138 */
| < REAL_LITERAL : <DIGITS> "." (<DIGITS>)? (["e", "E"] (<SIGN>)? <DIGITS>)? >           /* ISO 10303-11:A.1.3.139 */
| < SIMPLE_ID: <LETTER> (<LETTER> | <DIGIT> | "_" | "$")* >                                    /* ISO 10303-11:A.1.3.140 */
| < SIMPLE_STRING_LITERAL : "\'" (("\'" "\'") | <NOT_QUOTE> | " " )* "\'">      /*  also \o ISO 10303-11:A.1.3.141 */                                              /* ISO 10303-11:A.1.3.141 */
}


TOKEN : /* ISO 10303-11:A.1.2 Character classes */
{
	< BIT : "0" | "1" >                                                                      /* ISO 10303-11:A.1.2.119 */
| < DIGIT : ["0" - "9"] >                                                                  /* ISO 10303-11:A.1.2.120 */
| < DIGITS : (<DIGIT>)+ >                                                                  /* ISO 10303-11:A.1.2.121 */
| < ENCODED_CHARACTER : <OCTET> <OCTET> <OCTET> <OCTET> >                                  /* ISO 10303-11:A.1.2.122 */
| < HEX_DIGIT : <DIGIT> | ["a" - "f", "A" - "F"] >                                         /* ISO 10303-11:A.1.2.123 */
| < LETTER : ["a" - "z", "A" - "Z"] >                                                      /* ISO 10303-11:A.1.2.124 */
// | < LPAREN_NOT_STAR : "(" <NOT_STAR> >                                                  /* ISO 10303-11:A.1.2.125 */
// | < NOT_LPAREN_STAR : <NOT_PAREN_STAR> | ")" >                                          /* ISO 10303-11:A.1.2.126 */
// | < NOT_PAREN_STAR : <LETTER> | <DIGIT> <NOT_PAREN_STAR_SPECIAL> >                      /* ISO 10303-11:A.1.2.127 */
| < NOT_PAREN_STAR_QUOTE_SPECIAL : "!" | "\"" | "#" | "$"  | "%" | "&" | "+" | "," |
																	 "-" | "."  | "/" | ":"  | ";" | "<" | "=" | ">" |
																	"?"  | "@"  | "[" | "\\" | "]" | "^" | "_" | "`" |
																	"{"  | "|"  | "}" | "~"                            >     /* ISO 10303-11:A.1.2.128 */
// | < NOTPAREN_STAR_SPECIAL : <NOT_PAREN_STAR_QUOTE_SPECIAL> | "\'" >                    /* ISO 10303-11:A.1.2.129 */
| < NOT_QUOTE : <NOT_PAREN_STAR_QUOTE_SPECIAL> | <LETTER> | <DIGIT> | "(" | ")" | "*" >    /* ISO 10303-11:A.1.2.130 */
// | < NOT_RPAREN : <NOT_PAREN_STAR> | "*" | "(" >                                         /* ISO 10303-11:A.1.2.131 */
// | < NOT_STAR : <NOT_PAREN_STAR> | "(" | ")" >                                           /* ISO 10303-11:A.1.2.132 */
| < OCTET : <HEX_DIGIT> <HEX_DIGIT> >                                                      /* ISO 10303-11:A.1.2.133 */
// | < SPECIAL : <NOT_PAREN_STAR_QUOTE_SPECIAL> | "(" | ")" | "*" | "\'" >                 /* ISO 10303-11:A.1.2.134 */
// | < STAR_NOT_RPAREN : "*" <NOT_RPAREN> >                                                /* ISO 10303-11:A.1.2.135 */
| < SIGN : "+" | "-" >                            /* moved here from A.2 - grammar rules -    ISO 10303-11:A.2.286   */
}



TOKEN :
{
	< GARBAGE: ~[] >
}


/**************************************************************************************************************************
 *                                    ISO 10303-11:A.1.5 Interpreted identifiers                                          *
 **************************************************************************************************************************/

/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.145 ------------*/

jsdai.SExtended_dictionary_schema.EAttribute AttributeRef(jsdai.SExtended_dictionary_schema.EEntity_definition ed, jsdai.SExtended_dictionary_schema.EEntity_definition ed2, int attr_type, Object reference)  throws jsdai.lang.SdaiException:
{
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	String attribute_name;
	Token attribute_token;
	String attr_key = null;
	Object temp_object = null;
	ECtRenamed renamed = null;
}
{
{
	printDebug("In AttributeRef, starting, ed: " + ed + ", ed2: " + ed2 + ", attr. type: " + attr_type + ", reference: " + reference + ", pass: " + parser_pass);
}
	attribute_token = AttributeId()
	{
		if (flag_oc) {
			attribute_name = attribute_token.image;
		} else {
			attribute_name = attribute_token.image.toLowerCase();
		}

		if (ed != null) {
			temp_object = ed.getTemp();
			if (temp_object != null) {
				if (temp_object instanceof ECtRenamed) {
					renamed = (ECtRenamed)temp_object;
					if (renamed.isActive()) {
						renamed.addOld(ed2, attribute_name);
						ed.setTemp(renamed);
					}
				}
			}
		}

//System.out.println("In AttributeRef, starting, ed: " + ed + ", ed2: " + ed2 + ", attr. type: " + attr_type + ", reference: " + reference + ", pass: " + parser_pass);
//System.out.println("attribute name: " + attribute_name);
		global_attribute_name = attribute_name;
		global_entity1 = ed;
		global_entity2 = ed2;
		global_reference = reference;
		printDebug("In AttributeRef, attribute name: " + attribute_name);

		if (parser_pass == 10) {
			// creation of redeclared attributes moved back to pass 1, special tricks to resolve them later
		} else
		if (parser_pass == 2) {
		} else
//		if (parser_pass == 3) { // previously - pass 1
		if (parser_pass == 1) { // previously - pass 1
			
			// do we need here a check, and perhaps in AttributeDecl, or do we get only redeclared here
			// attr = findAttribute(attribute_name, ed2, attr_type, ed);
      // if (attr != null) {
      	// return attr;
      // }
			
			if (attr_type == 0) { // explicit
				if (flag_in_redeclaring) {
				 	hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + attribute_name.toLowerCase();
					if (hm_attributes.containsKey(hm_attribute_key)) {
						// error - multiple redeclaration of the same attribute in the same entity
						printErrorMsg("" + attribute_name + " - the same attribute from the same supertype entity " + global_entity_ref + " is redeclared in entity " + global_entity_name + " more than once", null, true);
						error_count++;
					}
				} else {
				 	hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
				}
// System.out.println("CREATING EXPLICIT ATTRIBUTE <=EA-1 AttributeRef => key: " + hm_attribute_key + ", ed: " + ed + ", ed2: " + ed2 + ", reference: " + reference);
				attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExplicit_attribute.class);
				attr.setName(null, attribute_name);
				attr.unsetOrder(null);
				// attr.setOrder(null, Integer.MIN_VALUE);
				attr.setParent(null, ed);
				// currently, ed is declared as entity_definition, but who knows what will happen in the future
				// parent_entity is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// attr.setParent_entity(null, ed);
				// }
				hm_attributes.put(hm_attribute_key, attr);
				
			} else
			if (attr_type == 1) { // derived
// System.out.println("<=DA-1=>");
				if (flag_in_redeclaring) {
				 	hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + attribute_name.toLowerCase();
					if (hm_attributes.containsKey(hm_attribute_key)) {
						// error - multiple redeclaration of the same attribute in the same entity
						printErrorMsg("" + attribute_name + " - the same attribute from the same supertype entity " + global_entity_ref + " is redeclared in entity " + global_entity_name + " more than once", null, true);
						error_count++;
					}
				} else {
				 	hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
				}
				attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDerived_attribute.class);
				attr.setName(null, attribute_name);
				attr.unsetOrder(null);
				// attr.setOrder(null, Integer.MIN_VALUE);
				attr.setParent(null, ed);
				// parent_entity is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// attr.setParent_entity(null, ed);
				// }
				hm_attributes.put(hm_attribute_key, attr);
			} else
			if (attr_type == 2) { // inverse
// System.out.println("<=IA-1=>");
				if (flag_in_redeclaring) {
				 	hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + attribute_name.toLowerCase();
					if (hm_attributes.containsKey(hm_attribute_key)) {
						// error - multiple redeclaration of the same attribute in the same entity
						printErrorMsg("" + attribute_name + " - the same attribute from the same supertype entity " + global_entity_ref + " is redeclared in entity " + global_entity_name + " more than once", null, true);
						error_count++;
					}
				} else {
				 	hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
				}
				attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInverse_attribute.class);
				attr.setName(null, attribute_name);
				attr.unsetOrder(null);
				// attr.setOrder(null, Integer.MIN_VALUE);
				attr.setParent(null, ed);
				// parent_entity is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// attr.setParent_entity(null, ed);
				// }
				hm_attributes.put(hm_attribute_key, attr);
			}
		} else
		if (parser_pass == 20) { // removing pass 2 handling
				if (flag_in_redeclaring) {
//				 	attr_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + attribute_name.toLowerCase();
				 	attr_key = "#" + global_schema_name + "_#" + global_entity_ref + "_#_#" + attribute_name.toLowerCase();
				} else {
//				 	hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
					attr_key = null;
				}
				
		if (hm_attributes != null) {
			if (attr_key != null) {
				Object attr_from_hm_object = hm_attributes.get(attr_key);			
				if (attr_from_hm_object != null) {
					if (attr_from_hm_object instanceof jsdai.SExtended_dictionary_schema.EAttribute) {
// System.out.println("<= hm_attribute @ work, key: " + attr_key + ", attribute: " + attr_from_hm_object);
						attr = (jsdai.SExtended_dictionary_schema.EAttribute)attr_from_hm_object;
					}
				}
			}
		}
				
				
		} else
//		if (parser_pass == 30) { // removing pass 3 handling
		if (parser_pass == 3) { // removing pass 3 handling
				if (flag_in_redeclaring) {
//				 	attr_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + attribute_name.toLowerCase();
				 	attr_key = "#" + global_schema_name + "_#" + global_entity_ref + "_#_#" + attribute_name.toLowerCase();
				} else {
//				 	hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
					attr_key = null;
				}
			if (attr_type == 0) {
				attr = findAttribute(attribute_name, ed2, attr_type, ed, attr_key);
			} else {

		if (hm_attributes != null) {
			if (attr_key != null) {
				Object attr_from_hm_object = hm_attributes.get(attr_key);			
				if (attr_from_hm_object != null) {
					if (attr_from_hm_object instanceof jsdai.SExtended_dictionary_schema.EAttribute) {
// System.out.println("<= hm_attribute @ work, key: " + attr_key + ", attribute: " + attr_from_hm_object);
						attr = (jsdai.SExtended_dictionary_schema.EAttribute)attr_from_hm_object;
					}
				}
			}
		}

			}
		} else
		if (parser_pass == 4) {
//if (attribute_name.equalsIgnoreCase("associated_definition")) {
//System.out.println("DBG-AttributeRef-01");
//}
				if (flag_in_redeclaring) {
//				 	attr_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + attribute_name.toLowerCase();
				 	attr_key = "#" + global_schema_name + "_#" + global_entity_ref + "_#_#" + attribute_name.toLowerCase();
				} else {
//				 	hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
					attr_key = null;
				}
			if (attr_type >= 0) {
				if (attr_type == 3) {
// System.out.println("<D2008> BEFORE @X 1 (attr type = 3) name: " + attribute_name + ", ed: " + ed2 + ", attr_key: " + attr_key);
					attr = findAttribute(attribute_name, ed2, 0, ed, attr_key);
// System.out.println("<D2008> AFTER @X 1 (attr type = 3) attribute: " + attr);
				}
				else {
// System.out.println("@X 2 name: " + attribute_name + ", ed: " + ed + ", key: " + attr_key);

//					attr = findAttribute(attribute_name, ed, attr_type);
					// why it was changed to ed??? with ed, redeclared attributes are redeclaring themselves.
//if (attribute_name.equalsIgnoreCase("associated_definition")) {
//System.out.println("<D2008> DBG-AttributeRef-02, attribute_name: " + attribute_name + ", ed2: " + ed2 + ", ed: " + ed + ", key: " + attr_key);
//}
					attr = findAttribute(attribute_name, ed2, attr_type, ed, attr_key);
//System.out.println("<D2008> @X2 attribute: " + attr);
//if (attribute_name.equalsIgnoreCase("associated_definition")) {
//System.out.println("DBG-AttributeRef-03, attr: " + attr);
//}
				}
			  if (attr == null) {
			  	if (flag_in_redeclaring) {
//			 			error_count++;
//						printErrorMsg("" + attribute_name +  " - attribute not found in entity " + ed2.getName(null) + " while attempting to redeclare it", null, true);
					} else {
//			 			error_count++;
//						printErrorMsg("" + attribute_name +  " - attribute not found in entity " + ed2.getName(null), null, true);
//						printErrorMsg("" + attribute_name +  " - attribute not found in entity ed2: " + ed2 + ", ed: " + ed, null, true);
					}
				}
			} else {
			
		if (hm_attributes != null) {
// System.out.println("@X33");
			if (attr_key != null) {
// System.out.println("@X34");
				Object attr_from_hm_object = hm_attributes.get(attr_key);			
				if (attr_from_hm_object != null) {
// System.out.println("@X35");
					if (attr_from_hm_object instanceof jsdai.SExtended_dictionary_schema.EAttribute) {
// System.out.println("<= hm_attribute @ work, key: " + attr_key + ", attribute: " + attr_from_hm_object);
						attr = (jsdai.SExtended_dictionary_schema.EAttribute)attr_from_hm_object;
					}
				}
			}
		}
			
			}
		} else
		if (parser_pass == 5) {
		}
//              if (attr == null) {
//              printDDebug("##_________## Inside Attribute Ref = NULL");
//              } else {
//                      printDDebug("##_________## Inside Attribute Ref: " + attr.getName(null));
//              }
//System.out.println("<D2008> AttrRef returning: " + attr);		
		return attr;
	}
}
/* ------------------------------------------------------------------------------ ISO 10303-11:A.1.5-interpreted identifiers----------- */

/*
	 This is all my idea - the InterpretedId() is outside the part 11 grammar.

	 the following identifier can not be distinguished by the parser, but could be distinguished by the 1st pass information:

	 attribute_ref
	 constant_ref
	 entity_ref
	 enumeration_ref
	 function_ref
	 parameter_ref
	 procedure_ref
	 schema_ref
	 type_label_ref
	 type_ref
	 variable_ref

	 So it is better to use them only where they are used alone, and InterpretedId() non-terminal symbol to use when there is
	 a choice between them. That would allow to make them more specialized.

*/

/*
void InterpretedId() :
{}
{
	ConstantId()
}
*/
String InterpretedId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			global_name = t.image;
			return (t.image);
		} else {
			global_name = t.image.toLowerCase();
			return (t.image.toLowerCase());
		}
	}
}

Object InterpretedRef(int possible_interpretations) throws jsdai.lang.SdaiException :
{
	String name = null;
	Object result = null;
}
{
	name = InterpretedId()
	{
		printDDebug("InterpretedRef - name: " + name + ", possible: " + possible_interpretations + ", pass: " + parser_pass);
		result = findInterpretedId2(name, possible_interpretations);
// System.out.println("interpreted ref, name: " + name + ", result: " + result);
		if (result == null) {
			if ((possible_interpretations == PI_SOURCE_SCHEMA) || (possible_interpretations == PI_SCHEMA_OR_SCHEMA_MAP_OR_SCHEMA_VIEW)) {
				if (parser_pass == 2) {
//					printError("(interfaced) schema not found: " + name);
					printErrorMsg("" + name + " - (interfaced) schema not found", null, true);
				}
			}
		}

// System.out.println("returning from InterpretedRef: " + result);

		return result;
	}
}

// temporory Express X interpreted identifiers

jsdai.SExtended_dictionary_schema.ESchema_definition SourceSchemaRef() throws jsdai.lang.SdaiException :
{
	Object result = null;
}
{
	// SchemaId()
	result = InterpretedRef(PI_SOURCE_SCHEMA)
	{
		return (jsdai.SExtended_dictionary_schema.ESchema_definition)result;
	}
}

Object TargetSchemaRef() throws jsdai.lang.SdaiException :
{}
{
	SchemaId()
	{
		return null;
	}
}

Object DummyQualifiableFactor() throws jsdai.lang.SdaiException :
{	}
{
	{
		return null;
	}
}

jsdai.SExtended_dictionary_schema.EView_attribute ViewAttributeRef() throws jsdai.lang.SdaiException :
{
	String name;
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
}
{
	name = ViewAttributeId()
	{
		if (active_scope instanceof jsdai.SExtended_dictionary_schema.EView_definition) {
			vd = (jsdai.SExtended_dictionary_schema.EView_definition)active_scope;
		}
		return findView_attribute(name, vd);
	}
}

Object SchemaMapRef() throws jsdai.lang.SdaiException :
{}
{
	SchemaMapId()
	{
		return null;
	}
}
Object SchemaViewRef() throws jsdai.lang.SdaiException :
{}
{
	SchemaViewId()
	{
		return null;
	}
}
jsdai.SExtended_dictionary_schema.EMap_or_view_partition PartitionRef(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	String name;
	jsdai.SExtended_dictionary_schema.EMap_or_view_partition result = null; 
}
{
	name = PartitionId()
	{
		result = findMap_or_view_partition(name, parent);
		return result;
	}
}

// Removed in DIS
/*
Object InstanceRef() throws jsdai.lang.SdaiException :
{}
{
	InstanceId()
	{
		return null;
	}
}
*/

Object ViewRef() throws jsdai.lang.SdaiException :
{}
{
	ViewId()
	{
		return null;
	}
}


/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.146 ------------ */
Object ConstantRef() throws jsdai.lang.SdaiException :
{
  Object result = null;
  jsdai.SExtended_dictionary_schema.EConstant_definition cd = null;	
  String name;


}
{
	name = ConstantId()
	{ 
//		cd = findConstant_definition(name);
		cd = findConstant_definitionX(name);
		result = cd;
		if (cd == null) {
			if (parser_pass == 3) {
 				Token t = getToken(0);
//				printError("referenced (line " + t.beginLine + ", column " + t.beginColumn + ") constant not found: " + name);
				printErrorMsg("" + name + " - referenced constant not found", null, true);
			}
			printDebug("constant not found: " + name + " in pass: " + parser_pass);
		}
		return result;
	} 
}

/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.147 ------------ */
jsdai.SExtended_dictionary_schema.EEntity_definition EntityRef(jsdai.SExtended_dictionary_schema.ESchema_definition optional_schema) throws jsdai.lang.SdaiException :
{
	String entity_name = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
//      jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration eld;
}
{
	{
		printDebug("In EntityRef, starting");
	}
	entity_name = EntityId()
	{
		global_entity_ref = entity_name.toLowerCase();
		printDebug("In EntityRef, entity: " + entity_name);
		// if parser pass = 2;
		if (parser_pass == 1) {
		} else
		if (parser_pass == 2) {
		} else
		if (parser_pass > 2) {
			// check if an entity with this name exists in the extent.
			ed = findEntity_definition(entity_name, optional_schema);
			if (ed == null) {
				error_count++;
				if (parser_pass == 3) {
					Token t = getToken(0);
//					System.out.println("token: " + t.image + ", line: " + t.beginLine + ", column: " + t.beginColumn);
//					printError("referenced (line " + t.beginLine + ", column " + t.beginColumn + ") entity \"" + entity_name + "\" not found");                 
					printErrorMsg("" + entity_name + " - referenced entity not found", null, true);                 
				}
				printDebug("entity \"" + entity_name + "\" not found in pass " + parser_pass);                 
// printDDebug("##1 current schema: " + sd.getName(null) + ", pass: " + parser_pass);
				_data_type_name = "_ENTITY_NOT_FOUND_" + entity_name;
			} else {
				_data_type_name = ed.getName(null);
			}
		}
		if (ed == null) {
			printDebug("In EntityRef, ending with null, pass: " + parser_pass);
		} else {
			printDebug("In EntityRef, ending with non-null, pass: " + parser_pass);
		}
		return ed;
	}
}

/*----------------------------------------------------------------------------------- introduced by eRRe ----------------*/
jsdai.SExtended_dictionary_schema.ENamed_type NamedTypeRef() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ENamed_type nt = null;
	String named_type_name;
}
{
	named_type_name = NamedTypeId()
	{
		named_type_name = named_type_name.replace('$', '+');
		if (parser_pass == 1) {
		} else
		if (parser_pass == 2) {
		} else
		if (parser_pass > 2) {
			nt = findNamed_type(named_type_name);
			if (nt == null) {
				error_count++;
				if (parser_pass == 3) {
					Token t = getToken(0);
//					printError("referenced (line " + t.beginLine + ", column " + t.beginColumn + ") named type \"" + named_type_name + "\" not found");
					printErrorMsg("" + named_type_name + " - referenced named type not found", null, true);
				}
				printDebug("named type \"" + named_type_name + "\" not found in pass " + parser_pass);
			}
		}
		return nt;
	}
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.148 ------------ */
void EnumerationRef(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException :
{
	String name = null;
	Integer enumeration_value_object = null;
	int enumeration_value = 0;
}
{
	{
		printDebug("In EnumerationRef, starting in pass " + parser_pass);
	}
	name = EnumerationId()
	{

		if (parser_pass == 5) {
		}
		printDebug("In EnumerationRef: " + name + ", ending in pass " + parser_pass);
	}
}

/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.149 ------------ */
jsdai.SExtended_dictionary_schema.EFunction_definition FunctionRef() throws jsdai.lang.SdaiException :
{
	String function_id = null;
	jsdai.SExtended_dictionary_schema.EFunction_definition fd = null;
}
{
	function_id = FunctionId()
	{
		if (parser_pass == 5) {
//			fd = findFunction_definition(function_id);	
			fd = findFunction_definitionX(function_id);	
		}
		return fd;
	}
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.150 ------------ */
jsdai.SExtended_dictionary_schema.EParameter ParameterRef() throws jsdai.lang.SdaiException  :
{
	String name;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
}
{
	name = ParameterId()
	{
		if(parser_pass == 5) {
		}
		return par;
	}
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.151 ------------ */
jsdai.SExtended_dictionary_schema.EProcedure_definition ProcedureRef() throws jsdai.lang.SdaiException :
{
	String procedure_id = null;
	jsdai.SExtended_dictionary_schema.EProcedure_definition pd = null;
}
{
	procedure_id = ProcedureId()
	{
		if (parser_pass == 5) {
//			pd = findProcedure_definition(procedure_id);
			pd = findProcedure_definitionX(procedure_id);
//			pd = findProcedure(procedure_id);
//			if (pd == null) {
//				printError("Procedure not found: " + procedure_id);
//			}
		}
		return pd;
	}
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.152 ------------ */
String SchemaRef() throws jsdai.lang.SdaiException :
{
  String schema_name;
}
{
  schema_name = SchemaId()
  {
		if (flag_oc) {
	    return schema_name;
		} else {
	    return schema_name.toLowerCase();
		}
  }
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.153 ------------ */
void TypeLabelRef() throws jsdai.lang.SdaiException :
{}
{
	TypeLabelId()
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.154 ------------ */
jsdai.SExtended_dictionary_schema.EDefined_type TypeRef(int scope) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
	String type_name;
}
{
	type_name = TypeId()
	{
		printDebug("In TypeRef starting in pass: " + parser_pass + ": " + type_name);
		if (parser_pass != 1) { // it is  a risky implementation leftover from 2 pass compiler. OK, if TypeRef(0) is invoked from pass 4.
			if (scope == 0) {
				dt = findDefined_type(type_name);
				if (dt == null) {
					if (parser_pass > 2) {
						error_count++;
						if (parser_pass == 3) {
							Token t = getToken(0);
//							printError("referenced (line " + t.beginLine + ", column " + t.beginColumn + ") defined type \"" + type_name + "\" not found");
							printErrorMsg("" + type_name + " - referenced defined type not found", null, true);
						}
						printDebug("Type reference - defined type \"" + type_name + "\" not found in pass " + parser_pass);
					} else {
						// error_count++;
						// may not be an error - chained USE FROMs are processed between passes 2 and 3.
						// printWarning("Type reference - defined type \"" + type_name + "\" not found in pass " + parser_pass);
					}
				}
			}
			else if (scope == 1) {
//        printDDebug("Enumeration scope: " + type_name);
			}
			else {
//        printDDebug("Unknown scope: " + type_name);
			}
		}
		printDebug("In TypeRef ending in pass: " + parser_pass);
		return dt;
	}
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.155 ------------ */
ECtVariable VariableRef() throws jsdai.lang.SdaiException :
{
	String name;
	ECtVariable var = null;
}
{
	name = VariableId()
	{
		if (parser_pass > 1) {
//System.out.println("<about to find var, 01, name: " + name); 
			var = findVariableX(name);
		}
		return var;
	}
}


/**************************************************************************************************************************
 *                                         ISO 10303-11:A.2 Grammar rules                                                 *
 **************************************************************************************************************************/

/* -----------------------------------------------------------------Amendment---------- ISO 10303-11:A.2.156 ------------ */
void AbstractSupertypeDeclaration(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{
	boolean has_supertype = false;
}
{
	<ABSTRACT> [ <SUPERTYPE> { has_supertype = true; } [SubtypeConstraint(ed)]]
	{
		if (parser_pass == 5) {
			if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
				((jsdai.SExtended_dictionary_schema.EEntity_definition)ed).setInstantiable(null, false);
//                     		ed.setInstantiable(null, 0);
				if (!has_supertype) {
					((jsdai.SExtended_dictionary_schema.EEntity_definition)ed).setAbstract_entity(null, true);
				}
			}
		}
	}
}

/* -------------------------------------------------------------------Amendment-------- ISO 10303-11:A.2.401 ------------ */
jsdai.lang.EEntity ConcreteTypes(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.lang.EEntity ae = null;
}
{
	{
		printDebug("Starting ConcreteTypes in pass: " + parser_pass);
	}
	(ae = AggregationTypes(whose) | ae = SimpleTypes(whose) | ae = NamedTypes(whose))
	{
		printDebug("Ending ConcreteTypes: " + ae + " in pass: " + parser_pass);
		return ae;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.157 ------------ */
int ActualParameterList(Vector arguments, Vector expressions) throws jsdai.lang.SdaiException :
{
	int argument_count = 0;
	Object argument [] = null;
}
{
	{
		printDebug("Starting ActualParameterList");
	}
	("(" [argument = Parameter() {argument_count++; arguments.addElement(argument[0]); expressions.addElement(argument[1]);}("," argument = Parameter(){argument_count++; arguments.addElement(argument[0]);expressions.addElement(argument[1]);})*] ")")
	{
		printDebug("Ending ActualParameterList, nr of arguments: " + argument_count);
		return argument_count;
	}
// I have added the [] to allow empty list like function()
// It is especially needed for entity constructors as I removed the separate entity constructor in favor of function call.

//  "(" Parameter() ("," Parameter())* ")"
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.158 ------------ */
int AddLikeOp() throws jsdai.lang.SdaiException :
{
	int value = 0;
}
{
	( "+" {value = 1;}
				| "-" {value = 2;}
				| <OR> {value = 3;}
				| <XOR> {value = 4;}
	)
	{
		return value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.159 ------------ */
void AggregateInitializer() throws jsdai.lang.SdaiException :
{
	Vector members = new Vector();
	Object member = null;
	Object pop_inst = null;
}
{
	{
		printDebug("In AggregateInitializer, starting");
	}
	"[" [Element()
	{
		if (parser_pass == 5) {
		}
	}
	("," Element()
	{
		if (parser_pass == 5) {
		}
	}
	)*
	 ] "]"
	{
		if (parser_pass == 5) {
		}
		printDebug("In AggregateInitializer, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.160 ------------ */
void AggregateSource() throws jsdai.lang.SdaiException  :
{}
{
	{
		printDebug("In AggregateSource, starting");
	}

 SimpleExpression()
	{
		printDebug("In AggregateSource, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.161 ------------ */
jsdai.SExtended_dictionary_schema.EParameter AggregateType() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter result = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	String label = "";
	jsdai.SExtended_dictionary_schema.EAggregation_type at = null;
	jsdai.lang.A_string labels = null;
	String bound_name;
	boolean optional = false;
	boolean unique = false;
}
{
	{
		printDebug("In AggregateType, starting");
	}
	<AGGREGATE> [":" label = TypeLabel()] <OF> par = ParameterType()
	{
		if (parser_pass == 5) {

			boolean must_create = false;

			if (par != null) {
				if (par.testParameter_type(null)) {			
					if (par.getParameter_type(null) != _st_generic) {
						must_create = true;
					}
		  	} else {
		  		// why unset?
		  		must_create = true;
		  	}
		  } else {
		    // not standart type, but, on the other hand, something wrong here
		  	must_create = true;
		  }
			
			if (must_create) {
		
		
			at = (jsdai.SExtended_dictionary_schema.EAggregation_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAggregation_type.class);
//		  at.setName(null, "_AGGREGATE");
//		  _data_type_name = "_AGGREGATE";
			at.setName(null, "_AGGREGATE" + _data_type_name);
			_data_type_name = "_AGGREGATE"  + _data_type_name;

		  if (par != null) {

		  	if (par.testParameter_type(null)) {
					at.setElement_type(null, par.getParameter_type(null));
		  	} else {
		  		printDDebug("Oo> parameter_type unset in aggregate_type: AGGREGATE OF " + par);
		  	}
		  	if (par.testType_labels(null)) {
					labels = par.getType_labels(null);
				}
		  	if (label.length() > 0) {
					if (labels == null) {
						labels = par.createType_labels(null);
					}
					labels.addByIndex(1, label);
		 		} else {
					if (labels != null) {
						labels.addByIndex(1, label);
					}
		  	}
			} // par not 0
			// for some reason I replaced the parameter type, probably a bug, if not, don't remember why.
			// par.setParameter_type(null, at);

		  } else {
		  	at = _st_aggregate_generic;
				_data_type_name = "_AGGREGATE_GENERIC";
		  }
	
			result = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			result.setParameter_type(null, at);
			result.setName(null, "_PARAMETER_AGGREGATE");
			_data_type_name = "_PARAMETER_AGGREGATE";

		}
		printDebug("In AggregateType, ending");
		return result;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.162 ------------ */
jsdai.SExtended_dictionary_schema.EAggregation_type AggregationTypes(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAggregation_type at;
}
{
	{
		printDebug("In AggregationTypes, starting in pass " + parser_pass);
	}
	(at = ArrayType(whose) | at = BagType(whose) | at = ListType(whose) | at = SetType(whose))
	{
		printDebug("In AggregationTypes, ending: " + at + " in pass " + parser_pass);
		return at;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.163 ------------ */
void AlgorithmHead() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In AlgorithmHead, starting");
	}
	(Declaration())* [ConstantDecl()] [LocalDecl()]
	{
		printDebug("In AlgorithHead, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.164 ------------ */
void AliasStmt() throws jsdai.lang.SdaiException  :
{
	Object operand = null;
	ECtVariable var = null;
	String variable_id = null;
	jsdai.lang.EEntity variable_parameter_type = null;
	jsdai.SExtended_dictionary_schema.EParameter variable_type = null;
}
{
	{
		printDebug("In AliasStmt, starting");
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	<ALIAS> variable_id = VariableId() <FOR> GeneralRef() (Qualifier(null))* ";" (Stmt())+ <END_ALIAS> ";"
	{
		if (parser_pass == 5) {

			variable_type = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			// variable_type.setName(null, "_query_variable_");
			variable_type.setName(null, "_PARAMETER");
			_data_type_name = "_PARAMETER";

			// variable_type.setParameter_type(null, variable_parameter_type);
			var = new ECtVariable(variable_id, variable_type);
			current_scope.addElement(var);


//                      operand = argument_stack.pop();
//                      printStack("POP: AliasStmt, return value: " + operand);

		} else { // other passes - added to handle interpreted IDs
			var = new ECtVariable(variable_id, variable_type);
			current_scope.addElement(var);
		}
		current_scope = (Vector)scope_stack.pop();
		printDebug("In AliasStmt, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.165 ------------ */
jsdai.SExtended_dictionary_schema.EArray_type ArrayType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EArray_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = null;
	jsdai.SExtended_dictionary_schema.EBound bounds [] = null;
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	String bound_name;
	// int optional = 0;
	// int unique = 0;
	boolean optional = false;
	boolean unique = false;

	jsdai.lang.EEntity bt;
}
{

	<ARRAY> bounds = BoundSpec() <OF> [<OPTIONAL>{optional = true;}] [<UNIQUE>{unique = true;}]
	{
		if (parser_pass == 3) {
			if (whose != null) {
			  if (!(whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute)) {
//					at = (jsdai.SExtended_dictionary_schema.EArray_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CArray_type.class);
//					at.setUnique_flag(null, unique); 
//					at.setOptional_flag(null, optional); 
				}
//				bound_name = getBoundString(1, bounds, optional, unique);
//				at.setName(null, "_ARRAY" + bound_name + _data_type_name);
//				_data_type_name = "_ARRAY"  + bound_name + _data_type_name;
			}
		} else 
		if (parser_pass == 4) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EArray_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CArray_type.class);
//				bound_name = getBoundString(1, bounds, optional, unique);
//				at.setName(null, "_ARRAY" + bound_name + _data_type_name);
//				_data_type_name = "_ARRAY"  + bound_name + _data_type_name;
				at.setUnique_flag(null, unique); 
				at.setOptional_flag(null, optional); 
//System.out.println("SET OPTIONAL 01, attribute: " + at);
			}
		} else	
		if (parser_pass == 5) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EArray_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CArray_type.class);
//				bound_name = getBoundString(1, bounds, optional, unique);
//				at.setName(null, "_ARRAY" + bound_name + _data_type_name);
//				_data_type_name = "_ARRAY"  + bound_name + _data_type_name;
				at.setUnique_flag(null, unique); 
				at.setOptional_flag(null, optional); 
// System.out.println("SET OPTIONAL 02, attribute: " + at);
			}
			at.setLower_index(null, bounds[0]); 

			if (bounds[1] != null) {
				at.setUpper_index(null, bounds[1]); 
			}
			else { // should never happen for an array.
//				printWarning("Undefined upper index of an array");                 
				printWarningMsg("" + "" + " - undefined upper index of an array", null, true);                 
				printDebug("Undefined upper index of an array");                 
			}
			// set element_type
		}
	}  
	bt = BaseType(at)
	{
		if (parser_pass > 3) {
//			if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			if (!(at.testElement_type(null))) {
				if(bt instanceof jsdai.SExtended_dictionary_schema.EData_type) {
					at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EData_type)bt);
				} else {
					// possible express amendment issue
				}
			}
		}
		bound_name = getBoundString(1, bounds, optional, unique);
		_data_type_name = "_ARRAY"  + bound_name + _data_type_name;
		if (at != null) {
			at.setName(null, _data_type_name);
		}
		return at;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.166 ------------ */
void AssignmentStmt() throws jsdai.lang.SdaiException  :
{
	Object operand = null;
	Object pop_inst = null;
	Object general_reference = null;
	Object qualified_reference = null;
}
{
	{
		printDebug("In AssignmentStmt, starting");
	}
	general_reference = GeneralRef()
	{
		if (parser_pass == 5) {
		}
	}
	(qualified_reference = Qualifier(general_reference)
	{
		general_reference = qualified_reference;
		if (parser_pass == 5) {
		}
	}

	)* ":=" Expression() ";"
	{
		if (parser_pass == 5) {
		}
		printDebug("In AssignmentStmt, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.167 ------------ */
jsdai.SExtended_dictionary_schema.EAttribute AttributeDecl(jsdai.SExtended_dictionary_schema.EEntity_definition ed, int attr_type) throws jsdai.lang.SdaiException :
{
	
	jsdai.SExtended_dictionary_schema.EEntity_definition already_ed = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	jsdai.SExtended_dictionary_schema.AExplicit_attribute aea;
	String attribute_name;
	Token attribute_token;
	String attr_key = null;
}
{
	(attribute_token = AttributeId()
	 {
			if (flag_oc) {
				attribute_name = attribute_token.image;
			} else {
				attribute_name = attribute_token.image.toLowerCase();
			}
		 already_ed = moreThanOneAttributeWithTheSameName(attribute_name, ed);
		 if (already_ed != null) {
		 		error_count++;
		 		if (already_ed == ed) {
					printErrorMsg("" + attribute_name +  " - more than one attribute with the same name in entity " + ed.getName(null), null, true);
		 		} else {
					printErrorMsg("" + attribute_name +  " - more than one attribute with the same name in entity " + ed.getName(null) + " and in its supertype " + already_ed.getName(null), null, true);
		 		}
		 }
		 if (parser_pass == 1) {
			 if (attr_type == 0) { // explicit
			 	 hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
//System.out.println("CREATING EXPLICIT ATTRIBUTE <=EA-2 AttributeDecl => key: " + hm_attribute_key + ", ed: " + ed);
				 attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExplicit_attribute.class);
//			   attr.setOrder(null, explicit_attribute_order_count++);
				 // aea = ed.getExplicit_attributes(null);
				 // aea.addByIndex(aea.getMemberCount() + 1, attr); // + 1 because it is a list?
					hm_attributes.put(hm_attribute_key, attr);
			 } else
			 if (attr_type == 1) { // derived
			 	 hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
//System.out.println("<=DA-2 AttributeDecl => key: " + hm_attribute_key + ", ed: " + ed);
				 attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDerived_attribute.class);
//				 attr.setOrder(null, derived_attribute_order_count++);
					hm_attributes.put(hm_attribute_key, attr);
			 } else
			 if (attr_type == 2) { // inverse
// System.out.println("<=IA-2=>");
			 	 hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
				 attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInverse_attribute.class);
//				 attr.setOrder(null, inverse_attribute_order_count++);
					hm_attributes.put(hm_attribute_key, attr);
			 }
			 attr.setName(null, attribute_name);
			 attr.setParent(null, ed);
			 // parent_entity is now derived instead of explicit 
			 // if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
			 	 // attr.setParent_entity(null, ed);
			 // }
			 createDocumentationEntity2(attr, attribute_token);
		 } else
		 if (parser_pass == 2) { // pass 2
			attr_key =  "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
			if (hm_attributes != null) {
					Object attr_from_hm_object = hm_attributes.get(attr_key);			
					if (attr_from_hm_object != null) {
						if (attr_from_hm_object instanceof jsdai.SExtended_dictionary_schema.EAttribute) {
// System.out.println("<= hm_attribute @ work, pass 2 - key: " + attr_key + ", attribute: " + attr_from_hm_object);
							attr =  (jsdai.SExtended_dictionary_schema.EAttribute)attr_from_hm_object;
						}
					}
			}

		 } else
		 if (parser_pass == 3) { // pass 2
			attr_key =  "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
			if (hm_attributes != null) {
					Object attr_from_hm_object = hm_attributes.get(attr_key);			
					if (attr_from_hm_object != null) {
						if (attr_from_hm_object instanceof jsdai.SExtended_dictionary_schema.EAttribute) {
 //System.out.println("<= hm_attribute @ work, pass 3 - key: " + attr_key + ", attribute: " + attr_from_hm_object);
							attr =  (jsdai.SExtended_dictionary_schema.EAttribute)attr_from_hm_object;
						}
					}
			}
		 } else
		 if (parser_pass == 4) { // pass 2
// System.out.println("@X 3 name: " + attribute_name + ", ed: " + ed);
			 attr_key =  "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
			 attr = findAttribute(attribute_name, ed, attr_type, null, attr_key); // also can check for duplicate attribute names.
 //System.out.println("<= hm_attribute @ work (or not), pass 4 - key: " + attr_key + ", attribute: " + attr);
			 if (attr != null) {
			 	 if (attr_type == 0) { // explicit
			  	  attr.setOrder(null, explicit_attribute_order_count++);
			 	 } else
			 	 if (attr_type == 1) { // derived
//System.out.println(">PARSER setting order - AttributeDecl - order: " + derived_attribute_order_count  + ", pass: " + parser_pass + ", attr: " + attr); 
				  	attr.setOrder(null, derived_attribute_order_count++);
			 	 } else
			 	 if (attr_type == 2) { // inverse
				  	attr.setOrder(null, inverse_attribute_order_count++);
			 	 }	
			 } else {
			 	printVerbose("possible error: attribute null in AttributeDecl in 4th pass: " + attribute_name + ", entity: " + ed);
			 }
		 } else
		 if (parser_pass > 4) { // pass 2
// System.out.println("@X 4 name: " + attribute_name + ", ed: " + ed);
			 attr_key =  "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
			 attr = findAttribute(attribute_name, ed, attr_type, null, attr_key); // also can check for duplicate attribute names.
		 }
	 }
//	 | attr = QualifiedAttribute(ed, attr_type)) // the attribute must be created in pass 1, found and redeclaring field set - in pass 2
	 | attr = RedeclaredAttribute(ed, attr_type)) // the attribute must be created in pass 1, found and redeclaring field set - in pass 2
	 {
if (attr == null) {

	if (parser_pass == 1) {
//              printDDebug("######43 in AttributeDecl NULL ");
	}
}
//               createDocumentationEntity(attr);
		 _data_type_name = "";
		 return attr;
	 }
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.168 ------------ */
Token AttributeId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
{
//      if (doc_token == null) doc_token = t;
	return (t);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.169 ------------ */
jsdai.SExtended_dictionary_schema.EAttribute AttributeQualifier(jsdai.SExtended_dictionary_schema.EEntity_definition ed, jsdai.SExtended_dictionary_schema.EEntity_definition ed2, int attr_type, Object reference) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr2 = null;
	String name;
	String name2 = null;
	Object mark_obj = null;
	String x_operand = "";
	String attr_key = null;
	Object temp_object = null;
	ECtRenamed renamed = null;
}
{
	{
	printDebug("In AttributeQualifier, starting");
// System.out.println("@X 10-500 In attribute qualifier, starting");
// System.out.println("@X 10-501 ed: " + ed);
// System.out.println("@X 10-502 ed2: " + ed2);
// System.out.println("@X 10-503 reference: " + reference);
// System.out.println("@X 10-504 type: " + attr_type);
		if (reference == null) {
			reference = active_scope;
// System.out.println("@X 10-505 new reference: " + reference);
		}
		if (ed2 == null) {
			if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
				ed2 = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
// System.out.println("@X 10-506 new e2: " + reference);
			} else {
			}
		}
	}

	"." attr2 = AttributeRef(ed, ed2, attr_type, reference)
	{


		if (ed != null) {
			temp_object = ed.getTemp();
			if (temp_object != null) {
				if (temp_object instanceof ECtRenamed) {
					renamed = (ECtRenamed)temp_object;
					if (renamed.isActive()) {
						renamed.addOldAttribute(attr2);
						ed.setTemp(renamed);
					}
				}
			} // ! null
    }


//if (parser_pass == 4) {
//	System.out.println("in AttributeQualifier after AttirbuteRef, ed: " + ed + ", GroupQualifier ed2: " + ed2 + ", reference: " + reference + ", active_scope: " + active_scope + ", AttributeRef result: " + attr2);
//}

 //System.out.println("@@1 current entity: " + ed);
 //System.out.println("@@1 redeclared entity: " + ed2);
 //System.out.println("@@1 attribute type: " + attr_type);
 //System.out.println("@@1 reference: " + reference);
 //System.out.println("@@1 redeclared attr: " + attr2);

		if(flag_in_redeclaring) {
			flag_in_redeclaring = false;
		}

		if (attr2 == null) {
//			if (parser_pass == 4) {
//				error_count++;
//				printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared attribute in entity " + attr.getParent(null).getName(null), null, true);
//			}

//	System.out.println("in AttributeQualifier after AttirbuteRef, attr2 is NULL - returning!");

			return null;

		}

		if (parser_pass == 1) {
		} else
		if (parser_pass == 2) {
		} else
		if (parser_pass == 3) {
			if (attr_type == 0) { // explicit
				if (attr2 != null) {
// System.out.println("@@# attr2: " + attr2);
					name = attr2.getName(null);
				 	attr_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + name.toLowerCase();
// System.out.println("<=OOOOO-pass3 attr_key: " + attr_key);
					attr = findAttribute(name, ed, attr_type, ed2, attr_key);
				} else {
// System.out.println("@@# attr2 NULL");
				}
			}
		} else
		if (parser_pass == 4) {
			// if (attr2 == null) return null;
			if (attr_type < 0) return null;
			name = attr2.getName(null);
    	mark_obj = attr2.getTemp();
    	if (mark_obj instanceof String) {
    		name2 = (String) mark_obj;
    	}
// System.out.println("in AttributeQualifier - @X 5 name2: " + name2 + ", name: " + name + ", ed: " + ed);
			
			if (attr_type == 0) { // explicit
// System.out.println("@X 5 name: " + name + ", ed: " + ed);

//				if (flag_in_redeclaring) {
				 	attr_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + name.toLowerCase();
// System.out.println("<=OOOOO-E attr_key: " + attr_key);
//					attr_key = null;
//				}	
				attr = findAttribute(name, name2, ed, attr_type, ed2, attr_key);
// System.out.println("in AttributeQualifier - after findAttribute, name2: " + name2 + ", name: " + name + ", ed: " + ed + ", ed2: " + ed2 + ", key: " + attr_key + ", result attr: " + attr);

// System.out.println("@@ current entity: " + ed);
// System.out.println("@@ redeclared entity: " + ed2);
// System.out.println("@@ redeclaring attribute: " + attr);
// System.out.println("@@ redeclared attr: " + attr2);

//				((jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2);

// System.out.println("<><> attr: " + attr + ", attr2: " + attr2);
//System.out.println("redeclaring: " + attr);
//System.out.println("redeclared: " + attr2);
				if (attr2 instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (isRedeclared_attrCompatible(attr, attr2)) { 
						if (attr == attr2) {
							printErrorMsg("" + attr.getName(null) + " - attribute is redeclaring itself, entity: " + attr.getParent(null).getName(null), null, true);
							error_count++;
						} else {
//System.out.println("OXO- redeclaring attr: " + attr + ", redeclared attr2: " + attr2);
//System.out.println("OXO- ed: " + ed + ", ed2: " + ed2 + ", reference: " + reference);
							((jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2);
//System.out.println("OXO-OK");
						}
					} else {
						error_count++;
//						printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared attribute in entity " + attr.getParent(null).getName(null), null, true);
					}
				}	else {
					error_count++;
					Token t = getToken(0);
			   	int line = t.beginLine;
			   	int column = t.beginColumn;
					if (attr2 instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
						String attr_name_err = ""; 
						String entity_name_err = "";
						if (attr != null) {
							if (attr instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
								attr_name_err = attr.getName(null);
							}
							// parent_entity no longer explicit
							// if (attr.testParent_entity(null)) {
								// entity_name_err = attr.getParent_entity(null).getName(null);
							// }
							if (attr.testParent(null)) {
								entity_name_err = attr.getParent(null).getName(null);
							}
						}
//						printError("on line " + line + ", column " + column  + ": probably an attempt to redeclare a derived attribute as explicit. Entity: " + entity_name_err + ", attribute: " + attr_name_err);
						printErrorMsg("" + attr_name_err +  " - in entity " + entity_name_err + ", probably an attempt to redeclare a derived attribute as explicit", null, true);
					} else {
//						printError("on line " + line + ", column " + column  + ": this attribute must be explicit: " + attr2);
						printErrorMsg("" + attr2 + " - this attribute must be explicit", null, true);
					}
					printDebug("error in AttributeQualifier, not explicit: " + attr2 + ", in pass " + parser_pass);  
				}
				 attr.unsetOrder(null);
			} else
			if (attr_type == 1) { // derived
// System.out.println("@X 6 name: " + name + ", ed: " + ed);
//				attr = findAttribute(name, ed, attr_type, ed2);


				 	attr_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + name.toLowerCase();
// System.out.println("<=OOOOO-D HERE attr_key: " + attr_key);
				attr = findAttribute(name, name2, ed, attr_type, ed2, attr_key);
// System.out.println("redeclaring: " + attr);
// System.out.println("redeclared: " + attr2);

				if (attr2 instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (isRedeclared_attrCompatible(attr, attr2)) { 
						if (attr == attr2) {
							printErrorMsg("" + attr.getName(null) + " - attribute is redeclaring itself, entity: " + attr.getParent(null).getName(null), null, true);
							error_count++;
						} else {
							((jsdai.SExtended_dictionary_schema.EDerived_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2);
						}
					} else {
						error_count++;
						//printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared attribute in entity " + attr.getParent(null).getName(null), null, true);
					}
//System.out.println(">PARSER setting order - AttributeQualifier - order: " + derived_attribute_order_count  + ", pass: " + parser_pass + ", attr: " + attr); 

					 attr.setOrder(null, derived_attribute_order_count++);
// System.out.println("DONE - order set: attr: " + attr);				
					
				} else
				if (attr2 instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (isRedeclared_attrCompatible(attr, attr2)) { 
						if (attr == attr2) {
							printErrorMsg("" + attr.getName(null) + " - attribute is redeclaring itself, entity: " + attr.getParent(null).getName(null), null, true);
							error_count++;
						} else {
							((jsdai.SExtended_dictionary_schema.EDerived_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EDerived_attribute)attr2);
						}
					} else {
						error_count++;
//						printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared attribute in entity " + attr.getParent(null).getName(null), null, true);
					}
				 attr.unsetOrder(null);
				} else {
// System.out.println("KLAIDA: attr2: " + attr2);				
				}
//                              if (parser_pass == 4) {
//                                      if (expression_instances) {
//                                              x_operand = (String)expression_stack.pop();
//                                              x_operand += attr.getName(null);
//                                              expression_stack.push(x_operand);
//                                      }
//                              }
			} else
			if (attr_type == 2) { // inverse
// printDDebug("######2 in AttributeQ name: " + name + ", entity name: " + ed.getName(null) + ", attribute type: " + attr_type);
// System.out.println("@X 7 name: " + name + ", ed: " + ed);



				 	attr_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + name.toLowerCase();
// System.out.println("<=OOOOO-I attr_key: " + attr_key);
				attr = findAttribute(name, ed, attr_type, ed2, attr_key);
// System.out.println("redeclaring: " + attr);
// System.out.println("redeclared: " + attr2);
				if (isRedeclared_attrCompatible(attr, attr2)) { 
						if (attr == attr2) {
							printErrorMsg("" + attr.getName(null) + " - attribute is redeclaring itself, entity: " + attr.getParent(null).getName(null), null, true);
							error_count++;
						} else {
							((jsdai.SExtended_dictionary_schema.EInverse_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EInverse_attribute)attr2);
						}
	      } else {
					error_count++;
//					printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared attribute in entity " + attr.getParent(null).getName(null), null, true);
	      }
				 attr.unsetOrder(null);
			}
			if (attr_type == 4) { // uniqueness rule
// printDDebug("######4 in AttributeQ name: " + name + ", entity name: " + ed.getName(null) + ", attribute type: " + attr_type);
// System.out.println("@X 8 name: " + name + ", ed: " + ed);


				 	attr_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + name.toLowerCase();
// System.out.println("<=OOOOO-U attr_key: " + attr_key);
				attr = findAttribute(name, ed, attr_type, ed2, attr_key);
// no need to set redeclaring for uniqueness rule
//                              if (attr instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
//                                      ((jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2);
//                              } else
//                              if (attr instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
//                                      ((jsdai.SExtended_dictionary_schema.EInverse_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EDerived_attribute)attr2);
//                              } else
//                              if (attr instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
//                                      ((jsdai.SExtended_dictionary_schema.EInverse_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EInverse_attribute)attr2);
//                              }
			} else
			if (attr_type == 5) { // expressions, from Qualifier()
			}
		} else
		if (parser_pass == 5) {
			if (attr_type < 0) return null;
			name = attr2.getName(null);
// System.out.println("@X 10 name: " + name + ", ed: " + ed);
			attr = findAttribute(name, ed, attr_type, ed2, attr_key); 
// System.out.println("@X 10-100 original: " + attr2 + ", found: " + attr);
		}
		printDebug("In AttributeQualifier, ending, attr: " + attr);

 	  if (renamed != null) {
 	  	if (renamed.isActive()) {
				renamed.addNewAttribute(attr);
  			ed.setTemp(renamed);
			}		
		}
		return attr;
	}
}

/*-+------- ISO 10303-14: B2.40 -------------------------------------------------------------------------------------------*/
void BackwardPathQualifier() throws jsdai.lang.SdaiException :
{
	Object reference = null;
	int attr_type = -1;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed2 = null;
}
{
	{
		printDebug("In BackwardPathQualifier, starting");

	}

//	<BPATH> [ AttributeRef(ed, ed2, attr_type, reference) ] PathCondition()
	"<-" [ AttributeRef(ed, ed2, attr_type, reference) ] PathCondition()
	{
		printDebug("In BackwardPathQualifier, ending");
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.170 ------------ */
jsdai.SExtended_dictionary_schema.EBag_type BagType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EBag_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	jsdai.lang.EEntity bt;
	String bound_name;
}
{
	<BAG> [bounds = BoundSpec()]
	{
		if (parser_pass == 3) {
			if (whose != null) {
			  if (!(whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute)) {
//					at = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
				}
//				bound_name = getBoundString(0, bounds, false, false);
//				at.setName(null, "_BAG" + bound_name + _data_type_name);
//				_data_type_name = "_BAG"  + bound_name + _data_type_name;
			}
		}
		else 
		if (parser_pass == 4) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
//				bound_name = getBoundString(0, bounds, false, false);
//				at.setName(null, "_BAG" + bound_name + _data_type_name);
//				_data_type_name = "_BAG" + bound_name + _data_type_name;
			}
		} else 
		if (parser_pass == 5) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
//				bound_name = getBoundString(0, bounds, false, false);
//				at.setName(null, "_BAG" + bound_name + _data_type_name);
//				_data_type_name = "_BAG" + bound_name + _data_type_name;
			}
			if (bounds[0] == null) {
				// should I do this or not? 
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			}
			at.setLower_bound(null, bounds[0]); 
			if (bounds[1] != null) {
				at.setUpper_bound(null, bounds[1]); 
			} else {
				at.unsetUpper_bound(null);  // no need for that it is unset after creating
			}
		}
	}  
	<OF> bt = BaseType(at)
	{

//System.out.println("<RR>bag element type: " + bt + ", pass: " + parser_pass);
		if (parser_pass > 3) {
//			if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			if (!(at.testElement_type(null))) {
				if(bt instanceof jsdai.SExtended_dictionary_schema.EData_type) {
					at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EData_type)bt);
				} else {
					// possible express amendment issue
				}
			}
		}
		bound_name = getBoundString(0, bounds, false, false);
		_data_type_name = "_BAG"  + bound_name + _data_type_name;
		if (at != null) {
			at.setName(null, _data_type_name);
		}
		return at;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.171 ------------ */
// changed according to Amendment - 171

// CHOICE CONFLICT between aggregates and generalized aggregates
/*
    ARRAY OF ParameterType
    ARRAY OF BaseType
	
*/


jsdai.lang.EEntity BaseType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.lang.EEntity ae;
}
{
//	(ae = AggregationTypes(whose) | ae = SimpleTypes(whose) | ae = NamedTypes(whose))
	{
		printDebug("In BaseType, starting, pass " + parser_pass);
	}
	(LOOKAHEAD (ConcreteTypes(whose)) 
	{
	// System.out.println("in between Concrete");
	}
	ae = ConcreteTypes(whose) 
	| 
	ae = GeneralizedTypes(whose))
	{
		printDebug("In BaseType, ending: " + ae + ", pass " + parser_pass);
		return ae;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.172 ------------ */
jsdai.SExtended_dictionary_schema.EBinary_type BinaryType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EBinary_type bt = null;
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	int width_spec = 0;
	boolean is_fixed = false;
	String str_fixed;
}
{
	<BINARY> 
	{
	}
	[ width_spec = WidthSpec()]
	{
		if (width_spec == Integer.MIN_VALUE) {
			width_spec = 0;
		}
		if (width_spec < 0) {
			width_spec = -width_spec;
			is_fixed = true;
			str_fixed = "_FIXED";
		} else {
			is_fixed = false;
			str_fixed = "";
		}
		if (parser_pass == 3) {
			if (width_spec == 0) {
				bt = _st_binary;
			} else {
				bt = (jsdai.SExtended_dictionary_schema.EBinary_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBinary_type.class);
				_data_type_name = "_Binary_" + width_spec + str_fixed;
				// _data_type_name = "_Binary_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
				bt.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, width_spec);
				bt.setWidth(null, b1);
				if (is_fixed) {
					bt.setFixed_width(null, true);
				} else {
					bt.setFixed_width(null, false);
				}
			}
		} 
		if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (bt == null) {
				if (width_spec == 0) {
					bt = _st_binary;
				} else {
					bt = (jsdai.SExtended_dictionary_schema.EBinary_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBinary_type.class);
					_data_type_name = "_Binary_" + width_spec + str_fixed;
					// _data_type_name = "_Binary_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
					bt.setName(null, _data_type_name);
					b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
					b1.setBound_value(null, width_spec);
					bt.setWidth(null, b1);
					if (is_fixed) {
						bt.setFixed_width(null, true);
					} else {
						bt.setFixed_width(null, false);
					}
				}	
			}
		} 
		if ((parser_pass == 5) && (width_spec != 0)) {
				bt = (jsdai.SExtended_dictionary_schema.EBinary_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBinary_type.class);
				_data_type_name = "_Binary_" + width_spec + str_fixed;
				// _data_type_name = "_Binary_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
				bt.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, width_spec);
				bt.setWidth(null, b1);
				if (is_fixed) {
					bt.setFixed_width(null, true);
				} else {
					bt.setFixed_width(null, false);
				}

		}
		return bt;	
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.172 ------------ */

/*-------- ISO 10303-14: B2.44 -------------------------------------------------------------------------------------------*/
jsdai.lang.EEntity BindingHeader(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	String partition_name = "_implicit_partition_"; // partition may be implicit, let's have name "_implicit_partition_" for it (so far)
	// I would like to have partition entity, supertype of map_partition and view_partition.
	jsdai.SExtended_dictionary_schema.EMap_partition mp = null;
	jsdai.SExtended_dictionary_schema.EView_partition vp = null;
	jsdai.lang.EEntity partition = null;
}
{

/*	
Warning: Choice conflict in [...] construct at line 2134, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "partition"
	 Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in [...] construct at line 2135, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "from"
	 Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in [...] construct at line 2136, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "local"
	 Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in [...] construct at line 2137, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "where"
	 Consider using a lookahead of 2 or more for nested expansion.
	Warning: Choice conflict in [...] construct at line 2138, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "identified_by"
	 Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in [...] construct at line 2139, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "ordered_by"
*/
	{
printDebug("In BindingHeader, starting, parent: " + parent);
	
	}
	[ <PARTITION> partition_name = PartitionId() ";" ]
	{
		if (parser_pass == 1) {
			if (parent instanceof jsdai.SExtended_dictionary_schema.EView_definition) {
				vp = (jsdai.SExtended_dictionary_schema.EView_partition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CView_partition.class);
				vp.setParent(null, (jsdai.SExtended_dictionary_schema.EView_definition)parent);
				vp.setName(null, partition_name);
				partition = (jsdai.lang.EEntity)vp;
				
			} else
			if (parent instanceof jsdai.SExtended_dictionary_schema.EMap_definition) {
				mp = (jsdai.SExtended_dictionary_schema.EMap_partition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CMap_partition.class);
				mp.setParent(null, (jsdai.SExtended_dictionary_schema.EMap_definition)parent);
				mp.setName(null, partition_name);
				partition = (jsdai.lang.EEntity)mp;
			} else {
				// error
			}
		} else {
			if (parent instanceof jsdai.SExtended_dictionary_schema.EView_definition) {
				vp = findView_partition(partition_name, (jsdai.SExtended_dictionary_schema.EView_definition)parent);
				partition = (jsdai.lang.EEntity)vp;
			} else
			if (parent instanceof jsdai.SExtended_dictionary_schema.EMap_definition) {
				mp = findMap_partition(partition_name, (jsdai.SExtended_dictionary_schema.EMap_definition)parent);
				partition = (jsdai.lang.EEntity)mp;
			} else {
				// error
			}
		}
	}
	[ FromClause(partition) ]
	// only for map_partition, not for view_partition
	[ LocalDecl() ]
	[ WhereClause(parent) ]
	[ IdentifiedByClause() ]
	[ OrderedByClause() ]
	{
		printDebug("In BindingHeader, ending");
		return partition;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.173 ------------ */
jsdai.SExtended_dictionary_schema.EBoolean_type BooleanType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EBoolean_type bt = null; 
}
{
	<BOOLEAN>
	{
		if (parser_pass == 3) {
			// bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBoolean_type.class);
			bt = _st_boolean;
		}
		else if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}
			}
//System.out.println("bt: " + bt + ", boolean: " + _st_boolean + ", whose: " + whose);
			if (bt == null) {
				// bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBoolean_type.class);
				bt = _st_boolean;
			}
		} 
		return bt;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.174 ------------ */
jsdai.SExtended_dictionary_schema.EBound Bound1(boolean make_pdb) throws jsdai.lang.SdaiException:
{
	int value;
	jsdai.SExtended_dictionary_schema.EBound b1 = null;
}
{
	(value = NumericExpression()
	{
		if (parser_pass == 5) {
			if (numeric_expression_calculated) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				// this line is probably not needed for aggregate bound and dangerous in other cases, better remove
				if (value == Integer.MIN_VALUE) value = 0;
				b1.setBound_value(null, value);
			} else {
				b1 = (jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CPopulation_dependent_bound.class);
				// schema_name, entity_name, method_name
				((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b1).setSchema_name(null, sd.getName(null));
				if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b1).setEntity_name(null, ((jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope).getName(null));
				}
				((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b1).setMethod_name(null, getPDBname());
			
			}
		}
		return b1;
	})

}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.175------------ */
jsdai.SExtended_dictionary_schema.EBound Bound2(boolean make_pdb) throws jsdai.lang.SdaiException:
{
	int value;
	jsdai.SExtended_dictionary_schema.EBound b2 = null;
}
{
	(value = NumericExpression()
	{
		if (parser_pass == 5) {
			if (value != Integer.MIN_VALUE) {
				b2 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b2.setBound_value(null, value);
			} else if (!(numeric_expression_calculated)) {
				b2 = (jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CPopulation_dependent_bound.class);
				((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b2).setSchema_name(null, sd.getName(null));	
				if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b2).setEntity_name(null, ((jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope).getName(null));
				}
				((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b2).setMethod_name(null, getPDBname());
			}
		}
		return b2;
	})
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.176------------ */

// jsdai.SExtended_dictionary_schema.EInteger_bound [] BoundSpec() throws jsdai.lang.SdaiException :
jsdai.SExtended_dictionary_schema.EBound [] BoundSpec() throws jsdai.lang.SdaiException :
{
	// jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EBound[2];
	// jsdai.SExtended_dictionary_schema.EInteger_bound b1 = null;
	// jsdai.SExtended_dictionary_schema.EInteger_bound b2 = null;
	jsdai.SExtended_dictionary_schema.EBound b1 = null;
	jsdai.SExtended_dictionary_schema.EBound b2 = null;
}
{
	"[" 
	b1 = Bound1(true) ":"  
	{
		if (parser_pass == 5) {
			bounds[0] = b1;
		}
	}		

	b2 = Bound2(true) "]"	
	{	
		if (parser_pass == 5) {
			bounds[1] = b2;
		}
		return bounds;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.177------------ */
Object BuiltInConstant() throws jsdai.lang.SdaiException  :
{
	Object result = null;
	Integer l;
	Double d;
	Token t;
}
{
	<CONST_E> 
	// 2.71828182845904523536028747135266249775724709369996..
	{ 
		if (parser_pass == 5) {
		}
		return result;
	}

	| <PI> 
	{ 
		if (parser_pass == 5) {
		}
		return result;
	}
	|t = <SELF>
	{ // using Token for SELF for now, later will see.
		if (!(self_entity || self_type || self_constructor)) {
			error_count++;
			printErrorMsg("illegal usage of SELF", null, true);
			
		}
		if (parser_pass == 5) {
		}
		return result;
	} 
	| "?" 
	{ 
		if (parser_pass == 5) {
		}
		return result;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.178------------ */

int BuiltInFunction() :
{
	int id = 0;
}
{
	(<ABS> {id = 1;} |
	<ACOS> {id = 2;} |
	<ASIN> {id = 3;} |
	<ATAN> {id = 4;} |
	<BLENGTH> {id = 5;} |
	<COS> {id = 6;} |
	<EXISTS> {id = 7;} |
	<EXTENT> {id = 30;} |
	<EXP> {id = 8;} |
	<FORMAT> {id = 9;} |
	<HIBOUND> {id = 10;} |
	<HIINDEX> {id = 11;} |
	<LENGTH> {id = 12;} |
	<LOBOUND> {id = 13;} |
	<LOINDEX> {id = 14;} |
	<LOG> {id = 15;} |
	<LOG2> {id = 16;} |
	<LOG10> {id = 17;} |
	<NVL> {id = 18;} |
	<ODD> {id = 19;} |
	<ROLESOF> {id = 20;} |
	<SIN> {id = 21;} |
	<SIZEOF> {id = 22;} |
	<SQRT> {id = 23;} |
	<TAN> {id = 24;} |
	<TYPEOF> {id = 25;} |
	<USEDIN> {id = 26;} |
	<VALUE> {id = 27;} |
	<VALUE_IN> {id = 28;} |
	<VALUE_UNIQUE> {id = 29;})
	{
		printDebug("In BuiltInFunction, function: " + id);
		return id;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.179------------ */
int BuiltInProcedure() throws jsdai.lang.SdaiException :
{
	int id = 0;
}
{
	(<INSERT>{id = 1;} | <REMOVE> {id = 2;})
	{
		return id;
	}
}
/* -+----------------------------------------------------------------------------------- ISO 10303-11:A.2.180------------ */
void CaseAction() throws jsdai.lang.SdaiException  :
{}
{
	CaseLabel() (  "," CaseLabel())* ":" Stmt()
}
/*-+-------- ISO 10303-14:B2.53 ---------*/
void CaseExpr() throws jsdai.lang.SdaiException :
{}
{
//	<CASE> Selector() <OF> ( CaseExprAction() )* [ <OTHERWISE> ":" MapAttrAssgnmtExpr() ] <END_CASE>
	<CASE> Selector() <OF> ( CaseExprAction() )* [ <OTHERWISE> ":" Expression() ] <END_CASE>
}
/*-+-------- ISO 10303-14:B2.54 ---------*/
void CaseExprAction() throws jsdai.lang.SdaiException :
{}
{
//	CaseLabel() ("," CaseLabel())* ":" MapAttrAssgnmtExpr() ";"
	CaseLabel() ( "," CaseLabel())* ":" Expression() ";"
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.181------------ */
void CaseLabel() throws jsdai.lang.SdaiException  :
{
	Object op_case_label = null;
	Object pop_inst = null;
}
{
	{
		printDebug("In CaseLabel, starting, pass " + parser_pass);
	}
	Expression()
	{
		if (parser_pass == 5) {
		}
		printDebug("In CaseLabel, ending, pass " + parser_pass);
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.182------------ */
void CaseStmt() throws jsdai.lang.SdaiException :
{
	Object op_selector = null;
	Object pop_inst = null;
	boolean otherwise_present = false;
}
{
	{
		printDebug("In CaseStmt, starting");
	}
	<CASE> (Selector()) #CaseSelector
	{
		if (parser_pass == 5) {
		}
	}
	 <OF> (CaseAction())* [<OTHERWISE> {otherwise_present = true;}":" (Stmt()) ] <END_CASE> ";"
	{
		printDebug("In CaseStmt, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.183------------ */
void CompoundStmt() throws jsdai.lang.SdaiException  :
{
	Object operand = null;
}
{
	{
		printDebug("In CompoundStmt, starting");
	}
	<BEGIN> (Stmt())+ <END> ";"
	{
		if (parser_pass == 5) {
//                      operand = argument_stack.pop();
///             printStack("POP: CompoundStmt, return value: " + operand);
		}
		printDebug("In CompoundStmt, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.184------------ */
void ConstantBody() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EConstant_definition cd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration cond;
	int index = 1;
	String name;
  Object operand = null;
	Object pop_inst = null;
  jsdai.lang.EEntity bt = null;
	String key = null;
	jsdai.lang.EEntity active_scope_backup = null;
}
{

	{
		active_scope_backup = active_scope;
	}
	name = ConstantId()
	{
		if (parser_pass == 1) {
			printVerbose("Constant: " + name);
//			cd = findConstant_definition(name);
			cd = findConstant_definitionX(name);
			Token t = getToken(0);
			if (cd != null) {
						error_count++;
//						printError("duplicate constant name \"" + name + "\" at line " + t.beginLine + ", column " + t.beginColumn);
						printErrorMsg("" + name + " - duplicate constant name", null, true);
			} else {
				String wrong_name = findAnyName(name);
				if (wrong_name != null) {
						error_count++;
//						printError("duplicate name \"" + name + "\". The same name used for a constant and for " + wrong_name + " at line " + t.beginLine + ", column " + t.beginColumn);
						printErrorMsg("" + name + " - duplicate constant name,  the name is already in use in the same scope", null, true);
				}
			}
			printDebug("In ConstantBody, before 1st create");
			cd = (jsdai.SExtended_dictionary_schema.EConstant_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CConstant_definition.class);
			printDebug("In ConstantBody, after 1st create");
			if ((active_scope instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) || (active_scope instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule)) {
		  	cond = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CConstant_declaration$inner_declaration.class);
				((jsdai.SExtended_dictionary_schema.EInner_declaration)cond).setScope(null, active_scope);
			} else {
		  	cond = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CConstant_declaration$local_declaration.class);
			}
			cond.setDefinition(null, cd);
			cond.setParent(null, sd);
			key = constructConstantKey(name);
			printDebug("In ConstantBody, after 2nd create");
		  active_scope_extension = new ECtScope(active_scope, cd, active_scope_extension, active_scope_string, name, key);
			active_scope = cd;
  		active_scope_string = "";
			
			// parent_schema is now derived instead of explicit 
			// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				// cond.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);	
			// }
//System.out.println("ConstantDecl, HashMap key: " + key);
//System.out.println("ConstantDecl, constant declaration: " + cond);
//System.out.println("ConstantDecl, constant definition: " + cd);

//			if (!(hm_current_constant_declarations.containsKey(name.toLowerCase()))) {
			if (!(hm_current_constant_declarations.containsKey(key))) {
				hm_current_constant_declarations.put(key, cond);
//System.out.println("ConstantDecl, put into HashMap: " + hm_current_constant_declarations);
			} else {
//System.out.println("ConstantDecl, already in the HashMap HashMap");
			}
			if (flag_oc) {
				cd.setName(null, name);
			} else {
				cd.setName(null, name.toLowerCase());
			}
		} else {
//			cd = findConstant_definition(name);
			cd = findConstant_definitionX(name);
		  active_scope_extension = new ECtScope(active_scope, cd, active_scope_extension, active_scope_string, name, constructConstantKey(name));
			active_scope = cd;
  		active_scope_string = "";
			if (cd == null) {
				error_count++;
				if (parser_pass == 2) {
					// it is more like an internal error, actually
//					printError("constant not found: " + name);
					printErrorMsg("" + name + " - constant not found", null, true);
				}
				printDebug("ConstantBody- constant not found: " + name);
			}
		}
	}
 ":" bt = BaseType(cd)
 {

			if (bt != null) {
				// possible additional check because of the changes for amendment and because of the way paramater_type is implemented.
				cd.setDomain(null, bt);
			} else {
				printDebug("In ConstantBody, after BaseType, base type is NULL in pass: " + parser_pass + ", constantn_definition: " + cd);				
			}

 }
  ":=" 
  {
		if (parser_pass == 5) {
		}
  }
  Expression()
	{
		if (parser_pass == 5) {
		}
		active_scope = active_scope_backup;
		active_scope_string = active_scope_extension.getParent_scope_string();
		active_scope_extension = active_scope_extension.getParent();
	}
  ";"
}


void ConstantDecl() throws jsdai.lang.SdaiException  :
{
	jsdai.lang.EEntity active_scope_backup = null;
}
{
try {
(
	{
		printDebug("In ConstantDecl, starting");
		active_scope_backup = active_scope;
	}
	<CONSTANT> (ConstantBody())+ <END_CONSTANT> ";"
	{
		active_scope = active_scope_backup;
// the same as in ConstantBody?
//		active_scope_string = active_scope_extension.getParent_scope_string();
//		active_scope_extension = active_scope_extension.getParent();
		printDebug("In ConstantDecl, ending");
	}
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	if (parser_pass == 1) {
//		printError(e.getMessage());
		printErrorMsg(e.getMessage(), null, true);
		error_count++;
		System.out.println("ERROR RECOVERY: skipping to END_CONSTANT");
	}
	recoverFromParseException(END_CONSTANT, e);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.186------------ */
void ConstantFactor() throws jsdai.lang.SdaiException :
{
}
{

//      BuiltInConstant() | ConstantRef()
	BuiltInConstant() | InterpretedRef(PI_CONSTANT)
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.187------------ */
String ConstantId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* ---------------------------------------------------------- ISO 10303-11:A.2.188------------ */
void ConstructedTypes(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException :
{}
{
	// choice conflict involving <EXTENSIBLE>, lookahead 2 is enough
	LOOKAHEAD(2) EnumerationType(dt) | SelectType(dt)
}

// -- removed in DIS version
/*--------- ISO 10303-14:B.2.62 ---*/
/*
void CreateMapDecl() throws jsdai.lang.SdaiException :
{}
{
	<CREATE> InstanceId() ":" TargetEntityReference() ";" [ <WHERE> LogicalExpression() ";" ] (MapAttributeDeclaration())+  <END_CREATE> ";"
}
*/

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.189 ------------ */
void Declaration() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In Declaration, starting");
	if (active_scope_extension == null) {
	System.out.println("Declaration, active_scope_extension = NULL");
}

	}
	( EntityDecl() | SubtypeConstraintDecl() | FunctionDecl() | ProcedureDecl() | TypeDecl() )
	{
		printDebug("In Declaration, ending, error_count: " + error_count);
	}

}

/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.411 ------------ */
void SubtypeConstraintBody(jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc0) throws jsdai.lang.SdaiException :
{
	boolean is_abstract = false;
	jsdai.lang.EEntity ee = null;
	jsdai.SExtended_dictionary_schema.ESubtype_expression constraint = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc;
	jsdai.lang.EEntity se;
	Object pop_inst = null;
	jsdai.SExtended_dictionary_schema.EAndor_subtype_expression andor;
	// pre-X	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_or_subtype_expression generic_operands;
	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands;
}
{
	{
		printDebug("In SubtypeConstraintBody, starting");
	}
	[AbstractSupertype() {is_abstract = true;}] [TotalOver(sc0)] 
	[SupertypeExpression() 
	{

		if (parser_pass == 5) {


			se = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: SubtypeConstraint: " + se);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
  
      ed = sc0.getSuper_type(null);
			if (se instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) {
				sc = (jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSub_supertype_constraint.class);
				sc.setGeneric_supertype(null, ed);
				// super_type is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// sc.setSuper_type(null, (jsdai.SExtended_dictionary_schema.EEntity_definition)ed);
				// }
				sc.setConstraint(null, (jsdai.SExtended_dictionary_schema.ESubtype_expression)se);
// System.out.println("<SC-BX-1> created: " + sc);
			} else 
			if (se instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) // SUPERTYPE OF (single_entity)
	    {
				sc = (jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSub_supertype_constraint.class);
				sc.setGeneric_supertype(null, ed);
				// super_type is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// sc.setSuper_type(null, (jsdai.SExtended_dictionary_schema.EEntity_definition)ed);
				// }
				andor = (jsdai.SExtended_dictionary_schema.EAndor_subtype_expression)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAndor_subtype_expression.class);
				generic_operands = andor.createGeneric_operands(null);
				// operands is now derived instead of explicit 
				// operands = andor.createOperands(null);
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) se);
				// operands is now derived instead of explicit 
				// if (!(se instanceof jsdai.SExtended_dictionary_schema.EView_definition)) {
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) se);
				// }
				sc.setConstraint(null, (jsdai.SExtended_dictionary_schema.ESubtype_expression)andor);
// System.out.println("<SC-BX-2> created: " + sc);
			}
			else { //
				error_count++;
				printEDebug("Internal error in SubtypeConstraint");
			}
		}
	}

	
";"]
	{
		if (is_abstract) {
			if (sc0 != null) {
//				if (sc0.testSuper_type(null)) {
//					ed = sc0.getSuper_type(null);
//					ed.setInstantiable(null, false);
//				}
				if (sc0.testGeneric_supertype(null)) {
					ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)sc0.getGeneric_supertype(null);
// no, we need to set local flag abstract_supertype instead
//					ed.setInstantiable(null, false);
// is it sc or sc0?						sc0.setAbstract_supertype(null, true);
				}
			}
		}
		printDebug("In SubtypeConstraintBody, ending");
	}

}

/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.412 ------------ */
void SubtypeConstraintDecl() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc = null;
}
{
	{
		printDebug("In SubtypeConstraintDecl, starting");
	}
	sc = SubtypeConstraintHead() SubtypeConstraintBody(sc) <END_SUBTYPE_CONSTRAINT> ";"
	{
		printDebug("In SubtypeConstraintDecl, ending");
	}

}
/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.413 ------------ */
jsdai.SExtended_dictionary_schema.ESub_supertype_constraint SubtypeConstraintHead() throws jsdai.lang.SdaiException :
{
	String constraint_id = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc = null;
	jsdai.SExtended_dictionary_schema.ESubtype_constraint_declaration scd = null;
}
{
	{
		printDebug("In SubtypeConstraintHead, starting");
	}
	<SUBTYPE_CONSTRAINT> constraint_id = SubtypeConstraintId() <FOR> ed = EntityRef(null) ";" 
	{
		printDebug("In SubtypeConstraintHead, ending");

		if (parser_pass == 1) {
			sc = findSubtype_constraint(constraint_id);
			if (sc != null) {
					error_count++;
//					printError("duplicate subtype_constraint name \"" + constraint_id + "\"");
					printErrorMsg("" + constraint_id + " - duplicate subtype_constraint name", null, true);
					printDebug("duplicate subtype_constraint name \"" + constraint_id + "\"");
			} else {
				String wrong_name = findAnyName(constraint_id);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + constraint_id + "\". The same name used for a subtype_constraint and for " + wrong_name);
					printErrorMsg("" + constraint_id + " - duplicate subtype constraint name, the name is already in use in the same scope", null, true);
					printDebug("duplicate name \"" + constraint_id + "\". The same name used for a subtype_constraint and for " + wrong_name);
				}
				sc = (jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSub_supertype_constraint.class);
				scd = (jsdai.SExtended_dictionary_schema.ESubtype_constraint_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$subtype_constraint_declaration.class);
				scd.setDefinition(null, sc);
				// parent_schema is now derived instead of explicit 
				// scd.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				scd.setParent(null, sd);
				sc.setName(null, constraint_id);
				sc.setAbstract_supertype(null, false);
				if (!(hm_current_subtype_constraint_declarations.containsKey(constraint_id.toLowerCase()))) {
					hm_current_subtype_constraint_declarations.put(constraint_id.toLowerCase(), scd);
				}
				
				if (ed != null) {
					// super_type is now derived instead of explicit 
					// sc.setSuper_type(null, ed);
					sc.setGeneric_supertype(null, ed);
				}
// System.out.println("<SC-0> created constraint: " + sc);
			}
		} else { // parser_pass > 1 
			sc = findSubtype_constraint(constraint_id);
			if (sc == null) {
				error_count++;
				if (parser_pass == 2) {
//					printError("subtype_constraint not found:  \"" + constraint_id + "\"");
					printErrorMsg("" + constraint_id + " - subtype constraint not found", null, true);
				}
				printDebug("subtype_constraint not found:  \"" + constraint_id + "\"");
			} else {
				if (ed != null) {
					// super_type is now derived instead of explicit 
					// sc.setSuper_type(null, ed);
					sc.setGeneric_supertype(null, ed);
				}
			}	
// System.out.println("<SC-3> found constraint: " + sc + ", pass: " + parser_pass);
		}
		
 		return sc;
	}

}
/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.414 ------------ */
String SubtypeConstraintId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	{
		printDebug("In SubtypeConstraintId, starting");
	}
	t = <SIMPLE_ID>
	{
		printDebug("In SubtypeConstraintId, ending");
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}

}
/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.415 ------------ */
void TotalOver(jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.AEntity_definition total_cover = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition sub_ed = null;;
	int index = 1;
}
{
	{
		printDebug("In TotalOver, starting");
	}
	<TOTAL_OVER> "(" 
	{
		if (parser_pass == 3) {
			total_cover = sc.createTotal_cover(null);
		}
	}
	sub_ed = EntityRef(null) 
	{
		if (parser_pass == 3) {
//			total_cover.addByIndex(index, sub_ed);
			total_cover.addUnordered(sub_ed);
		}
	}
	( "," 
	sub_ed = EntityRef(null)
	{
		if (parser_pass == 3)
		{
//			total_cover.addByIndex(index, sub_ed);
			total_cover.addUnordered(sub_ed);
		}
	}
	
	)* ")" ";"
	{
		printDebug("In TotalOver, ending");
	}

}

/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.400 ------------ */
void AbstractSupertype() throws jsdai.lang.SdaiException :
{
}
{
	{
		printDebug("In AbstractSupertype, starting");
	}
	<ABSTRACT> <SUPERTYPE> ";"	
	{
		printDebug("In AbstractSupertype, ending");
	}

}
/*-+-------- ISO 10303-14:B.2.64 ---*/
void DependentMapDecl() throws jsdai.lang.SdaiException :
{
//	jsdai.SExtended_dictionary_schema.EDependent_map_declaration dmdc = null;
	jsdai.SExtended_dictionary_schema.EMap_declaration dmdc = null;
	jsdai.SExtended_dictionary_schema.EDependent_map_definition dmd = null;
	String map_name = null;
}
{
	{
		target_parameter_order_count = 0;
	}
//	<DEPENDENT_MAP> MapId() <AS> ( TargetParameter())+ ";" [ MapSubtypeOfClause() ] ( LOOKAHEAD(3) DepMapPartition())+ <END_DEPENDENT_MAP> ";"
	<DEPENDENT_MAP> map_name = MapId() <AS> 
	
	{
		printDebug("In DependentMapDecl, starting: " + map_name);
		if (parser_pass == 1) {
			// check if a dependent_map with this name already exists in the extent.
			dmd = findDependent_map_definition(map_name, null);
			if (dmd != null) {
				error_count++;
//				printError("duplicate dependent_map name \"" + map_name + "\"");
				printErrorMsg("" + map_name + " - duplicate dependent map name", null, true);
			} else {
				String wrong_name = findAnyName(map_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + map_name + "\". The same name used for a dependent_map and for " + wrong_name);
					printErrorMsg("" + map_name + " - duplicate dependent map name, the name is already in use in the same scope", null, true);
				}
				dmd = (jsdai.SExtended_dictionary_schema.EDependent_map_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDependent_map_definition.class);
				active_scope = dmd;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
//				dmdc = (jsdai.SExtended_dictionary_schema.EDependent_map_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$dependent_map_declaration.class);
				dmdc = (jsdai.SExtended_dictionary_schema.EMap_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$map_declaration.class);


//				dmdc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				dmdc.setParent(null, sd);
				dmdc.setDefinition(null, dmd);

				dmd.setName(null, map_name);
				// supertypes - added this attribute
//				dmd.createSupertypes(null);
//				dmd.createSuper_type(null);
			}
		}       else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper()
			dmd = findDependent_map_definition(map_name, null);
			active_scope = dmd;
			if (dmd == null) {
				error_count++;
//				printError("DependentMapDecl - the dependent_map not found: " + map_name);
				printErrorMsg("" + map_name + " - the dependent map not found", null, true);
			}
		}
		// createDocumentationEntity2(md, a_token);

		target_parameter_order_count = 0;
	}
	
	( TargetParameter(dmd))+ ";" [ MapSubtypeOfClause(dmd) ] ( DepMapPartition(dmd))+ <END_DEPENDENT_MAP> ";"
}

/*-+-------- ISO 10303-14:B.2.65 ---*/
void DepBindingDecl(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{}
{
//	DepFromClause() [ WhereClause(null) ] [  LOOKAHEAD(4) OrderedByClause() ]
	DepFromClause(parent) [ WhereClause(null) ] [ OrderedByClause() ]
}

/*-+-------- ISO 10303-14:B.2.66 ---*/
void DepFromClause(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{}
{
	<FROM> ( DepSourceParameter(parent) ";")+
}

/*--------- ISO 10303-14:B.2.67 ---*/
void DepMapDeclBody(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{}
{
	DepBindingDecl(parent) MapProjectClause()
}

/*--------- ISO 10303-14:B.2.68 ---*/
void DepMapPartition(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	String partition_name = "_implicit_partition_";
	jsdai.lang.EEntity partition = null;
	jsdai.SExtended_dictionary_schema.EDependent_map_partition mp = null;
}
{
	[ <PARTITION> partition_name = PartitionId() ":" ] 
	{
		if (parser_pass == 1) {
				mp = (jsdai.SExtended_dictionary_schema.EDependent_map_partition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDependent_map_partition.class);
				mp.setParent(null, (jsdai.SExtended_dictionary_schema.EDependent_map_definition)parent);
				mp.setName(null, partition_name);
				partition = (jsdai.lang.EEntity)mp;
		} else {
				mp = (jsdai.SExtended_dictionary_schema.EDependent_map_partition)findDependent_map_partition(partition_name, (jsdai.SExtended_dictionary_schema.EDependent_map_definition)parent);
				partition = (jsdai.lang.EEntity)mp;
		}
	}
	DepMapDeclBody(mp)
	{
	}
}

/*-+-------- ISO 10303-14:B.2.69 ---*/
void DepSourceParameter(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	String source_parameter_name;
	jsdai.SExtended_dictionary_schema.ESource_parameter sp0 = null;
	jsdai.SExtended_dictionary_schema.EDependent_source_parameter sp = null;
	jsdai.SExtended_dictionary_schema.EData_type er = null;	// fix dictionary - need defined_type or simple type
	jsdai.SExtended_dictionary_schema.ESimple_type st = null;
	jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
}
{
	// ignoring multiple SourceParameterIds for now, not sure why they are needed
	source_parameter_name = SourceParameterId() ( "," SourceParameterId())* ":" ( st = SimpleTypes(null) | dt = TypeReference() )
	{
		if (parser_pass == 1) {
			sp0 = findSource_parameter(source_parameter_name);
		  if (sp0 != null) {
				// error - should not be found
			}
		 	sp = (jsdai.SExtended_dictionary_schema.EDependent_source_parameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDependent_source_parameter.class);
		 	sp.setName(null, source_parameter_name);
//		 	sp.setOrder(null, from_order_count++);
			if (parent instanceof jsdai.SExtended_dictionary_schema.EDependent_map_partition) {
				sp.setParent(null, (jsdai.SExtended_dictionary_schema.EDependent_map_partition)parent);
			} else
			if (parent instanceof jsdai.SExtended_dictionary_schema.EView_partition) {
			 	sp.setParent(null, (jsdai.SExtended_dictionary_schema.EView_partition)parent);
			} else {
				// error
				System.out.println("<DepSourceParameter> - parent unknown: " + parent);
			} 
		} else {
				sp0 = findSource_parameter(source_parameter_name);
				if (sp0 == null) {
				// error - should have been found
				}		
				if (parser_pass == 4) {
	 				if ((st != null) && (dt == null)) {
		 				sp0.setExtent(null, st);
	 				} else
	 				if ((st == null) && (dt != null)) {
		 				sp0.setExtent(null, dt);
	 				} else {
	 				}
				 	sp0.setOrder(null, from_order_count++);
		 		}
		}
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.190------------ */
void DerivedAttr(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute da;
	jsdai.lang.EEntity bt = null;
	Object exp = null;
	Object pop_inst = null;
	//3.0 jsdai.SExtended_dictionary_schema.EJava_code je = null;
	String x_operand = "";
	String error_attr_name = "";
	String error_current_name = "";
	String error_supertype_name = "";
//	argument_stack.push(ed);
//	if (ed != null)
//		printStack("PUSH: DerivedAttr: entity " + ed.getName(null));
//	else
//		printStack("PUSH: DerivedAttr: entity_definition = null");
}
{
	{
		printDebug("In derived attribute of entity: " + ed.getName(null));
		active_scope = ed; // should be already
 	}
	(da = AttributeDecl(ed, 1) ":" bt = BaseType(da) ":=" 
	{
		if (parser_pass > 3) {

			if (da == null) {
				// attribute not found, probably redeclaring problem
				error_attr_name = global_attribute_name;
				error_current_name = ed.getName(null);
				if (global_entity2 != null) {
					error_supertype_name = global_entity2.getName(null);
				}
//				error_count++;


		 // printError("redeclaring attribute \"" + error_attr_name + "\" in entity \"" + error_current_name + "\": the attribute not found in supertype entity \"" + error_supertype_name + "\" entity_name + "\"");

//				printError("redeclaring attribute \"" + error_attr_name + "\" in entity  \"" + error_current_name + "\": the attribute not found in the supertype entity \"" + error_supertype_name + "\"");

//RR
//				printErrorMsg("" + error_attr_name + " - redeclaring attribute in entity  \"" + error_current_name + "\": the attribute not found in the supertype entity \"" + error_supertype_name + "\"", null, true);
				
			}
		}
		if (parser_pass == 5) {
		}
	}
	Expression() ";")
	{
//		if (parser_pass > 3) {
		if ((parser_pass > 3) && (da != null)) {
			if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) {
				((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).setDomain(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
			} else
			if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
				((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).setDomain(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
			} else
			if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				if (da != null) {
					((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).setDomain(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);
				} else {
					printVerbose("ERROR, derived attribute da is NULL");
				}
//				((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).setDomain(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);
			} else 
			if (bt instanceof jsdai.SExtended_dictionary_schema.EParameter) {
				// generalized, the entity should be abstract, perhaps it could be checked.
				((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).setDomain(null, (jsdai.SExtended_dictionary_schema.EParameter)bt);
				
			}
			if (parser_pass == 5) {
			} 
		}
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.191------------ */
void DeriveClause(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{}
{
	<DERIVE> (DerivedAttr(ed))+
}
/* - LOOKAHEAD 2 or > - (Column 3) ---------------------------------------------------- ISO 10303-11:A.2.192------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict in [] construct (column 3).
		 Expansion nested within construct and expansion following construct have common prefixes,
		 one of which is <SIMPLE_ID>. Lookahead of 2 or more should be used for the nested expansion.
*/
jsdai.SExtended_dictionary_schema.EWhere_rule DomainRule(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException  :
{
	jsdai.SExtended_dictionary_schema.EWhere_rule wr = null;
	Object exp = null;
	Object pop_inst = null;
  String name = null;
}
{
		{
			printDebug("In DomainRule, parent: " + parent);
		}
		// lookahead 2 should be enough, because ":" confirms optional label
		([LOOKAHEAD(2) name = Label(){printDebug("Domain rule name: " + name);} ":"]
		{
			if (name == null) {
				// optional label missing
				no_label_nr++;
				name = "no_label_" + no_label_nr;
			}
			
			if (!domain_rule_labels.add(name)) {
				printErrorMsg("" + name + " - duplicate where rule label", null, true);
				error_count++;
			}
			if (parser_pass == 5) {
			} // pass 5
		}

		(LogicalExpression()) #DomainRuleLogicalExpression )
	{

		if (parser_pass == 5) {
		}
		printDebug("In DomainRule, ending: " + wr);
		return wr;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.193------------ */
void Element() throws jsdai.lang.SdaiException  :
{
	int rep = 1;
}
{
	{
		printDebug("In Element, starting");
	}
	Expression() [":" rep = Repetition()]
	{
		if (parser_pass == 5) {
		}
		printDebug("In Element, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.194 ------------ */
void EntityBody(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	{
		attribute_order_count = 0;
		explicit_attribute_order_count = 0;
		derived_attribute_order_count = 0;
		inverse_attribute_order_count = 0;
		where_rule_order_count = 0;
	}
}
{
	 (ExplicitAttr(ed))* [DeriveClause(ed)] [InverseClause(ed)] [UniqueClause(ed)]
	 [
	 {
		printDebug("before where clause, entity: " + ed.getName(null));
	 }WhereClause(ed)]
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.195------------ */
void EntityConstructor() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	int parameter_counter = 0;
	self_constructor = true;
}
{
	ed = EntityRef(null) "(" [EntityConstructorParameter(){parameter_counter++;} ("," EntityConstructorParameter(){parameter_counter++;})*] ")"  
	{
		if (parser_pass == 5) {
		}

		self_constructor = false;
	}
}

void EntityConstructorParameter() throws jsdai.lang.SdaiException :
{
}
{
	Expression()
} 

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.196 ------------ */
void EntityDecl()  throws jsdai.lang.SdaiException :
{
	{
		self_entity = true;
		printDebug("In EntityDecl, starting");
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	jsdai.SExtended_dictionary_schema.EEntity_definition ed;
}
{
try {
(
	ed = EntityHead() 
/*
		{
		  if (artificial_exception_thrown) {
		  	throw new ParseException();
		  }

		}
*/	
		EntityBody(ed) <END_ENTITY> 
	{
		active_scope = null;
if (active_scope_extension == null) {
	System.out.println("EntityDecl: active_scope_extension = NULL");
}
 		active_scope_string = active_scope_extension.getParent_scope_string();
	  active_scope_extension = active_scope_extension.getParent();
	
	}";"
	{
		printDebug("In EntityDecl, after parsing");
		current_scope = (Vector)scope_stack.pop();
		if (parser_pass == 5) {
		}
	}
)
} catch (ParseException e) {
		printDebug("In EntityDecl, in ParseException");
//	System.out.println("EXCEPTION: " + e);
	if (parser_pass == 1) {
//		printError(e.getMessage());
	
		if (!artificial_exception_thrown) {
			printErrorMsg(e.getMessage(), null, true);
			error_count++;
		}
		System.out.println("ERROR RECOVERY: skipping to END_ENTITY");
	}
	recoverFromParseException(END_ENTITY, e);
}
{
	self_entity = false;
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.197 ------------ */
jsdai.SExtended_dictionary_schema.EEntity_definition EntityHead() throws jsdai.lang.SdaiException:
{
	String entity_name;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	// have to change complex interface either to the corresponding complex class, or into EDeclaration - more general interface.
//      jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration eld;
	jsdai.SExtended_dictionary_schema.EDeclaration eld;
  Token a_token;
	boolean is_abstract_entity = false;
}
{
	/* <ENTITY> EntityId() [SubSuper()] ";" - In ISO, but [] expands to [[] []], so the outer [] not needed? (javaCC ERROR) */
	a_token = <ENTITY> entity_name = EntityId()
	{
		global_entity_name = entity_name.toLowerCase();
		printDebug("Current entity: " + entity_name);
		if (parser_pass == 1) {
			// check if an entity with this name already exists in the extent.
			artificial_exception_thrown = false;
			ed = findEntity_definition(entity_name, null);
			Token t = getToken(0);
			if (ed != null) {
					error_count++;
//					printError("duplicate entity name \"" + entity_name + "\" at line " + t.beginLine + ", column " + t.beginColumn);
					printErrorMsg("" + entity_name + " - duplicate entity name", null, true);
					artificial_exception_thrown = true;
					throw new ParseException();
			}       else {
				String wrong_name = findAnyName(entity_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + entity_name + "\". The same name used for an entity and for " + wrong_name + " at line " + t.beginLine + ", column " + t.beginColumn);
					printErrorMsg("" + entity_name + "  duplicate entity name, the name is already in use in the current scope", null, true);
				}
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_definition.class);
			  active_scope_extension = new ECtScope(active_scope, ed, active_scope_extension, active_scope_string, entity_name, entity_name.toLowerCase());
				active_scope = ed;
	  		active_scope_string = "";
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				eld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);

	if (sd == null) {
//              printDDebug("SD NULL, entity_name: " + entity_name + ", complex: " + is_complex_schema + ", pass: " + parser_pass);
	} else {
	}

				eld.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// eld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				eld.setDefinition(null, ed);
				hm_current_entity_declarations.put(entity_name.toLowerCase(), eld);
				if (flag_oc) {
					ed.setName(null, entity_name);
				} else {
          ed.setName(null, entity_name.toLowerCase());
				}
//                              ed.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				ed.setInstantiable(null, true); // later must be repalaced to true, must be true for all entities except ABSTRACT
		    ed.setIndependent(null, true); // we probably should work with declarations rather than with definition - if local or used from - true, if not - false
	if (is_complex_schema)
					ed.setComplex(null, true); // unnecessary, 0 by default
				else
					ed.setComplex(null, false); // unnecessary, 0 by default
				ed.setConnotational_subtype(null, false);
				ed.setAbstract_entity(null, false);
				ed.createGeneric_supertypes(null);
				// supertypes is now derived instead of explicit 
				// ed.createSupertypes(null);
				// now it is inverse.
				// ed.createWhere_rules(null);
				// no longer
				// ed.createExplicit_attributes(null);
			}
		}       else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper()
			ed = findEntity_definition(entity_name, null);
		  active_scope_extension = new ECtScope(active_scope, ed, active_scope_extension, active_scope_string, entity_name, entity_name.toLowerCase());
			active_scope = ed;
  		active_scope_string = "";
			if (ed == null) {
				error_count++;
				if (parser_pass == 2) {
					printErrorMsg("" + entity_name + " - entity not found", null, true);
//					printError("entity not found: " + entity_name);
				}
				printDebug("EntityHead - the entity not found: " + entity_name);
			}
		}
		createDocumentationEntity2(ed, a_token);
	}
		SubSuper(ed) ";"
//	SubSuperNoAbstract(ed) ";"
//   ( ";" | ( [ <ABSTRACT> {is_abstract_entity = true;}  ";" ] ) | ([SupertypeConstraint(ed)] [SubtypeDeclaration(ed)]  ";"))
	{
//	  if (parser_pass == 1) {
//	  	if (is_abstract_entity) {
//	  		ed.setInstantiable(null, false);
//			}
//	  }
		return ed;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.198 ------------ */
String EntityId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image.replace('$', '+'));
		} else {
			return (t.image.toLowerCase().replace('$', '+'));
		}
	}
}

/*--------- ISO 10303-14:B.2.74 ---*/
void EntityInstantiationLoop() throws jsdai.lang.SdaiException :
{
	boolean increment_like_present = false;
	String var_id = "";
}
{
	{
		printDebug("In EntityInstantiationLoop, starting");

		variable_uid++;
		var_id += "_implicit_" + variable_uid + "_";
		if (parser_pass == 5) {
			variable_id_stack.push(var_id);
		}
		
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	<FOR> increment_like_present = InstantiationLoopControl() ";" MapProjectClause()
	{


		if (parser_pass == 4) {
			if (increment_like_present) {
				active_scope_string = active_scope_extension.getParent_scope_string();
				active_scope_extension = active_scope_extension.getParent();
			}
		}
		current_scope = (Vector)scope_stack.pop();

		printDebug("In EntityInstantiationLoop, ending");
	}

}



/*-+-------- ISO 10303-14:B.2.75 ---*/
jsdai.SExtended_dictionary_schema.EEntity_definition EntityReference() throws jsdai.lang.SdaiException :
{
	String schema_name = null;
	String entity_name = null;
}
{
//      [ ( SourceSchemaRef() | TargetSchemaRef() | SchemaRef() ) "." ] EntityRef()

	{
		printDebug("In EntityReference, starting");
	}
	[ LOOKAHEAD(2) schema_name = InterpretedId() "."] entity_name = InterpretedId() 
	{
		printDebug("In EntityReference, ending,but before find method");
	        return findEntityReference(entity_name, schema_name);
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.199------------ */
String EnumerationId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/* - LOOKAHEAD 2 or > - (Column 3) ---------------------------------------------------- ISO 10303-11:A.2.200------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict in [] construct (column 3).
		 Expansion nested within construct and expansion following construct have common prefixes,
		 one of which is <SIMPLE_ID>. Lookahead of 2 or more should be used for the nested expansion.
*/

// grammar change is needed here
void EnumerationReference() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
}
{
	{
		printDebug("In EnumerationReference");
	}
	// lookahead 2 should be enough to confirm optional prefix, because of "."
	[LOOKAHEAD(2) dt = TypeRef(0) "."] EnumerationRef(dt)
//    (<SIMPLE_ID> ".")? <SIMPLE_ID>
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.201------------ */


// new 
void EnumerationType(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException:
{
	jsdai.SExtended_dictionary_schema.EEnumeration_type et = null;
	// String element;
	jsdai.lang.A_string elements = null;
	// int index = 1;
	boolean is_extensible = false;
	boolean is_extension = false;
	Vector elementz = new Vector();
	jsdai.SExtended_dictionary_schema.EDefined_type enum_super = null;
}
{
	[<EXTENSIBLE> {is_extensible = true;} ] <ENUMERATION> 
	{
		// changed from pass 4 to pass 1 in all 3 places.
    // better to use pass 3 for extensible selects with interfacing from other schemas.
	}
	[( ( <OF> elementz = EnumerationItems(elementz) ) | (enum_super = EnumerationExtension(elementz){is_extension = true;}))]
	{
		if (parser_pass == 3) {
			if (is_extensible) {
				if (is_extension) {
					// extended_enumeration_type+extensible_enumeration_type
						et = (jsdai.SExtended_dictionary_schema.EEnumeration_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtended_enumeration_type$extensible_enumeration_type.class);
				} else {
					// extensible_enumeration_type
					et = (jsdai.SExtended_dictionary_schema.EEnumeration_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtensible_enumeration_type.class);
				}
			} else {
				if (is_extension) {
					// extended_enumeration_type
						et = (jsdai.SExtended_dictionary_schema.EEnumeration_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtended_enumeration_type.class);
				} else {
					// enumeration_type - rather weird, perhaps we needed non-extensible enumeration type in dictionary too.
					et = (jsdai.SExtended_dictionary_schema.EEnumeration_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEnumeration_type.class);
				}
			}	
			et.setName(null, "_ENUMERATION_" + dt.getName(null));
//		elements = et.createElements(null);
			elements = et.createLocal_elements(null);

			// dt.setDomain(null, et); // why two times - se below

			for (int i = 0; i < elementz.size(); i++) {
				elements.addByIndex(i+1, (String)elementz.elementAt(i));
//				elements.addUnordered((String)elementz.elementAt(i));
			}
			if (isDTDomainValid(dt, et)) {
				dt.setDomain(null, et);
			} else {
				error_count++;
				printErrorMsg("" + dt.getName(null) + " - invalid underlying type", null, true);
			}	

			if (is_extension) {
				if (et instanceof jsdai.SExtended_dictionary_schema.EExtended_enumeration_type) {
					if (enum_super != null) {
						if (enum_super.testDomain(null)) {
		        	jsdai.SExtended_dictionary_schema.EEnumeration_type enum_super_domain = (jsdai.SExtended_dictionary_schema.EEnumeration_type)enum_super.getDomain(null);
		          if (enum_super_domain instanceof jsdai.SExtended_dictionary_schema.EExtensible_enumeration_type) {        				
//								((jsdai.SExtended_dictionary_schema.EExtended_enumeration_type)et).setIs_based_on(null, (jsdai.SExtended_dictionary_schema.EExtensible_enumeration_type)enum_super.getDomain(null));
								((jsdai.SExtended_dictionary_schema.EExtended_enumeration_type)et).setIs_based_on(null, enum_super);
							} else {
//								printError("enumeration type " + enum_super.getName(null) + " must be EXTENSIBLE: " + enum_super_domain);
                error_count++;							
								printErrorMsg("" + enum_super.getName(null) + " - enumeration type must be EXTENSIBLE: " + enum_super_domain, null, true);
								printDebug("The enumeration type: " + enum_super.getName(null) + " must be EXTENSIBLE: " + enum_super_domain);
							}
						} else {
						}
					} else {
						
					}
				} else {
					// something wrong here - internal error
				}
			}
		} else 
		if (parser_pass == 4) {
			et = (jsdai.SExtended_dictionary_schema.EEnumeration_type)dt.getDomain(null);
			if (is_extension) {
				if (et instanceof jsdai.SExtended_dictionary_schema.EExtended_enumeration_type) {
					if (enum_super != null) {
						if (enum_super.testDomain(null)) {
		        	jsdai.SExtended_dictionary_schema.EEnumeration_type enum_super_domain = (jsdai.SExtended_dictionary_schema.EEnumeration_type)enum_super.getDomain(null);
		          if (enum_super_domain instanceof jsdai.SExtended_dictionary_schema.EExtensible_enumeration_type) {        				
								if (!(((jsdai.SExtended_dictionary_schema.EExtended_enumeration_type)et).testIs_based_on(null))) {
//									((jsdai.SExtended_dictionary_schema.EExtended_enumeration_type)et).setIs_based_on(null, (jsdai.SExtended_dictionary_schema.EExtensible_enumeration_type)enum_super_domain);
									((jsdai.SExtended_dictionary_schema.EExtended_enumeration_type)et).setIs_based_on(null, enum_super);
								}
							} else {
                error_count++;							
								printErrorMsg("" + enum_super.getName(null) + " - enumeration type must be EXTENSIBLE: " + enum_super_domain, null, true);
								// printError("The enumeration type: " + enum_super.getName(null) + " must be EXTENSIBLE: " + enum_super_domain);
								printDebug("The enumeration type: " + enum_super.getName(null) + " must be EXTENSIBLE: " + enum_super_domain);
							}	
						} else {
						}
					} else {
						
					}
				} else {
					// something wrong here - internal error
				}
			}
		}
	}
}



// in this version, return  is no longer really needed
Vector EnumerationItems(Vector elementz) throws jsdai.lang.SdaiException :
{
	String element;
	int index = 1;
}
{
	"(" element = EnumerationId()
	{
		if (parser_pass == 3) {
			elementz.addElement(element);
		}
	}
	("," element = EnumerationId()
	{
		if (parser_pass == 3) {
			// duplicate element names are now allowed but evaluate to the same value
//			if (isEnumerationElementNotUnique(elements, element)) {
//				error_count++;
//				printError("duplicate enumeration element name \"" + element + "\" in enumeration: " + dt.getName(null));
//			}
			elementz.addElement(element);
		}
	}
	)* ")"
	{
		return elementz;
	}
}


// jsdai.lang.A_string EnumerationExtension(jsdai.SExtended_dictionary_schema.EDefined_type dt, jsdai.SExtended_dictionary_schema.EEnumeration_type et, jsdai.lang.A_string elements) throws jsdai.lang.SdaiException :
jsdai.SExtended_dictionary_schema.EDefined_type EnumerationExtension(Vector elementz) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EDefined_type enum_super = null;
}
{
	<BASED_ON> enum_super = TypeRef(0) [ <WITH> EnumerationItems(elementz)]
	{
	// further implementation depends on the approach	
		return enum_super;
	}
}



/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.202------------ */
void EscapeStmt() throws jsdai.lang.SdaiException  :
{}
{
	{
		printDebug("In EscapeStmt starting");
	}
	<ESCAPE> ";"
	{
		printDebug("In EscapeStmt ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.203------------ */
void ExplicitAttr(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute a;
	jsdai.SExtended_dictionary_schema.EExplicit_attribute ea = null;
	jsdai.SExtended_dictionary_schema.AExplicit_attribute aa = null;
	jsdai.lang.EEntity bt = null;
	int i = 1;
	boolean optional_flag = false;
	String error_attr_name = "";
	String error_current_name = "";
	String error_supertype_name = "";
}
{
	a = AttributeDecl(ed, 0) // 0 - explicit
	{

		if (parser_pass > 3) {
			if (a == null) {
				// attribute not found, probably redeclaring problem
				error_attr_name = global_attribute_name;
				error_current_name = ed.getName(null);
				if (global_entity2 != null) {
					error_supertype_name = global_entity2.getName(null);
				}
//				error_count++;
		 // printError("redeclaring attribute \"" + error_attr_name + "\" in entity \"" + error_current_name + "\": the attribute not found in supertype entity \"" + error_supertype_name + "\" entity_name + "\"");

//				printError("redeclaring attribute \"" + error_attr_name + "\" in entity  \"" + error_current_name + "\": the attribute not found in the supertype entity \"" + error_supertype_name + "\"");

//				printErrorMsg("" + error_attr_name + " - redeclaring attribute in entity  \"" + error_current_name + "\": the attribute not found in the supertype entity \"" + error_supertype_name + "\"", null, true);
				
			} else {
				if (!(a instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute)) {
					printWarningMsg("" + a.getName(null) + " - not explicit, in entity: " + ed.getName(null), null, true);
				}

			}
		}

		if (parser_pass >= 3) {
			if (a instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
				ea = (jsdai.SExtended_dictionary_schema.EExplicit_attribute)a;
			} else {
//				System.out.println("ExplicitAttr - not explicit - entity: " + ed + ", attribute: " + a);
				ea = null;
			}
			i = 1;
			aa = new jsdai.SExtended_dictionary_schema.AExplicit_attribute();
			if (ea != null) {
				aa.addByIndex(i++, ea);
			} else {
				printVerbose("ERROR: explicit attribute ea is NULL");
			}
		}
	}
	("," a = AttributeDecl(ed, 0)
	{
		if (parser_pass >= 3) {
			if (a instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
				ea = (jsdai.SExtended_dictionary_schema.EExplicit_attribute)a;
			} else {
				ea = null;
			}
//			ea = (jsdai.SExtended_dictionary_schema.EExplicit_attribute)a;
			if (ea != null) {
				aa.addByIndex(i++, ea);
			} else {
				printVerbose("ERROR: explicit attribute ea is NULL");
			}
		}
	}
	)*  ":" [<OPTIONAL> {optional_flag = true;}] bt = BaseType(a) ";" // was BaseType(null)
	{
		if (parser_pass >= 3) {
//System.out.println(">>>>> base type: " + bt);
			jsdai.lang.SdaiIterator attr_iter = aa.createIterator();
			while (attr_iter.next()) {
				ea = aa.getCurrentMember(attr_iter);
				if (bt == null) {
printDDebug("XP: ERROR - explicit atttribute daclaration, base type - null: " + ea.getName(null) + ", t: " + bt);
				} else
				if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) {
//System.out.println(">>>>> domain - simple type: " + bt);
					ea.setDomain(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
				} else
				if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
printDDebug("XP: explicit atttribute daclaration, base type - aggregate: " + ea.getName(null) + ", t: " + bt);
					ea.setDomain(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
				} else
				if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
printDDebug("XP: explicit atttribute daclaration, base type - named type: " + ea.getName(null) + ", t: " + bt);
					ea.setDomain(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);
				} else 
				if (bt instanceof jsdai.SExtended_dictionary_schema.EParameter) {
					// express amendment generalized base type issue
					ea.setDomain(null, (jsdai.SExtended_dictionary_schema.EParameter)bt);
				} else {
printDDebug("XP: ERROR - explicit atttribute daclaration, base type - unknown type: " + ea.getName(null) + ", t: " + bt);
				}
				ea.setOptional_flag(null, optional_flag);
//System.out.println("SET OPTIONAL 03, attribute: " + ea);
			}
		}
//	System.out.println("@@@33 ending: entity: " + ed + ", attribute: "  + ea);

	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.204------------ */
X_Expression Expression() throws jsdai.lang.SdaiException :
// void Expression() throws jsdai.lang.SdaiException :
{
	Object operand1 = null;
	Object operand2 = null;
	Object result = "";
	String x_operand1 = "";
	String x_operand2 = "";
	double op1double;
	double op2double;
	int op1int;
	int op2int;
	int operation = 0;
	String x_result = "";
	int op_nr = 0;
	int nr_of_operands = 0;
}
{
	{
		printDebug("In Expression before SimpleExpression");
	}
		(
		SimpleExpression()
	{
		printDebug("In Expression after SimpleExpression");
		if (parser_pass == 5) {
		}
	}
	// without lookahead, "<" is ambiguous, although I do not imagine "<" in other situations in correct schemas?
	// even in theory, a backward path qualifier "<-" is not the reason there, perhaps some issues with nesting
	// adding lookahead 2 mostly to suppress the warning, will see later
	[ LOOKAHEAD(2) operation = RelOpExtended()
	SimpleExpression()
	{
		printDebug("In Expression after the second SimpleExpression");

		if (parser_pass == 5) {
		}
	}
	]
	)
	{
		if (parser_pass == 5) {
		}
		return null;
	}
}

/*--------- ISO 10303-14:B.2.79 ---*/
void ExpressionOrWild() throws jsdai.lang.SdaiException :
{}
{
	Expression() | <OP_UNDERSCORE>
}

/*--------- ISO 10303-14:B.2.80 ---*/
jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ExtentReference() throws jsdai.lang.SdaiException :
{
	String schema_name = null;
	String object_name = null;
}
{
//      SourceEntityReference() | ViewReference()

	[ LOOKAHEAD(2) schema_name = InterpretedId() "."] object_name = InterpretedId() 
	{
	        return findEntity_or_view_definition(object_name, schema_name);
	}
		
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.205------------ */
void Factor() throws jsdai.lang.SdaiException :
{
	Object operand1 = null;
	Object operand2 = null;
	String x_operand1 = "";
	String x_operand2 = "";
	String x_result = "";
	boolean power_present = false;
}
{
	{
		printDebug("In Factor before SimpleFactor");
	}
	(SimpleFactor()
	{
		printDebug("In Factor after SimpleFactor");
		if (parser_pass == 5) {
		}
	}
	 // seems to be an issue with nested grammar, lookahead 2 added to suppress the warning, otherwise should be OK
	 [ LOOKAHEAD(2) ( "**" SimpleFactor()
	{
		power_present = true;
		printDebug("In Factor after second SimpleFactor");
		if (parser_pass == 5) {
		}
	}
	 )])
	{
		if (parser_pass == 5) {
		}
	}
}

/*--------- ISO 10303-14:B.2.82 ---*/
void ForeachExpr() throws jsdai.lang.SdaiException :
{
	ECtVariable var = null;
	String variable_id = null;
	jsdai.lang.EEntity variable_parameter_type = null;
	jsdai.SExtended_dictionary_schema.EParameter variable_type = null;
	String var_id = "";
	String variable_key = "";

}
{
{
		printDebug("In ForEachExpr, starting");
		variable_uid++;
//		System.out.println("<OOO> In ForEachExpr, starting in pass: " + parser_pass + ", variable_uid: " + variable_uid);
		var_id += "_implicit_" + variable_uid + "_";
		scope_stack.push(current_scope);
		current_scope = new Vector();

}
//	<EACH> VariableId() <IN> Expression() [ WhereClause(null) ] <RETURN> MapAttrAssgnmtExpr()

//	<EACH> variable_id = VariableId() <IN> Expression() [ WhereClause(active_scope) ] <RETURN> Expression()
	<EACH> variable_id = VariableId()
{

		if (parser_pass == 4) {

// System.out.println("<OAO> In ForEachExpr, starting in pass: " + parser_pass + ", variable_uid: " + variable_uid + ", variable_id: " + variable_id);


			variable_type = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);

			variable_type.setName(null, "_implicit_variable_");

			// variable_type.setParameter_type(....)  -- TODO if needed 
			
		  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension, active_scope_string, "" + variable_uid, variable_id);
 			active_scope_string = "";
//			active_scope = null;  // not using on schema level (yet)

			variable_key = constructImplicitVariableKey(variable_id, variable_uid);

// System.out.println("<--ForEachExpr--> - constructing variable_key: " + variable_key + ", variable_id: " + variable_id + ", variable_uid: " + variable_uid);

//			var = new ECtVariable(variable_id, variable_type, function_depth, variable_key, active_scope, true, 1, (String)variable_id_stack.peek());
			var = new ECtVariable(variable_id, variable_type, function_depth, variable_key, active_scope, true, 1, "");
//			var = new ECtVariable(variable_id, variable_type, (String)variable_id_stack.peek());

			if (variable_key != null) {
				if (!(hm_current_variables.containsKey(variable_key))) {
					hm_current_variables.put(variable_key, var);
				} else {
					// error - perhaps more than one variable with the same name in a function
				}
			} else {
				System.out.println("INTERNAL ERROR - ImplicitVariable in ForEachExpr: " + variable_id + "  - wrong active scope: " + active_scope);
			}


			current_scope.addElement(var);

			if (expression_instances) {
				// pop_inst_aggr_src = expression_stack.pop();
			}
		} else { // other passes - added to handle interpreted IDs

//		  active_scope_extension = new ECtScope(active_scope, active_scope, active_scope_extension, active_scope_string, "query_expression$", variable_id));
// 			active_scope_string = "";

			var = new ECtVariable(variable_id, variable_type);
			current_scope.addElement(var);

		}


}
<IN> Expression() 
{
}
[ WhereClause(active_scope) ] 
{
}
<RETURN> Expression()
{
		current_scope = (Vector)scope_stack.pop();
		// variable_id_stack.pop(); // for pass 5 only if at all

		if (parser_pass == 4) {
	 		active_scope_string =  active_scope_extension.getParent_scope_string();
			active_scope_extension = active_scope_extension.getParent();
		}
		printDebug("In ForEachExpr, ending");
}
}


/*--------- ISO 10303-14:B.2.83 ---*/
void ForloopExpr() throws jsdai.lang.SdaiException :
{

	Object operand = null;
	String var_id = "";
	boolean increment_present = false;
}
{
	{
		variable_uid++;
		var_id += "_implicit_" + variable_uid + "_";
		if (parser_pass == 5) {
			variable_id_stack.push(var_id);
		}
		printDebug("In ForLoopExpr, starting");
		
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	// RepeatControl() <RETURN> MapAttrAssgnmtExpr()
	increment_present = RepeatControl() <RETURN> Expression()
{


		if (parser_pass == 4) {
			if (increment_present) {
				active_scope_string = active_scope_extension.getParent_scope_string();
				active_scope_extension = active_scope_extension.getParent();
			}
		}
		current_scope = (Vector)scope_stack.pop();
		if (parser_pass == 5) {
			variable_id_stack.pop();
		}
		printDebug("In ForLoopExpr, ending");
	

//		current_scope = (Vector)scope_stack.pop();

}


}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.206------------ */
jsdai.lang.EEntity FormalParameter(jsdai.SExtended_dictionary_schema.AParameter parameters, boolean var_present, /* jsdai.SSdai_expressions_schema.AVariable fp_parameters,*/ jsdai.lang.EEntity owner) throws jsdai.lang.SdaiException :
{
	String par_name;
	Vector par_names = new Vector();
	jsdai.lang.EEntity pt = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	// jsdai.SSdai_expressions_schema.EEntity_variable ev = null;
	int parameter_counter = 0;
	jsdai.SExtended_dictionary_schema.EParameter par2 = null;
}
{
	{
		printDebug("In FormalParameter, starting");
	}
	par_name = ParameterId()
	{
		parameter_counter++;
		par_names.addElement(par_name);
	}
	 ("," par_name = ParameterId()
	 {
			parameter_counter++;
			par_names.addElement(par_name);
	 }
	 )* ":" par = ParameterType()
	{
		if (parser_pass == 5) {
			if (parameters != null) {
// printDDebug("Last parameter name: " + par_name);
if (par == null) {
;//     printDDebug("par is NUL");
} else {
;//     printDDebug("par is NOT null");
}
if (par_names == null) {
;//     printDDebug("par_names is NUL");
} else {
;//     printDDebug("par_names is NOT null, number: " + par_names.size());
}

				if (par != null) {
					par.setName(null, (String)par_names.elementAt(0));

					current_scope.addElement(par);
					parameters.addByIndex(parameters.getMemberCount()+1,par);
					for (int i = 1; i < parameter_counter; i++) {
						par2 = (jsdai.SExtended_dictionary_schema.EParameter)par.copyApplicationInstance(model);
						par2.setName(null, (String)par_names.elementAt(i));
						current_scope.addElement(par2);
						parameters.addByIndex(parameters.getMemberCount()+1, par2);
					}
				} else {
					printVerbose("ERROR: formal parameter par NULL");
				}
			}
			if (expression_instances) {
				if (pt != null) {
					if (pt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
						for (int i = 0; i < par_names.size(); i++) {
							String par_name1 = (String)par_names.elementAt(i);
						  // ev = (jsdai.SSdai_expressions_schema.EEntity_variable)expression_model.createEntityInstance(jsdai.SSdai_expressions_schema.CEntity_variable.class);
							// ev.setOwner(null, owner);
							// ev.setVariable_name(null, par_name1);
							// ev.setDefinition(null, (jsdai.SExtended_dictionary_schema.EEntity_definition)pt);
		// fp_parameters.addByIndex(fp_parameters.getMemberCount()+i+1, ev);
							// current_scope.addElement(ev);
	    }
					} else {
						printDebug("In Formal Parameter - not entity");
					}
				}
			}
		}
		
		printDebug("In FormalParameter, ending");
		return pt; // really needed at all?
	}
}

/*--------- ISO 10303-14:B.2.85 ---*/
void ForwardPathQualifier() throws jsdai.lang.SdaiException :
{}
{
	// choice conflict "{" but interval hear for correct schema does not seem possible, adding lookahead just in case and
	// to suppress the warning 
//	<FPATH> AttributeRef(null, null, -1, null) [ LOOKAHEAD(PathCondition()) PathCondition() ]
	"::" AttributeRef(null, null, -1, null) [ LOOKAHEAD(PathCondition()) PathCondition() ]
}

/*-+-------- ISO 10303-14:B.2.86 ---*/
void ForExpr() throws jsdai.lang.SdaiException :
{}
{

	<FOR> ( ForeachExpr() | ForloopExpr() )

}

/*-+-------- ISO 10303-14:B.2.87 ---*/
void FromClause(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In FromClause, starting, parent: " + parent);
		from_order_count = 0;
	}
	<FROM> ( SourceParameter(parent) ";" )+
	{
printDebug("In FromClause, ending");
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.207------------ */
Object FunctionCall() throws jsdai.lang.SdaiException  :
{
	int built_in_id = -1;
	Vector arguments = new Vector();
	Vector expressions = new Vector();
	int arg_count = -1;
	Object result = null;
	Object function_instance = null;
	jsdai.SExtended_dictionary_schema.EFunction_definition fd = null;

	// jsdai.SIso13584_expressions_schema.EAbs_function abs_f = null;
}
{
	{
		printDebug("Starting FunctionCall");
	}
	// choice conflict, "(" in optional parameter list, but I don't think the other case can happen in correct schemas.
	// removing this lookahead in pass 5 fixes an error in e certain long form schema
	// here, removing of this lookahead is not needed
	((built_in_id = BuiltInFunction() | fd = FunctionRef()) [ LOOKAHEAD(ActualParameterList(arguments, expressions)) arg_count = ActualParameterList(arguments, expressions)])
//	((built_in_id = BuiltInFunction() | fd = FunctionRef()) [ arg_count = ActualParameterList(arguments, expressions)])

	{
		if (parser_pass == 1) {
			switch (built_in_id) {
				case -1: // not a built in function
					break;
				case  0: // unknown built in function, internal error
					break;
				case  1: // ABS - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ABS", null, true);
						
					}
					// create instance of abs_function, assign it to function_instance variable.
					// set the operand attribute with the value from expressions (Parameter5 from ActualParameterList5() - extract the first Element5 of Vector)
					if (expression_instances) {
// printDebug("before creating abs_function instance");
						// abs_f = (jsdai.SIso13584_expressions_schema.EAbs_function)expression_model.createEntityInstance(jsdai.SIso13584_expressions_schema.CAbs_function.class);
// printDebug("after creating abs_function instance");
						// Object arg_inst = expressions.elementAt(0);
						// if (arg_inst instanceof jsdai.SIso13584_expressions_schema.ENumeric_expression) {
							// abs_f.setOperand(null, (jsdai.SIso13584_expressions_schema.ENumeric_expression)arg_inst);
						// } else {
							// printError("INSTANTIATING EXPRESSIONS: ABS built-in function argument is not a numeric_expression");
						// }
						// function_instance = abs_f;
					}
					break;
				case  2: // ACOS - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ACOS", null, true);
						
					}
					// acos_function
					break;
				case  3: // ASIN - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ASIN", null, true);
						
					}
					// asin_function
					break;
				case  4: // ATAN - 2
					if (arg_count != 2) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ATAN", null, true);
						
					}
					break;
				case  5: // BLENGTH - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function BLENGTH", null, true);
						
					}
					break;
				case  6: // COS  - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function COS", null, true);
						
					}
					// cos_function
					break;
				case  7: // EXISTS  - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function EXISTS", null, true);
						
					}
					break;
				case  8: // EXP - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function EXP", null, true);
						
					}
					// exp_function
					break;
				case  9: // FORMAT - 2
					if (arg_count != 2) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function FORMAT", null, true);
						
					}
					break;
				case 10: // HIBOUND - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function HIBOUND", null, true);
						
					}
					break;
				case 11: // HIINDEX - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function HIINDEX", null, true);
						
					}
					break;
				case 12: // LENGTH - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LENGTH", null, true);
						
					}
					break;
				case 13: // LOBOUND  - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LOBOUND", null, true);
						
					}
					break;
				case 14: // LOINDEX - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LOINDEX", null, true);
						
					}
					break;
				case 15: // LOG - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LOG", null, true);
						
					}
					// log_function
					break; 
				case 16: // LOG2 - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LOG2", null, true);
						
					}
					// log2_function
					break;
				case 17: // LOG10 - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LOG10", null, true);
						
					}
					// log10_function
					break;
				case 18: // NVL - 2
					if (arg_count != 2) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function NVL", null, true);
						
					}
					break;
				case 19: // ODD - 1 
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ODD", null, true);
						
					}
					break;
				case 20: // ROLESOF - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ROLESOF", null, true);
						
					}
					break;
				case 21: // SIN - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function SIN", null, true);
						
					}
					break;
				case 22: // SIZEOF - 1
					if (arg_count != 1) {
System.out.println("argument count: "  + arg_count);
						error_count++;
//						printErrorMsg5("function call has wrong number of arguments for built-in function SIZEOF", null, true);
System.out.println("> argument count: "  + arg_count);
						printErrorMsg5("function call has wrong number of arguments for built-in function SIZEOF: " + arg_count, null, true);
System.out.println(">> argument count: "  + arg_count);
						
					}
					break;
				case 23: // SQRT - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function SQRT", null, true);
						
					}
					// square_root_function
					break;
				case 24: // TAN - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function TAN", null, true);
						
					}
					// tan_function
					break;
				case 25: // TYPEOF - 1 parameter
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function TYPEOF", null, true);
						
					}
					break;
				case 26: // USEDIN  - 2 parameters
					if (arg_count != 2) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function USEDIN", null, true);
						
					}
					break;
				case 27: // VALUE - 1 parameter
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function VALUE", null, true);
						
					}
					break;
				case 28: // VALUE_IN - 2  parameters
					if (arg_count != 2) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function VALUE_IN", null, true);
						
					}
					break;
				case 29: // VALUE_UNIQUE - 1 parameter
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function VALUE_UNIQUE", null, true);
						
					}
					break;
				case 30: // EXTENT - ?  - this is Express X, look up the number of parameters
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has a wrong number of arguments for built-in function EXTENT", null, true);
					}
					break;
				default: // must be an internal error.
					break;
			}
		}
		return result;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.208------------ */
void FunctionDecl() throws jsdai.lang.SdaiException  :
{
	jsdai.SExtended_dictionary_schema.EFunction_definition fd = null;
}
{
try {
(
	{
		printDebug("In FunctionDecl, starting");
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}


	fd = FunctionHead()     AlgorithmHead() (Stmt())+ #ListOfStmt <END_FUNCTION> 
	{
		function_depth--; 
		if (function_depth > 0) {
			active_scope = getParentFunctionProcedureRuleDefinition(fd);
  		active_scope_string = active_scope_extension.getParent_scope_string();
		  active_scope_extension = active_scope_extension.getParent();
		} else {
			active_scope = null;
  		active_scope_string = active_scope_extension.getParent_scope_string();
		  active_scope_extension = active_scope_extension.getParent();
		}
	} ";"

//      fd = FunctionHead()     AlgorithmHead() (Stmt())+ <END_FUNCTION> {function_depth--; active_scope = null;}";"
/*  FunctionHead() [AlgorithmHead()] (Stmt())+ <END_FUNCTION> ";"  - [ ()* [] [] ] javaCC ERROR */

	{
		current_scope = (Vector)scope_stack.pop();
		printDebug("In FunctionDecl, ending");
		if (parser_pass == 5) {
		}
	}
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	if (parser_pass == 1) {
//		printError(e.getMessage());
		printErrorMsg(e.getMessage(), null, true);
		error_count++;
		System.out.println("ERROR RECOVERY: skipping to END_FUNCTION");
	}
	recoverFromParseException(END_FUNCTION, e);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.209------------ */
jsdai.SExtended_dictionary_schema.EFunction_definition FunctionHead() throws jsdai.lang.SdaiException :
{
	String name = null;
	jsdai.SExtended_dictionary_schema.EFunction_definition fd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration fund;
	// jsdai.SSdai_expressions_schema.EExpress_function ef = null;
	// jsdai.SSdai_expressions_schema.AVariable ef_parameters = null;
	jsdai.SExtended_dictionary_schema.EParameter rpt = null;
//      jsdai.lang.EEntity rt = null;
	jsdai.SExtended_dictionary_schema.EData_type rt = null;
	jsdai.SExtended_dictionary_schema.AParameter parameters = null;
	Token start_token = null; 
	Token end_token = null;
	boolean first_token = true;
	String key = "";
}
{
	{
		printDebug("In FunctionHead, starting");
	}
	<FUNCTION> {function_depth++;} name = FunctionId()
	{
		if ((parser_pass == 5) && (function_depth > 1)){
//			printWarning("nested functions not yet supported. Inner function: " + name + " in " + active_scope);

// now supported
//			printWarningMsg("" + name + " - inner function, nested functions not yet supported. Inner function", null, true);
		}
		if (parser_pass == 1) {
			printVerbose("Function: " + name);
			// construct full name: outer$inner
			
//			fd = findFunction_definition(name);
			fd = findFunction_definitionX(name);
			Token t = getToken(0);
			if (fd != null) {
						error_count++;
//						printError("duplicate function name \"" + name + "\" at line " + t.beginLine + ", column " + t.beginColumn);
						printErrorMsg("" + name + " - duplicate function name", null, true);
			} else {
				String wrong_name = findAnyName(name);
				if (wrong_name != null) {
						error_count++;
//						printError("duplicate name \"" + name + "\". The same name used for a function and for " + wrong_name + " at line " + t.beginLine + ", column " + t.beginColumn);
						printErrorMsg("" + name + " - duplicate function name, the same name is already in use in the current scope", null, true);
				}
			}
		  if (function_depth == 1) {
				fd = (jsdai.SExtended_dictionary_schema.EFunction_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_definition.class);
				fund = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_declaration$local_declaration.class);
				fund.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					// fund.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				fund.setDefinition(null, fd);
			  active_scope_extension = new ECtScope(active_scope, fd, active_scope_extension, active_scope_string, name, name.toLowerCase());
				active_scope = fd;
	  		active_scope_string = "";
				hm_current_function_declarations.put(name.toLowerCase(), fund);
				if (flag_oc) {
					fd.setName(null, name);
				} else {
					fd.setName(null, name.toLowerCase());
				}
				parameters = fd.createParameters(null);
			} else {

				fd = (jsdai.SExtended_dictionary_schema.EFunction_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_definition.class);
				fund = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_declaration$inner_declaration.class);
				fund.setDefinition(null, fd);
				fund.setParent(null, sd);
				if ((active_scope instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) || 
						(active_scope instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule)) {
					((jsdai.SExtended_dictionary_schema.EInner_declaration)fund).setScope(null,active_scope);
					key = constructFunctionKey(name);
				} else {
					// probably inner functions on the same level in parallel
System.out.println("ATTENTION! scope not set: " + fund);
				 key = name.toLowerCase();
				}
			  active_scope_extension = new ECtScope(active_scope, fd, active_scope_extension, active_scope_string, name, key);
				active_scope = fd;
	  		active_scope_string = "";
								// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					// fund.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				hm_current_function_declarations.put(key, fund);
				if (flag_oc) {
					fd.setName(null, name);
				} else {
					fd.setName(null, name.toLowerCase());
				}
				parameters = fd.createParameters(null);


			}
		} else {
			if (function_depth == 1) {
//				fd = findFunction_definition(name);
				fd = findFunction_definitionX(name);
			  active_scope_extension = new ECtScope(active_scope, fd, active_scope_extension, active_scope_string, name, name.toLowerCase());
				active_scope = fd;
	  		active_scope_string = "";
				if (fd == null) {
					error_count++;
					if (parser_pass == 2) {
//						printError("function not found: " + name);
						printErrorMsg("" + name + " - function not found", null, true);
					}
					printDebug("FunctionHead - function not found: " + name);
				} else {
					parameters = fd.getParameters(null);
				}
			} else {

//				fd = findFunction_definition(name);
				fd = findFunction_definitionX(name);
			  active_scope_extension = new ECtScope(active_scope, fd, active_scope_extension, active_scope_string, name, constructFunctionKey(name));
				active_scope = fd;
	  		active_scope_string = "";
				if (fd == null) {
//					error_count++;
//					printErrorMsg5("" + name + " - function not found", null, true);
					printDebug("FunctionHead5 - function not found: " + name);
				} else {
					parameters = fd.getParameters(null);
				}
			
			
			}
			if (parser_pass == 5) {
				if (expression_instances) {
				  // ef = (jsdai.SSdai_expressions_schema.EExpress_function)expression_model.createEntityInstance(jsdai.SSdai_expressions_schema.CExpress_function.class);
					// ef.setDefinition(null, fd);
					// ef_parameters = ef.createParameters(null);
				}
			}
		}
	}
	 ["(" FormalParameter(parameters, false, /* ef_parameters, ef*/ null) (";" FormalParameter(parameters, false, /* ef_parameters, ef */ null))* ")"] ":" rpt = ParameterType() ";"
	{
		if (parser_pass == 5) {
//                      jjtThis.name = name;
			if (rpt != null) {
				if (rpt.testParameter_type(null)) {
					rt = rpt.getParameter_type(null);
				} else {
		  			printDDebug("Oo> parameter_type unset in function_head: " + name);
		  		}
			}
//                      jjtThis.return_type = rt;
			if (fd != null) {
				if (rt != null) {
					fd.setReturn_type(null, rt);
				} else {
					printDDebug("In FunctionHead, rt is NULL, function: " + name); 
				}
			}
			printVerbose("Function: " + name);
			if (expression_instances) {
				// if (rt != null) {
					// if (rt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) {
						// ef.setReturn_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)rt);
					// } else
					// if (rt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
						// ef.setReturn_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)rt);
					// }
				// }
			}
			if (function_depth == 1) {
//				String function_description = "";
				String function_description = " ";
				int local_function_depth = 1;
			for (int i = 1; ; i++) {
					Token t = getToken(i);
					if (t.kind == FUNCTION) {
						local_function_depth++;
					}
					if (t.kind == END_FUNCTION) {
						local_function_depth--;
						if (local_function_depth == 0) {
						 // printDDebug("Break, function depth: " + local_function_depth);
						 break;
						} else {
						 ; // printDDebug("Continue, function depth: " + local_function_depth);
						}

					}
					if (first_token) {
						start_token = t;
						end_token = t;
						first_token = false;
					} else {
						end_token = t;
					}
					// is it really needed to convert to lowercase here?
					if (flag_oc) {
						function_description += t.image + " ";
					} else {
						function_description += t.image.toLowerCase() + " ";
					}
//					function_description += t.image;
			}
				// printDDebug("Function: " + function_description);
				createExpressEntity(fd, function_description, start_token, end_token);
//				createExpressEntity(fd, function_description);
			}
		}

		printDebug("In FunctionHead, ending: " + name);
		// return ef;
		return fd;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.210------------ */
String FunctionId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
// printDDebug("## FUNCTION: " + t.image.toLowerCase());
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.211------------ */
// extended - GenericEntityType ----

jsdai.SExtended_dictionary_schema.EParameter GeneralizedTypes(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	// jsdai.lang.EEntity gt = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.lang.EEntity ae = null;
}
{
	{
		printDebug("In GeneralizedTypes, starting");
	}
	( par = GenericEntityType() |  par = AggregateType() | par = GeneralAggregationTypes() | par = GenericType() )
	{
		printDebug("In GeneralizedTypes, ending: " + par + ", in pass: " + parser_pass);
		return par;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.212------------ */
jsdai.SExtended_dictionary_schema.EParameter GeneralAggregationTypes() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter par = null;
}
{
	{
		printDebug("In GeneralAggregationTypes, starting");
	}
	(par = GeneralArrayType() | par = GeneralBagType() | par = GeneralListType() | par = GeneralSetType())
	{
		printDebug("In GeneralAggregationTypes, ending");
		return par;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.213------------ */
jsdai.SExtended_dictionary_schema.EParameter GeneralArrayType() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter result = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.SExtended_dictionary_schema.EArray_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	String bound_name;
	jsdai.lang.EEntity bt;
	boolean optional = false;
	boolean unique = false;
}
{
	{
		printDebug("In GeneralArrayType, starting");
	}
	<ARRAY> [bounds = BoundSpec()] <OF> [<OPTIONAL> {optional = true;}] [<UNIQUE> {unique = true;}] par = ParameterType()
	{
		if (parser_pass == 5) {
			at = (jsdai.SExtended_dictionary_schema.EArray_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CArray_type.class);
			bound_name = getBoundString(1, bounds, optional, unique);
			at.setName(null, "_GENERALARRAY" + bound_name + _data_type_name);
			_data_type_name = "_GENERALARRAY"  + bound_name + _data_type_name;
			// better check these bounds for array
			if (bounds[0] == null) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			}
			at.setLower_index(null, bounds[0]);
			if (bounds[1] != null) {
				at.setUpper_index(null, bounds[1]);
			}	else {
//				printWarning("Undefined upper index of an array");
				printWarningMsg("" + "" + " - undefined upper index of an array", null, true);
				printDebug("Undefined upper index of an array");
//      at.unsetUpper_index(null);  // no need for that it is unset after creating
			}
			// set element_type
			at.setUnique_flag(null, unique);
			at.setOptional_flag(null, optional);
// System.out.println("SET OPTIONAL 04, attribute: " + at);
			if (par.testParameter_type(null)) {
				at.setElement_type(null, par.getParameter_type(null));
			} else {
		  		printDDebug("Oo> parameter_type unset in general_array_type: ARRAY OF " + par);
		  	}
//                      bt = par.getParameter_type(null);
//                      if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type)
//                              at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//                      else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type)
//                              at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//                      else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//                              at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			result = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			result.setParameter_type(null, at);
			result.setName(null, "_general_array_type_");

		}
		printDebug("In GeneralArrayType, ending");
		return result;
	}
}

/*--------- ISO 10303-14:B.2.95 ---*/
void GeneralAttributeQualifier() throws jsdai.lang.SdaiException :
{}
{
//      "." ( AttributeRef(null, null, -1, null) | ViewAttributeRef() )
	// better add parameter value for ViewAttributeRef
	"." ( AttributeRef(null, null, -1, null) )
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.214------------ */
jsdai.SExtended_dictionary_schema.EParameter GeneralBagType() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter result = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.SExtended_dictionary_schema.EBag_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	String bound_name;
	int bound_value;
	jsdai.lang.EEntity bt;
}
{
	{
		printDebug("In GeneralBagType, starting");
	}
	<BAG> [bounds = BoundSpec()] <OF> par = ParameterType()
	{
//System.out.println("<RR>generalbag element type: " + par + ", pass: " + parser_pass);
		if (parser_pass == 5) {

			boolean must_create = false;
			if (bounds[1] != null) {
				if (bounds[1] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[1]).getBound_value(null);
					if (bound_value != Integer.MIN_VALUE) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}
			if (bounds[0] != null) {
				if (bounds[0] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[0]).getBound_value(null);
					if (bound_value != 0) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}

			if (par != null) {
				if (par.testParameter_type(null)) {			
					if (par.getParameter_type(null) != _st_generic) {
						must_create = true;
					}
		  	} else {
		  		// why unset?
		  		must_create = true;
		  	}
		  } else {
		    // not standart type, but, on the other hand, something wrong here
		  	must_create = true;
		  }
			
			if (must_create) {


			at = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
			bound_name = getBoundString(0, bounds, false, false);
			at.setName(null, "_GENERALBAG" + bound_name + _data_type_name);
			_data_type_name = "_GENERALBAG" + bound_name + _data_type_name;
			if (bounds[0] == null) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			}
			at.setLower_bound(null, bounds[0]);
			if (bounds[1] != null) {
				at.setUpper_bound(null, bounds[1]);
			}	else {
				at.unsetUpper_bound(null);  // no need for that it is unset after creating
			}
			// set element_type
			if (par.testParameter_type(null)) {
				at.setElement_type(null, par.getParameter_type(null));
			} else {
		  		printDDebug("Oo> parameter_type unset in general_bag_type: BAG OF " + par);
		  	}

		  } else {
		  	at = _st_bag_generic;
//				_data_type_name = "_BAG_GENERIC";
				_data_type_name = "_GENERALBAG_0_GENERIC";
		  }


//      bt = par.getParameter_type(null);
//	    if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type)
//  	    at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//      else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type)
//  	    at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//      else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//    	  at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			result = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			result.setParameter_type(null, at);
			result.setName(null, "_general_bag_type_");
		}


		printDebug("In GeneralBagType, ending");
		return result;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.215------------ */
jsdai.SExtended_dictionary_schema.EParameter GeneralListType() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter result = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.SExtended_dictionary_schema.EList_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	String bound_name;
	int bound_value;
	jsdai.lang.EEntity bt;
	boolean unique = false;
}
{
	{
		printDebug("In GeneralListType, starting");
	}
	<LIST> [bounds = BoundSpec()] <OF> [<UNIQUE> {unique = true;}] par = ParameterType()
	{
		if (parser_pass == 5) {

			boolean must_create = false;
			if (unique) {
				must_create = true;
			}
			if (bounds[1] != null) {
				if (bounds[1] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[1]).getBound_value(null);
					if (bound_value != Integer.MIN_VALUE) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}
			if (bounds[0] != null) {
				if (bounds[0] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[0]).getBound_value(null);
					if (bound_value != 0) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}

			if (par != null) {
				if (par.testParameter_type(null)) {			
					if (par.getParameter_type(null) != _st_generic) {
						must_create = true;
					}
		  	} else {
		  		// why unset?
		  		must_create = true;
		  	}
		  } else {
		    // not standart type, but, on the other hand, something wrong here
		  	must_create = true;
		  }
			
			if (must_create) {


			at = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
printDDebug(".oO0Oo. LIST TYPE CREATED - GeneralListType pass 4");
			bound_name = getBoundString(2, bounds, false, unique);
			at.setName(null, "_GENERALLIST" + bound_name + _data_type_name);
			_data_type_name = "_GENERALLIST"  + bound_name + _data_type_name;
			if (bounds[0] == null) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			}
			at.setLower_bound(null, bounds[0]);
			if (bounds[1] != null) {
				at.setUpper_bound(null, bounds[1]);
			} else {
				at.unsetUpper_bound(null);  // no need for that it is unset after creating
			}
			// set element_type
			at.setUnique_flag(null, unique);
			if (par.testParameter_type(null)) {
				at.setElement_type(null, par.getParameter_type(null));
		  	} else {
//		  		printDDebug("Oo> parameter_type unset i_type: LIST OF " + par);
		  	}


		  } else {
		  	at = _st_list_generic;
//				_data_type_name = "_LIST_GENERIC";
				_data_type_name = "_GENERALLIST_0_GENERIC";
		  }

//    bt = par.getParameter_type(null);
//    if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type)
//	    at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//    else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type)
//  	  at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//    else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//    	at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			result = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			result.setParameter_type(null, at);
			result.setName(null, "_general_list_type_");
		}


		printDebug("In GeneralListType, ending");
		return result;
	}
}

/*-+-------- ISO 10303-14:B.2.98 ---*/
// not needed 
Object GeneralOrMapCall() throws jsdai.lang.SdaiException :
{
	Token t = null;
	jsdai.SExtended_dictionary_schema.ETarget_parameter tp = null;
	Object reference = null;
	String name = null;
}
{
	{
		printDebug("In GeneralOrMapCall, starting");
	}
	// GeneralRef() [ <MANO_BURBULAS> Map		Call() ]

//	[ LOOKAHEAD({isTargetParameterRef(this)})tp = TargetParameterRef() <OP_AT> ] reference = MapCall(tp) 
	[ LOOKAHEAD(<SIMPLE_ID> <OP_AT>) t = <SIMPLE_ID> <OP_AT> 
	{
		if (t != null) {
			name = t.image;
		}
	}
//	] reference = MapCall(name) 
	] reference = MapCall() 
	{
		printDebug("In GeneralOrMapCall, ending");
		return reference;
	}
}
// not needed anymore

/* - LOOKAHEAD 2 - (Columns 3 & 20) --------------------------------------------------- ISO 10303-11:A.2.216------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at columns 3 and 20.
		 Common prefix <SIMPLE_ID>
		 Lookahead of 2 should be used for the earlier expansion.
*/
Object GeneralRef() throws jsdai.lang.SdaiException :
{
	Object return_value = null;
	String name;
}
{
// likely a grammar change is needed here.
	{
		printDebug("In GeneralRef, starting");
	}
	// making changes in the grammar:
	// (LOOKAHEAD(2) return_value = ParameterRef() | return_value = VariableRef() )
		name = InterpretedId()
		{
//			if (parser_pass == 5) {

//				return_value = findInterpretedId(name);
				return_value = findInterpretedIdX(name);
//			}
		}
	{
		printDebug("In GeneralRef, ending, name: " + name + ", result: " + return_value + ", parser pass: " + parser_pass);
		return return_value;
	}
}

/*--------- ISO 10303-14:B.2.100 ---*/
void GeneralSchemaAliasId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	// SchemaId() | SchemaMapId() | SchemaViewId()
	t = <SIMPLE_ID>
}

/*--------- ISO 10303-14:B.2.101 ---*/
jsdai.SExtended_dictionary_schema.EGeneric_schema_definition GeneralSchemaRef() throws jsdai.lang.SdaiException :
{
  // jsdai.SExtended_dictionary_schema.EGeneric_schema_definition result = null;
  Object result = null;
}
{
//      SchemaRef() | SchemaMapRef() | SchemaViewRef()
//      SchemaRef()
	result =  InterpretedRef(PI_SCHEMA_OR_SCHEMA_MAP_OR_SCHEMA_VIEW)
	{
		
		return (jsdai.SExtended_dictionary_schema.EGeneric_schema_definition)result;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.217------------ */
jsdai.SExtended_dictionary_schema.EParameter GeneralSetType() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter result = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.SExtended_dictionary_schema.ESet_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	int bound_value;
	jsdai.lang.EEntity bt;
	String bound_name;

}
{
	{
		printDebug("In GeneralSetType, starting");
	}
	<SET> [bounds = BoundSpec()] <OF> par = ParameterType()
	{
		if (parser_pass == 5) {
			// see perhaps general set of generic
			// both bounds must be missing or bound 1 must be 0 and bound 2 must be ?
			// and the par paramete_type must be standart express type generic
			// if not - create

			boolean must_create = false;
			boolean is_generic = false;
			if (bounds[1] != null) {
				if (bounds[1] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[1]).getBound_value(null);
					if (bound_value != Integer.MIN_VALUE) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}
			if (bounds[0] != null) {
				if (bounds[0] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[0]).getBound_value(null);
					if (bound_value != 0) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}

			if (par != null) {
				if (par.testParameter_type(null)) {			
					if ((par.getParameter_type(null) != _st_generic) && (par.getParameter_type(null) != _st_string)) {
						must_create = true;
					} else {
						if (par.getParameter_type(null) == _st_generic) {
							is_generic = true;
						} 
					}
		  	} else {
		  		// why unset?
		  		must_create = true;
		  	}
		  } else {
		    // not standart type, but, on the other hand, something wrong here
		  	must_create = true;
		  }
			
			if (must_create) {
				at = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
				bound_name = getBoundString(2, bounds, false, false);
				at.setName(null, "_GENERALSET" + bound_name + _data_type_name);
				_data_type_name = "_GENERALSET"  + bound_name + _data_type_name;
				if (bounds[0] == null) {
					b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
					b1.setBound_value(null, 0);
					bounds[0] = b1;
				}
				at.setLower_bound(null, bounds[0]);
				if (bounds[1] != null) {
					at.setUpper_bound(null, bounds[1]);
				}	else {
					at.unsetUpper_bound(null);  // no need for that it is unset after creating
				}
				// set element_type
				if (par != null) {
					if (par.testParameter_type(null)) {			
						at.setElement_type(null, par.getParameter_type(null));
		 			} else {
		 				printDDebug("Oo> parameter_type unset in general_set_type: SET OF " + par);
		 			}
		 		}
		  } else {
		    // again, do we need separate types for generic set and for set?
		    // currently, the same one in dictionary for standard set/generalset type
		    if (is_generic) {
		  		at = _st_set_generic;
//					_data_type_name = "_SET_GENERIC";
					_data_type_name = "_GENERALSET_0_GENERIC";
		  	} else {
		  		at = _st_set_string;
//					_data_type_name = "_SET_STRING";
					_data_type_name = "_GENERALSET_0_STRING";
		  	}
		  }
//    bt = par.getParameter_type(null);
//    if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type)
//	    at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//    else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type)
//  	  at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//    else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//     at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			result = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			result.setParameter_type(null, at);
			result.setName(null, "_general_set_type_");


		}
		printDebug("In GeneralSetType, ending");
		return result;
	}
}

/* ------------------------------------------------------------------------------------ Extension to EXPRESS, E2?------------ */
jsdai.SExtended_dictionary_schema.EParameter GenericEntityType() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter par = null;
//	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EData_type ed = null;
	jsdai.SExtended_dictionary_schema.EEntity_declaration edc = null;
	String label = null;
	jsdai.SExtended_dictionary_schema.EDeclaration eld = null;
	jsdai.lang.A_string labels = null;
}
{
	{
		printDebug("In GenericEntityType, starting");
	}
	<GENERIC_ENTITY> [":" label = TypeLabel()]
	{
		_data_type_name = "_ENTITY";		
		if (parser_pass == 5) {
			par = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			par.setName(null, "_generic_entity_");
			// ed = findEntity_definition("Entity");
			// changed generic entity from entity_definition to data_type because of bootstrapping problems in lang
//			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)_st_entity;
			ed = _st_entity;
//                      if (ed == null) {
//                              ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_definition.class);
//                              eld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
//                              eld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//                              eld.setDefinition(null, ed);
//                              ed.setName(null, "Entity");
//                              ed.setInstantiable(null, false); // guessing
//                              ed.setComplex(null, false);
//                              ed.createSupertypes(null);
				// now it is inverse
				// ed.createWhere_rules(null);
				// no longer
				// ed.createExplicit_attributes(null);
//                      }
			par.setParameter_type(null, ed);
			if (label != null) {
				labels = par.createType_labels(null);
				labels.addByIndex(1, label);
				// par.setType_label(null, label);
			}
		}
		printDebug("In GenericEntityType, ending");
		return par;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.218------------ */

jsdai.SExtended_dictionary_schema.EParameter GenericType() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.SExtended_dictionary_schema.EData_type gt = null;
	String label = null;
	jsdai.lang.A_string labels = null;
}
{
	{
		printDebug("In GenericType, starting");
	}
	<GENERIC> [":" label = TypeLabel()]
	{
			_data_type_name = "_GENERIC";		
			if (parser_pass == 5) {
			par = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			par.setName(null, "_generic_");
			gt = _st_generic;
			// gt = (jsdai.SExtended_dictionary_schema.EData_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type.class);
			par.setParameter_type(null, gt);
			if (label != null) {
				labels = par.createType_labels(null);
				labels.addByIndex(1, label);
//                              par.setType_label(null, label);
			}
		}
		printDebug("In GenericType, ending: " + par + ", in pass: " + parser_pass);
		return par;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.219------------ */
jsdai.SExtended_dictionary_schema.EEntity_definition GroupQualifier() throws jsdai.lang.SdaiException :
{
 jsdai.SExtended_dictionary_schema.EEntity_definition ed;
}
{
	{
		printDebug("In GroupQualifier, starting");
	}
	<BACKSLASH> ed = EntityRef(null)
	{
		if (ed == null) {
			printDebug("In GroupQualifier, Entity Reference is null");
		}

		if (parser_pass == 5) {
		}
		printDebug("In GroupQualifier, ending");
		return ed;
	}
}

/*--------- ISO 10303-14:B.2.105 ---*/
void IdentifiedByClause() throws jsdai.lang.SdaiException  :
{}
{
	// expressions follows, potential <FOR> conflict, better play it a bit safer
	<IDENTIFIED_BY> ( LOOKAHEAD(IdParameter() ";") IdParameter() ";")+
}

/*-+-------- ISO 10303-14:B.2.106  ---*/
void IdParameter() throws jsdai.lang.SdaiException :
{}
{       //  here, ":"  confirms the presense of optional ID, lookahead 2 is ok.
	[  LOOKAHEAD(2) IdParameterId() ":" ] Expression()
}

/*--------- ISO 10303-14:B.2.107  ---*/
void IdParameterId() throws jsdai.lang.SdaiException :
{}
{
	ParameterId()
}

/*-+-------- ISO 10303-14:B.2.108  ---*/
void IfExpr() throws jsdai.lang.SdaiException :
{}
{
//	<IF> LogicalExpression() <THEN> MapAttrAssgnmtExpr() ( <ELSIF> LogicalExpression() MapAttrAssgnmtExpr() )* [ <ELSE> MapAttrAssgnmtExpr() ] <END_IF>
	<IF> LogicalExpression() 
	{
//		System.out.println("<IF>");
	}
	<THEN> Expression() 
	{
//		System.out.println("<THEN>");
	}
	( <ELSIF> LogicalExpression() Expression() 
	{
//		System.out.println("<ELSIF>");
	}
	)* 
	[ <ELSE> Expression() 
	{
//		System.out.println("<ELSE>");
	}
	] <END_IF>
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.220------------ */
void IfStmt() throws jsdai.lang.SdaiException  :
{
	Object operand = null;
	Object pop_inst = null;
	int if_count = 0;
	int else_count = 0;
}
{
	{
		printDebug("In IfStmt, starting");
//              system.out.println("<><> if count: " + if_count + ", else count: " + else_count);
	}
	<IF> (LogicalExpression()) #IfCondition
	{
		if (parser_pass == 5) {
		}
	}
	 <THEN> (Stmt() {if_count++;})+ [<ELSE> (Stmt(){else_count++;})+] <END_IF> ";"
	{
		if (parser_pass == 5) {
		}
		printDebug("In IfStmt, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.221------------ */
int Increment() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = NumericExpression()
	{
		return value;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.222------------ */
void IncrementControl() throws jsdai.lang.SdaiException :
{
	ECtVariable var = null;
	String variable_id = null;
	jsdai.lang.EEntity variable_parameter_type = null;
	jsdai.SExtended_dictionary_schema.EParameter variable_type = null;
	boolean increment_present = false;
	String variable_key = "";
}
{
	variable_id = VariableId() {}":=" Bound1(false) <TO> Bound2(false) [<BY> Increment() {increment_present = true;}]  
	{
		if (parser_pass == 4) {
			variable_type = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			variable_type.setName(null, "_implicit_variable_");
			// variable_type.setParameter_type(null, variable_parameter_type);

// System.out.println("<<>> active_scope: " + active_scope);

		  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension, active_scope_string, "" + variable_uid, variable_id);
 			active_scope_string = "";
//			active_scope = null;  // not using on schema level (yet)

			variable_key = constructImplicitVariableKey(variable_id, variable_uid);

//			var = new ECtVariable(variable_id, variable_type, function_depth, variable_key, active_scope, true, 1, (String)variable_id_stack.peek());
			var = new ECtVariable(variable_id, variable_type, function_depth, variable_key, active_scope, true, 1, "");
//			var = new ECtVariable(variable_id, variable_type, (String)variable_id_stack.peek());

			if (variable_key != null) {
				if (!(hm_current_variables.containsKey(variable_key))) {
					hm_current_variables.put(variable_key, var);
				} else {
					// error - perhaps more than one variable with the same name in a function
				}
			} else {
				System.out.println("INTERNAL ERROR - ImplicitVariable in IncrementControl: " + variable_id + "  - wrong active scope: " + active_scope);
			}


//			var = new ECtVariable(variable_id, variable_type, (String)variable_id_stack.peek());
			current_scope.addElement(var);

		} else { // other passes - added to handle interpreted IDs
			var = new ECtVariable(variable_id, variable_type);
			current_scope.addElement(var);
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.223------------ */
int Index() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = NumericExpression()
	{
		return value;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.224------------ */
int Index1() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = Index()
	{
		return value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.225------------ */
int Index2() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = Index()
	{
		return value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.226------------ */
Object IndexQualifier(Object general_reference) throws jsdai.lang.SdaiException :
{
	int ind1 = Integer.MIN_VALUE;
	int ind2 = Integer.MIN_VALUE;
//	jsdai.lang.EEntity reference = null;
	Object reference = null;
//	jsdai.SExtended_dictionary_schema.EData_type gen_data = null;
	Object gen_data = null;
	
}
{
	{
		printDebug("In IndexQualifier, starting");
	}
	"[" ind1 = Index1() [":" ind2 = Index2()] "]"
	{
		if (parser_pass == 5) {
		}
	 	printDebug("In IndexQualifier, ending");
	 	return gen_data;
	}  
}


// REMOVED IN DIS
/*--------- ISO 10303-14:B.2.116  ---*/
/*
String InstanceId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		return (t.image.toLowerCase());
		}
}
*/

/*--------- ISO 10303-14:B.2.117  ---*/

int InstantiationForeachControl() throws jsdai.lang.SdaiException :
{
	ECtVariable var1 = null;
	ECtVariable var2 = null;
	String iterator_name;
	String index_name;
	jsdai.SExtended_dictionary_schema.EParameter variable_type1 = null;
	jsdai.SExtended_dictionary_schema.EParameter variable_type2 = null;
	String variable_key1 = "";
	String variable_key2 = "";

	String variable_id = null;
	String var_id = "";

	ECtScope active_scope_extension_prev = null;

}
{
{


// ---

		printDebug("In InstantiationForeachControl, starting");

//0		variable_uid++;
//0		var_id += "_implicit_" + variable_uid + "_";
//		variable_id_stack.push(var_id);
//0		scope_stack.push(current_scope);
//0		current_scope = new Vector();



}


//      <EACH> (VariableId() <IN> SourceAttributeReference() <INDEXING> VariableId())+

	// this one is working with test schemas
	<EACH> iterator_name = VariableId() <IN> SourceAttributeReference() <INDEXING> index_name = VariableId()

	// need to support multiple iterators - problems even with building the parser
//	<EACH> iterator_name = VariableId() <IN> Expression() (AND VariableId() IN Expression())*  <INDEXING> index_name = VariableId()

//	<EACH> iterator_name = VariableId() <IN> Expression()  <INDEXING> index_name = VariableId()

	{
		if (parser_pass == 4) {
			variable_type1 = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			variable_type1.setName(null, "_implicit_variable_");

			active_scope_extension_prev = active_scope_extension;

		  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension, active_scope_string, "" + variable_uid, iterator_name);
 			active_scope_string = "";

			variable_key1 = constructImplicitVariableKey(iterator_name, variable_uid);
			var1 = new ECtVariable(iterator_name, variable_type1, 0, variable_key1, active_scope, true, 1, "");
			if (variable_key1 != null) {
				if (!(hm_current_variables.containsKey(variable_key1))) {
					hm_current_variables.put(variable_key1, var1);
				} else {
					// error - perhaps more than one variable with the same name in a function
				}
			} else {
				System.out.println("INTERNAL ERROR - ImplicitVariable - iterator in InstantiationForeachControl: " + iterator_name + "  - wrong active scope: " + active_scope);
			}
			current_scope.addElement(var1);

			variable_type2 = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			variable_type2.setName(null, "_implicit_variable_");


	
//		  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension_prev, active_scope_string, "" + variable_uid, index_name);
// 			active_scope_string = "";

//		  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension_prev, active_scope_string, "" + variable_uid, index_name);
// 			active_scope_string = "";

				active_scope_extension.set2ndId("" + variable_uid);
				active_scope_extension.set2ndKey(index_name);

			variable_key2 = constructImplicitVariableKey(index_name, variable_uid);
			var2 = new ECtVariable(index_name, variable_type2, 0, variable_key2, active_scope, true, 1, "");
			if (variable_key2 != null) {
				if (!(hm_current_variables.containsKey(variable_key2))) {
					hm_current_variables.put(variable_key2, var2);
				} else {
					// error - perhaps more than one variable with the same name in a function
				}
			} else {
				System.out.println("INTERNAL ERROR - ImplicitVariable - index in InstantiationForeachControl: " + index_name + "  - wrong active scope: " + active_scope);
			}
			current_scope.addElement(var2);

		} else {
			var1 = new ECtVariable(iterator_name, null);
			current_scope.addElement(var1);
			var2 = new ECtVariable(index_name, null);
			current_scope.addElement(var2);
		}
		return (2);
	}
}



/*-+-------- ISO 10303-14:B.2.118  ---*/
boolean InstantiationLoopControl() throws jsdai.lang.SdaiException :
{

	boolean increment_present = false;
	int increments_present = 0;
}
{
	{
		printDebug("In InstantiationLoopControl, starting");


//0		variable_uid++;
//		var_id += "_implicit_" + variable_uid + "_";
		
//0		scope_stack.push(current_scope);
//0		current_scope = new Vector();

	}
	 (increments_present = InstantiationForeachControl() | increment_present = RepeatControl())
	{

		if (increments_present > 0) increment_present = true;
		printDebug("In InstantiationLoopControl, ending");
		return increment_present;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.227------------ */
jsdai.SExtended_dictionary_schema.EInteger_type IntegerType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EInteger_type it = null; 
}
{
	<INTEGER>
	{
		if (parser_pass == 3) {
			// it = (jsdai.SExtended_dictionary_schema.EInteger_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_type.class);
			it = _st_integer;	
		}
		else if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}
			}
			if (it == null) {
				// it = (jsdai.SExtended_dictionary_schema.EInteger_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_type.class);
				it = _st_integer;
		printDDebug("In integer_type, pass > 3, dd = null: " + it);
			}
		} 
		printDDebug("In integer_type, ending: " + it);
		return it;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.228 ------------ */
void InterfaceSpecification(Vector used_vector, Vector referenced_vector) throws jsdai.lang.SdaiException :
{}
{
	(ReferenceClause(referenced_vector) | UseClause(used_vector))
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.229------------ */
void Interval() throws jsdai.lang.SdaiException :
{
	Object low = null;
	Object item = null;
	Object high = null;
	Object result = null;
	Object pop_inst_low = null;
	Object pop_inst_item = null;
	Object pop_inst_high = null;
	Object exp_inst_result = null;
}
{
	{
		printDebug("In Interval, starting");
	}
	"{" IntervalLow()
	{
		if (parser_pass == 5) {
		}
	}
 IntervalOp() IntervalItem()
	{
		if (parser_pass == 5) {
		}
	}
IntervalOp() IntervalHigh()
	{
		if (parser_pass == 5) {
		}
	}
"}"
	{
		if (parser_pass == 5) {
		}
		printDebug("In Interval, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.230------------ */
void IntervalHigh() throws jsdai.lang.SdaiException :
{}
{
	SimpleExpression()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.231------------ */
void IntervalItem() throws jsdai.lang.SdaiException :
{}
{
	SimpleExpression()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.232------------ */
void IntervalLow() throws jsdai.lang.SdaiException :
{}
{
	SimpleExpression()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.233------------ */
void IntervalOp() throws jsdai.lang.SdaiException :
{}
{
	"<" | "<="
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.234------------ */
void InverseAttr(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute a;
	jsdai.SExtended_dictionary_schema.EAttribute a2;
	jsdai.SExtended_dictionary_schema.EInverse_attribute ia;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed2;
	jsdai.SExtended_dictionary_schema.EExplicit_attribute ar = null;
//  jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	boolean duplicates = false;
	int bag_set = -1;
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
}
{
	(a = AttributeDecl(ed, 2) ":"
	[(<SET> {duplicates = false; bag_set = 0;}| <BAG>{duplicates = true; bag_set = 1;}) [bounds = BoundSpec()] <OF>] ed2 = EntityRef(null) <FOR> a2 = AttributeRef(ed, ed2, 3, null) ";" )
	{
		if (parser_pass > 3)
		{
			ia = (jsdai.SExtended_dictionary_schema.EInverse_attribute)a;

// ERROR the direct attribute of the referencing entity must be explicit attribute
// System.out.println("<><> a2: " + a2.getName(null) + ", entity: " + a2.getParent_entity(null).getName(null));
			if (a2 instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
				ar = (jsdai.SExtended_dictionary_schema.EExplicit_attribute)a2;
			} else {
				error_count++;
				Token t = getToken(0);
		   	int line = t.beginLine;
		   	int column = t.beginColumn;
				if (a2 instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
//					printError("On line " + line + ", column " + column + ": An attempt to use in the declaration of an inverse attribute a derived attribute as the direct attribute of the referencing entity. Direct attribute: " + a2.getName(null));
					printErrorMsg("" + a2.getName(null) + " - an attempt to use in the declaration of an inverse attribute a derived attribute as the direct attribute of the referencing entity", null, true);
				} else {
//					printError("On line " + line + ", column " + column + ": An attempt to use in the declaration of an inverse attribute not an explicit attribute as the direct attribute of the referencing entity. Direct attribute: " + a2);
// this one
					printErrorMsg("" + a2 + " - an attempt to use in the declaration of an inverse attribute not an explicit attribute as the direct attribute of the referencing entity", null, true);
				}
				printDebug("error in InverseAttr, not explicit: " + a2 + ", in pass " + parser_pass );
			}
			
			if (ia != null) {
				if (ed2 != null) {
						ia.setDomain(null, ed2);
				} else {
					printVerbose("ERROR - inverse attribute domain ed2 is null");
				}
				if (ar != null) {
					ia.setInverted_attr(null, ar);
				} else {
					printVerbose("ERROR - inverse attribute inverted_attr ar is null");
				}
				if (bag_set < 0) { // single entity, no set or bag
					duplicates = false;
					ia.unsetMin_cardinality(null);  // not really needed.
					ia.unsetMax_cardinality(null);  // not really needed.
				}
				else {
					if (bounds[0] == null) {
						b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
						b1.setBound_value(null, 0);
						bounds[0] = b1;
					}
					ia.setMin_cardinality(null,bounds[0]);
					if (bounds[1] != null) {
						ia.setMax_cardinality(null,bounds[1]);
					}
				}
				ia.setDuplicates(null, duplicates);

			} else {
				printVerbose("ignoring previous errors, ERROR: inverse attribute ia is NULL");
			}

		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.235------------ */
void InverseClause(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{}
{
	<INVERSE> (InverseAttr(ed))+
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.236------------ */
String Label() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.237------------ */
jsdai.SExtended_dictionary_schema.EList_type ListType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EList_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	jsdai.lang.EEntity bt;
	String bound_name;
	boolean unique = false;
}
{
	<LIST> [bounds = BoundSpec()] <OF> [<UNIQUE>{unique = true;}]
	{
		if (parser_pass == 3) {
			if (whose != null) {
			  if (!(whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute)) {
//					at = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
//					at.setUnique_flag(null, unique); 
				}
//				bound_name = getBoundString(0, bounds, false, unique);
//				at.setName(null, "_LIST" + bound_name + _data_type_name);
//				_data_type_name = "_LIST"  + bound_name + _data_type_name;
			}
		} else 
		if (parser_pass == 4) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
//				bound_name = getBoundString(0, bounds, false, unique);
//				at.setName(null, "_LIST" + bound_name + _data_type_name);
//				_data_type_name = "_LIST"  + bound_name + _data_type_name;
				at.setUnique_flag(null, unique); 
			}
		} else 
		if (parser_pass == 5) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
//				bound_name = getBoundString(0, bounds, false, unique);
//				at.setName(null, "_LIST" + bound_name + _data_type_name);
//				_data_type_name = "_LIST"  + bound_name + _data_type_name;
				at.setUnique_flag(null, unique); 
			}
			if (bounds[0] == null) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			}
			at.setLower_bound(null, bounds[0]); 
			if (bounds[1] != null) {
				at.setUpper_bound(null, bounds[1]); 
			} else {
				at.unsetUpper_bound(null);  // no need for that it is unset after creating
			}
		}
		if ((parser_pass == 5) && (at == null)) {
			printDDebug("XP ########### ListType is NULL: " + _data_type_name);
		}
	}  
 	bt = BaseType(at)
 	{
		if (parser_pass > 3) {
			// set element_type
//			if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);
			
			if (!(at.testElement_type(null))) {
				if(bt instanceof jsdai.SExtended_dictionary_schema.EData_type) {
					at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EData_type)bt);
				} else {
				  // express amendment issue
					printDDebug("in listType, error while setting Element_type, base type: " + bt + "list type: " +at);
				}
			}
		}
		bound_name = getBoundString(0, bounds, false, unique);
		_data_type_name = "_LIST"  + bound_name + _data_type_name;
		if (at != null) {
			at.setName(null, _data_type_name);
		}
		return at;
 	}	
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.238------------ */
void Literal() throws jsdai.lang.SdaiException :
{
	Token t = null;
	String s;
	Integer l;
	int logical_value;
	Double d;
	BitSet b;
	String str_value;
	String x_operand = "";
	jsdai.lang.Binary blt = null;
}
{
	{
		printDebug("In Literal, starting");
	}
	(t = <BINARY_LITERAL>
	{
		printDebug("In Binary literal: " + t.image);

		if (parser_pass == 5) {
		}
	}
	| t = <INTEGER_LITERAL>
	{
		printDebug("In Integer literal: " + t.image);
		if (parser_pass == 5) {
		}
	}
	| logical_value = LogicalLiteral()
	{
		if (parser_pass == 5) {
		}
	}
	|t = <REAL_LITERAL>
	{
		printDebug("In Real literal: " + t.image);
		if (parser_pass == 5) {
		}
	}
	| str_value = StringLiteral()
	{
		if (parser_pass == 5) {
		}
	}
	)
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.239------------ */
void LocalDecl() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In LocalDecl, starting");
	}
	<LOCAL> (LocalVariable())+ <END_LOCAL> ";"
	{
		printDebug("In LocalDecl, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.240------------ */
void LocalVariable() throws jsdai.lang.SdaiException :
{
	Object operand = null;
	Object pop_inst = null;
	Vector variable_ids = new Vector();
	String str = null;
	jsdai.SExtended_dictionary_schema.EParameter par_type = null;
	ECtVariable var = null;
	String variable_key = null;
}
{
	{
		printDebug("In LocalVariable, starting");
	}
	str = VariableId() {variable_ids.addElement(str);}("," str = VariableId(){variable_ids.addElement(str);})* ":" par_type = ParameterType() [":=" Expression()
	{
		if (parser_pass == 5) {
		}
	}
	] ";"
	{
		if (parser_pass == 4) {
if (par_type == null) {
	; // printDDebug("#123: parameter type = NULL");
} else {
	; // printDDebug("#123: parameter type NOT NULL");
}
			// make ECtVariable instances and add them to the current_scope
			for (int i = 0; i < variable_ids.size(); i++) {
				String id = (String)variable_ids.elementAt(i);
				variable_key = constructVariableParameterKey(id);
				var = new ECtVariable(id, par_type, function_depth, variable_key, active_scope);
//if (id.equalsIgnoreCase("result")) {
//	System.out.println(">>>>>>>>>>>>>>>> var: " + id + ", par_type: " + par_type + ", key: " + variable_key + ", scope: " + active_scope);
//}
				if (variable_key != null) {
					if (!(hm_current_variables.containsKey(variable_key))) {
						hm_current_variables.put(variable_key, var);
					} else {
						// error - perhaps more than one variable with the same name in a function
					}
				} else {
					System.out.println("INTERNAL ERROR - LocalVariable, 1st: " + str + ", current: " + id + "  - wrong active scope: " + active_scope);
				}
				current_scope.addElement(var);
			}
		} else { // other passes - added to handle interpreted IDs
			// find it, it is already created		
			
/*
			for (int i = 0; i < variable_ids.size(); i++) {
				String id = (String)variable_ids.elementAt(i);
		//		var = new ECtVariable(id, par_type);
System.out.println("<about to find var, 02, name: " + id); 
				var = findVariableX(id);
				current_scope.addElement(var);
			}
*/	
		}
		printDebug("In LocalVariable, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.241------------ */
void LogicalExpression() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In LogicalExpression, starting");
	}
	Expression()
	{
		printDebug("In LogicalExpression, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.242------------ */
int LogicalLiteral() :
{
	int return_value = -1;
}
{
	{
		printDebug("In Logical literal");
	}
	(<FALSE>
	{
		return_value = 1;
		if (parser_pass == 5) {
			argument_stack.push(new Integer(0));
			printStack("PUSH: Literal: <LOGICAL_LITERAL>: FALSE");
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	}
	| <TRUE>
	{
		return_value = 2;
		if (parser_pass == 5) {
			argument_stack.push(new Integer(1));
			printStack("PUSH: Literal: <LOGICAL_LITERAL>: TRUE");
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	}
	| <UNKNOWN>
	{
		return_value = 3;
		if (parser_pass == 5) {
			argument_stack.push(new Integer(2));
			printStack("PUSH: Literal: <LOGICAL_LITERAL>: UNKNOWN");
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	})
	{
		return return_value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.243------------ */
jsdai.SExtended_dictionary_schema.ELogical_type LogicalType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ELogical_type lt = null; 
}
{
	<LOGICAL>
	{
		if (parser_pass == 3) {
			// lt = (jsdai.SExtended_dictionary_schema.ELogical_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLogical_type.class);
			lt = _st_logical;
		}
		else if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}
			}
			if (lt == null) {
				// lt = (jsdai.SExtended_dictionary_schema.ELogical_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLogical_type.class);
				lt = _st_logical;
			}
		} 
		return lt;
	}
}


/*-+-------- ISO 10303-14:B.2.133  ---*/
void MapAttributeDeclaration() throws jsdai.lang.SdaiException :
{
	Object general_reference = null;
	Object qualified_reference = null;
	Object operand = null;
}
{
	{
		printDebug("In MapAttributeDeclaration, starting");
	}
//	[ TargetParameterRef() [ IndexQualifier() ] [ GroupQualifier() ] "." ] AttributeRef(null, null, -1, null) [ IndexQualifier() ] ":=" MapAttrAssgnmtExpr() ";"
	// <SIMPLE_ID> choice conflict, better to reach "." here, but expression in index qualifier, number unknown
	// have to fix IndexQualifier() argument



// Antano	[  LOOKAHEAD(TargetParameterRef() [ IndexQualifier(null) ] [ GroupQualifier() ] "." ) TargetParameterRef() [ IndexQualifier(null) ] [ GroupQualifier() ] "." ] AttributeRef(null, null, -1, null) [ IndexQualifier(null) ] ":=" Expression() ";"


//previous	[  LOOKAHEAD(TargetParameterRef() [ IndexQualifier(null) ] [ GroupQualifier() ] "." ) TargetParameterRef() [ IndexQualifier(null) ] [ GroupQualifier() ] "." ] AttributeRef(null, null, -1, null) [ IndexQualifier(null) ] ":=" Expression() ";"

//	[  LOOKAHEAD(TargetParameterRef() [ IndexQualifier(null) ] [ GroupQualifier() ] "." ) TargetParameterRef() [ IndexQualifier(null) ] [ GroupQualifier() ] "." ] AttributeRef(null, null, -1, null) [ IndexQualifier(null) ] ":=" Expression() ";"


//	[  LOOKAHEAD(TargetParameterRef() [ IndexQualifier(null) ] [ GroupQualifier() ] "." ) general_reference = TargetParameterRef() 

//	general_reference = TargetParameterRef() 
	general_reference = TargetParameterRefStrict() 
	{
		if (parser_pass == 5) {
		}
	}
	(qualified_reference = Qualifier(general_reference)
	{
		general_reference = qualified_reference;
		if (parser_pass == 5) {
		}
	}

	)* ":=" Expression() ";"
	{
		if (parser_pass == 5) {
		}
		printDebug("In MapAttributeDeclaration, ending");
	}
}


/*--------- ISO 10303-14:B.2.134  ---*/
// eliminated
/*
void MapAttrAssgnmtExpr() throws jsdai.lang.SdaiException :
{}
{
	Expression() | IfExpr() | CaseExpr() | ForExpr()
}
*/

/*-+-------- ISO 10303-14:B.2.135  ---*/
// Object MapCall(jsdai.SExtended_dictionary_schema.ETarget_parameter tp) throws jsdai.lang.SdaiException :
//Object MapCall(String target_parameter_name) throws jsdai.lang.SdaiException :
Object MapCall() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EMap_definition md = null;
	jsdai.SExtended_dictionary_schema.EMap_or_view_partition partition = null;
  // here target_parameter can be found from its name and map definition md
	jsdai.SExtended_dictionary_schema.ETarget_parameter tp = null;
}
{
	{
//		printDebug("In MapCall, starting, target parameter name: " + target_parameter_name);
		printDebug("In MapCall, starting");
	}
//	md = MapRef() [ partition = PartitionQualification(md) ] "(" ExpressionOrWild() ( "," ExpressionOrWild())* ")"
	[ LOOKAHEAD(<SIMPLE_ID> <OP_AT>) tp = TargetParameterRef() <OP_AT> ] md = MapRef() [ partition = PartitionQualification(md) ] "(" ExpressionOrWild() ( "," ExpressionOrWild())* ")"
	//[ tp = TargetParameterRef() <OP_AT> ] md = MapRef() [ partition = PartitionQualification(md) ] '(' ExpressionOrWild ( ',' ExpressionOrWild )* ')'
  {
		printDebug("In MapCall, ending");
  	return null;
  }
  
}


/*-+-------- ISO 10303-14:B.2.136  ---*/
void MapDecl() throws jsdai.lang.SdaiException : 
{
	jsdai.SExtended_dictionary_schema.EMap_definition md = null;
	jsdai.SExtended_dictionary_schema.EMap_declaration mdc = null;
	String map_name;
}
{
	{
		target_parameter_order_count = 0;
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	<MAP> map_name = MapId() <AS> 
	{
		printDebug("In MapDecl, starting: " + map_name);
		if (parser_pass == 1) {
			// check if a view with this name already exists in the extent.
			md = findMap_definition(map_name, null);
			if (md != null) {
				error_count++;
//				printError("duplicate map name \"" + map_name + "\"");
				printErrorMsg("" + map_name + " - duplicate map name", null, true);
			} else {
				String wrong_name = findAnyName(map_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + map_name + "\". The same name used for a map and for " + wrong_name);
					printErrorMsg("" + map_name + " - duplicate map name, the name is already in use in the current scope", null, true);
				}
				md = (jsdai.SExtended_dictionary_schema.EMap_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CMap_definition.class);


			  active_scope_extension = new ECtScope(active_scope, md, active_scope_extension, active_scope_string, map_name, map_name.toLowerCase());
				active_scope = md;
	  		active_scope_string = "";


printDDebug("active_scope in map 1: " + active_scope);
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				mdc = (jsdai.SExtended_dictionary_schema.EMap_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$map_declaration.class);


//				mdc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				mdc.setParent(null, sd);
				mdc.setDefinition(null, md);

				md.setName(null, map_name);
				// supertypes - added this attribute
//				md.createSupertypes(null);
//				md.createSuper_type(null);
			}
		} else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper()
			md = findMap_definition(map_name, null);

		  active_scope_extension = new ECtScope(active_scope, md, active_scope_extension, active_scope_string, map_name, map_name.toLowerCase());
			active_scope = md;
  		active_scope_string = "";


			if (parser_pass == 5) {
			}

printDDebug("active_scope in map 2: " + active_scope);
			if (md == null) {
				error_count++;
//				printError("MapDecl - the map not found: " + map_name);
				printErrorMsg("" + map_name + "- map not found", null, true);
			}
		}
		// createDocumentationEntity2(md, a_token);

		target_parameter_order_count = 0;
	}
	( TargetParameter(md) ";")+
	(
	  ( 
	    BindingHeader(md) MapDeclBody() ( BindingHeader(md) MapDeclBody() )* 
// making map_decl_body optional, according to examples in part 14, 
// or maybe just map_project_clause in map_decl_body could be optional
//	    BindingHeader(md) [ MapDeclBody() ] ( BindingHeader(md) MapDeclBody() )* 
          )
        
	  |
	
	  (
	    MapSubtypeOfClause(md) SubtypeBindingHeader(md) MapDeclBody()
            ( 
//            LOOKAHEAD(SubtypeBindingHeader(md) MapDeclBody()) SubtypeBindingHeader(md) MapDeclBody() 
              SubtypeBindingHeader(md) MapDeclBody() 
            )* 
          )
        )
    <END_MAP> 
	{
		active_scope = null;
if (active_scope_extension == null) {
	System.out.println("MapDecl: active_scope_extension = NULL");
}
 		active_scope_string = active_scope_extension.getParent_scope_string();
	  active_scope_extension = active_scope_extension.getParent();
	
	}";"


	{
		current_scope = (Vector)scope_stack.pop();
		printDebug("In MapDecl, ending");
	}
}



/*-+-------- ISO 10303-14:B.2.137  ---*/
void MapDeclBody() throws jsdai.lang.SdaiException :
{}
{
	{	
		printDebug("In MapDeclBody, starting");
	}
	 // <FOR> choice conflict, better safer implementation	
	 (( LOOKAHEAD(EntityInstantiationLoop()) EntityInstantiationLoop() )+ | MapProjectClause() | ( <RETURN> Expression() ";" ))
	{
		printDebug("In MapDeclBody, ending");
	}
}

/*--------- ISO 10303-14:B.2.138  ---*/
String MapId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*--------- ISO 10303-14:B.2.139  ---*/
void MapProjectClause() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In MapProjectClause, starting");
	}
//	<SELECT> ( MapAttributeDeclaration() )+
	<SELECT> ( MapAttributeDeclaration() )*
	{
		printDebug("In MapProjectClause, ending");
	}
}

/*--------- ISO 10303-14:B.2.140  ---*/
jsdai.SExtended_dictionary_schema.EMap_definition MapRef() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EMap_definition result = null;
	String name;
}
{
	name = MapId()
	{
		result = findMap_definition(name, null);
		return result;
	}
}

/*-+-------- ISO 10303-14:B.2.141  ---*/
jsdai.SExtended_dictionary_schema.EMap_definition MapReference() throws jsdai.lang.SdaiException :
{

	Object map_reference = null;

}
{
//      [ SchemaMapRef() "." ] MapRef()
	// "." allows to confirm the presence of optional prefix, lookahead 2 is ok.
	[  LOOKAHEAD(2) InterpretedRef(PI_SCHEMA_MAP) "." ] map_reference = InterpretedRef(PI_MAP)
//	[ LOOKAHEAD ( { getToken(1).kind == SIMPLE_ID && getToken(2).kind == DOT } ) SchemaMapRef() "." ] MapRef()

	{
		return (jsdai.SExtended_dictionary_schema.EMap_definition)map_reference;
	}
}

/*--------- ISO 10303-14:B.2.142  ---*/
void MapSubtypeOfClause(jsdai.SExtended_dictionary_schema.EMap_definition md) throws jsdai.lang.SdaiException :
{
	// Object supertype_obj = null;
	jsdai.SExtended_dictionary_schema.EMap_definition supertype = null;
	jsdai.SExtended_dictionary_schema.AMap_definition supertypes = null;
}
{
	{
		printDebug("In MapSubtypeOfClause, starting");
	}
	<SUBTYPE> <OF> "(" supertype = MapReference() ")" ";"
	{
		if (parser_pass == 2) {
//			supertypes = md.createSupertypes(null);
//			supertypes = md.createSuper_type(null);
//			supertypes.addByIndex(1, supertype);		

//		supertype = (jsdai.SExtended_dictionary_schema.EMap_definition)supertype_obj;
// System.out.println(" map supertype: " + supertype);
				md.setSuper_type(null, supertype);
		}
		printDebug("In MapSubtypeOfClause, ending");
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.244------------ */
int MultiplicationLikeOp() throws jsdai.lang.SdaiException :
{
	int operation = 0;
}
{
	("*" {operation = 1;}
				| "/" {operation = 2;}
				| <DIV> {operation = 3;}
				| <MOD> {operation = 4;}
				| <AND> {operation = 5;}
				| "||" {operation = 6;}
				)
				{
					return operation;
				}
}
/* - LOOKAHEAD 2 - (Columns 3 & 17) --------------------------------------------------- ISO 10303-11:A.2.245------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at columns 3 and 17.
		 Common prefix <SIMPLE_ID>
		 Lookahead of 2 should be used for the earlier expansion.
*/
//  (LOOKAHEAD(2) a_type = EntityRef() | a_type = TypeRef(0))
//  TypeRef()

// new interpreted identifier NamedTypeRef() introduced into the grammar instead of EntityRef() | TypeRef)
// must also cover ViewRef() now for ExpressX
jsdai.SExtended_dictionary_schema.ENamed_type NamedTypes(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ENamed_type nt = null;
}
{
		{
			printDebug("In NamedTypes, starting is pass " + parser_pass + ", from: " + whose);
		}
		nt = NamedTypeRef()
		{
			if (nt != null) {
				if (nt.testName(null)) {
					_data_type_name = "_" + nt.getName(null);
				}
				printDebug("In NamedTypes, ending in pass: " + parser_pass + ": " + nt.getName(null));
			} else {
				printDebug("In NamedTypes, ending - null ");
			}

			return nt;
		}
}
/* ------------------------------------------------------------------------------------ introduced by eRRe ------------ */
String NamedTypeId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/* - LOOKAHEAD 2 - (Columns 23 & 36) ------------------------------------------------ ISO 10303-11:A.2.246------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at columns 23 and 36.
		 Common prefix <SIMPLE_ID>
		 Lookahead of 2 should be used for the earlier expansion.
*/
jsdai.SExtended_dictionary_schema.EDeclaration NamedTypeOrRename(jsdai.lang.SdaiModel interfaced_model) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESchema_definition interfaced_schema = null;
	String named_type_name;
  String alias_name = null;
	jsdai.SExtended_dictionary_schema.ENamed_type nt = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
	jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
//      jsdai.SExtended_dictionary_schema.EEntity_declaration$used_declaration edc = null;
//      jsdai.SExtended_dictionary_schema.EType_declaration$used_declaration tdc = null;
}
{
	named_type_name = NamedTypeId()
	{
		if (parser_pass == 2) {
			if (interfaced_model != null) {
				interfaced_schema = getSchema_definitionFromModel(interfaced_model);
			}
			ed = findInterfacedEntity_definition(interfaced_model, named_type_name);
			if (ed == null) {
				dt = findInterfacedDefined_type(interfaced_model, named_type_name);
				if (dt == null) {
					error_count++;
					if (interfaced_schema != null ) {
//						printError("interfaced named type \"" + named_type_name + "\" not found in schema: " + interfaced_schema.getName(null).toLowerCase());
						printErrorMsg("" + named_type_name + " - interfaced named type not found in schema: " + interfaced_schema.getName(null), null, true);
						printDebug("USE FROM: interfaced named type \"" + named_type_name + "\" not found in model: " + interfaced_model.getName());
					} else {
//						printError("interfaced named type \"" + named_type_name + "\" not found because schema itself not found");
						printErrorMsg("" + named_type_name + " - interfaced named type not found because the interfaced schema itself not found", null, true);
						printDebug("USE FROM: interfaced named type \"" + named_type_name + "\" not found in model: NULL");
					}
				} else {
//                                      tdc = checkTypeUsedDeclaration(dt);
//                                      if (tdc == null ) {
					if (neededTypeUsedDeclaration(dt)) {
						dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CType_declaration$used_declaration.class);
						dc.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
							// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						// }
						dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)dt);
						if (!(hm_current_type_declarations.containsKey(named_type_name.toLowerCase()))) {
							hm_current_type_declarations.put(named_type_name.toLowerCase(), dc);
						}
						dt.setTemp(FLAG_USED);
					}
				}
			} else { // entity_definition
//                                      edc = checkEntityUsedDeclaration(ed);
//                                      if (edc == null ) {
					if (neededEntityUsedDeclaration(ed)) {
						dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$used_declaration.class);
						dc.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
							// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						// }
						dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)ed);
						if (!(hm_current_entity_declarations.containsKey(named_type_name.toLowerCase()))) {
							hm_current_entity_declarations.put(named_type_name.toLowerCase(), dc);
						}
						Object t_object = ed.getTemp();
						if (t_object == null) {
							ed.setTemp(FLAG_USED);
						} else {
							if (t_object instanceof ECtRenamed) {
							  if (((ECtRenamed)t_object).interfaced_flag == null) {
									((ECtRenamed)t_object).interfaced_flag = FLAG_USED;
								} else {
									// already set
								}
							} else
							if (t_object instanceof Integer) {
								// already set
							} else {
								System.out.println("<ExpressCompiler> INTERNAL ERROR - NamedTypeOrRename - temp_object: " + t_object + ", entity: " + ed);
							}
						}
					}
			}
		} else
		if (parser_pass == 3) {
		} else
		if (parser_pass == 4) {
		} else
		if (parser_pass == 5) {
		}
	}
	// <SIMPLE_ID> choice conflict, here, interpretation is absolutely necessary for correct choice
	// however, these are IDs, not references, only the name string is important, it seems
	// therefore, I don't care, let it go to EntityId() always, lookahead 2 to suppress warning
	[<AS> (LOOKAHEAD(2) alias_name = EntityId() | alias_name = TypeId())]
//metamata does not like (, but then error here -       [<AS> LOOKAHEAD(2) alias_name = EntityId() | alias_name = TypeId()]
	{
		if (parser_pass == 2) {
			if ((alias_name != null) && (dc != null)) {
				((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dc).setAlias_name(null, alias_name);
				if (ed != null) {
					hm_current_entity_declarations.put(alias_name.toLowerCase(), dc);
				} else
				if (dt != null) {
					hm_current_type_declarations.put(alias_name.toLowerCase(), dc);
				}
			}

//                      if (dc instanceof jsdai.SExtended_dictionary_schema.EEntity_declaration$used_declaration) {
//                              dc.set
//                      } else
//                      if (dc instanceof jsdai.SExtended_dictionary_schema.EType_declaration$used_declaration) (
//                      }
		}
		return dc;
	}

}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.247------------ */
void NullStmt() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In NullStmt starting");
	}
	";"
	{
		printDebug("In NullStmt ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.248------------ */
jsdai.SExtended_dictionary_schema.ENumber_type NumberType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ENumber_type nt = null; 
}
{
	<NUMBER>
	{
		if (parser_pass == 3) {
			// nt = (jsdai.SExtended_dictionary_schema.ENumber_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CNumber_type.class);
			nt = _st_number;
		}
		else if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}
			}
			if (nt == null) {
				// nt = (jsdai.SExtended_dictionary_schema.ENumber_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CNumber_type.class);
				nt = _st_number;
			}
		} 
		return nt;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.249------------ */
int NumericExpression() throws jsdai.lang.SdaiException :
{
	int value = Integer.MIN_VALUE;
	Object argument = null;
	Object x_argument = null;
}
{
	SimpleExpression()
	{
		if (parser_pass == 5) {
			if (argument_stack.empty()) {
				printVerbose("ERROR: empty stack in NumericExpression");
			} else {
				argument = argument_stack.pop();
			}
			printStack("POP: NumericExpression: " + argument);
			if (expression_instances) {
				// x_argument = expression_stack.pop();
			}
			if (argument instanceof Integer) {
				value = ((Integer)argument).intValue();
				numeric_expression_calculated = true;
			} else
			if (argument instanceof Number) {
				value = ((Number)argument).intValue();
				// not sure if ever happens
				numeric_expression_calculated = false;
			}
			else {
				value = Integer.MIN_VALUE;
				numeric_expression_calculated = false;
			}
		}
		return value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.250------------ */
void OneOf() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EOneof_subtype_expression oneof = null;;
// pre-X	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_or_subtype_expression generic_operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.lang.EEntity ee;
	Object pop_inst = null;
}
{
	<ONEOF> "(" SupertypeExpression()
	{
		if (parser_pass == 5) {
			oneof = (jsdai.SExtended_dictionary_schema.EOneof_subtype_expression)model.createEntityInstance(jsdai.SExtended_dictionary_schema.COneof_subtype_expression.class);
			generic_operands = oneof.createGeneric_operands(null);
			// operands is now derived instead of explicit 
			// operands = oneof.createOperands(null);
			ee = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: OneOf: " + ee);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
			if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression)  { // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				// operands is now derived instead of explicit 
				// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
			} else 
			if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				// operands is now derived instead of explicit 
				// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
			} else 
			if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
			} else  {
				error_count++;
				printEDebug("Internal error in OneOf 1");
			}
		}
	}
	("," SupertypeExpression()
	{
		if (parser_pass == 5) {
			ee = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: OneOf: " + ee);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
			if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression)  { // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				// operands is now derived instead of explicit 
				// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
			} else 
			if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {  // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				// operands is now derived instead of explicit 
				// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
			} else 
			if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) {  // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
			} else {
				error_count++;
				printEDebug("Internal error in OneOf 2");
			}
		}
	 }
	)* ")"
	{
		if (parser_pass == 5) {
			argument_stack.push(oneof);
			printStack("PUSH: OneOF: " + oneof);
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	}
}

/*-+-------- ISO 10303-14:B.2.149  ---*/
void OrderedByClause() throws jsdai.lang.SdaiException :
{}
{
//	<ORDERED_BY> ( Expression() ";" )+
	<ORDERED_BY> Expression() ( ","  Expression() )* ";"
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.251------------ */
Object [] Parameter() throws jsdai.lang.SdaiException  :
{
	Object [] results = new Object[2];
	results[0] = null;
	results[1] = null;
}
{
	{
		printDebug("Starting Parameter");
	}
	Expression()
	{
		if (parser_pass == 5) {
		}
		printDebug("Ending Parameter");
		return results;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.252------------ */
String ParameterId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	{
		printDebug("In ParameterId, starting");
	}
	t = <SIMPLE_ID>
	{
		printDebug("In ParameterId, ending: " + t.image);
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.253------------ */
jsdai.SExtended_dictionary_schema.EParameter ParameterType() throws jsdai.lang.SdaiException :
{
//      jsdai.lang.EEntity pt = null;
	jsdai.SExtended_dictionary_schema.EData_type pt = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	String parameter_key = null;
}
{
	{
		printDebug("In ParameterType, starting");
	}
	// seems that there is no conflict, lookahead is not needed
//	(LOOKAHEAD(GeneralizedTypes())par = GeneralizedTypes() | pt = NamedTypes() | pt = SimpleTypes(null))
	(par = GeneralizedTypes(null) | pt = NamedTypes(null) | pt = SimpleTypes(null))
	{
		if (parser_pass == 4) {
			if (pt != null) {
				// par must be null, of course, NamedTypes() or SimpleTypes() was chosen. Parameter instance must be created now.
//                              if (create_instances) {
					par = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
					par.setParameter_type(null, pt);
					par.setName(null, "_named_or_simple_");


        // we cannot repeat the same name in hashmap, but we may need separate instances because pt may be different
        // assume that we will not be searching for these parameters by name anyway, so any unique id is ok.
				parameter_key = constructVariableParameterKey(par.getPersistentLabel().substring(1).toLowerCase());
				if (parameter_key != null) {
					if (!(hm_current_parameters.containsKey(parameter_key))) {
						hm_current_parameters.put(parameter_key, par);
					} else {
						// error - not possible, used unque identifier here
					}
				} else {
//					System.out.println("INTERNAL ERROR - wrong active scope: " + active_scope);
					System.out.println("INTERNAL ERROR - ParameterType, parameter: " + par + "  - wrong active scope: " + active_scope);
				}

					
//                              }
			} else {
//				System.out.println("@#PT parameter type null ERROR or generalized type");
			}
		}
		if (par == null) {
			printDebug("In ParameterType, ending - null");
		} else {
			printDebug("In ParameterType, ending - OK");
		}
		return par;
	}
}

/*--------- ISO 10303-14:B.2.153  ---*/
String PartitionId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*--------- ISO 10303-14:B.2.154  ---*/
jsdai.SExtended_dictionary_schema.EMap_or_view_partition PartitionQualification(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EMap_or_view_partition result = null;
}
{
       <BACKSLASH> result = PartitionRef(parent)
	 //<BACKSLASH> InterpretedRef(PI_PARTITION)
	{
		return result;
	}
}

/*--------- ISO 10303-14:B.2.155  ---*/
void PathCondition() throws jsdai.lang.SdaiException :
{}
{
	"{" ExtentReference() [ "|" LogicalExpression() ] "}"
}

/*-+-------- ISO 10303-14:B.2.156  ---*/
void PathQualifier() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In PathQualifier, starting");
	}
	 ForwardPathQualifier() | BackwardPathQualifier()
	{
		printDebug("In PathQualifier, ending");
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.254------------ */
jsdai.SExtended_dictionary_schema.EEntity_definition Population() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
}
{
	{
		printDebug("In Population, starting");
	}

	ed = EntityRef(null)
	{
		if (parser_pass == 5) {
		}
		printDebug("In Population, ending");
		return ed;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.255------------ */
int PrecisionSpec() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = NumericExpression()
	{
		return value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.256------------ */
void Primary() throws jsdai.lang.SdaiException  :
{
	Object reference = null;
}
{
	{
		printDebug("In Primary");
	}
	(Literal() | 
	// choice conflict - ()* and next may have "["
	// also  ()* and next may have simple_id - index_qualifier, attribute_qualifier
	// should not happen in real schemas, I think - until proven I'm wrong.
	// Therefore it is safe to choose qualifier in these cases.
	// adding a lookahead mostly to eliminate the warning

	(reference = QualifiableFactor() (LOOKAHEAD(2) reference = Qualifier(reference))*))
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.257------------ */
void ProcedureCallStmt() throws jsdai.lang.SdaiException  :
{
	int builtin_proc_id = -1;
	Vector arguments = new Vector();
	Vector expressions = new Vector();
	int argument_count = -1;
	Object operand = null;
	jsdai.SExtended_dictionary_schema.EProcedure_definition pd = null;
}
{
	{
		printDebug("In ProcedureCallStmt, starting");
	}
	(builtin_proc_id = BuiltInProcedure() | pd = ProcedureRef()) [argument_count = ActualParameterList(arguments, expressions)] ";"
	{
		if (parser_pass == 5) {
		}
		printDebug("Ending ProcedureCallStmt: " + builtin_proc_id);
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.258------------ */
void ProcedureDecl() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EProcedure_definition pd = null;
}
{
try {
(
	{
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	pd = ProcedureHead() AlgorithmHead() (Stmt())* #ListOfStmt<END_PROCEDURE>
	{
//	active_scope = null;
		function_depth--; 
		if (function_depth > 0) {
			active_scope = getParentFunctionProcedureRuleDefinition(pd);
  		active_scope_string = active_scope_extension.getParent_scope_string();
			active_scope_extension = active_scope_extension.getParent();
		} else {
			active_scope = null;
  		active_scope_string = active_scope_extension.getParent_scope_string();
			active_scope_extension = active_scope_extension.getParent();
		}
	
	} ";"
	/* ProcedureHead() [AlgorithmHead()] (Stmt())* <END_PROCEDURE> ";"  - JavaCC ERROR: [ ()* [] [] ] */
	{
		current_scope = (Vector)scope_stack.pop();
		if (parser_pass == 5) {
		}
	}
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	if (parser_pass == 1) {
//		printError(e.getMessage());
		printErrorMsg(e.getMessage(), null, true);
		error_count++;
		System.out.println("ERROR RECOVERY: skipping to END_PROCEDURE");
	}
	recoverFromParseException(END_PROCEDURE, e);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.259------------ */
jsdai.SExtended_dictionary_schema.EProcedure_definition ProcedureHead() throws jsdai.lang.SdaiException :
{
	String name;
	jsdai.SExtended_dictionary_schema.EProcedure_definition pd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration prod;
	String key = "";

	jsdai.SExtended_dictionary_schema.AParameter parameters = null;
	boolean var_present = false;
}
{
	<PROCEDURE> {function_depth++;} name = ProcedureId()
	{
		if (parser_pass == 1) {
			printVerbose("Procedure: " + name);
//			pd = findProcedure(name);
//			pd = findProcedure_definition(name);
			pd = findProcedure_definitionX(name);
			Token t = getToken(0);
			if (pd != null) {
						error_count++;
//						printError("duplicate procedure name \"" + name + "\" at line " + t.beginLine + ", column " + t.beginColumn);
						printErrorMsg("" + name + " - duplicate procedure name", null, true);
			} else {
				String wrong_name = findAnyName(name);
				if (wrong_name != null) {
						error_count++;
//						printError("duplicate name \"" + name + "\". The same name used for a procedure and for " + wrong_name + " at line " + t.beginLine + ", column " + t.beginColumn);
						printErrorMsg("" + name + " - duplicate procedure name, the name is already in use in the current scope", null, true);
				}
			}
		  if (function_depth == 1) {

				pd = (jsdai.SExtended_dictionary_schema.EProcedure_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CProcedure_definition.class);
			  active_scope_extension = new ECtScope(active_scope, pd, active_scope_extension, active_scope_string, name, name.toLowerCase());
				active_scope = pd;
	  		active_scope_string = "";
			  prod = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$procedure_declaration.class);
				prod.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					// prod.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				prod.setDefinition(null, pd);
// System.out.println("adding outer procedure with key: " + name.toLowerCase() + ", declaration: " + prod); 
				if (!(hm_current_procedure_declarations.containsKey(name.toLowerCase()))) {
					hm_current_procedure_declarations.put(name.toLowerCase(), prod);
				}
				if (flag_oc) {
					pd.setName(null, name);
				} else {
					pd.setName(null, name.toLowerCase());
				}
				parameters = pd.createParameters(null);
			} else { // inner procedure

				pd = (jsdai.SExtended_dictionary_schema.EProcedure_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CProcedure_definition.class);
			  prod = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInner_declaration$procedure_declaration.class);
				prod.setDefinition(null, pd);
				prod.setParent(null, sd);
				if ((active_scope instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) || 
						(active_scope instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule)) {
					((jsdai.SExtended_dictionary_schema.EInner_declaration)prod).setScope(null,active_scope);
					key = constructProcedureKey(name);
				} else {
					// probably inner procedure on the same level in parallel
System.out.println("ATTENTION! scope not set: " + prod);
					key = name.toLowerCase();
				}
			
			
			
				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					// prod.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
			  active_scope_extension = new ECtScope(active_scope, pd, active_scope_extension, active_scope_string, name, key);
				active_scope = pd;
	  		active_scope_string = "";
//System.out.println("adding inner procedure with key: " + key + ", declaration: " + prod); 
				if (!(hm_current_procedure_declarations.containsKey(key))) {
					hm_current_procedure_declarations.put(key, prod);
				}
				if (flag_oc) {
					pd.setName(null, name);
				} else {
					pd.setName(null, name.toLowerCase());
				}
				parameters = pd.createParameters(null);
			}

		} else {
//			pd = findProcedure(name);
			if (function_depth == 1) {

//				pd = findProcedure_definition(name);
				pd = findProcedure_definitionX(name);
			  active_scope_extension = new ECtScope(active_scope, pd, active_scope_extension, active_scope_string, name, name.toLowerCase());
				active_scope = pd;
	  		active_scope_string = "";
				if (pd == null) {
					error_count++;
					if (parser_pass == 2) {
//					printError("procedure not found: " + name);
						printErrorMsg("" + name + " - procedure not found", null, true);
					}
					printDebug("ProcedureHead - procedure not found: " + name);
				} else {
					parameters = pd.getParameters(null);
				}
			} else { // inner procedure
//				pd = findProcedure_definition(name);
				pd = findProcedure_definitionX(name);
			  active_scope_extension = new ECtScope(active_scope, pd, active_scope_extension, active_scope_string, name, constructProcedureKey(name));
				active_scope = pd;
	  		active_scope_string = "";
				if (pd == null) {
//					error_count++;
					if (parser_pass == 2) {
//					printError("procedure not found: " + name);
//						printErrorMsg("" + name + " - procedure not found", null, true);
					}
					printDebug("ProcedureHead - procedure not found: " + name);
				} else {
					parameters = pd.getParameters(null);
				}
			}
		}
	}
	 ["(" {var_present = false;}[<VAR> {var_present = true;}] FormalParameter(parameters, var_present, /* null,*/ null) (";" {var_present = false;}[<VAR>{var_present = true;}] FormalParameter(parameters, var_present, /* null,*/ null))* ")"] ";"
	 {
		if (parser_pass == 5) {
  	}
	return pd;
    }
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.260------------ */
String ProcedureId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* - LOOKAHEAD 2 - (Columns 3 & 20, 20 & 39, 39 & 56, 56 & 71) ------------------------ ISO 10303-11:A.2.261------------ */
// here, the bnf must be modified to handle interpreted identifiers.

Object QualifiableFactor_old() throws jsdai.lang.SdaiException  :
{
		Object reference = null;
		Object function_call = null;
		printDebug("In QualifiableFactor");
		int which_selected = 0;
		Token t = null;
		String name = null;
		global_name = null;
		Object constant = null;
 		jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
}
{
//      (LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") FunctionCall() {which_selected = 1;} | 
//			LOOKAHEAD(2) ConstantFactor(){which_selected = 2;} | 
//      LOOKAHEAD(2) GeneralRef(){which_selected = 3;} | 
//      LOOKAHEAD(2) AttributeRef(null, null, -1){which_selected = 4;} | 
//      Population(){which_selected = 5;})
//      LOOKAHEAD(t = InterpretedId()) QFInterpretedId(t) {which_selected = 3;} | 
//      LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") FunctionCall() {which_selected = 1;} | 
//      BuiltInConstant(){which_selected = 2;}
//      LOOKAHEAD( { getToken(1) == <SIMPLE_ID>} ) QFInterpretedId(t) {which_selected = 3;} | 
//      LOOKAHEAD((BuiltInFunction() | 
//      FunctionRef()) "(") FunctionCall() {which_selected = 1;} | 
//      BuiltInConstant(){which_selected = 2;}

// Express X stuff is interpreted, so it will be handled by QFInterpretedId

//      (LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) QFInterpretedId(name) {which_selected = 3;} | LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") FunctionCall() {which_selected = 1;} | BuiltInConstant(){which_selected = 2;})

// (LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") FunctionCall() {which_selected = 1;} | 
//  LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId(name) {which_selected = 3;} | 
//  BuiltInConstant(){which_selected = 2;}) | 
//  GeneralOrMapCall() | 
//  InstanceRef() | 
//  ViewAttributeRef() | 
//  ViewCall()

//	(LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") FunctionCall() {which_selected = 1;} | 

/*

	(LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") function_call = FunctionCall() {which_selected = 1;} | 
		LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId(name) {which_selected = 3;} |
				

//	    BuiltInConstant(){which_selected = 2;})
	constant = BuiltInConstant(){which_selected = 2;} 
  // GeneralOrMapCall() |   // GeneralRef() [ <MANO_BURBULAS> MapCall() ] 
  // ViewAttributeRef() | 
	// ViewCall()

*/

	{
		if (flag_oc) {
		  name = getToken(1).image;
		} else {
		  name = getToken(1).image.toLowerCase();
		}
		printDebug("In QualifiableFactor - token: " + name);
	}

	(LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") function_call = FunctionCall() {which_selected = 1;} | 
		LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId(name) {which_selected = 3;} |
				
//	    BuiltInConstant(){which_selected = 2;})
	constant = BuiltInConstant(){which_selected = 2;} 
  // GeneralOrMapCall() |   // GeneralRef() [ <MANO_BURBULAS> MapCall() ] 
  // ViewAttributeRef() | 
	// ViewCall()





	
	
	)


	{

		switch (which_selected) {
			case 0:
				printDebug("In QualifiableFactor nothing selected: " + name);
				break;
			case 1:
				printDebug("In QualifiableFactor selected FunctionCall: " + name);
				if (parser_pass == 5) {
					// stack is pushed in FunctionCall
					reference = function_call;
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 2:
				printDebug("In QualifiableFactor selected BuiltInConstant: " + name);
				if (parser_pass == 5) {
					// stack is pushed in BuiltInConstant
					reference = constant;
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 3:
				printDebug("In QualifiableFactor selected InterpretedId: " + name);
				break;
			default:
				printDebug("In QualifiableFactor - error: " + name);
				break;
		}


		return reference;
	}

}

///// ----------------- S

Object QualifiableFactor() throws jsdai.lang.SdaiException  :
{
		Object reference = null;
		printDebug("In QualifiableFactor");
		int which_selected = 0;
		Token t = null;
		String name = null;
		global_name = null;
		Object constant = null;
 		jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
		jsdai.SExtended_dictionary_schema.EEntity_definition pop_ed = null;
		jsdai.SExtended_dictionary_schema.EParameter par = null;
		jsdai.SExtended_dictionary_schema.EAttribute attr = null; 
		ECtVariable var = null;
}
{

  {
		if (flag_oc) {
		  name = getToken(1).image;
		} else {
		  name = getToken(1).image.toLowerCase();
		}
		printDebug("In QualifiableFactor - token: " + name);
// System.out.println("@#Q in QualifiableFactor - active scope: " + active_scope);		
		if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
    }
//    ahead = whatsAhead(this);
	}
	
    (   

/*
		LOOKAHEAD({isDummy(this)}) reference = DummyQualifiableFactor() 
		{
			printDebug("In QualifiableFactor selected DummyQualifiableFactor: " + name);
			if (parser_pass == 5) {
				// stack is pushed in BuiltInConstant
				// reference = constant;
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		| 
*/

//		ConstantFactor() |                // eliminated - builtin_constant | constant_ref
		LOOKAHEAD(BuiltInConstant()) reference = BuiltInConstant() 
		{
			printDebug("In QualifiableFactor selected BuiltInConstant: " + name);
			if (parser_pass == 5) {
				// stack is pushed in BuiltInConstant
				// reference = constant;
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		| 

		LOOKAHEAD({isAttributeRef()}) attr = AttributeRef(null, ed, 4, null)
		{
// System.out.println("@#A AttributeRef in QualifiableFactor, ed: " + ed);
			printDebug("In QualifiableFactor selected Attribute: " + name);
			if (parser_pass == 5) {
				argument_stack.push(attr);
				reference = attr;
				if (attr != null) {
					printStack("PUSH: QF attribute: " + attr.getName(null));
					if (expression_instances) {
						String x_operand = attr.getName(null);
					}
				} else {
					printVerbose("ERROR: QF attribute is NULL");
				}
			}
		}
		| 


		LOOKAHEAD({isConstantRef()}) reference = ConstantRef()
		{
			printDebug("In QualifiableFactor selected Constant: " + name);
			if (parser_pass == 5) {
				argument_stack.push(reference);
				// reference = constant;
				printStack("PUSH: QF constant: " + reference);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		|

		LOOKAHEAD({isFunctionCall()}) reference = FunctionCall() 
		{
			printDebug("In QualifiableFactor selected FunctionCall: " + name);
			if (parser_pass == 5) {
				// stack is pushed in FunctionCall
				// reference = function_call;
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		|   
    

		LOOKAHEAD({isViewAttributeRef()}) reference = ViewAttributeRef()
		{
			printDebug("In QualifiableFactor selected ViewAttributeRef: " + name);
			if (parser_pass == 5) {
				argument_stack.push(reference);
				printStack("PUSH: QF view_attribute_ref: " + reference);
			}
		}
		|      

		LOOKAHEAD({isSourceParameterRef()}) reference = SourceParameterRef()
		{
			printDebug("In QualifiableFactor selected SourceParameterRef: " + name);
			if (parser_pass == 5) {
				argument_stack.push(reference);
				printStack("PUSH: QF source_parameter_ref: " + reference);
			}
		}
		|      

		LOOKAHEAD({isTargetParameterRef()}) reference = TargetParameterRef()
		{
			printDebug("In QualifiableFactor selected TargetParameterRef: " + name);
			if (parser_pass == 5) {
				argument_stack.push(reference);
				printStack("PUSH: QF target_parameter_ref: " + reference);
			}
		}
		|      
		
		LOOKAHEAD({isViewCall()}) reference = ViewCall()
		{
			printDebug("In QualifiableFactor selected ViewCall: " + name);
			if (parser_pass == 5) {
				// is stack pushed in ViewCall? to see how to implement
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		|
		       
//  GeneralRef()
    // GeneralRef -> ParameterRef() | VariableRef()
    // in this implementation, parameter_ref or variable_ref if not followed by @, otherwise - map call    
    LOOKAHEAD({isParameterRef()}) par = ParameterRef()
    {
			printDebug("In QualifiableFactor selected Parameter: " + name);
			if (parser_pass == 5) {
				argument_stack.push(par);
				reference = par;
				printStack("PUSH: QF parameter: " + par);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
    }
    |
    
    LOOKAHEAD({isVariableRefX()}) var = VariableRef()
    {
			printDebug("In QualifiableFactor selected Variable: " + name);
			if (parser_pass == 5) {
				argument_stack.push(var);
				reference = var;
				printStack("PUSH: QF variable: " + var);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
    }
    |
    
		LOOKAHEAD({isPopulation()}) pop_ed = Population()
		{
			printDebug("In QualifiableFactor selected Population: " + name);
			if (parser_pass == 5) {
				argument_stack.push(pop_ed);
				reference = pop_ed;
				printStack("PUSH: QF population: " + pop_ed.getName(null));
			}
		}
		|    

//		GeneralOrMapCall() |              // new X 
    // may have variable_ref or parameter_ref prefix, but handled here as map_call, 
    // lookahead may not be needed, if left last in the order


    // WRONG!!! map_call is supposed to have [ target_parameter_ref @ ] optional prefix, not general_ref
    // general_ref does not include target_parameter_ref 
    // also in our dictionary parameter has nothing to do with target_parameter.


//    LOOKAHEAD({isMapCall(this)}) reference =  GeneralOrMapCall() 

  
//    LOOKAHEAD({isGeneralOrMapCall()}) reference =  GeneralOrMapCall() 
    LOOKAHEAD({isMapCall()}) reference =  MapCall() 
    {
			printDebug("In QualifiableFactor selected MapCall: " + name);
			if (parser_pass == 5) {
				// is pushed in MapCall - to be implemented
				// reference = view_call;
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
    }

		|
		
		// hopefully it will not happen in pass 5
		reference = UnrecognizedReference()
    {
			printDebug("In QualifiableFactor nothing selected: " + name);
			if (parser_pass == 5) {
				// is pushed in MapCall - to be implemented
				// reference = view_call;
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
    }
	
	
	)


	{
		return reference;
	}

}


Object UnrecognizedReference() throws jsdai.lang.SdaiException  :
{
	Token t;
}
{
{
			printDebug("In UnrecognizedReference, starting in pass: " + parser_pass);
}
//    <SIMPLE_ID> [ "(" Expression() ")" [";"] ]
    t = <SIMPLE_ID> [ "(" [ Expression() ] ("," Expression())* ")" ]
//    t = <SIMPLE_ID> [ "(" Expression()   ("," Expression())*  ")" ]
//    t = <SIMPLE_ID> [ Expression()   ("," Expression())*  ]
//    t = <SIMPLE_ID> [ Expression() ]

//    t = <SIMPLE_ID> Expression() 
	{
	
		// if goes here in pass 5, empty stack exeption may occur.
		if (parser_pass == 5) {
			argument_stack.push(null);
		}
		printDebug("In UnrecognizedReference, ending: " + t.image);
		return null;
	}

}


Object QualifiableFactor_new_abandoned() throws jsdai.lang.SdaiException  :
{
		Object reference = null;
		Object function_call = null;
		printDebug("In QualifiableFactor");
		int which_selected = 0;
		Token t = null;
		String name = null;
		global_name = null;
		Object constant = null;
 		jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
}
{
//      (LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") FunctionCall() {which_selected = 1;} | 
//			LOOKAHEAD(2) ConstantFactor(){which_selected = 2;} | 
//      LOOKAHEAD(2) GeneralRef(){which_selected = 3;} | 
//      LOOKAHEAD(2) AttributeRef(null, null, -1){which_selected = 4;} | 
//      Population(){which_selected = 5;})
//      LOOKAHEAD(t = InterpretedId()) QFInterpretedId(t) {which_selected = 3;} | 
//      LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") FunctionCall() {which_selected = 1;} | 
//      BuiltInConstant(){which_selected = 2;}
//      LOOKAHEAD( { getToken(1) == <SIMPLE_ID>} ) QFInterpretedId(t) {which_selected = 3;} | 
//      LOOKAHEAD((BuiltInFunction() | 
//      FunctionRef()) "(") FunctionCall() {which_selected = 1;} | 
//      BuiltInConstant(){which_selected = 2;}

// Express X stuff is interpreted, so it will be handled by QFInterpretedId

//      (LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) QFInterpretedId(name) {which_selected = 3;} | LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") FunctionCall() {which_selected = 1;} | BuiltInConstant(){which_selected = 2;})

// (LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") FunctionCall() {which_selected = 1;} | 
//  LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId(name) {which_selected = 3;} | 
//  BuiltInConstant(){which_selected = 2;}) | 
//  GeneralOrMapCall() | 
//  InstanceRef() | 
//  ViewAttributeRef() | 
//  ViewCall()

//	(LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") FunctionCall() {which_selected = 1;} | 

/*

	(LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") function_call = FunctionCall() {which_selected = 1;} | 
		LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId(name) {which_selected = 3;} |
				

//	    BuiltInConstant(){which_selected = 2;})
	constant = BuiltInConstant(){which_selected = 2;} 
  // GeneralOrMapCall() |   // GeneralRef() [ <MANO_BURBULAS> MapCall() ] 
  // ViewAttributeRef() | 
	// ViewCall()



	(LOOKAHEAD((BuiltInFunction() | FunctionRef()) "(") function_call = FunctionCall() {which_selected = 1;} | 
		LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId(name) {which_selected = 3;} |
				
//	    BuiltInConstant(){which_selected = 2;})
	constant = BuiltInConstant(){which_selected = 2;} 
  // GeneralOrMapCall() |   // GeneralRef() [ <MANO_BURBULAS> MapCall() ] 
  // ViewAttributeRef() | 
	// ViewCall()

*/

// ######### new approach #################/

	
	{
		if (flag_oc) {
		  name = getToken(1).image;
		} else {
		  name = getToken(1).image.toLowerCase();
		}
		printDebug("In QualifiableFactor - token: " + name);
		if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
    }
    ahead = whatsAhead();
	}
	
    (   
		LOOKAHEAD({ahead == WA_ATTRIBUTE_REF}) reference = AttributeRef(null, ed, 4, null)
		{
		}
		| 

//		ConstantFactor() |                // eliminated - builtin_constant | constant_ref
		LOOKAHEAD({ahead == WA_BUILTIN_CONSTANT}) reference = BuiltInConstant() 
		{
		}
		| 

		LOOKAHEAD({ahead == WA_CONSTANT_REF}) reference = ConstantRef()
		{
		}
		|

		LOOKAHEAD({ahead == WA_FUNCTION_CALL}) reference = FunctionCall() 
		{
		}
		|   
    
		LOOKAHEAD({ahead == WA_POPULATION}) reference = Population()
		{
		}
		|    

		LOOKAHEAD({ahead == WA_VIEW_ATTRIBUTE_REF}) reference = ViewAttributeRef()
		{
		}
		|      
		
		LOOKAHEAD({ahead == WA_VIEW_CALL}) reference = ViewCall()
		{
		}
		|
		       
//  GeneralRef()
    // GeneralRef -> ParameterRef() | VariableRef()
    // in this implementation, parameter_ref or variable_ref if not followed by @, otherwise - map call    
    LOOKAHEAD({ahead == WA_PARAMETER_REF}) reference = ParameterRef()
    {
    }
    |
    
    LOOKAHEAD({ahead == WA_VARIABLE_REF}) reference = VariableRef()
    {
    }
    |
    
//		GeneralOrMapCall() |              // new X 
    // may have variable_ref or parameter_ref prefix, but handled here as map_call, 
    // lookahead may not be needed, if left last in the order
//    LOOKAHEAD({ahead == WA_MAP_CALL}) reference =  GeneralOrMapCall() 
    LOOKAHEAD({ahead == WA_MAP_CALL}) reference =  MapCall() 
    {
    }


	
	
	)


	{
/*
		switch (which_selected) {
			case 0:
				printDebug("In QualifiableFactor nothing selected: " + name);
				break;
			case 1:
				printDebug("In QualifiableFactor selected FunctionCall: " + name);
				if (parser_pass == 5) {
					// stack is pushed in FunctionCall
					reference = function_call;
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 2:
				printDebug("In QualifiableFactor selected BuiltInConstant: " + name);
				if (parser_pass == 5) {
					// stack is pushed in BuiltInConstant
					reference = constant;
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 3:
				printDebug("In QualifiableFactor selected InterpretedId: " + name);
				break;
			default:
				printDebug("In QualifiableFactor - error: " + name);
				break;
		}

*/
		return reference;
	}

}


///////////// E

Object QFInterpretedId(String name) throws jsdai.lang.SdaiException :
{
	Object reference = null;
	choice = 0;
	int chosen = 0;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EConstant_definition con = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	ECtVariable var = null;
	Object constant = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	Object varpar = null;
	String attr_key = null;
}
{
	{
//              printDDebug("interpreted ID name in QF: " + name);
		if (parser_pass == 1) {
		} else
		if (parser_pass == 2) {
		} else
		if ((parser_pass == 3) || (parser_pass == 4)) {
			ed = findEntity_definition(name, null);
			if (ed != null) { // interpreted ID is entity ID
				choice = 1;
			} else {
				// not an entity
				// con = findConstant(name);
				// why the old for was still used?
				con = findConstant_definitionX(name);
				if (con != null) { // interpreted ID is constant ID
					choice = 3;
				} else {
				// attribute - not in pass 3, parameter, variable - not yet applicable, by default - variable (?)
					choice = 5;
				}
			}
		}       else
		if (parser_pass == 5) {
			ed = findEntity_definition(name, null);
			if (ed != null) { // interpreted ID is entity ID
				choice = 1;
			} else {
				// not an entity
//				con = findConstant_definition(name);
				con = findConstant_definitionX(name);
				if (con != null) { // interpreted ID is constant ID
					choice = 3;
				} else {

					if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
						ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
printDDebug("QF entity-attribute: " + ed.getName(null));
// System.out.println("@X 11 name: " + name + ", ed: " + ed);
						attr = findAttribute(name, ed, -1, null, attr_key); // currently, 0, 1, or 2 is ignored, any attribute is returned.
						if (attr != null) { // interpreted ID is an attribute
							choice = 2;
						}
					} else {


						// varpar = findInNestedScope(name);
//						varpar = findInterpretedId(name);
						varpar = findInterpretedIdX(name);
						if (varpar == null) {
							// seems like an error.
						} else {
							if (varpar instanceof jsdai.SExtended_dictionary_schema.EParameter) {
								par = (jsdai.SExtended_dictionary_schema.EParameter)varpar;
								choice = 4;
							} else
							if (varpar instanceof ECtVariable) {
								var = (ECtVariable)varpar;
								choice = 5;
							} else {
								// seems like an error as well. Although I may need to modify the part about constants in QFInterpretedId.
						  }

						}
						// parameter or variable - not yet applicable, default - variable
						// choice = 5;
					}
				}
			}
		}
//              printDDebug("QF choice nr: " + choice);
	}
	(LOOKAHEAD({choice == 1}) ed = Population() {chosen = 1;} | 
		LOOKAHEAD({choice == 2}) attr = AttributeRef(null, ed, 4, null) {chosen = 2;} | 
		LOOKAHEAD({choice == 3}) constant = ConstantRef() {chosen = 3;} | 
		LOOKAHEAD({choice == 4}) par = ParameterRef() {chosen = 4;} | 
		var = VariableRef() {chosen = 5;})
	{
		switch (chosen) {
			case 0:
				printDebug("In QF nothing selected");
				break;
			case 1:
				printDebug("In QF selected Population");
				if (parser_pass == 5) {
					argument_stack.push(ed);
					reference = ed;
					printStack("PUSH: QF population: " + ed.getName(null));
				}
				break;
			case 2:
				printDebug("In QF selected Attribute");
				if (parser_pass == 5) {
					argument_stack.push(attr);
					reference = attr;
					if (attr != null) {
						printStack("PUSH: QF attribute: " + attr.getName(null));
						if (expression_instances) {
						//String x_operand = (String)expression_stack.pop();
							String x_operand = attr.getName(null);
//            x_operand = "this.get" + x_operand.substring(0,1).toUpperCase() + x_operand.substring(1).toLowerCase() + "(null)";
	    // x_operand = "get" + x_operand.substring(0,1).toUpperCase() + x_operand.substring(1).toLowerCase() + "(null)";
						// expression_stack.push(x_operand);
						// printXStack("PUSH: QF attribute: " + x_operand);
						}
					} else {
						printVerbose("ERROR: QF attribute is NULL");
					}
//					printStack("PUSH: QF attribute: " + attr.getName(null));
				}
				break;
			case 3:
				printDebug("In QF selected Constant");
				if (parser_pass == 5) {
					argument_stack.push(constant);
					reference = constant;
					printStack("PUSH: QF constant: " + constant);
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 4:
				printDebug("In QF selected Parameter");
				if (parser_pass == 5) {
					argument_stack.push(par);
					reference = par;
					printStack("PUSH: QF parameter: " + par);
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 5:
				printDebug("In QF selected Variable");
				if (parser_pass == 5) {
					argument_stack.push(var);
					reference = var;
					printStack("PUSH: QF variable: " + var);
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			default:
				printDebug("In QF - error");
				break;
		}
		return reference;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.262------------ */
jsdai.SExtended_dictionary_schema.EAttribute QualifiedAttribute(jsdai.SExtended_dictionary_schema.EEntity_definition ed, int attr_type) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr2 = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed2 = null;
	Token a_token;
}
{
	a_token = <SELF> ed2 = GroupQualifier() attr2 = AttributeQualifier(ed, ed2, attr_type, null)
	{
	   if (attr2 == null) {
//     	 System.out.println("<D2008> in QualifiedAttribute attr2 is null in pass: " + parser_pass);	   	
//     	 System.out.println("<D2008> GroupQualifier ed2: " + ed2);	   	
//     	 System.out.println("<D2008> ed: " + ed + ", attr_type: " + attr_type);	   	
	   }
	
		 if (parser_pass == 1) {
		 }
		 else { // pass 2

//if (parser_pass == 4) {
//	System.out.println("in QualifiedAttribute - after AttributeQualifier, GroupQualifier: " + ed2 + ", attr2: " + attr2);
//}		 
		 
		 }
		 createDocumentationEntity3(attr2, a_token);
// if (attr2 == null)
// printDDebug("After createDocumentation in QualifiedAttribute - null");
// else
// printDDebug("After createDocumentation in QualifiedAttribute: " + attr2.getName(null));
		 return attr2;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.263------------ */
Object Qualifier(Object general_reference) throws jsdai.lang.SdaiException :
{
	Object reference = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	jsdai.SExtended_dictionary_schema.EData_type gen_data = null;

	printDebug("In Qualifier, starting, general_reference: " + general_reference);


	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
		ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)general_reference;
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EParameter) {
		jsdai.lang.EEntity ref_type = null;
		if (((jsdai.SExtended_dictionary_schema.EParameter)general_reference).testParameter_type(null)) {
			ref_type = ((jsdai.SExtended_dictionary_schema.EParameter)general_reference).getParameter_type(null);
// System.out.println("@#Q: parameter type: " + ref_type);
		} else {
			printDDebug("Oo> parameter_type unset in qualifier: qualifier = parameter: " + general_reference);
		}
		if (ref_type instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)ref_type;
		} else {
			if (ref_type instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
				if (((jsdai.SExtended_dictionary_schema.EAggregation_type)ref_type).testElement_type(null)) {
					gen_data = ((jsdai.SExtended_dictionary_schema.EAggregation_type)ref_type).getElement_type(null);
					if (gen_data instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
printDDebug("OoO parameter, Entity in aggregate: " + gen_data.getName(null));
						ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)gen_data;
					} else {
						printDDebug("OoO parameter, NOT entity in aggregate: " + gen_data.getName(null));
					}
				} else {
					printDDebug("OoO parameter, In aggregate element type not set");
				}
			} {
				printDDebug("OoO parameter, NOT entity, not aggregate");
			}

		}
	} else
	if (general_reference instanceof ECtVariable) {
		jsdai.SExtended_dictionary_schema.EParameter par_type;
		jsdai.lang.EEntity ref_type = null;
		par_type = ((ECtVariable)general_reference).getType();

    if (par_type == null) {
    	printDDebug("HiHa variable parameter type NULL: " + general_reference);
    } else
		if (par_type.testParameter_type(null)) {
			ref_type = par_type.getParameter_type(null);
		} else {
			printDDebug("Oo> parameter_type unset in qualifier: qualifier = variable: " + general_reference);
		}
		if (ref_type == null) {
			printDDebug("OoO variable type is NULL, possibly implicit: " + general_reference);
		} else 
		if (ref_type instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)ref_type;
		} else {
			if (ref_type instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
				if (((jsdai.SExtended_dictionary_schema.EAggregation_type)ref_type).testElement_type(null)) {
					gen_data = ((jsdai.SExtended_dictionary_schema.EAggregation_type)ref_type).getElement_type(null);
					if (gen_data instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
printDDebug("OoO variable, Entity in aggregate: " + gen_data.getName(null));
						ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)gen_data;
					} else {
						printDDebug("OoO variable, NOT entity in aggregate: " + gen_data.getName(null));
					}
				} else {
					printDDebug("OoO variable, In aggregate element type not set");
				}
			} else {
				printDDebug("OoO variable, NOT entity, not aggregate");
			}

		}
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
		if (((jsdai.SExtended_dictionary_schema.EAggregation_type)general_reference).testElement_type(null)) {
			gen_data = ((jsdai.SExtended_dictionary_schema.EAggregation_type)general_reference).getElement_type(null);
			if (gen_data instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
printDDebug("OoO aggregate, Entity in aggregate: " + gen_data.getName(null));
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)gen_data;
			} else {
				printDDebug("OoO aggregate, NOT entity in aggregate: " + gen_data.getName(null));
			}
		} else {
				printDDebug("OoO aggregate, element not set");
		}
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
		if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)general_reference).testDomain(null)) {
			jsdai.lang.EEntity domain =  ((jsdai.SExtended_dictionary_schema.EExplicit_attribute)general_reference).getDomain(null);
			general_reference = domain;
			if (domain instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)domain;
			}
		}	 
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
		if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)general_reference).testDomain(null)) {
			jsdai.lang.EEntity domain =  ((jsdai.SExtended_dictionary_schema.EDerived_attribute)general_reference).getDomain(null);
			general_reference = domain;
			if (domain instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)domain;
			}
		}	 
	} else 
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
		if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)general_reference).testDomain(null)) {
			jsdai.lang.EEntity domain =  ((jsdai.SExtended_dictionary_schema.EInverse_attribute)general_reference).getDomain(null);
			general_reference = domain;
			if (domain instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)domain;
			}
		}	 
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.ESource_parameter) {
		jsdai.SExtended_dictionary_schema.ESource_parameter sp = (jsdai.SExtended_dictionary_schema.ESource_parameter)general_reference;
		if (sp.testExtent(null)) {
				jsdai.lang.EEntity domain =  ((jsdai.SExtended_dictionary_schema.ESource_parameter)general_reference).getExtent(null);
				general_reference = domain;
				//			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)sp.getExtent(null); 
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)domain;
		}
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.ETarget_parameter) {
		jsdai.SExtended_dictionary_schema.ETarget_parameter tp = (jsdai.SExtended_dictionary_schema.ETarget_parameter)general_reference;
		if (tp.testExtent(null)) {
				ed =  tp.getExtent(null);
		}
	} else
	if (general_reference == null) {
		printDDebug("OoO General reference is NULL");	
	} else {
		printDDebug("OoO NOT variable, NOT parameter, NOT entity, NOT aggregate: " + general_reference);	
	} 
}
{
//      (attr = AttributeQualifier(ed, null, -1, general_reference) | reference = GroupQualifier() | IndexQualifier())
//      (attr = AttributeQualifier(ed, null, 5, general_reference) | reference = GroupQualifier() | IndexQualifier())
//      (attr = AttributeQualifier(null, ed, 5, general_reference) | reference = GroupQualifier() | IndexQualifier())
//      (reference = AttributeQualifier(null, ed, 5, general_reference) | reference = GroupQualifier() | IndexQualifier(){reference = general_reference;})
//      (reference = GeneralAttributeQualifier(null, ed, 5, general_reference) | reference = GroupQualifier() | IndexQualifier(){reference = general_reference;} | PathQualifier())
//	(reference = AttributeQualifier(null, ed, 5, general_reference) | reference = GroupQualifier() | IndexQualifier(){reference = general_reference;} | PathQualifier() | ViewAttributeRef())
	(reference = AttributeQualifier(ed, ed, 5, general_reference) | 
		reference = GroupQualifier() | 
		reference = IndexQualifier(general_reference) 
//		IndexQualifier(){reference = general_reference;} 
		| 
		PathQualifier() | 
		ViewAttributeRef())
	{
		if (reference == null) {
			printDebug("In Qualifier, ending with reference = null");
		} else {
			printDebug("In Qualifier, ending with OK reference");
		}
	// if (reference == null) {
	//      reference = general_reference;
	// }	
	return reference;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.264------------ */
void QueryExpression() throws jsdai.lang.SdaiException :
{
	Object aggregate_source = null; // should be entity_definition
	Object log_exp = null;
	Object query_result = null;
	Object pop_inst_aggr_src = null;
	Object pop_inst_log_exp = null;
	ECtVariable var = null;
	String variable_id = null;
	jsdai.lang.EEntity variable_parameter_type = null;
	jsdai.SExtended_dictionary_schema.EParameter variable_type = null;
	String var_id = "";
	String variable_key = "";
}
{
	{
		printDebug("In QueryExpression, starting");
		variable_uid++;
		var_id += "_implicit_" + variable_uid + "_";
		if (parser_pass == 5) {
			variable_id_stack.push(var_id);
		}
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	<QUERY> "("  variable_id = VariableId() "<*" AggregateSource()
	{
		if (parser_pass == 4) {

			variable_type = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);

			variable_type.setName(null, "_implicit_variable_");

//			aggregate_source = argument_stack.pop();

			printStack("POP: AggregateSource in Query: " + aggregate_source);
			printDDebug("aggregate_source : " + aggregate_source);
			
			if (aggregate_source instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute){
					printDDebug("getDomain: attr domain: " + ((jsdai.SExtended_dictionary_schema.EExplicit_attribute)aggregate_source).getDomain(null));
					variable_type.setParameter_type(null, (jsdai.SExtended_dictionary_schema.EData_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)aggregate_source).getDomain(null));
			}else
			if (aggregate_source instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute){
					printDDebug("getDomain: attr domain: " + ((jsdai.SExtended_dictionary_schema.EDerived_attribute)aggregate_source).getDomain(null));
					variable_type.setParameter_type(null, (jsdai.SExtended_dictionary_schema.EData_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)aggregate_source).getDomain(null));
			}else
			if (aggregate_source instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute){
					printDDebug("getDomain: attr domain: " + ((jsdai.SExtended_dictionary_schema.EInverse_attribute)aggregate_source).getDomain(null));
					variable_type.setParameter_type(null, (jsdai.SExtended_dictionary_schema.EData_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)aggregate_source).getDomain(null));
			}
			if (aggregate_source instanceof ECtVariable){
//				printDDebug("getDomain: attr domain: " + ((ECtVariable)aggregate_source).getType());
//				variable_type.setParameter_type(null, ((ECtVariable)aggregate_source).getType().getParameter_type(null));
				jsdai.SExtended_dictionary_schema.EParameter tmp = ((ECtVariable)aggregate_source).getType();
				if (tmp.testParameter_type(null)) {
			  		variable_type.setParameter_type(null, tmp.getParameter_type(null));
				} else {
		  			printDDebug("Oo> parameter_type unset in query_expression, aggregate_source is variable: " + aggregate_source);
		  		}
			}


		  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension, active_scope_string, "" + variable_uid, variable_id);
 			active_scope_string = "";
//			active_scope = null;  // not using on schema level (yet)

			variable_key = constructImplicitVariableKey(variable_id, variable_uid);

// System.out.println("<--QUERY--> - constructing variable_key: " + variable_key + ", variable_id: " + variable_id + ", variable_uid: " + variable_uid);

//			var = new ECtVariable(variable_id, variable_type, function_depth, variable_key, active_scope, true, 1, (String)variable_id_stack.peek());
			var = new ECtVariable(variable_id, variable_type, function_depth, variable_key, active_scope, true, 1, "");
//			var = new ECtVariable(variable_id, variable_type, (String)variable_id_stack.peek());

			if (variable_key != null) {
				if (!(hm_current_variables.containsKey(variable_key))) {
					hm_current_variables.put(variable_key, var);
				} else {
					// error - perhaps more than one variable with the same name in a function
				}
			} else {
				System.out.println("INTERNAL ERROR - ImplicitVariable in QueryExpression: " + variable_id + "  - wrong active scope: " + active_scope);
			}


			current_scope.addElement(var);

			printStack("POP: AggregateSource in Query: " + aggregate_source);
			if (expression_instances) {
				// pop_inst_aggr_src = expression_stack.pop();
			}
		} else { // other passes - added to handle interpreted IDs

//		  active_scope_extension = new ECtScope(active_scope, active_scope, active_scope_extension, active_scope_string, "query_expression$", variable_id));
// 			active_scope_string = "";

			var = new ECtVariable(variable_id, variable_type);
			current_scope.addElement(var);

		}
	}
	 ( "|" LogicalExpression()) #QueryLogicalExpression
	{
		if (parser_pass == 5) {
		}
	}

	  ")"
	{
		if (parser_pass == 4) {
	 		active_scope_string =  active_scope_extension.getParent_scope_string();
			active_scope_extension = active_scope_extension.getParent();
		}
		current_scope = (Vector)scope_stack.pop();
		if (parser_pass == 5) {
			variable_id_stack.pop();
		}	

		printDebug("In QueryExpression, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.265------------ */

jsdai.SExtended_dictionary_schema.EReal_type RealType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EReal_type rt = null; 
	int precision = 0;
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	boolean precision_present = false;
}
{
	<REAL> ["(" precision = PrecisionSpec(){precision_present = true;} ")"] 
	{
		if (parser_pass == 3) {
			if ((!precision_present) || (precision == Integer.MIN_VALUE)) {
				rt = _st_real;
			} else {
				rt = (jsdai.SExtended_dictionary_schema.EReal_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReal_type.class);
				_data_type_name = "_REAL_" + precision;
				rt.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, precision);
				rt.setPrecision(null, b1);
			}	
		}
		else if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (rt == null) {
				if ((!precision_present) || (precision == Integer.MIN_VALUE)) {
					rt = _st_real;
				} else {
					rt = (jsdai.SExtended_dictionary_schema.EReal_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReal_type.class);
					_data_type_name = "_REAL_" + precision;
					rt.setName(null, _data_type_name);
					b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
					b1.setBound_value(null, precision);
					rt.setPrecision(null, b1);
				}	
			}
		}	
		if ((parser_pass == 5) && (precision_present) && (precision != Integer.MIN_VALUE)) {
				rt = (jsdai.SExtended_dictionary_schema.EReal_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReal_type.class);
				_data_type_name = "_REAL_" + precision;
				rt.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, precision);
				rt.setPrecision(null, b1);
		}
		return rt;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.266------------ */
jsdai.SExtended_dictionary_schema.EAttribute ReferencedAttribute(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute a;
}
{
	(a = AttributeRef(null, ed, 4, null) | a = QualifiedAttribute(ed, 4))
	{
// System.out.println("AttributeRef,4, ed: " + ed + ", a: " + a);
		return a;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.267------------ */
/*  ISO 10303-14.B.2.168 */
void ReferenceClause(Vector referenced_vector) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EGeneric_schema_definition reference_schema = null;
	String reference_schema_str;
	jsdai.lang.SdaiModel interfaced_model = null;
	boolean items_listed = false;
	jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
	Vector items_vector;
	jsdai.SExtended_dictionary_schema.EReference_from_specification rfs = null;
//	jsdai.SExtended_dictionary_schema.AReferenced_declaration items = null;
	jsdai.SExtended_dictionary_schema.AInterfaced_declaration items = null;

}
{
//      <REFERENCE> <FROM> reference_schema = SchemaRef()
	<REFERENCE> <FROM> reference_schema = SchemaRefOrRename()
	{

	  if (reference_schema != null) {
	  	if (reference_schema.getName(null).equalsIgnoreCase("mixed_complex_types")) {
				error_count++;
				printErrorMsg("REFERENCE FROM " + reference_schema.getName(null) + " - this special schema should not be interfaced explicitly", null, true);
	  	}
	  }

		items_vector = new Vector();
// what is that? next line, as found:
//		interfaced_model = reference_schema.findEntityInstanceSdaiModel();
		interfaced_model = findReferencedModel(reference_schema);
		if ((interfaced_model == null) && (parser_pass != 1)) {
			error_count++;
			if (parser_pass == 2) {
				if (reference_schema != null) {
//					printError("interfaced schema not found: " + reference_schema.getName(null).toLowerCase());
					printErrorMsg("" + reference_schema.getName(null) + " - interfaced schema not found", null, true);
				} else {
					printEDebug("interfaced schema not found, its name not determined");
				}
			}
			printDebug("REFERENCEd FROM schema not found: " + reference_schema);
		}

// 		if ((parser_pass == 2) && (interfaced_model != null)) {
 		if (interfaced_model != null) {
      			if (interfaced_model.getMode() == jsdai.lang.SdaiModel.NO_ACCESS) {
        			interfaced_model.startReadOnlyAccess();
      			}              
    		}

	}
	 ["(" dc = ResourceOrRename(interfaced_model){items_listed = true; items_vector.addElement(dc);} ("," dc = ResourceOrRename(interfaced_model) { items_vector.addElement(dc);})* ")"] [ <AS> ( <SOURCE> | <TARGET> ) ] ";"
	{
		if (parser_pass == 2) {
			rfs = (jsdai.SExtended_dictionary_schema.EReference_from_specification)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReference_from_specification.class);
			jsdai.SExtended_dictionary_schema.ESchema_definition asd = getSchema_definitionFromModel(interfaced_model);
			if (asd != null) {
				rfs.setForeign_schema(null, asd);  // generic_schema_definition;
			}
			rfs.setCurrent_schema(null, sd); // generic_schema_definition;
			if (!items_listed) {
				if (interfaced_model != null) {
					createAllReferencedDeclarations(interfaced_model);
					referenced_vector.addElement(interfaced_model);
				}
			} else {
				items = rfs.createItems(null);			
//System.out.println("XXXOOOO: " + items);
				for (int i = 0; i < items_vector.size(); i++) {
//System.out.println("XXXOO: " + items_vector.elementAt(i));
//					 items.addByIndex(i, (jsdai.SExtended_dictionary_schema.EReferenced_declaration)items_vector.elementAt(i));
//					items.addByIndex(i, (jsdai.SExtended_dictionary_schema.EInterfaced_declaration)items_vector.elementAt(i));
//					((jsdai.SExtended_dictionary_schema.AReferenced_declaration)items).addByIndex(i, (jsdai.SExtended_dictionary_schema.EReferenced_declaration)items_vector.elementAt(i));
					Object ivi = items_vector.elementAt(i);
					if (ivi != null) {
						items.addUnordered((jsdai.SExtended_dictionary_schema.EReferenced_declaration)ivi);
					}
				}
				if (items.getMemberCount() == 0) {
					rfs.deleteApplicationInstance();
				}
			}
		}
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.268------------ */
int RelOp()  throws jsdai.lang.SdaiException :
{
	int op = 0;
}
{
	("<" {op = 1;}|  ">" {op = 2;} |  "<=" {op = 3;}|  ">=" {op = 4;}|  "<>" {op = 5;}|  "=" {op = 6;}|  ":<>:" {op = 7;}|  ":=:" {op = 8;})
	{
		return op;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.269------------ */
int RelOpExtended()  throws jsdai.lang.SdaiException  :
{
	int op = 0;
}
{
	(op = RelOp() | <IN> {op = 9;}| <LIKE> {op = 10;})
	{
		return op;
	}
}
/* - LOOKAHEAD 2 - (Columns 3 & 18, 18 & 31, 31 & 46, 46 & 62) ------------------------ ISO 10303-11:A.2.270------------ */
/*
void RenameId() :
{}
{
	LOOKAHEAD(2) ConstantId() | LOOKAHEAD(2) EntityId() | LOOKAHEAD(2) FunctionId() | LOOKAHEAD(2) ProcedureId() | TypeId()
}
*/
String RenameId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.271------------ */
boolean RepeatControl() throws jsdai.lang.SdaiException :
{
	Object while_op = null;
	Object until_op = null;
	Object pop_inst_while = null;
	Object pop_inst_until = null;
	boolean increment_present = false;
}
{
	{
		printDebug("In RepeatControl, starting");
		increment_present = false;
	}
	[IncrementControl() {increment_present = true;}] [WhileControl()
	{
		if (parser_pass == 5) {
			while_op = argument_stack.pop();
			printStack("POP: RepeatControl, while: " + while_op);
			if (expression_instances) {
				// pop_inst_while = expression_stack.pop();
			}
		}
	}
	] [UntilControl()
	{
		if (parser_pass == 5) {
			until_op = argument_stack.pop();
			printStack("POP: RepeatControl, until: " + until_op);
			if (expression_instances) {
				// pop_inst_until = expression_stack.pop();
			}
		}
	}
	]
	{
		
		printDebug("In RepeatControl, ending");
		return increment_present;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.272------------ */
void RepeatStmt() throws jsdai.lang.SdaiException :
{
	Object operand = null;
	String var_id = "";
	boolean increment_present = false;
}
{
	{
		variable_uid++;
		var_id += "_implicit_" + variable_uid + "_";
		if (parser_pass == 5) {
			variable_id_stack.push(var_id);
		}
		printDebug("In RepeatStmt, starting");
		
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	<REPEAT> increment_present = RepeatControl() ";" (Stmt())+ <END_REPEAT> ";"
	{
		if (parser_pass == 4) {
			if (increment_present) {
				active_scope_string = active_scope_extension.getParent_scope_string();
				active_scope_extension = active_scope_extension.getParent();
			}
		}
		current_scope = (Vector)scope_stack.pop();
		if (parser_pass == 5) {
			variable_id_stack.pop();
		}
		printDebug("In RepeatStmt, ending");
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.273------------ */
int Repetition() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = NumericExpression()
	{
		return value;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.274------------ */
jsdai.SExtended_dictionary_schema.EDeclaration ResourceOrRename(jsdai.lang.SdaiModel interfaced_model) throws jsdai.lang.SdaiException :
{
  String alias_name = null;
	jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
}
{
	dc = ResourceRef(interfaced_model) [<AS> alias_name = RenameId()]
	{
		if (parser_pass == 2) {
			if ((alias_name != null) && (dc != null)) 
			{
				((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dc).setAlias_name(null, alias_name);
				if (dc instanceof jsdai.SExtended_dictionary_schema.EEntity_declaration) {
					hm_current_entity_declarations.put(alias_name.toLowerCase(), dc);
				} else
				if (dc instanceof jsdai.SExtended_dictionary_schema.EType_declaration) {
					hm_current_type_declarations.put(alias_name.toLowerCase(), dc);
				} else
				if (dc instanceof jsdai.SExtended_dictionary_schema.EFunction_declaration) {
					hm_current_function_declarations.put(alias_name.toLowerCase(), dc);
				} else
				if (dc instanceof jsdai.SExtended_dictionary_schema.EProcedure_declaration) {
					hm_current_procedure_declarations.put(alias_name.toLowerCase(), dc);
				} else
				if (dc instanceof jsdai.SExtended_dictionary_schema.EConstant_declaration) {
					hm_current_constant_declarations.put(alias_name.toLowerCase(), dc);
				} else
				if (dc instanceof jsdai.SExtended_dictionary_schema.ESubtype_constraint_declaration) {
					hm_current_subtype_constraint_declarations.put(alias_name.toLowerCase(), dc);
				} else 
				if (dc instanceof jsdai.SExtended_dictionary_schema.ERule_declaration) {	
					hm_current_rule_declarations.put(alias_name.toLowerCase(), dc);
				}

			}
		}
		return dc;
	}
}

/* - LOOKAHEAD 2 - (Columns 3 & 19, 19 & 33, 33 & 49, 49 & 66) ------------------------ ISO 10303-11:A.2.275------------ */
/*  ISO 10303-14.B.2.176 */
// also must handle ViewRef and MapRef for Express X

jsdai.SExtended_dictionary_schema.EDeclaration ResourceRef(jsdai.lang.SdaiModel interfaced_model) throws jsdai.lang.SdaiException :
{
  jsdai.SExtended_dictionary_schema.ESchema_definition interfaced_schema = null;
  String referenced_type_name = null;
	jsdai.SExtended_dictionary_schema.ENamed_type nt = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
	jsdai.SExtended_dictionary_schema.EConstant_definition cd = null;
	jsdai.SExtended_dictionary_schema.EFunction_definition fd = null;
	jsdai.SExtended_dictionary_schema.EProcedure_definition pd = null;
	jsdai.SExtended_dictionary_schema.EGlobal_rule gr = null;
	jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
//      jsdai.SExtended_dictionary_schema.EEntity_declaration$referenced_declaration edc = null;
//      jsdai.SExtended_dictionary_schema.EReferenced_declaration$type_declaration tdc = null;
}
{
	// this is stupid as only ConstantRef() is actually always chosen, no matter how many lookahead symbols.
	// better to write and use only one not confusing non-terminal symbol instead

//  ConstantRef() | EntityRef() | FunctionRef() | ProcedureRef() | TypeRef(3)

		referenced_type_name = InterpretedId()
	{
		if (parser_pass == 2) {
// System.out.println("X__X in ResourceRef, interpreted id: " + referenced_type_name);
			if (interfaced_model != null) {
				interfaced_schema = getSchema_definitionFromModel(interfaced_model);
			}
			ed = findInterfacedEntity_definition(interfaced_model, referenced_type_name);
// System.out.println("X__X in ResourceRef, interfaced entity definition: " + ed);
printDDebug("#@# ResourceRef: ed: " + ed);
			if (ed == null) {
				dt = findInterfacedDefined_type(interfaced_model, referenced_type_name);
				if (dt == null) {
					cd = findInterfacedConstant(interfaced_model, referenced_type_name);
					if (cd == null) {
						fd = findInterfacedFunction(interfaced_model, referenced_type_name);
						if (fd == null) {
							pd = findInterfacedProcedure(interfaced_model, referenced_type_name);
							if (pd == null) {
								gr = findInterfacedRule(interfaced_model, referenced_type_name);
								if (gr == null) {
									error_count++;
									if (interfaced_schema != null) {
//										printError("interfaced EXPRESS type \"" + referenced_type_name + "\" not found in schema: " + interfaced_schema.getName(null).toLowerCase());
										printErrorMsg("" + referenced_type_name + "- interfaced EXPRESS type not found in schema: " + interfaced_schema.getName(null), null, true);
									} else {
//										printError("interfaced EXPRESS type \"" + referenced_type_name + "\" not found in schema which itself was not found");
										printErrorMsg("" + referenced_type_name + " - interfaced EXPRESS type not found in a schema which itself was not found", null, true);
									}
									if (interfaced_model != null) {
										printDebug("REFERENCE FROM: interfaced express type \"" + referenced_type_name + "\" not found in model: " + interfaced_model.getName());
									} else {
										printDebug("REFERENCE FROM: interfaced express type \"" + referenced_type_name + "\" not found in model which itself was not found");
									}
								} else {
								printDebug("interfaced rule: " + referenced_type_name);
								/*
									if (neededRuleReferencedDeclaration(gr)) {
										dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReferenced_declaration$rule_declaration.class);
										dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
										dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EGlobal_rule)gr);
										gr.setTemp(FLAG_REFERENCED);
									}
								*/
								}
							} else {
								if (neededProcedureReferencedDeclaration(pd)) {
									dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CProcedure_declaration$referenced_declaration.class);
									dc.setParent(null, sd);
									// parent_schema is now derived instead of explicit 
									// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
										// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
									// }
									dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EProcedure_definition)pd);
									if (!(hm_current_procedure_declarations.containsKey(referenced_type_name.toLowerCase()))) {
										hm_current_procedure_declarations.put(referenced_type_name.toLowerCase(), dc);
									}
									pd.setTemp(FLAG_REFERENCED);
								}
							}
						} else {
							if (neededFunctionReferencedDeclaration(fd)) {
								dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_declaration$referenced_declaration.class);
								dc.setParent(null, sd);
								// parent_schema is now derived instead of explicit 
								// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
									// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
								// }
								dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EFunction_definition)fd);
								if (!(hm_current_function_declarations.containsKey(referenced_type_name.toLowerCase()))) {
									hm_current_function_declarations.put(referenced_type_name.toLowerCase(), dc);
								}
								fd.setTemp(FLAG_REFERENCED);
							}
						}
					} else {
						if (neededConstantReferencedDeclaration(cd)) {
							dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CConstant_declaration$referenced_declaration.class);
							dc.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
								// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							// }
							if (!(hm_current_constant_declarations.containsKey(referenced_type_name.toLowerCase()))) {
								hm_current_constant_declarations.put(referenced_type_name.toLowerCase(), dc);
							}
							dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EConstant_definition)cd);
							cd.setTemp(FLAG_REFERENCED);
						}
					}
				} else {
//                                      tdc = checkTypeReferencedDeclaration(dt);
//                                      if (tdc == null ) {
					if (neededTypeReferencedDeclaration(dt)) {
						dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReferenced_declaration$type_declaration.class);
						dc.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
							// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						// }
						dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)dt);
						if (!(hm_current_type_declarations.containsKey(referenced_type_name.toLowerCase()))) {
							hm_current_type_declarations.put(referenced_type_name.toLowerCase(), dc);
						}
						dt.setTemp(FLAG_REFERENCED);
					}
				}
			} else { // entity_definition
//                                      edc = checkEntityReferencedDeclaration(ed);
//                                      if (edc == null ) {
// System.out.println("X__X in ResourceRef, entity definition: " + ed.getName(null));
					if (neededEntityReferencedDeclaration(ed)) {
// System.out.println("X__X in ResourceRef, entity definition - creating declaration ");
						dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$referenced_declaration.class);
						dc.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
							// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						// }
						dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)ed);
// System.out.println("X__X in ResourceRef, entity definition - created declaration: " + dc);
						if (!(hm_current_entity_declarations.containsKey(referenced_type_name.toLowerCase()))) {
// System.out.println("X__X in ResourceRef, entity definition - HashMap key does not exist, adding: " + referenced_type_name.toLowerCase());
							hm_current_entity_declarations.put(referenced_type_name.toLowerCase(), dc);
						} else {
// System.out.println("X__X in ResourceRef, entity definition - HashMap key already exists: " + referenced_type_name.toLowerCase());
							jsdai.SExtended_dictionary_schema.EEntity_declaration edc11 = (jsdai.SExtended_dictionary_schema.EEntity_declaration)hm_current_entity_declarations.get(referenced_type_name.toLowerCase());
// System.out.println("X__X in ResourceRef, entity definition - HashMap key already exists, retrieved declaration: " + edc11);
						}
						Object t_object = ed.getTemp();
						if (t_object == null) {
							ed.setTemp(FLAG_REFERENCED);
						} else {
							if (t_object instanceof ECtRenamed) {
								if (((ECtRenamed)t_object).interfaced_flag == null) {
									((ECtRenamed)t_object).interfaced_flag = FLAG_REFERENCED;
								} else {
									// already set
								}
							} else
							if (t_object instanceof Integer) {
								// already set
							} else {
								System.out.println("<ExpressCompiler> INTERNAL ERROR - ResourceRef - temp_object: " + t_object + ", entity: " + ed);
							}
						}

					} else {
// System.out.println("X__X in ResourceRef, entity definition - NOT creating declaration, not needed ");
					}
			}
		} else
		if (parser_pass == 3) {
		} else
		if (parser_pass == 4) {
		} else
		if (parser_pass == 5) {
		}
		return dc;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.276------------ */
void ReturnStmt() throws jsdai.lang.SdaiException :
{
	Object operand = null;
	Object pop_inst = null;
}
{
	{
		printDebug("In ReturnStmt, starting");
	}
	<RETURN> ["(" Expression()
	{
		if (parser_pass == 5) {
		}
	}
	")"] ";"
	{
		printDebug("In ReturnStmt, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.277 ------------ */
void RuleDecl() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EGlobal_rule gr;
}
{
try {
(
	{
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	gr = RuleHead() AlgorithmHead() (Stmt())* WhereClause(gr) <END_RULE> 
	{
		active_scope = null;
	  active_scope_string = active_scope_extension.getParent_scope_string();
	  active_scope_extension = active_scope_extension.getParent();
		function_depth = 0;
	} ";"


	/* RuleHead() [AlgorithmHead()] (Stmt())* WhereClause() <END_RULE> ";" - JavaCC ERROR: [ ()* [] [] ] */
	{
		current_scope = (Vector)scope_stack.pop();
		if (parser_pass == 5) {
		}
	}
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	if (parser_pass == 1) {
//		printError(e.getMessage());
		printErrorMsg(e.getMessage(), null, true);
		error_count++;
		System.out.println("ERROR RECOVERY: skipping to END_RULE");
	}
	recoverFromParseException(END_RULE, e);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.278------------ */
jsdai.SExtended_dictionary_schema.EGlobal_rule RuleHead() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EGlobal_rule gr = null;
	jsdai.SExtended_dictionary_schema.AEntity_definition aed = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed;
//      jsdai.SExtended_dictionary_schema.ELocal_declaration$rule_declaration lrd;
	jsdai.SExtended_dictionary_schema.EDeclaration lrd;
	int index = 1;
	String name;
	Token start_token = null;
	Token end_token = null;
	boolean first_token = true;
}
{
	<RULE>  {function_depth++;} name = RuleId() <FOR> "(" ed = EntityRef(null)
	{
// System.out.println("<> global rule: " + name);
		if (parser_pass == 1) {
printVerbose("Global Rule: " + name);
			gr = (jsdai.SExtended_dictionary_schema.EGlobal_rule)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CGlobal_rule.class);
		  active_scope_extension = new ECtScope(active_scope, gr, active_scope_extension, active_scope_string, name, name.toLowerCase());
  		active_scope_string = "";
			active_scope = gr;
		  lrd = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$rule_declaration.class);
			lrd.setParent(null, sd);
			// parent_schema is now derived instead of explicit 
			// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				// lrd.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
			// }
			lrd.setDefinition(null, gr);
			if (!(hm_current_rule_declarations.containsKey(name.toLowerCase()))) {
				hm_current_rule_declarations.put(name.toLowerCase(), lrd);
			}
			if (flag_oc) {
				gr.setName(null, name);
			} else {
				gr.setName(null, name.toLowerCase());
			}
//                      gr.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
			// now it is inverse
			// gr.createWhere_rules(null);
      aed = gr.createEntities(null);
      if (ed != null) {
//      	aed.addByIndex(index++, ed);
			}
		} else {
			gr = findGlobal_rule(name);
			aed = gr.getEntities(null);
			if (parser_pass == 3) {
	    	if (ed != null) {
      		aed.addByIndex(index++, ed);
				}
			}
		  active_scope_extension = new ECtScope(active_scope, gr, active_scope_extension, active_scope_string, name, name.toLowerCase());
  		active_scope_string = "";
			active_scope = gr;
		}
	}
	("," ed = EntityRef(null)
	{
		if (parser_pass == 3) {
      if (ed != null) {
      	aed.addByIndex(index++, ed);
			}
		} else {
		}
	}
	)* ")" ";"
	{
		if (parser_pass == 5) {
			if (function_depth == 1) {
//				String rule_description = "";
				String rule_description = " ";
				int local_function_depth = 1;
			for (int i = 1; ; i++) {
					Token t = getToken(i);
					if (t.kind == RULE) {
						local_function_depth++;
					}
					if (t.kind == END_RULE) {
						local_function_depth--;
						if (local_function_depth == 0) {
						 // printDDebug("Break, function depth: " + local_function_depth);
						 break;
						} else {
						 ; // printDDebug("Continue, function depth: " + local_function_depth);
						}

					}
					if (first_token) {
						start_token = t;
						end_token = t;
						first_token = false;
					} else {
						end_token = t;
					}
					// is it really needed here?
					if (flag_oc) {
						rule_description += t.image + " ";
					} else {
						rule_description += t.image.toLowerCase() + " ";
					}
//					rule_description += t.image;
			}
				// printDDebug("Global rule: " + rule_description);
				createExpressEntity(gr, rule_description, start_token, end_token);
//				createExpressEntity(gr, rule_description);
			}
    }
		return gr;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.279------------ */
String RuleId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.280 ------------ */
void SchemaBody(Vector used_vector, Vector referenced_vector) throws jsdai.lang.SdaiException :
{
}
{
{
	if (active_scope_extension == null) {
	System.out.println("SchemaBody: active_scope_extension = NULL");
}

}
	(InterfaceSpecification(used_vector, referenced_vector))* [ConstantDecl()] (Declaration() | RuleDecl())*
}

/* -------------------------------------------------------------------Amendment--------------10303-11:A.2.406 ------------ */
jsdai.SExtended_dictionary_schema.EAttribute RedeclaredAttribute(jsdai.SExtended_dictionary_schema.EEntity_definition ed, int attr_type) throws jsdai.lang.SdaiException :
{
	
	jsdai.SExtended_dictionary_schema.EEntity_definition already_ed = null;
	Token new_name = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr_current = null;
	Object temp_object = null;
	ECtRenamed renamed = null;
}
{
	// to finish implementing, also in AttributeDecl()
	{
		flag_in_redeclaring = true;

		if (parser_pass == 3) {
			if (ed != null) {
				temp_object = ed.getTemp();
				if (temp_object != null) { // probably already exists, we were in attribute redeclaring already for this entity
					if (temp_object instanceof ECtRenamed) {
						renamed = (ECtRenamed)temp_object;
						// renamed.activate();
						renamed.newAttribute(ed);
// System.out.println("<><>ACTIVATED<><> already present - ed: " + ed);
						ed.setTemp(renamed);
					} else {
						// hm, what could be there?
						if (temp_object instanceof Integer) {
							renamed = new ECtRenamed(ed, (Integer)temp_object);
							ed.setTemp(renamed);
// System.out.println("<><>ACTIVATED<><> new, prev - Integer - ed: " + ed);
						} else {
							System.out.println("<ExpressCompiler> INTERNAL ERROR - RedeclaredAttribute - temp object: " + temp_object + ", entity: " + ed);
						}
					}
		 		} else { // create a new one
					renamed = new ECtRenamed(ed);
					ed.setTemp(renamed);
// System.out.println("<><>ACTIVATED<><> new, clean - ed: " + ed);
				}
			}
		} // parser_pass

	}
	attr = QualifiedAttribute(ed, attr_type)  [<RENAMED> new_name = AttributeId() ]	
	{



		if (parser_pass == 3) {
			if (ed != null) {
				temp_object = ed.getTemp();
				if (temp_object != null) {
	  			if (temp_object instanceof ECtRenamed) {
						renamed = (ECtRenamed)temp_object;
						if (new_name != null) {
							// add this attribute 
							renamed.add(new_name.image);
// System.out.println("<><>DE-ACTIVATED<><> ed: " + ed + ", new name: " + new_name.image);
						} else {
							// discard this attribute, it is not renamed
							renamed.discard();
// System.out.println("<><>DE-ACTIVATED<><> ed: " + ed + ",attr: " + attr);
						}
						ed.setTemp(renamed);
					} else {
						// hm, what could be there? an internal error?
						// at this stage, interfacing flags should already be replaced by ECtRenamed, so what is it, really?
						System.out.println("<ExpressCompiler> INTERNAL ERROR - RedeclaredAttribute - temp: " + temp_object + ", entity: " + ed);
					}
				} else { 
					// INTERNAL ERROR: it should have been not null already, just look above
						System.out.println("<ExpressCompiler> INTERNAL ERROR - RedeclaredAttribute - temp is NULL, entity: " + ed);
				}
			}
  	}


		
	
		if (new_name != null) {
//System.out.println("<KUKU>: " + new_name.image + ", ed: " + ed.getName(null));
		 already_ed = moreThanOneAttributeWithTheSameNameRenamed(new_name.image, ed);
		 // RR2008 - this check temporarily removed, it seems we already made the changes in between passes 3 and 4
		 // this check perhaps can be added into the resolving method between passes 3 and 4
		 already_ed = null;
		 if (already_ed != null) {
		 		error_count++;
		 		if (already_ed == ed) {
					printErrorMsg("" + new_name.image +  " - attempting to rename attribute, but an attribute with the same name already exists in entity " + ed.getName(null), null, true);
		 		} else {
					printErrorMsg("" + new_name.image +  " - attempting to rename attribute in " + ed.getName(null) + " , but an attribute with the same name already exists in supertype " + already_ed.getName(null), null, true);
		 		}
		 }

			if (attr != null ) {
			  temp_object = attr.getTemp();
			  if (temp_object != null) {
			  	if (temp_object instanceof String) {
						if (((String)temp_object).equalsIgnoreCase(new_name.image)) {
							// ok, already named in the previous pass
				  		attr.setTemp(new_name.image); // this is not really needed
						} else {
              // INVESTIGATING the RENAMING ISSUE
			  			// System.out.println("RENAMED - already renamed - original name: " + attr.getName(null) + ", renamed to: " + temp_object + ", attempting to rename to: " + new_name.image + ", parser pass: " + parser_pass);
				  		// attr.setTemp(new_name.image);
			  		}
			  	} else {
			  		System.out.println("RENAMED - hm, what is it? : " + temp_object);
				  	attr.setTemp(new_name.image);
		  	  }
			  } else {
//				  System.out.println("<D2008>SETTING RENAMED - setting Temp object< in pass: " + parser_pass + ",  new name: " + new_name + ", attribute: " + attr);
			  	attr.setTemp(new_name.image);
				}
// System.out.println("in RedeclaredAttribute @@@ new name: " + new_name.image + ", attr: " + attr + ", pass: " + parser_pass);

			} else {
			  if (parser_pass == 4) {
// 					System.out.println("<D2008>ERROR IS IT< in pass 4  in RedeclaredAttribute - @@@ new name: " + new_name.image + ", NULL - QualifiedAttribute returned NULL, ed: " + ed);
				}
			}

			// alternative would be to use a separate attribute alias_name in attribute
			// but it is not really necessary, because it is always possible to get the original name from the redeclared attribute
			// however, the old name is also available in the same scope, therefore it is better to have an additional name.
			// Question: which name should be returned by getName()? old or new? If new - better to change the name, if old - better
			// to have an additional attribute alias_name. Perhaps.
// System.out.println("@X 11 attr: " + attr);
// System.out.println("@X 12 new name: " + new_name.image + ", ed: " + ed);

//			attr_current = findAttribute(new_name.image, ed, attr_type, null);

// System.out.println("@X 13 attr_current: " + attr_current);

//			if (attr_current != null) {
	
				// already exists, do nothing
				// attr_current.setName(null, new_name.image);

//			} else {

//				if (attr != null) {
					// String old_name = attr.getName(null);
//					attr.setName(null, new_name.image);
// System.out.println("@X 14 new attr: " + attr + ", old name: " + old_name);
//				}
//			}
		} // new_name not null
// System.out.println("@@@3 RedeclaredAttribute ending: " + attr);
		flag_in_redeclaring = false;
		return attr;
	}
}

/* ------------------------------------------------------------------------------------ Amendment ------------ */
void LanguageVersionId() throws jsdai.lang.SdaiException :
{
}
{
	"{" ( <SIMPLE_ID> | <INTEGER_LITERAL> | "(" | ")" )* "}"
}

 void AllSchemasInLoop() throws jsdai.lang.SdaiException :
{
}
{
try {
(
	 [ LanguageVersionId() ] ( SchemaDecl() | SchemaMapDecl() | SchemaViewDecl() | GarbageDeclaration ()) 
//	 [ LanguageVersionId() ] ( SchemaDecl() | SchemaMapDecl() | SchemaViewDecl()) 
//	  ( SchemaDecl() | SchemaMapDecl() | SchemaViewDecl()) 
)
} catch (ParseException e) {
//	System.out.println("OHOHO ERROR trying to recover");
	System.out.println("EXCEPTION: " + e);
		error_count++;
	System.out.println("ERROR RECOVERY: between schemas, skipping to the next schema");
	recoverToNextSchema(e);
}
}


void GarbageDeclaration_old() throws jsdai.lang.SdaiException :
{}
{
//	 <GARBAGE>
	 (<TYPE> | <END_SCHEMA>)
	{
//		System.out.println("ERROR: garbage between schemas");
		if (recoverToTheNextSchema(null) < 0) return;
	}
}


// may need two cases for including/excluding express amendment additional keywords, according to the switch,
// because if they are disabled in the scanner, there might be problems here

//  END_MODEL, END_CONTEXT ?


void GarbageDeclaration() throws jsdai.lang.SdaiException :
{}
{

(
<LPAREN>
| <RPAREN>
| <LBRACE>
| <RBRACE>
| <LBRACKET>
| <RBRACKET>
| <SEMICOLON>
| <COMMA>
| <DOT>
| <COLON>

// operators
| <EQ>
| <ASSIGN>
| <GT>
| <LT>
| <HOOK>
| <LE>
| <GE>
| <NE>
| <PLUS>
| <MINUS>
| <STAR>
| <STARS>
| <SLASH>
| <BACKSLASH>
| <BIT_OR>
| <OP_AT>
| <COMPLEX_AND>
| <OP_UNDERSCORE>

// Keywords

| <ABS>               
| <ABSTRACT>           
| <ACOS>               
| <AGGREGATE>         
| <ALIAS>                
| <AND>                     
| <ANDOR>              
| <ARRAY>                
| <AS>                  
| <ASIN>                 
| <ATAN>                 
| <BAG>
| <BASED_ON> /* ISO 10303-11:AMENDMENT */
| <BEGIN>              
| <BINARY>          
| <BLENGTH>             
| <BOOLEAN>             
| <BY>                     
| <CASE>                  
| <CONSTANT>          
| <CONST_E>            
| <CONTEXT>            
| <COS>             
| <CREATE> /* ISO 10303-14:B.1.1.001 - REMOVED in DIS */
| <DEPENDENT_MAP> /* ISO 10303-14:B.1.1.002 */
| <DERIVE>          
| <DIV>                    
| <EACH> /* ISO 10303-14:B.1.1.003 */
| <ELSE>               
| <ELSIF> /* ISO 10303-14:B.1.1.MISSING */
| <END>                 
| <END_ALIAS>       
| <END_CASE>          
| <END_CONSTANT>   
| <END_CONTEXT> 
| <END_CREATE> /* ISO 10303-14:B.1.1.004 - REMOVED IN DIS */
| <END_DEPENDENT_MAP>  /* ISO 10303-14:B.1.1.005 */
| <END_ENTITY>       
| <END_FUNCTION>  
| <END_IF>           
| <END_LOCAL>      
| <END_MAP>  /* ISO 10303-14:B.1.1.006 */
| <END_MODEL>    
| <END_PROCEDURE>
| <END_REPEAT>     
| <END_RULE>          
| <END_SCHEMA>     
| <END_SCHEMA_MAP>  /* ISO 10303-14:B.1.1.007 */
| <END_SCHEMA_VIEW> /* ISO 10303-14:B.1.1.008 */
| <END_SUBTYPE_CONSTRAINT> /* ISO 10303-11:AMENDMENT */
| <END_TYPE>       
| <END_VIEW>  /* ISO 10303-14:B.1.1.009 */
| <ENTITY>               
| <ENUMERATION>     
| <ESCAPE>             
| <EXISTS>              
| <EXP>                    
| <EXTENSIBLE> /* ISO 10303-11:AMENDMENT */
| <EXTENT>  /* ISO 10303-14:B.1.1.010 */
| <FALSE>             
| <FIXED>         
| <FOR>            
| <FORMAT>               
| <FROM>              
| <FUNCTION>        
| <GENERIC_ENTITY> /* ISO 10303-11:AMENDMENT */
| <GENERIC>          
| <HIBOUND>            
| <HIINDEX>        
| <IDENTIFIED_BY> /* ISO 10303-14:A.1.1.011 */
| <IF>                 
| <IN>                 
| <INDEXING>  /* ISO 10303-14:B.1.1.MISSING */
| <INSERT>              
| <INTEGER>          
| <INVERSE>           
| <LENGTH>         
| <LIKE>                
| <LIST>                   
| <LOBOUND>            
| <LOCAL>                
| <LOG>                     
| <LOG10>                 
| <LOG2>                   
| <LOGICAL>             
| <LOINDEX>             
| <MAP> /* ISO 10303-14:B.1.1.012 */
| <MOD>                     
| <MODEL>                 
| <NOT>                  
| <NUMBER>               
| <NVL>                     
| <ODD>                    
| <OF>                   
| <ONEOF>                 
| <OPTIONAL>        
| <OR>                       
| <ORDERED_BY>  /* ISO 10303-14:B.1.1.013 */
| <OTHERWISE>         
| <PARTITION>  /* ISO 10303-14:B.1.1.014 */
| <PI>                       
| <PROCEDURE>        
| <QUERY>                 
| <REAL>                   
| <REFERENCE>      
| <REMOVE>             
| <RENAMED>  /* ISO 10303-11:AMENDMENT */
| <REPEAT>               
| <RETURN>               
| <ROLESOF>             
| <RULE>                   
// | <SCHEMA>       
// | <SCHEMA_MAP>       /* ISO 10303-14:B.1.1.015 */
// | <SCHEMA_VIEW>     /* ISO 10303-14:B.1.1.016 */
| <SELECT>              
| <SELF>                
| <SET>                   
| <SIN>                   
| <SIZEOF>           
| <SOURCE>   /* ISO 10303-14:B.1.1.017 */
| <SUBTYPE_CONSTRAINT>  /* ISO 10303-11:AMENDMENT */
| <KW_SKIP>                
| <SQRT>                   
| <STRING>              
| <SUBTYPE>             
| <SUPERTYPE>        
| <TAN>              
| <TARGET>  /* ISO 10303-14:B.1.1.018 */
| <THEN>                
| <TO>                      
| <TOTAL_OVER> /* ISO 10303-11:AMENDMENT */
| <TRUE>                   
| <TYPE>             
| <TYPEOF>              
| <UNIQUE>               
| <UNKNOWN>           
| <UNTIL>             
| <USE>                  
| <USEDIN>               
| <VALUE>                 
| <VALUE_IN>           
| <VALUE_UNIQUE>   
| <VAR>                   
| <VIEW> /* ISO 10303-14:B.1.1.019 */
| <WITH> /* ISO 10303-11:AMENDMENT */
| <WHERE>             
| <WHILE>              
| <XOR>                     
// this is experimental addition
//| < HARD_SEPARATOR>      

| <BINARY_LITERAL>                                                  
| <ENCODED_STRING_LITERAL>                  
| <INTEGER_LITERAL>                                          
| <REAL_LITERAL>      
| <SIMPLE_ID>                              
| <SIMPLE_STRING_LITERAL>  



|	<BIT>                                             
| <DIGIT>                             
| <DIGITS>                                     
| <ENCODED_CHARACTER>          
| <HEX_DIGIT>                   
| <LETTER>                        
// | < LPAREN_NOT_STAR>                                
// | < NOT_LPAREN_STAR>                                
// | < NOT_PAREN_STAR>                 
| <NOT_PAREN_STAR_QUOTE_SPECIAL>
// | < NOTPAREN_STAR_SPECIAL>        
| <NOT_QUOTE>   
// | < NOT_RPAREN>                       
// | < NOT_STAR>                                   
| <OCTET>                              
// | < SPECIAL>
// | < STAR_NOT_RPAREN>   
| <SIGN>    

)
	{
//		System.out.println("ERROR: garbage between schemas");
		if (recoverToTheNextSchema(null) < 0) return;
	}
}







/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.281 ------------ */
X_AllSchemas AllSchemas() throws jsdai.lang.SdaiException :
{}
{
	{
	 	printDebug("In AllSchemas, starting, pass: " + parser_pass);
		if (first_parsed_file) {
			current_scope = new Vector();
		}
		schema_depth = 0;
		// current_scope.addElement("Universal Scope");
		// scope_stack.push(current_scope);
		// printScopeStack();
	}
//      (SchemaDecl() (SchemaDecl())*)

//	( [ LanguageVersionId() ]( SchemaDecl() | SchemaMapDecl() |  SchemaViewDecl() ) ( ( SchemaDecl() | SchemaMapDecl() | SchemaViewDecl() ) )*)
	// LanguageVersionId is allowed only before the first schema, but this implementation is more flexible and error-friendly

	  ( AllSchemasInLoop()  ( AllSchemasInLoop() )* ) 


//	( [<HARD_SEPARATOR>][ LanguageVersionId() ]( SchemaDecl() | SchemaMapDecl() |  SchemaViewDecl() ) 
//	(  [<HARD_SEPARATOR>][ LanguageVersionId() ] ( SchemaDecl() | SchemaMapDecl() | SchemaViewDecl() ) )*)

//	( AllSchemasInLoop() )*)

//	SchemaDecl() SchemaViewDecl()			
//	((SchemaDecl() | SchemaViewDecl()) (SchemaDecl() | SchemaViewDecl())*)			
	{
		// current__scope = scope_stack.pop();
	 printDebug("In AllSchemas, ending, pass: " + parser_pass);
	 if (_st_real == null) {
		 printDebug("In AllSchemas, ending, pass: " + parser_pass + ", _st_real is NULL");
	 } else {
		 printDebug("In AllSchemas, ending, pass: " + parser_pass + ", _st_real is OK");
	 }
	return null;
	}
}

void SchemaDecl() throws jsdai.lang.SdaiException :
{
	String schema_name;
	String version_name = null;
	Token a_token;
	Vector used_vector = null;
	Vector referenced_vector = null;
}
{
try {
(
	{
		Token t;
		express_x = false;
		scope_stack.push(current_scope);
		current_scope = new Vector();
		function_depth = 0;
	}
	a_token = <SCHEMA> { schema_depth++; } schema_name = SchemaId()
	{
		global_schema_name = schema_name.toLowerCase();
		printVerbose0("Parsing schema: " + schema_name + " in pass " + parser_pass);
//		printVerbose("Starting parsing schema: " + schema_name + " in pass " + parser_pass);
		if ((parser_pass == 1) && (!is_complex_schema)) {
			compiled_schemas.addElement(schema_name);
//                      if (model == null) {
				model_name = schema_name.toUpperCase() + "_DICTIONARY_DATA";
				compiled_models.addElement(model_name);
// listModels();
// printDDebug("Creating model: : " + model_name);


				model = repository.findSdaiModel(model_name);
				// model = findModel(schema_name);
				if (model != null) {
					if ((flag_replace_schema) && (model.getMode() == jsdai.lang.SdaiModel.READ_ONLY)) {
						model.deleteSdaiModel();
						jsdai.lang.SdaiModel relatedModel = 
							repository.findSdaiModel("_EXPRESS_" + schema_name.toUpperCase());
						if(relatedModel != null) {
							relatedModel.deleteSdaiModel();
						}
						relatedModel = 
							repository.findSdaiModel("_DOCUMENTATION_" + schema_name.toUpperCase());
						if(relatedModel != null) {
							relatedModel.deleteSdaiModel();
						}
					} else {
						error_count++;
						Token tt = getToken(0);
//						printError("Duplicate schema name: " + schema_name + " at line " + tt.beginLine + ", column " + tt.beginColumn);
						printErrorMsg("" + schema_name + " - duplicate schema name", null, true);
						do {
							t = getToken(1);
							if (t.kind != Compiler2Constants.END_SCHEMA) {
							 	getNextToken();
							}
							// t = getNextToken();
						} while (t.kind != Compiler2Constants.END_SCHEMA);
						return;
					}
				}
				model = repository.createSdaiModel(model_name, jsdai.SExtended_dictionary_schema.SExtended_dictionary_schema.class);
				model.startReadWriteAccess();
				sd = (jsdai.SExtended_dictionary_schema.ESchema_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSchema_definition.class);
				if (flag_oc) {
					sd.setName(null, schema_name);
				} else {
					sd.setName(null, schema_name.toUpperCase());
				}
			  active_scope_extension = new ECtScope(active_scope, sd, active_scope_extension, active_scope_string, schema_name, schema_name.toLowerCase());
//System.out.println("new active_scope_extension: " + active_scope_extension);
	 			active_scope_string = "";
				active_scope = null;  // not using on schema level (yet)
				
				hm_current_entity_declarations = new HashMap();
				hm_current_type_declarations = new HashMap();
				hm_current_function_declarations = new HashMap();
				hm_current_procedure_declarations = new HashMap();
				hm_current_rule_declarations = new HashMap();
				hm_current_constant_declarations = new HashMap();
				hm_current_subtype_constraint_declarations = new HashMap();
				hm_current_variables = new HashMap();
				hm_current_parameters = new HashMap();

// System.out.println("Model created in pass 1: " + model);				
				
				Object hm = hm_entity_declarations.put(model, hm_current_entity_declarations);
				if (hm != null) {
					System.out.println("ERROR: entity declaration hashmap for this schema already exists: " + schema_name); 
				}
				hm = hm_type_declarations.put(model, hm_current_type_declarations);
				if (hm != null) {
					System.out.println("ERROR: type declaration hashmap for this schema already exists: " + schema_name); 
				}
				hm = hm_function_declarations.put(model, hm_current_function_declarations);
				if (hm != null) {
					System.out.println("ERROR: function declaration hashmap for this schema already exists: " + schema_name); 
				}
				hm = hm_procedure_declarations.put(model, hm_current_procedure_declarations);
				if (hm != null) {
					System.out.println("ERROR: procedure declaration hashmap for this schema already exists: " + schema_name); 
				}
				hm = hm_rule_declarations.put(model, hm_current_rule_declarations);
				if (hm != null) {
					System.out.println("ERROR: rule declaration hashmap for this schema already exists: " + schema_name); 
				}
				hm = hm_constant_declarations.put(model, hm_current_constant_declarations);
				if (hm != null) {
					System.out.println("ERROR: constant declaration hashmap for this schema already exists: " + schema_name); 
				}
				hm = hm_subtype_constraint_declarations.put(model, hm_current_subtype_constraint_declarations);
				if (hm != null) {
					System.out.println("ERROR: subtype_constraint declaration hashmap for this schema already exists: " + schema_name); 
				}
				hm = hm_parameters.put(model, hm_current_parameters);
				if (hm != null) {
					System.out.println("ERROR: parameter hashmap for this schema already exists: " + schema_name); 
				}
				hm = hm_variables.put(model, hm_current_variables);
				if (hm != null) {
					System.out.println("ERROR: variable hashmap for this schema already exists: " + schema_name); 
				}

 				// add simple types:
				if (model_name.equalsIgnoreCase("SDAI_DICTIONARY_SCHEMA_DICTIONARY_DATA")) {
					if (flag_xt_sdai) {
						// create instances of each simple data type
						_st_integer = (jsdai.SExtended_dictionary_schema.EInteger_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_type.class);
						_st_integer.setName(null, "_INTEGER");
						_st_real = (jsdai.SExtended_dictionary_schema.EReal_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReal_type.class);
						_st_real.setName(null, "_REAL");
						_st_number = (jsdai.SExtended_dictionary_schema.ENumber_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CNumber_type.class);
						_st_number.setName(null, "_NUMBER");
						_st_logical = (jsdai.SExtended_dictionary_schema.ELogical_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLogical_type.class);
						_st_logical.setName(null, "_LOGICAL");
						_st_boolean = (jsdai.SExtended_dictionary_schema.EBoolean_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBoolean_type.class);
						_st_boolean.setName(null, "_BOOLEAN");
						_st_string = (jsdai.SExtended_dictionary_schema.EString_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CString_type.class);
						_st_string.setName(null, "_STRING");
						_st_string.setFixed_width(null, false);
						_st_binary = (jsdai.SExtended_dictionary_schema.EBinary_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBinary_type.class);
						_st_binary.setName(null, "_BINARY");
						_st_binary.setFixed_width(null, false);
						_st_generic = (jsdai.SExtended_dictionary_schema.EData_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type.class);
						_st_generic.setName(null, "_GENERIC");
						// because entity_definition causes bootstrapping problems, here is a temp implementation:
						_st_entity = (jsdai.SExtended_dictionary_schema.EData_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type.class);
						_st_entity.setName(null, "_ENTITY");
//                _st_entity = (jsdai.SExtended_dictionary_schema.EEntity_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_definition.class);
//                                              _std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
//                                              _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//                                              _std_entity.setDefinition(null, _st_entity);
//                                              _st_entity.setName(null, "_ENTITY");
//                                              _st_entity.setInstantiable(null, false);
//                                              _st_entity.setComplex(null, false);
//                                              _st_entity.createSupertypes(null);

//                                  _st_list_string  = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
//printDDebug(".oO0Oo. LIST TYPE CREATED - for standard pass 1");
//                                              _st_list_string.setName(null, "_LIST_STRING");

//                                              jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
//                                              jsdai.SExtended_dictionary_schema.EInteger_bound b1;
//                                              b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
//                                              b1.setBound_value(null, 0);
//                                              bounds[0] = b1;
//                                              _st_list_string.setLower_bound(null, bounds[0]);
//                                              _st_list_string.unsetUpper_bound(null);  // no need for that it is unset after creating
//                                              _st_list_string.setUnique_flag(null, false);
//                                              _st_list_string.setElement_type(null, _st_string);


				    _st_list_generic  = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
// printDDebug(".oO0Oo. LIST TYPE CREATED - for standard pass 1");
//						_st_list_generic.setName(null, "_LIST_GENERIC");
						_st_list_generic.setName(null, "_GENERALLIST_0_GENERIC");

						jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
						jsdai.SExtended_dictionary_schema.EInteger_bound b1;
						b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
						b1.setBound_value(null, 0);
						bounds[0] = b1;
						_st_list_generic.setLower_bound(null, bounds[0]);
						_st_list_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_list_generic.setUnique_flag(null, false);
						_st_list_generic.setElement_type(null, _st_generic);

				    _st_set_generic  = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
//						_st_set_generic.setName(null, "_SET_GENERIC");
						_st_set_generic.setName(null, "_GENERALSET_0_GENERIC");

						_st_set_generic.setLower_bound(null, bounds[0]); 
						_st_set_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_set_generic.setElement_type(null, _st_generic);

				    _st_set_string  = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
//						_st_set_string.setName(null, "_SET_STRING");
						_st_set_string.setName(null, "_GENERALSET_0_STRING");

						_st_set_string.setLower_bound(null, bounds[0]); 
						_st_set_string.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_set_string.setElement_type(null, _st_string);

				    _st_bag_generic  = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
//						_st_bag_generic.setName(null, "_BAG_GENERIC");
						_st_bag_generic.setName(null, "_GENERALBAG_0_GENERIC");

						_st_bag_generic.setLower_bound(null, bounds[0]); 
						_st_bag_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_bag_generic.setElement_type(null, _st_generic);

				    _st_aggregate_generic  = (jsdai.SExtended_dictionary_schema.EAggregation_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAggregation_type.class);
						_st_aggregate_generic.setName(null, "_AGGREGATE_GENERIC");

						_st_aggregate_generic.setElement_type(null, _st_generic);

						_st_schema = (jsdai.SExtended_dictionary_schema.ESchema_definition)sd;
						_st_model  = model;

						if (flag_xt_declarations) {
							_std_integer = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_integer.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_integer.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_integer.setDefinition(null, _st_integer);
							_std_real = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_real.setParent(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							// parent_schema is now derived instead of explicit 
							// _std_real.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_real.setDefinition(null, _st_real);
							_std_number = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_number.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_number.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_number.setDefinition(null, _st_number);
							_std_logical = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_logical.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_logical.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_logical.setDefinition(null, _st_logical);
							_std_boolean = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_boolean.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_boolean.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_boolean.setDefinition(null, _st_boolean);
							_std_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_string.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_string.setDefinition(null, _st_string);
							_std_binary = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_binary.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_binary.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_binary.setDefinition(null, _st_binary);
							_std_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_generic.setDefinition(null, _st_generic);
							_std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_entity.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_entity.setDefinition(null, _st_entity);
//            _std_list_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
//            _std_list_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//            _std_list_string.setDefinition(null, _st_list_string);
							_std_list_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_list_generic.setParent(null, sd);
								// parent_schema is now derived instead of explicit 
							// _std_list_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_list_generic.setDefinition(null, _st_list_generic);

			  			_std_set_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_generic.setDefinition(null, _st_set_generic); 
			  			_std_set_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_string.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_string.setDefinition(null, _st_set_string); 
			  			_std_bag_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_bag_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_bag_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_bag_generic.setDefinition(null, _st_bag_generic); 
			  			_std_aggregate_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_aggregate_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_aggregate_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_aggregate_generic.setDefinition(null, _st_aggregate_generic); 
						}
					} else {
						if (flag_xt_declarations) {
							_std_integer = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_integer.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_integer.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_integer.setDefinition(null, _st_integer);
							_std_real = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_real.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_real.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_real.setDefinition(null, _st_real);
							_std_number = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_number.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_number.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_number.setDefinition(null, _st_number);
							_std_logical = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_logical.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_logical.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_logical.setDefinition(null, _st_logical);
							_std_boolean = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_boolean.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_boolean.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_boolean.setDefinition(null, _st_boolean);
							_std_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_string.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							//_std_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_string.setDefinition(null, _st_string);
							_std_binary = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_binary.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_binary.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_binary.setDefinition(null, _st_binary);
							_std_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_generic.setDefinition(null, _st_generic);
							_std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_entity.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_entity.setDefinition(null, _st_entity);
//            _std_list_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
//    	      _std_list_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//	          _std_list_string.setDefinition(null, _st_list_string);
							_std_list_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_list_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_list_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_list_generic.setDefinition(null, _st_list_generic);
			  			_std_set_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_generic.setDefinition(null, _st_set_generic); 
			  			_std_set_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_string.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_string.setDefinition(null, _st_set_string); 
			  			_std_bag_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_bag_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_bag_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_bag_generic.setDefinition(null, _st_bag_generic); 
			  			_std_aggregate_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_aggregate_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_aggregate_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_aggregate_generic.setDefinition(null, _st_aggregate_generic); 
						}
					}
				} else
				if (model_name.equalsIgnoreCase("EXTENDED_DICTIONARY_SCHEMA_DICTIONARY_DATA")) {
					if (!flag_xt_sdai) {
						// create instances of each simple data type
						_st_integer = (jsdai.SExtended_dictionary_schema.EInteger_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_type.class);
						_st_integer.setName(null, "_INTEGER");
						_st_real = (jsdai.SExtended_dictionary_schema.EReal_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReal_type.class);
						_st_real.setName(null, "_REAL");
						_st_number = (jsdai.SExtended_dictionary_schema.ENumber_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CNumber_type.class);
						_st_number.setName(null, "_NUMBER");
						_st_logical = (jsdai.SExtended_dictionary_schema.ELogical_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLogical_type.class);
						_st_logical.setName(null, "_LOGICAL");
						_st_boolean = (jsdai.SExtended_dictionary_schema.EBoolean_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBoolean_type.class);
						_st_boolean.setName(null, "_BOOLEAN");
						_st_string = (jsdai.SExtended_dictionary_schema.EString_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CString_type.class);
						_st_string.setName(null, "_STRING");
						_st_string.setFixed_width(null, false);
						_st_binary = (jsdai.SExtended_dictionary_schema.EBinary_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBinary_type.class);
						_st_binary.setName(null, "_BINARY");
						_st_binary.setFixed_width(null, false);
						_st_generic = (jsdai.SExtended_dictionary_schema.EData_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type.class);
						_st_generic.setName(null, "_GENERIC");
						// because entity_definition causes bootstrapping problems, here is a temp implementation:
						_st_entity = (jsdai.SExtended_dictionary_schema.EData_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type.class);
						_st_entity.setName(null, "_ENTITY");
//          _st_entity = (jsdai.SExtended_dictionary_schema.EEntity_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_definition.class);
//	        _std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
//          _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//          _std_entity.setDefinition(null, _st_entity);
//	        _st_entity.setName(null, "_ENTITY");
//          _st_entity.setInstantiable(null, false);
//          _st_entity.setComplex(null, false);
//          _st_entity.createSupertypes(null);

// 		     _st_list_string  = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
//printDDebug(".oO0Oo. LIST TYPE CREATED - for standard pass 1");
//         _st_list_string.setName(null, "_LIST_STRING");

//         jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
//         jsdai.SExtended_dictionary_schema.EInteger_bound b1;
//         b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
//         b1.setBound_value(null, 0);
//         bounds[0] = b1;
//    	   _st_list_string.setLower_bound(null, bounds[0]);
//  	     _st_list_string.unsetUpper_bound(null);  // no need for that it is unset after creating
//         _st_list_string.setUnique_flag(null, false);
//    	   _st_list_string.setElement_type(null, _st_string);

				    _st_list_generic  = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
// printDDebug(".oO0Oo. LIST TYPE CREATED - for standard pass 1");
//						_st_list_generic.setName(null, "_LIST_GENERIC");
						_st_list_generic.setName(null, "_GENERALLIST_0_GENERIC");

						jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
						jsdai.SExtended_dictionary_schema.EInteger_bound b1;
						b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
						b1.setBound_value(null, 0);
						bounds[0] = b1;
						_st_list_generic.setLower_bound(null, bounds[0]);
						_st_list_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_list_generic.setUnique_flag(null, false);
						_st_list_generic.setElement_type(null, _st_generic);

				    _st_set_generic  = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
//						_st_set_generic.setName(null, "_SET_GENERIC");
						_st_set_generic.setName(null, "_GENERALSET_0_GENERIC");

						_st_set_generic.setLower_bound(null, bounds[0]); 
						_st_set_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_set_generic.setElement_type(null, _st_generic);

				    _st_set_string  = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
//						_st_set_string.setName(null, "_SET_STRING");
						_st_set_string.setName(null, "_GENERALSET_0_STRING");

						_st_set_string.setLower_bound(null, bounds[0]); 
						_st_set_string.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_set_string.setElement_type(null, _st_string);

				    _st_bag_generic  = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
//						_st_bag_generic.setName(null, "_BAG_GENERIC");
						_st_bag_generic.setName(null, "_GENERALBAG_0_GENERIC");

						_st_bag_generic.setLower_bound(null, bounds[0]); 
						_st_bag_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_bag_generic.setElement_type(null, _st_generic);

				    _st_aggregate_generic  = (jsdai.SExtended_dictionary_schema.EAggregation_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAggregation_type.class);
						_st_aggregate_generic.setName(null, "_AGGREGATE_GENERIC");

						_st_aggregate_generic.setElement_type(null, _st_generic);

						_st_schema = (jsdai.SExtended_dictionary_schema.ESchema_definition)sd;
						_st_model  = model;

						if (flag_xt_declarations) {
							_std_integer = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_integer.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_integer.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_integer.setDefinition(null, _st_integer);
							_std_real = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_real.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_real.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_real.setDefinition(null, _st_real);
							_std_number = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_number.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_number.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_number.setDefinition(null, _st_number);
							_std_logical = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_logical.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_logical.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_logical.setDefinition(null, _st_logical);
							_std_boolean = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_boolean.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_boolean.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_boolean.setDefinition(null, _st_boolean);
							_std_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_string.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_string.setDefinition(null, _st_string);
							_std_binary = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_binary.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_binary.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_binary.setDefinition(null, _st_binary);
							_std_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_generic.setDefinition(null, _st_generic);
							_std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_entity.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_entity.setDefinition(null, _st_entity);
//            _std_list_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
//            _std_list_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//  	        _std_list_string.setDefinition(null, _st_list_string);
							_std_list_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_list_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_list_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_list_generic.setDefinition(null, _st_list_generic);
			  			_std_set_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_generic.setDefinition(null, _st_set_generic); 
			  			_std_set_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_string.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_string.setDefinition(null, _st_set_string); 
			  			_std_bag_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_bag_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_bag_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_bag_generic.setDefinition(null, _st_bag_generic); 
			  			_std_aggregate_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_aggregate_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_aggregate_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_aggregate_generic.setDefinition(null, _st_aggregate_generic); 
						} // declarations
					} else {
						if (flag_xt_declarations) {
							_std_integer = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_integer.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_integer.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_integer.setDefinition(null, _st_integer);
							_std_real = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_real.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_real.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_real.setDefinition(null, _st_real);
							_std_number = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_number.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_number.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_number.setDefinition(null, _st_number);
							_std_logical = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_logical.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_logical.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_logical.setDefinition(null, _st_logical);
							_std_boolean = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_boolean.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_boolean.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_boolean.setDefinition(null, _st_boolean);
							_std_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_string.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_string.setDefinition(null, _st_string);
							_std_binary = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_binary.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_binary.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_binary.setDefinition(null, _st_binary);
							_std_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_generic.setDefinition(null, _st_generic);
							_std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_entity.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_entity.setDefinition(null, _st_entity);
//            _std_list_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
//            _std_list_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//            _std_list_string.setDefinition(null, _st_list_string);
							_std_list_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_list_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_list_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_list_generic.setDefinition(null, _st_list_generic);
			  			_std_set_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_generic.setDefinition(null, _st_set_generic); 
			  			_std_set_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_string.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_string.setDefinition(null, _st_set_string); 
			  			_std_bag_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_bag_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_bag_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_bag_generic.setDefinition(null, _st_bag_generic); 
			  			_std_aggregate_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_aggregate_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_aggregate_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_aggregate_generic.setDefinition(null, _st_aggregate_generic); 
						}
					}
				} else {
					if (flag_xt_declarations) {
						_std_integer = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_integer.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// _std_integer.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_integer.setDefinition(null, _st_integer);
						_std_real = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_real.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// _std_real.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_real.setDefinition(null, _st_real);
						_std_number = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_number.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// _std_number.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_number.setDefinition(null, _st_number);
						_std_logical = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_logical.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// _std_logical.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_logical.setDefinition(null, _st_logical);
						_std_boolean = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_boolean.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// _std_boolean.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_boolean.setDefinition(null, _st_boolean);
						_std_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_string.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// _std_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_string.setDefinition(null, _st_string);
						_std_binary = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_binary.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// _std_binary.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_binary.setDefinition(null, _st_binary);
						_std_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_generic.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// _std_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_generic.setDefinition(null, _st_generic);
						_std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_entity.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_entity.setDefinition(null, _st_entity);
// 	        _std_list_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
//          _std_list_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//  	      _std_list_string.setDefinition(null, _st_list_string);
						_std_list_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_list_generic.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// _std_list_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_list_generic.setDefinition(null, _st_list_generic);
		  			_std_set_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_set_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
						// _std_set_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
						_std_set_generic.setDefinition(null, _st_set_generic); 
		  			_std_set_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_set_string.setParent(null, sd); 
						// parent_schema is now derived instead of explicit 
						// _std_set_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
						_std_set_string.setDefinition(null, _st_set_string); 
		  			_std_bag_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_bag_generic.setParent(null, sd); 
						// parent_schema is now derived instead of explicit 
						// _std_bag_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
						_std_bag_generic.setDefinition(null, _st_bag_generic); 
		  			_std_aggregate_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_aggregate_generic.setParent(null, sd); 
						// parent_schema is now derived instead of explicit 
						// _std_aggregate_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
						_std_aggregate_generic.setDefinition(null, _st_aggregate_generic); 
					}
				}
//			} // not duplicate
 //                      }
		} else {
			if (is_complex_schema) {
				schema_name = schema_name.substring(3);
// printDDebug("##RR COMPLEX SCHEMA: " + schema_name);
			}
			model = findModel(schema_name);
			if (model == null) {
				if (parser_pass == 2) {
//					printError("schema not found: " + schema_name);
					error_count++;
					printErrorMsg("" + schema_name + " - schema not found", null, true);
				}	
				printDebug("schema not found: " + schema_name);
			}
			sd = getSchema_definitionFromModel(model);


		  active_scope_extension = new ECtScope(active_scope, sd, active_scope_extension, active_scope_string, schema_name, schema_name.toLowerCase());
// System.out.println("2 new active_scope_extenion: " + active_scope_extension);
 			active_scope_string = "";
			active_scope = null;  // not using on schema level (yet)
// if (sd == null)
// printDDebug("##RR SCHEMA DEFINITION NOT FOUND");
//                      sd = (jsdai.SExtended_dictionary_schema.ESchema_definition)model.getDefined_schema();
			hm_current_entity_declarations = (HashMap)hm_entity_declarations.get(model);
			hm_current_type_declarations = (HashMap)hm_type_declarations.get(model);
			hm_current_function_declarations = (HashMap)hm_function_declarations.get(model);
			hm_current_procedure_declarations = (HashMap)hm_procedure_declarations.get(model);
			hm_current_rule_declarations = (HashMap)hm_rule_declarations.get(model);
			hm_current_constant_declarations = (HashMap)hm_constant_declarations.get(model);
			hm_current_subtype_constraint_declarations = (HashMap)hm_subtype_constraint_declarations.get(model);
			hm_current_parameters = (HashMap)hm_parameters.get(model);
			hm_current_variables = (HashMap)hm_variables.get(model);

		}
		createDocumentationEntity2(sd, a_token);

	}
	[version_name = SchemaVersionId()]
	{
// System.out.println("Schema version: " + version_name);
		if (parser_pass == 1) {
			if (version_name != null) {
				sd.setIdentification(null, version_name);
			}
		}
	if ((parser_pass == 2) && (!is_complex_schema)) {
		used_vector = new Vector();
		referenced_vector = new Vector();
		used_vectors.addElement(used_vector);
		referenced_vectors.addElement(referenced_vector);
		model_vector.addElement(model); // probably not really necessary, the same order in the repository.
	}
	 if (_st_real == null) {
		 printDebug("In SchemaDecl before body, pass: " + parser_pass + ", _st_real is NULL");
	 } else {
		 printDebug("In SchemaDecl before body, pass: " + parser_pass + ", _st_real is OK");
	 }

	}
	";" SchemaBody(used_vector, referenced_vector) <END_SCHEMA>  { schema_depth--; } ";"
	{
		current_scope = (Vector)scope_stack.pop();
		active_scope = null;
		active_scope_string = active_scope_extension.getParent_scope_string();
		active_scope_extension = active_scope_extension.getParent();

	 if (_st_real == null) {
		 printDebug("In SchemaDecl, ending, pass: " + parser_pass + ", _st_real is NULL");
	 } else {
		 printDebug("In SchemaDecl, ending, pass: " + parser_pass + ", _st_real is OK");
	 }

	}
)
} catch (ParseException e) {
	// recoverFromParseException(END_SCHEMA, e);
//  System.out.println(e.getMessage());
	
	// this exception is not reported as an error (commented out), because this error is usually (always? - try to make sure!)
	//  is a secondary error when in recovery skipping to the end of something and END_SCHEMA is encountered
	// or rather, it is already encountered and the token END_SCHEMA is already consumed, no way to put it back (or is there?)
	
	// no, the END_SCHEMA was not yet consumed, the issue fixed in the recovery, trying to enable this error reporting,
	// will see what happens, may be other places left where the token is consumed - risky
	printErrorMsg(e.getMessage(), null, true); 
	if (recoverToTheNextSchema(e) < 0) return;
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.282 ------------ */
String SchemaId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/*-+-------- ISO 10303-14:B.2.182  ---*/
void SchemaMapBodyElement() throws jsdai.lang.SdaiException :
{}
{
//      FunctionDecl() | ProcedureDecl() | ViewDecl() | MapDecl() | DependentMapDecl() | CreateMapDecl() | RuleDecl()
	// <PARTITION> <SIMPLE_ID> conflict bitween <VIEW> <MAP> - why?  What about <VIEW> and <MAP>? 
	// C R A Z Y !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	// the conflict only surfaces when ViewDecl(), MapDecl() and DependentMapDecl() are all three together in any order.
	 FunctionDecl() | ProcedureDecl() | LOOKAHEAD(ViewDecl()) ViewDecl() | MapDecl() | DependentMapDecl() | RuleDecl()
//	 ViewDecl() | MapDecl() |  DependentMapDecl()
// OK	 MapDecl() |  DependentMapDecl()
// OK	 ViewDecl() | DependentMapDecl()
// OK	 MapDecl() |  DependentMapDecl()
//	 ViewDecl() | MapDecl() |  DependentMapDecl()
//	 DependentMapDecl() | MapDecl() | ViewDecl()  
}

/*-+-------- ISO 10303-14:B.2.183  ---*/
void SchemaMapBodyElementList() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In SchemaMapBodyElementList");
	}
	( SchemaMapBodyElement() )+
}

/*-+-------- ISO 10303-14:B.2.184  ---*/
void SchemaMapDecl() throws jsdai.lang.SdaiException :
{
	String schema_map_name;
	String version_name = null;
	Token a_token;
	Vector used_vector = null;
	Vector referenced_vector = null;
}
{
	{
		express_x = true;
		printDebug("In SchemaMapDecl");
		scope_stack.push(current_scope);
		current_scope = new Vector();
		function_depth = 0;
	}
	a_token = <SCHEMA_MAP> schema_map_name = SchemaMapId() 
	{
		printVerbose("Starting parsing schema_map: " + schema_map_name + " in pass " + parser_pass);
		if (parser_pass == 1) {
//                      if (model == null) {
				model_name = schema_map_name.toUpperCase() + "_DICTIONARY_DATA";
// listModels();
// System.out.println("Creating model: : " + model_name);
				model = findModel(schema_map_name);
				if (model != null) {
					error_count++;
//					printError("Duplicate schema_map name: " + schema_map_name);
					printErrorMsg("" + schema_map_name + " - duplicate schema map name", null, true);
				}
				model = repository.createSdaiModel(model_name, jsdai.SExtended_dictionary_schema.SExtended_dictionary_schema.class);
				model.startReadWriteAccess();
				sd = (jsdai.SExtended_dictionary_schema.ESchema_map_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSchema_map_definition.class);

			  active_scope_extension = new ECtScope(active_scope, sd, active_scope_extension, active_scope_string, schema_map_name, schema_map_name.toLowerCase());
	 			active_scope_string = "";
				active_scope = null;  // not using on schema (or schema_map) level (yet)


				if (flag_oc) {
					sd.setName(null, schema_map_name);
				} else {
					sd.setName(null, schema_map_name.toUpperCase());
				}




//		createDocumentationEntity2(sd, a_token);

		} else {
			if (is_complex_schema) {
				schema_map_name = schema_map_name.substring(3);
			}
			model = findModel(schema_map_name);
			if (model == null) {
//				printError("schema_map not found: " + schema_map_name);
				printErrorMsg("" + schema_map_name + "- schema map not found", null, true);
			}
			sd = getGeneric_schema_definitionFromModel(model);

		  active_scope_extension = new ECtScope(active_scope, sd, active_scope_extension, active_scope_string, schema_map_name, schema_map_name.toLowerCase());
 			active_scope_string = "";
			active_scope = null;  // not using on schema (or schema_map) level (yet)


			if (expression_instances) {
//				jjtThis.model = model;
//				jjtThis.schema_map_name = schema_map_name;
//				jjtThis.schema_definition = (jsdai.SExtended_dictionary_schema.ESchema_definition)sd;
			}
		}
		// createDocumentationEntity2(sd, a_token);
	if (parser_pass == 2) {

    // needed for chained use froms to work correctly
		used_vector = new Vector();
		used_vectors.addElement(used_vector);

		referenced_vector = new Vector();
		referenced_vectors.addElement(referenced_vector);
		model_vector.addElement(model); // probably not really necessary, the same order in the repository.
	}

	}
	";" ( ReferenceClause(referenced_vector) )+ [ ConstantDecl() ] SchemaMapBodyElementList() <END_SCHEMA_MAP> ";"
	{
		current_scope = (Vector)scope_stack.pop();
		active_scope = null;
		active_scope_string = active_scope_extension.getParent_scope_string();
		active_scope_extension = active_scope_extension.getParent();

		express_x = false;
	}
}



/*--------- ISO 10303-14:B.2.185  ---*/
String SchemaMapId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*-+-------- ISO 10303-14:B.2.186  ---*/
// String SchemaRefOrRename() throws jsdai.lang.SdaiException :
jsdai.SExtended_dictionary_schema.EGeneric_schema_definition SchemaRefOrRename() throws jsdai.lang.SdaiException :
{
  // String schema_name = null;
  jsdai.SExtended_dictionary_schema.EGeneric_schema_definition gsd = null;
}
{
	// ":" confirms optional prefix, lookahead 2 is OK
	[  LOOKAHEAD(2) GeneralSchemaAliasId() ":" ] gsd = GeneralSchemaRef()
	{
	    // if we operate not with name string here, we need to keep info about alias for further references to th schema by alias id.	
	    if (gsd == null) {
	    	printDDebug("SchemaRefOrRename - NULL in pass " + parser_pass);
	    }
	    return gsd;
	    // return schema_name;
	}
}

/*-+------- ISO 10303-14:B.2.187  ---*/
void SchemaViewBodyElement() throws jsdai.lang.SdaiException :
{}
{
	 FunctionDecl() | ProcedureDecl() | ViewDecl() | RuleDecl()
}

/*-+-------- ISO 10303-14:B.2.188  ---*/
void SchemaViewBodyElementList() throws jsdai.lang.SdaiException :
{}
{
	( SchemaViewBodyElement() )+
}

/*-+-------- ISO 10303-14:B.2.189  ---*/
void SchemaViewDecl() throws jsdai.lang.SdaiException :
{
	String schema_view_name;
	String version_name = null;
	Token a_token;
	Vector used_vector = null;
	Vector referenced_vector = null;
}
{
	{
		express_x = true;
		printDebug("In SchemaViewDecl");
		scope_stack.push(current_scope);
		current_scope = new Vector();
		function_depth = 0;
	}
	a_token = <SCHEMA_VIEW>  schema_view_name = SchemaViewId() 
	{
		printVerbose("Starting parsing schema_view: " + schema_view_name + " in pass " + parser_pass);
		if (parser_pass == 1) {
//                      if (model == null) {
				model_name = schema_view_name.toUpperCase() + "_DICTIONARY_DATA";
// listModels();
// System.out.println("Creating model: : " + model_name);
				model = findModel(schema_view_name);
				if (model != null) {
					error_count++;
//					printError("Duplicate schema_view name: " + schema_view_name);
					printErrorMsg("" + schema_view_name + " - duplicate schema view name", null, true);
				}
				model = repository.createSdaiModel(model_name, jsdai.SExtended_dictionary_schema.SExtended_dictionary_schema.class);
				model.startReadWriteAccess();
				sd = (jsdai.SExtended_dictionary_schema.ESchema_view_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSchema_view_definition.class);
				if (flag_oc) {
					sd.setName(null, schema_view_name);
				} else {
					sd.setName(null, schema_view_name.toUpperCase());
				}
// System.out.println("#@# Model and schema_definition created for schema_view. model: " + model + ", schema: " + sd);




//		createDocumentationEntity2(sd, a_token);

		} else {
			if (is_complex_schema) {
				schema_view_name = schema_view_name.substring(3);
			}
			model = findModel(schema_view_name);
			if (model == null) {
//				printError("schema_view not found: " + schema_view_name);
				printErrorMsg("" + schema_view_name + " - schema_view not found", null, true);
			}
			sd = getGeneric_schema_definitionFromModel(model);
			if (expression_instances) {
//				jjtThis.model = model;
//				jjtThis.schema_view_name = schema_view_name;
//				jjtThis.schema_definition = (jsdai.SExtended_dictionary_schema.ESchema_definition)sd;
			}
		}
		// createDocumentationEntity2(sd, a_token);
		
		
		
		if (parser_pass == 2) {

      // needed for chained use from to work correctly		
			used_vector = new Vector();
			used_vectors.addElement(used_vector);

			referenced_vector = new Vector();
			referenced_vectors.addElement(referenced_vector);
			model_vector.addElement(model); // probably not really necessary, the same order in the repository.
		}

// System.out.println("#@# schema_view. Model: " + model + ", schema: " + sd + ", pass: " + parser_pass);	
	}
	
	";" ( ReferenceClause(referenced_vector) )* [ ConstantDecl() ] SchemaViewBodyElementList() <END_SCHEMA_VIEW> ";"
	{
		express_x = false;
	}
}

/*--------- ISO 10303-14:B.2.190  ---*/
String SchemaViewId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* ------ Our extension, in accordance with express 1.2 ------------------------------------*/
String SchemaVersionId() :
{
	Token t;
	String image;
}
{
	t = <SIMPLE_STRING_LITERAL>
	{
		image = t.image;
		return image.substring(1, image.length()-1);
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.283------------ */
void Selector() throws jsdai.lang.SdaiException :
{}
{
	Expression()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.284------------ */

void SelectType(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESelect_type st = null;
	jsdai.SExtended_dictionary_schema.ANamed_type selections = null;
	jsdai.SExtended_dictionary_schema.ENamed_type selection;
	boolean is_extensible = false;
	boolean is_entity = false;
	boolean is_extension = false;
	// selections - SET OF NAMED_TYPE
	Vector selectionz = new Vector();
	jsdai.SExtended_dictionary_schema.EDefined_type select_super = null;
}
{
	{
		printVerbose("SelectType starting in pass " + parser_pass + ", defined type: " + dt);		
	}	
	[<EXTENSIBLE> {is_extensible = true;}] [<GENERIC_ENTITY> {is_entity = true;}] <SELECT> 
	[ ( selectionz = SelectList(selectionz) | select_super = SelectExtension(dt, st, selectionz) {is_extension = true;}) ]
	{
		if (parser_pass == 3) {
			if (is_extensible) {
			  if (is_entity) {
			  	if (is_extension) {
						// entity_select_type+extended_select_type+extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_select_type$extended_select_type$extensible_select_type.class);
			  	} else {
						// entity_select_type+extensible_select_type			  	}
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_select_type$extensible_select_type.class);
			  	}
			  } else {
			  	if (is_extension) {
						// extended_select_type+extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtended_select_type$extensible_select_type.class);
			  	} else {
						// extensible_select_type			  	}
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtensible_select_type.class);
			  	}
			  }	
			} else {
			  if (is_entity) {
			  	if (is_extension) {
						// entity_select_type+extended_select_type+non_extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_select_type$extended_select_type$non_extensible_select_type.class);
			  	} else {
						// entity_select_type+non_extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_select_type$non_extensible_select_type.class);
			  	}
			  } else {
			  	if (is_extension) {
						// extended_select_type+non_extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtended_select_type$non_extensible_select_type.class);



			  	} else {
						// non_extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CNon_extensible_select_type.class);
			  	}
			  }	
			}
			st.setName(null, "_SELECT_" + dt.getName(null));
			selections = st.createLocal_selections(null);
			for (int i = 0; i < selectionz.size(); i++) {
				Object sze = selectionz.elementAt(i);
				if (sze != null) {
					selections.addUnordered((jsdai.SExtended_dictionary_schema.ENamed_type)sze);
				}
			}
			jsdai.SExtended_dictionary_schema.ANamed_type sel2 = st.getLocal_selections(null);
			for (int k = 1; k < sel2.getMemberCount()+1; k++) {
			}

			if (isDTDomainValid(dt, st)) {
				dt.setDomain(null, st);
			} else {
				error_count++;
				printErrorMsg("" + dt.getName(null) + " - invalid underlying type", null, true);
			}	

			if (is_extension) {
				if (st instanceof jsdai.SExtended_dictionary_schema.EExtended_select_type) {
					if (select_super != null) {
						if (select_super.testDomain(null)) {
		        	jsdai.SExtended_dictionary_schema.ESelect_type select_super_sel = (jsdai.SExtended_dictionary_schema.ESelect_type)select_super.getDomain(null);
		          if (select_super_sel instanceof jsdai.SExtended_dictionary_schema.EExtensible_select_type) {        				
//								((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).setIs_based_on(null, (jsdai.SExtended_dictionary_schema.EExtensible_select_type)select_super_sel);
								((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).setIs_based_on(null, select_super);
							} else {
//								printError("select type: " + select_super.getName(null) + " must be EXTENSIBLE: " + select_super_sel);
								error_count++;
//								printErrorMsg("" + select_super_sel + " - select type: " + select_super.getName(null) + " must be EXTENSIBLE", null, true);
								printErrorMsg("" + select_super.getName(null) + " - select type must be EXTENSIBLE", null, true);
								printDebug("The select type: " + select_super.getName(null) + " must be EXTENSIBLE: " + select_super_sel);
							}
						} else {
//							System.out.println("pass 3, based-on domain unset: extended: " + st + ", based_on: " + select_super);
						
						}
					} else {
//						System.out.println("pass 3, based-on NULL: " + st);
					}
				} else {
					// something wrong here - internal error
//					System.out.println("pass 3, IE-extension-not-extended: " + st);
				}
			
			
			} else {
			}
		} else 
		if (parser_pass == 4) {
			st = (jsdai.SExtended_dictionary_schema.ESelect_type)dt.getDomain(null);
			if (is_extension) {
				if (st instanceof jsdai.SExtended_dictionary_schema.EExtended_select_type) {
					if (select_super != null) {
						if (select_super.testDomain(null)) {
		        	jsdai.SExtended_dictionary_schema.ESelect_type select_super_sel = (jsdai.SExtended_dictionary_schema.ESelect_type)select_super.getDomain(null);
		          if (select_super_sel instanceof jsdai.SExtended_dictionary_schema.EExtensible_select_type) {        				
								if (!(((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).testIs_based_on(null))) {
//									((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).setIs_based_on(null, (jsdai.SExtended_dictionary_schema.EExtensible_select_type)select_super_sel);
									((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).setIs_based_on(null, select_super);
								} else {
								}
							} else {
								// why error message was removed?
								error_count++;
//								printErrorMsg("" + select_super_sel + " - select type: " + select_super.getName(null) + " must be EXTENSIBLE", null, true);
								printErrorMsg("" + select_super.getName(null) + " - select type must be EXTENSIBLE", null, true);
	//							printError("The select type: " + select_super.getName(null) + " must be EXTENSIBLE: " + select_super_sel);
								printDebug("The select type: " + select_super.getName(null) + " must be EXTENSIBLE: " + select_super_sel);
							}
						} else {
//							System.out.println("pass 4, based-on domain unset: extended: " + st + ", based_on: " + select_super);
						}
					} else {
//						System.out.println("pass 4, based-on NULL: " + st);
						
					}
				} else {
//					System.out.println("pass 4, IE-extension-not-extended: " + st);
				}
			
			
			} else {
			}
			if (is_entity) {
				// check if selection list contains non-entities, that would be an error
// System.out.println("PROBLEM with based_on: dt " + dt + ", st: "  + st);

//				if (!isEntitySelect(st)) {
//					error_count++;
//					printErrorMsg("" + dt.getName(null) + " - GENERIC_ENTITY select type contains non-entities", null, true);
//				}
			}
		}		 
		printVerbose("SelectType ending");		
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.285------------ */

// in this version, return  is no longer really needed
Vector SelectList(Vector selectionz) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESelect_type st = null;
	jsdai.SExtended_dictionary_schema.ENamed_type selection;
}
{
	{
		printVerbose("SelectList starting in pass " + parser_pass + ", vector: " + selectionz);		
	}	
	"(" selection = NamedTypes(null)
	{
		if (parser_pass == 3) {
//			selections.addUnordered(selection);
			selectionz.addElement(selection);
		}
	}
	("," selection = NamedTypes(null)
	{
		if (parser_pass == 3) {
//			selections.addUnordered(selection);
			selectionz.addElement(selection);
		}
	}
	)* ")"
	{
		printVerbose("SelectList ending in pass " + parser_pass);		
		return (selectionz);
	}
}

// Vector SelectExtension(jsdai.SExtended_dictionary_schema.EDefined_type dt, jsdai.SExtended_dictionary_schema.ESelect_type st, Vector selectionz, jsdai.SExtended_dictionary_schema.EDefined_type select_super) throws jsdai.lang.SdaiException :
jsdai.SExtended_dictionary_schema.EDefined_type SelectExtension(jsdai.SExtended_dictionary_schema.EDefined_type dt, jsdai.SExtended_dictionary_schema.ESelect_type st, Vector selectionz) throws jsdai.lang.SdaiException :
{
	 jsdai.SExtended_dictionary_schema.EDefined_type select_super = null;
}
{
	{
		printVerbose("SelectExtension starting in pass " + parser_pass + ", defined type: " + dt);		
	}	
	<BASED_ON> select_super = TypeRef(0) [ <WITH> selectionz = SelectList(selectionz) ]
	// further implementation depends on approach
	{
		// not really needed, Vector is updated through the parameter anyway
//		return selectionz;
		printVerbose("SelectExtension ending in pass " + parser_pass);		
// System.out.println("select_super: " + select_super);
		return select_super;
	}

}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.285------------ */
jsdai.SExtended_dictionary_schema.ESet_type SetType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESet_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	jsdai.lang.EEntity bt;
	String bound_name;
}
{
	{
		printDebug("In SetType, starting in pass " + parser_pass);
	}
	<SET> [bounds = BoundSpec()]
	{
		if (parser_pass == 3) {
			if (whose != null) {
			  if (!(whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute)) {
//					at = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
				}
//				bound_name = getBoundString(0, bounds, false, false);
//				at.setName(null, "_SET" + bound_name + _data_type_name);
//				data_type_name = "_SET"  + bound_name;
//				_data_type_name = "_SET"  + bound_name + _data_type_name;
			}
		} else 
		if (parser_pass == 4) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
//				bound_name = getBoundString(0, bounds, false, false);
//				at.setName(null, "_SET" + bound_name + _data_type_name);
//				_data_type_name = "_SET"  + bound_name + _data_type_name;
//				data_type_name = "_SET"  + bound_name;
			}
		}  
	}  
	<OF> bt = BaseType(at)
	{
		if (parser_pass > 3) {
			// set element_type
//			if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			if (!(at.testElement_type(null))) {
				if(bt instanceof jsdai.SExtended_dictionary_schema.EData_type) {
					at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EData_type)bt);
				} else {
					// express amendment issue
				}
			}
		}
		bound_name = getBoundString(0, bounds, false, false);
		_data_type_name = "_SET"  + bound_name + _data_type_name;
		if (at != null) {
			at.setName(null, _data_type_name);
		}
		printDebug("In SetType, ending : " + at + ", in pass " + parser_pass);
// System.out.println(">SetType< pass: " + parser_pass + ", instance: " + at);
		return at;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.286------------ */
void Sign() : // Actually moved to ISO 10303-11:A.1.2 - Character classes (as SIGN)
{}
{
	"+" | "-"
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.287------------ */
void SimpleExpression() throws jsdai.lang.SdaiException :
{
	Object operand1 = null;
	Object operand2;
	String x_operand1 = "";
	String x_operand2 = "";
	double op1double;
	double op2double;
	int op1int;
	int op2int;
	int operation;
	Object exp_instance = null;
	String x_result = "";
	int op_nr = 0;
	int nr_of_operands = 0;
}
{
	(
	Term()
	{
		if (parser_pass == 5) {
		}
	}
	// "+" choice conflict, probably not real but related to nested grammar, lookahead of 2 to suppress the warning
	( LOOKAHEAD(2) operation = AddLikeOp() Term()
	{
	 if (parser_pass == 5) {
	 }
	}
	)*

	)
	{
		if (parser_pass == 5) {
		}
	}
}

/* - LOOKAHEAD 4 or > - (Columns 1-28 & 2-3, 1-50 & 2-3) ------------------------------ ISO 10303-11:A.2.288------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at 1-28 and 2-3 respectively.
		 A common prefix is <SIMPLE_ID> "(" "["
		 Lookahead of 4 or more should be used for the earlier expansion.
*/
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at 1-50 and 2-3 respectively.
		 A common prefix is <SIMPLE_ID> "." <SIMPLE_ID>
		 Lookahead of 4 or more should be used for the earlier expansion.
*/

/* ISO 1030-14.B.2.194*/
// added CaseExpr() and ForExpr()
void SimpleFactor() throws jsdai.lang.SdaiException :
{
	int t = 0;
	Object operand1 = "";
	String x_operand1 = "";
	double op1double;
	int op1int;
	int chosen = 0;
	int kind = 0;
	String name = "";
}
{
	{
		printDebug("In SimpleFactor, starting");
		if (flag_oc) {
		  global_name1_global = getToken(1).image;
		  global_name2_global = getToken(2).image;
		  global_name3_global = getToken(3).image;
		} else {
		  global_name1_global = getToken(1).image.toLowerCase();
		  global_name2_global = getToken(2).image.toLowerCase();
		  global_name3_global = getToken(3).image.toLowerCase();
		}
		global_kind1_global = getToken(1).kind;
		global_kind2_global = getToken(2).kind;
		global_kind3_global = getToken(3).kind;

// System.out.println("in SimpleFactor: "  + global_name1_global + " " + global_name2_global + " " + global_name3_global);
	}
	(
		AggregateInitializer() {chosen = 1;} |
		LOOKAHEAD({isEntityConstructor()}) EntityConstructor() {chosen = 8;} |
		Interval() {chosen = 3;} |
		QueryExpression() {chosen = 4;} |
		CaseExpr() {chosen = 9;} |
		ForExpr() {chosen = 10;} |
		IfExpr() {chosen = 11;}|
		LOOKAHEAD({isEnumerationReference()}) EnumerationReference() {chosen = 2;} |
		( 
			[t = UnaryOp() {chosen = 5;} ] 
			( 
				"(" Expression() {chosen = 6;} ")" 
				| 
				Primary() {chosen = 7;}
			)
			{
				if (parser_pass == 5) {
				}
			}
		)
	)


//      ([t = UnaryOp() {chosen = 5;} ] ("(" Expression() {chosen = 6;} ")" | Primary() {chosen = 7;} | LOOKAHEAD(EnumerationReference() ")") EnumerationReference() {chosen = 2;} )
	{
		// unary stuff goes here
		//System.out.println("XX--XX chosen: " + chosen);
	 if (parser_pass == 5) {
		switch (chosen) {
			case 0:
				printDebug("In SimpleFactor - nothing was chosen");
				break;
			case 1:
				printDebug("In SimpleFactor - AggregateInitializer");
				break;
			case 2:
				printDebug("In SimpleFactor - EnumeratiionReference");
				break;
			case 3:
				printDebug("In SimpleFactor - Interval");
				break;
			case 4:
				printDebug("In SimpleFactor - QueryExpression");
				break;
			case 5:
				printDebug("In SimpleFactor - UnaryOp");
				break;
			case 6:
				printDebug("In SimpleFactor - Expression");
				break;
			case 7:
				printDebug("In SimpleFactor - Primary");
				break;
			case 8:
				printDebug("In SimpleFactor - EntityConstructor");
				break;
			case 9:
				printDebug("In SimpleFactor - CaseExpr");
				break;
			case 10:
				printDebug("In SimpleFactor - ForExpr");
				break;
			case 11:
				printDebug("In SimpleFactor - IfExpr");
				break;
			default:
				printDebug("In SimpleFactor - error");
				break;
		}
		if (t == 2) {
			if (argument_stack.empty()) {
				printVerbose("ERROR, empty stack in simple factor");
			} else {
				operand1 = argument_stack.pop();
			}	
			printStack("POP: SimpleFactor: " + operand1);
			if (expression_instances) {
				// x_operand1 = (String)expression_stack.pop();
				// printXStack("POP: SimpleFactor, operand1: " + x_operand1);
			}
			if (operand1 instanceof Integer) {
				op1int = ((Integer)operand1).intValue();
				op1int = -op1int;
				operand1 = new Integer(op1int);
			}
			else if (operand1 instanceof Number) {
				op1double = ((Number)operand1).doubleValue();
				op1double = -op1double;
				operand1 = new Double(op1double);
			}
			argument_stack.push(operand1);
			printStack("PUSH: SimpleFactor: " + operand1);
			if (expression_instances) {
				// expression_stack.push(x_operand1);
				// printXStack("PUSH: SimpleFactor, operand1: " + x_operand1);
			}
		}
	 }
// System.out.println("SimpleFactor - ending");	 
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.289------------ */
jsdai.SExtended_dictionary_schema.ESimple_type SimpleTypes(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESimple_type st = null;
}
{
	{
		printDebug("In simple type, starting, whose: " + whose);
	}
	(st = BinaryType(whose) | st = BooleanType(whose) | st = IntegerType(whose) | st = LogicalType(whose) |
	st = NumberType(whose) | st = RealType(whose) | st = StringType(whose)) 
	{
		printDebug("In simple type, ending, st: " + st);
		if (st != null) {
			if (st.testName(null)) {
				_data_type_name = st.getName(null);
			}
		}
		return st;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.290------------ */
void SkipStmt() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In SkipStmt starting");
	}
	<KW_SKIP> ";"
	{
		printDebug("In SkipStmt ending");
	}
}
/* - LOOKAHEAD 2 - (Columns 1-17 & 2-16) ---------------------------------------------- ISO 10303-11:A.2.291------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at 1-17 and 2-16.
		 Common prefix <SIMPLE_ID>
		 Lookahead of 2 should be used for the earlier expansion.
*/


/*-+-------- ISO 10303-14:B.2.197  ---*/
void SourceAttributeReference() throws jsdai.lang.SdaiException :
{}
{
//      ParameterRef() "." ( AttributeRef(null, null, -1, null) | ViewAttributeRef() )
// perhaps parameter, and handles the same AttributeRef
	 ParameterRef() "." ( AttributeRef(null, null, -1, null) )
}


/*--------- ISO 10303-14:B.2.198  ---*/
void SourceEntityReference() throws jsdai.lang.SdaiException :
{}
{
	EntityReference()
}

/*-+-------- ISO 10303-14:B.2.199  ---*/
void SourceParameter(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	String source_parameter_name;
	jsdai.SExtended_dictionary_schema.ESource_parameter sp = null;
	jsdai.SExtended_dictionary_schema.EEntity_or_view_definition evd = null;		
}
{
	source_parameter_name = SourceParameterId() ":" evd = ExtentReference()
	{
		// which exactly pass needed here? to check. perhaps ExtentReference requires a pass after interfacing: 4?
		if (parser_pass == 1) {
// System.out.println("IN source_parameter 1");
			sp = findSource_parameter(source_parameter_name);
		  if (sp != null) {
				// error - should not be found
			}
		 	sp = (jsdai.SExtended_dictionary_schema.ESource_parameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSource_parameter.class);
		 	sp.setName(null, source_parameter_name);
//		 	sp.setOrder(null, from_order_count++);
			if (parent instanceof jsdai.SExtended_dictionary_schema.EMap_partition) {
				sp.setParent(null, (jsdai.SExtended_dictionary_schema.EMap_partition)parent);
			} else
			if (parent instanceof jsdai.SExtended_dictionary_schema.EView_partition) {
			 	sp.setParent(null, (jsdai.SExtended_dictionary_schema.EView_partition)parent);
			} else {
				// error
			} 
		} else {
// System.out.println("IN source_parameter 2");
			sp = findSource_parameter(source_parameter_name);
// System.out.println("### SourceParameter: " + source_parameter_name + " - is it found? : " + sp + ", pass: " + parser_pass);
			if (sp == null) {
				// error - should have been found
			}		
			if (parser_pass == 4) {
// System.out.println("### SourceParameter, setting extent: " + evd );
	 			sp.setExtent(null, evd);
			 	sp.setOrder(null, from_order_count++);
	 		}
	 	}
 }
}

/*--------- ISO 10303-14:B.2.200  ---*/
String SourceParameterId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

void Stmt() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In Stmt, starting");
	}
	// <SIMPLE_ID> conflict 
//	(AliasStmt() | LOOKAHEAD(AssignmentStmt()) AssignmentStmt() | CaseStmt() | CompoundStmt() | EscapeStmt() | IfStmt() |
	(AliasStmt() | LOOKAHEAD(GeneralRef() ( Qualifier(null) )* ":=") AssignmentStmt() | CaseStmt() | CompoundStmt() | EscapeStmt() | IfStmt() |
	NullStmt() | RepeatStmt() | ReturnStmt() | SkipStmt() | ProcedureCallStmt()  )
	{
		printDebug("In Stmt, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.292------------ */
String StringLiteral() throws jsdai.lang.SdaiException :
{
	Token t;
	String s = null;
}
{
	{
		printDebug("In String literal");
	}
	(t = <SIMPLE_STRING_LITERAL>
		{
			if (parser_pass == 5) {
				//				s = t.image;
				s = handleBackslash(t.image);
				s = "\"" + s.substring(1,s.length()-1) + "\"";
				argument_stack.push(s);
				printStack("PUSH: Literal: <SIMPLE_STRING_LITERAL>: " + s);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		| t = <ENCODED_STRING_LITERAL>
		{
			// just for now
			if (parser_pass == 5) {
				s = t.image;
				argument_stack.push(s);
				printStack("PUSH: Literal: <ENCODED_STRING_LITERAL>: " + s);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		})
		{
			return s;
		}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.293------------ */
jsdai.SExtended_dictionary_schema.EString_type StringType(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EString_type st = null; 
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	int width_spec = 0;
	boolean is_fixed = false;
	String str_fixed;
}
{
	<STRING>  
	{
	}
	[ width_spec = WidthSpec()]
	{
		if (width_spec == Integer.MIN_VALUE) {
			width_spec = 0;
		}
		if (width_spec < 0) {		
			width_spec = -width_spec;
			is_fixed = true;
			str_fixed = "_FIXED";
		} else {
			is_fixed = false;
			str_fixed = "";
		}
//System.out.println(">=STRING=< whose: " + whose + ", global schema: " + global_schema_name + ", global entity: " + global_entity_name);
		if (parser_pass == 3) { 
			if (width_spec == 0) {
				st = _st_string;
			} else {
				st = (jsdai.SExtended_dictionary_schema.EString_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CString_type.class);
				_data_type_name = "_STRING_" + width_spec + str_fixed;
//				_data_type_name = "_STRING_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
				st.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, width_spec);
				st.setWidth(null, b1);
				if (is_fixed) {
					st.setFixed_width(null, true);
				} else {
					st.setFixed_width(null, false);
				}
			}
		} else
		if (parser_pass > 3) {

			if (width_spec == 0) {
				st = _st_string;
			} else {

			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
//System.out.println(">=domain-1: " + ((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null));
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
//System.out.println(">=domain-2: " + ((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null));
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
//System.out.println(">=domain-3: " + ((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null));
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
//System.out.println(">=domain-4: " + ((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null)); 						
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
//System.out.println(">=domain-5: " + ((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null));
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
//System.out.println(">=domain-6: " + ((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null));
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				} else {
//System.out.println(">=STRING=< whose - NONE OF ABOVE: " + whose);
				}				
			} else {
//System.out.println(">=STRING=< whose - is NULL");
			}
//System.out.println(">=STRING=< domain done");
			
			} // -- if has width_spec
			if (st == null) {
				if (width_spec == 0) {  // this can no longer happen, but whatever
					st = _st_string;
				} else {
					st = (jsdai.SExtended_dictionary_schema.EString_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CString_type.class);
					_data_type_name = "_STRING_" + width_spec + str_fixed;
					// _data_type_name = "_STRING_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
					st.setName(null, _data_type_name);
					b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
					b1.setBound_value(null, width_spec);
					st.setWidth(null, b1);
					if (is_fixed) {
						st.setFixed_width(null, true);
					} else {
						st.setFixed_width(null, false);
					}
				}
			}
		}     
		if ((parser_pass == 5) && (width_spec != 0)) {
				st = (jsdai.SExtended_dictionary_schema.EString_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CString_type.class);
				_data_type_name = "_STRING_" + width_spec + str_fixed;
				// _data_type_name = "_STRING_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
				st.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, width_spec);
				st.setWidth(null, b1);
				if (is_fixed) {
					st.setFixed_width(null, true);
				} else {
					st.setFixed_width(null, false);
				}
		}
		     
		return st;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.294 ------------ */

void SubSuper(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{}
{
	[SupertypeConstraint(ed)] [SubtypeDeclaration(ed)]
}

void SubSuperNoAbstract(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{}
{
	[SupertypeConstraintNoAbstract(ed)] [SubtypeDeclaration(ed)]
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.295------------ */
void SubtypeConstraint(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc;
	jsdai.lang.EEntity se;
	Object pop_inst = null;

	jsdai.SExtended_dictionary_schema.EAndor_subtype_expression andor;
// pre-X	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_or_subtype_expression generic_operands;
	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands;
}
{
	<OF> "("  SupertypeExpression() ")"
	{

		if (parser_pass == 5) {
			se = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: SubtypeConstraint: " + se);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}

			if (se instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) {
				sc = (jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSub_supertype_constraint.class);
				sc.setGeneric_supertype(null, ed);
				// super_type is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// sc.setSuper_type(null, (jsdai.SExtended_dictionary_schema.EEntity_definition)ed);
				// }
				sc.setConstraint(null, (jsdai.SExtended_dictionary_schema.ESubtype_expression)se);
			} else if (se instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) // SUPERTYPE OF (single_entity)
			{
				sc = (jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSub_supertype_constraint.class);
				sc.setGeneric_supertype(null, ed);
				// super_type is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// sc.setSuper_type(null, (jsdai.SExtended_dictionary_schema.EEntity_definition)ed);
				// }
				andor = (jsdai.SExtended_dictionary_schema.EAndor_subtype_expression)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAndor_subtype_expression.class);
				generic_operands = andor.createGeneric_operands(null);
				// operands is now derived instead of explicit 
				// operands = andor.createOperands(null);
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) se);
				// operands is now derived instead of explicit 
				// if (!(se instanceof jsdai.SExtended_dictionary_schema.EView_definition)) {
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) se);
				// }
				sc.setConstraint(null, (jsdai.SExtended_dictionary_schema.ESubtype_expression)andor);
			}
			else { //
			error_count++;
				printEDebug("Internal error in SubtypeConstraint");
			}
		}
	}

}

/*-+-------- ISO 10303-14:B.2.205  ---*/
// there is no supertype for map_definition and view_definition
jsdai.lang.EEntity SubtypeBindingHeader(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	String partition_name = "_implicit_partition_"; // partition may be implicit, let's have name "" for it (so far)
	// I would like to have partition entity, supertype of map_partition and view_partition.
	jsdai.SExtended_dictionary_schema.EMap_partition mp = null;
	jsdai.SExtended_dictionary_schema.EView_partition vp = null;
	jsdai.lang.EEntity partition = null;
	

}
{
//old	[ LOOKAHEAD(3) <PARTITION> [ PartitionId() ] ";" ] WhereClause(null)
	// PartitionId() is no longer optional
//	[ LOOKAHEAD(3) <PARTITION> partition_name = PartitionId() ";" ] 
	// lookahead not needed
	{
		printDebug("In SubtypeBindingHeader, starting, parent: " + parent);
//		System.out.println("active_scope in map 10: " + active_scope);
	}
	[ <PARTITION> partition_name = PartitionId() ";" ] 
	{
		if (parser_pass == 1) {
			if (parent instanceof jsdai.SExtended_dictionary_schema.EView_definition) {
				vp = (jsdai.SExtended_dictionary_schema.EView_partition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CView_partition.class);
				vp.setParent(null, (jsdai.SExtended_dictionary_schema.EView_definition)parent);
				vp.setName(null, partition_name);
				partition = (jsdai.lang.EEntity)vp;
				
			} else
			if (parent instanceof jsdai.SExtended_dictionary_schema.EMap_definition) {
				mp = (jsdai.SExtended_dictionary_schema.EMap_partition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CMap_partition.class);
				mp.setParent(null, (jsdai.SExtended_dictionary_schema.EMap_definition)parent);
				mp.setName(null, partition_name);
				partition = (jsdai.lang.EEntity)mp;
			} else {
				// error
			}
		}
//		System.out.println("active_scope in map 11: " + active_scope);
	}
	WhereClause(parent)
	{
		printDebug("In SubtypeBindingHeader, ending");
		return partition;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.296 ------------ */
void SubtypeDeclaration(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EEntity_definition super_ed;
// pre-X	jsdai.SExtended_dictionary_schema.AEntity_definition supertypes = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_definition generic_supertypes = null;
	jsdai.SExtended_dictionary_schema.AEntity_definition supertypes = null;
	int index = 1;
	int index_g = 1;
	boolean is_connotational = false;
}
{
	{
		if (parser_pass == 3) {
			generic_supertypes = ed.getGeneric_supertypes(null);
			if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
				if (supertypes != null) {
					if (((jsdai.SExtended_dictionary_schema.EEntity_definition)ed).testSupertypes(null)) {
						supertypes = ((jsdai.SExtended_dictionary_schema.EEntity_definition)ed).getSupertypes(null);
					}
				}
			}	
		}
	}
	[<CONNOTATIONAL> {is_connotational = true;}] <SUBTYPE> <OF> "("
	super_ed = EntityRef(null)
	{
		if (parser_pass == 3) {
			if (ed != null) {
				if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					if (is_connotational) {
						((jsdai.SExtended_dictionary_schema.EEntity_definition)ed).setConnotational_subtype(null, true);
					}
				}
			}
			if (super_ed != null) {
				if (checkCyclicSupertypes((jsdai.SExtended_dictionary_schema.EEntity_definition)ed, super_ed)) {
					generic_supertypes.addByIndex(index_g++, super_ed);
					if (supertypes != null) {
						if (super_ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
							supertypes.addByIndex(index++, super_ed);
						}
					}
				} else {
					error_count++;
					printErrorMsg("" + super_ed.getName(null) + " - cyclic supertype in entity " + ed.getName(null), null, true);
				}
			} else {
				error_count++;
				printErrorMsg("" + ed.getName(null) + " - a supertype entity not found for this entity", null, true);
			}
		}
	}
	(","
	super_ed = EntityRef(null)
	{
		if (parser_pass == 3)
		{
			if (super_ed != null) {
				if (checkCyclicSupertypes((jsdai.SExtended_dictionary_schema.EEntity_definition)ed, super_ed)) {
					generic_supertypes.addByIndex(index_g++, super_ed);
					if (supertypes != null) {
						if (super_ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
							supertypes.addByIndex(index++, super_ed);
						}
					}
				} else {
					error_count++;
					printErrorMsg("" + super_ed.getName(null) + " - cyclic supertype in entity " + ed.getName(null), null, true);
				}
			} else {
				error_count++;
				printErrorMsg("" + ed.getName(null) + " - a supertype entity not found for this entity", null, true);
			}
		}
	}
	)* ")"
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.297------------ */
void SupertypeConstraint(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{}
{
	AbstractSupertypeDeclaration(ed) | SupertypeRule(ed)
}

void SupertypeConstraintNoAbstract(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{}
{
	SupertypeRule(ed)
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.298------------ */
void SupertypeExpression() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAndor_subtype_expression andor = null;
// pre-X	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_or_subtype_expression generic_operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.lang.EEntity ee = null;
	Object pop_inst = null;
	boolean andor_present = false;
}
{
	SupertypeFactor()
	{
		if (parser_pass == 5) {
			ee = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: SupertypeExpression: " + ee);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
	}
	(<ANDOR> SupertypeFactor()
	{
		if (parser_pass == 5) {
			if (!andor_present) {
				andor = (jsdai.SExtended_dictionary_schema.EAndor_subtype_expression)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAndor_subtype_expression.class);
				generic_operands = andor.createGeneric_operands(null);
				// operands is now derived instead of explicit 
				// operands = andor.createOperands(null);
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
					error_count++;
					printEDebug("Internal error in SupertypeExpression 1");
				}
				ee = (jsdai.lang.EEntity)argument_stack.pop();
				printStack("POP: SupertypeExpression: " + ee);
				if (expression_instances) {
					// pop_inst = expression_stack.pop();
				}
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
					error_count++;
					printEDebug("Internal error in SupertypeExpression 2");
				}
				andor_present = true;
			} else {
				ee = (jsdai.lang.EEntity)argument_stack.pop();
				printStack("POP: SupertypeExpression: " + ee);
				if (expression_instances) {
					// pop_inst = expression_stack.pop();
				}
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
					operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
				error_count++;
					printEDebug("Internal error in SupertypeExpression 3");
				}
			}
		}
	}
	)*
	{
		if (parser_pass == 5) {
			if (andor_present) {
				argument_stack.push(andor);
				printStack("PUSH: SupertypeExpression: " + andor);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			} else {
				argument_stack.push(ee);
				printStack("PUSH: SupertypeExpression: " + ee);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.299------------ */
void SupertypeFactor() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAnd_subtype_expression and = null;
// pre-X 	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_or_subtype_expression generic_operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.lang.EEntity ee = null;
	Object pop_inst = null;
	boolean and_present = false;
}
{
	SupertypeTerm()
	{
		if (parser_pass == 5) {
			ee = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: SupertypeFactor: " + ee);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
	}
	(<AND> SupertypeTerm()
	{
		if (parser_pass == 5) {
			if (!and_present) {
				and = (jsdai.SExtended_dictionary_schema.EAnd_subtype_expression)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAnd_subtype_expression.class);
				generic_operands = and.createGeneric_operands(null);
				// operands is now derived instead of explicit 
				// operands = and.createOperands(null);
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
				error_count++;
					printEDebug("Internal error in SupertypeFactor 1");
				}
				ee = (jsdai.lang.EEntity)argument_stack.pop();
				printStack("POP: SupertypeFactor: " + ee);
				if (expression_instances) {
					// pop_inst = expression_stack.pop();
				}
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
				error_count++;
					printEDebug("Internal error in SupertypeFactor 2");
				}
				and_present = true;
			} else {
				ee = (jsdai.lang.EEntity)argument_stack.pop();
				printStack("POP: SupertypeFactor: " + ee);
				if (expression_instances) {
					// pop_inst = expression_stack.pop();
				}
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
						error_count++;
						printEDebug("Internal error in SupertypeFactor 3");
				}
			}
		}
	}
	)*
	{
		if (parser_pass == 5) {
			if (and_present) {
				argument_stack.push(and);
				printStack("PUSH: SupertypeFactor: " + and);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			} else {
				argument_stack.push(ee);
				printStack("PUSH: SupertypeFactor: " + ee);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.300------------ */
void SupertypeRule(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{}
{
	<SUPERTYPE> SubtypeConstraint(ed)
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.301------------ */
void SupertypeTerm() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EEntity_definition ed;
}
{
// Express X needs here ViewRef() instead instead of EntityRef(), so we need something entity_or_view_ref
// because we now have in the dictionary entity_or_view_definition, so no problem.
 ed = EntityRef(null)
	{
		if (parser_pass == 5) {
			argument_stack.push(ed);
			if (ed != null) {
				printStack("PUSH: SupertypeTerm: entity " + ed.getName(null));
			} else {
				printStack("PUSH: SupertypeTerm: entity_definition = null");
			}
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	}
	| OneOf() | "(" SupertypeExpression() ")"
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.302 ------------ */
void Syntax() throws jsdai.lang.SdaiException :
{}
{
	(SchemaDecl())+
	<EOF>
}

/*-+-------- ISO 10303-14:B.210  ---*/
void SyntaxX() throws jsdai.lang.SdaiException :
{}
{
	  SchemaMapDecl() | SchemaViewDecl()
}

/*-+-------- ISO 10303-14:B.2.211  ---*/
jsdai.SExtended_dictionary_schema.EEntity_definition TargetEntityReference() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed1 = null;	
	// jsdai.SExtended_dictionary_schema.AEntity_definition aed = null;
	Vector entity_definitions = new Vector();
}
{
	// This grammar is for creating complex entities on the fly. We must already have them.
	// So the grammar must be changed.
	// ALTERNATIVE: to get all the references into an aggregate, and give it to a special method that would
	// search for the complex entity difinition, i.e, input = leaves, result = complex.
	// perhaps this approach is better. because altering the grammar has to take into account schema prefix for each entity, etc.
	// I'm choosing the alternative. 
	{
		printDebug("In TargetEntityReference, starting");
	}
	ed = EntityReference() {entity_definitions.addElement(ed);}( <COMPLEX_AND> ed1 = EntityReference() {entity_definitions.addElement(ed1);})*
	{
		if (entity_definitions.size() > 1) {
			ed = findComplexEntity(entity_definitions);
		}
		printDebug("In TargetEntityReference, ending");
		return ed;
	}
}

/*-+-------- ISO 10303-14:B.2.212  ---*/
void TargetParameter(jsdai.SExtended_dictionary_schema.EMap_definition parent) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESet_type at = null;
	String name;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.ETarget_parameter tp = null;
	jsdai.SExtended_dictionary_schema.EAggregate_target_parameter atp = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	boolean is_aggregate = false;
	Vector parameter_ids = new Vector();
	String id = null;
}
{
	{
		printDebug("In TargetParameter, starting, parent map definition: " + parent);
	}
	name = TargetParameterId() {parameter_ids.addElement(name);} ( "," name = TargetParameterId() {parameter_ids.addElement(name);} )* ":" [ <AGGREGATE> { is_aggregate = true; }[ bounds = BoundSpec() ] <OF> ] ed = TargetEntityReference()
	{
		// determine which min pass required
		if (parser_pass == 1) {

			for (int i = 0; i < parameter_ids.size(); i++) {
				id = (String)parameter_ids.elementAt(i);
				tp = findTarget_parameter(id);
				if (tp != null) {
					// error, the same name
				}
				if (is_aggregate) {
					atp = (jsdai.SExtended_dictionary_schema.EAggregate_target_parameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAggregate_target_parameter.class);
					tp = atp;
				} else {
					tp = (jsdai.SExtended_dictionary_schema.ETarget_parameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CTarget_parameter.class);
				}
				tp.setName(null, id);
				tp.setParent(null, parent);
//				tp.setOrder(null, target_parameter_order_count++);
			}


		} else 
		if (parser_pass == 4) {
			if (is_aggregate) {

//				at = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);

				// at = (jsdai.SExtended_dictionary_schema.EAggregation_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAggregation_type.class);
			  // name may have to be corrected later
//		  	at.setName(null, "_TARGET_PARAMETER_SET");
//		  	_data_type_name = "_TARGET_PARAMETER_SET";
//		  	if (ed != null) {
//				at.setElement_type(null, ed);
//		  	} else {
//		  		System.out.println("target_parameter aggregate member entity is null");
//		  	}

//				if (bounds[0] == null) {
//					b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
//					b1.setBound_value(null, 0);
//					bounds[0] = b1;
//				} 

//				at.setLower_bound(null, bounds[0]); 
//				if (bounds[1] != null) {
//					at.setUpper_bound(null, bounds[1]); 
//				}	else {
//					at.unsetUpper_bound(null);  // no need for that it is unset after creating
//				}
			}
			for (int i = 0; i < parameter_ids.size(); i++) {
				id = (String)parameter_ids.elementAt(i);


//				tp = findTarget_parameter(id);
// as opposed to the version that requires different target parameter IDs, this solution is very shaky and temporary
// what if there are map calls with specified target parameters at the same time as subtype maps? - problem
				tp = findTarget_parameterStrict(id);

			// still need to create aggregate in the case of aggregate
				// tp.setLower_bound(null,);
				// tp.setUpper_bound(null,);

/*
				if (is_aggregate) {
					tp.setExtent(null, at);
				} else {
					tp.setExtent(null, ed);
				}
*/


 // System.out.println("ed in TargetParameter in pass 4, before setting extent: " + ed + ", tp: " + tp);

				tp.setExtent(null, ed);
			} // for
//  System.out.println("before setting order, for some reason NOT in the loop, in TargetParameter in pass 4, " +  target_parameter_order_count + ", tp: " + tp);
			tp.setOrder(null, target_parameter_order_count++);
		} else 
		if (parser_pass == 5) {

			for (int i = 0; i < parameter_ids.size(); i++) {
				id = (String)parameter_ids.elementAt(i);
				tp = findTarget_parameter(id);


				if (is_aggregate) {
					if (tp instanceof jsdai.SExtended_dictionary_schema.EAggregate_target_parameter) {
						atp = (jsdai.SExtended_dictionary_schema.EAggregate_target_parameter)tp;			
						if (bounds[0] != null) {
							atp.setLower_bound(null, bounds[0]); 
						}
						if (bounds[1] != null) {
							atp.setUpper_bound(null, bounds[1]); 
						}	
					} else {
						// internal error
					}	

				} // if aggregate
			} // for
		}
		printDebug("In TargetParameter, ending");
	}
}

/*--------- ISO 10303-14:B.2.213  ---*/
String TargetParameterId() throws jsdai.lang.SdaiException :
{
	String result = null;
}
{
	{
		printDebug("In TargetParameterId, starting");
	}
	result = ParameterId()
	{
		printDebug("In TargetParameterId, ending: " + result);
		return result;
	}
}

/*--------- ISO 10303-14:B.2.214  ---*/
jsdai.SExtended_dictionary_schema.ETarget_parameter TargetParameterRef() throws jsdai.lang.SdaiException:
{
	String name;
	jsdai.SExtended_dictionary_schema.ETarget_parameter result = null;
}
{
	name = TargetParameterId()
	{
 	  printDDebug("IN target_parameter_ref");
		result = findTarget_parameter(name);
		return result;
	}
}

jsdai.SExtended_dictionary_schema.ETarget_parameter TargetParameterRefStrict() throws jsdai.lang.SdaiException:
{
	String name;
	jsdai.SExtended_dictionary_schema.ETarget_parameter result = null;
}
{
	name = TargetParameterId()
	{
 	  printDDebug("IN target_parameter_ref");
		result = findTarget_parameterStrict(name);
		return result;
	}
}

// added by RR, not in part 14
jsdai.SExtended_dictionary_schema.ESource_parameter SourceParameterRef() throws jsdai.lang.SdaiException :
{
	String name;
	jsdai.SExtended_dictionary_schema.ESource_parameter result = null;
}
{
	name = SourceParameterId()
	{
		 printDDebug("IN source_parameter_ref");
     result = findSource_parameter(name);
		 return result;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.303------------ */
void Term() throws jsdai.lang.SdaiException :
{
	Object operand1 = null;
	Object operand2;
	String x_operand1 = "";
	String x_operand2 = "";
	String x_result = "";
	double op1double;
	double op2double;
	int op1int;
	int op2int;
	int operation;
	int op_nr = 0;
	int nr_of_operands = 0;

}
{
	(
	Factor()
	{
		if (parser_pass == 5) {
			nr_of_operands++;
			if (argument_stack.empty()) {
				printVerbose("ERROR: stack empty in term");
			} else {
				operand1 = argument_stack.pop();
			}
			printStack("POP: Term, operand1: " + operand1);
			if (expression_instances) {
				// x_operand1 = (String)expression_stack.pop();
				// printXStack("POP: Term, operand1: " + x_operand1);
				// x_result = x_operand1;
			}
		}
 }
 // "*" choice conflict, probably caused by nested grammar, or something, ignore? lookahead 2 to suppress the warning
 ( LOOKAHEAD(2) operation = MultiplicationLikeOp() Factor()
 {
	 if (parser_pass == 5) {
	 }
	}
 )*
 )
 {
	if (parser_pass == 5) {
	}
 }
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.304------------ */
void TypeDecl() throws jsdai.lang.SdaiException:
{
	String type_name;
	jsdai.SExtended_dictionary_schema.EDefined_type dt;
//      jsdai.SExtended_dictionary_schema.ELocal_declaration$type_declaration ltd;
	jsdai.SExtended_dictionary_schema.EDeclaration ltd;
	Token a_token;
	self_type = true;
}
{
try {
(
	{
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	a_token = <TYPE> type_name = TypeId()
	{
		printDebug("In TypeDecl, starting. Type: " + type_name);
		if (parser_pass == 1) {
			dt = findDefined_type(type_name);
			Token t = getToken(0);
			if (dt != null) {
						error_count++;
//						printError("duplicate defined type name \"" + type_name + "\" at line " + t.beginLine + ", column " + t.beginColumn);
						printErrorMsg("" + type_name + " - duplicate defined type name", null, true);
			} else
			{
				String wrong_name = findAnyName(type_name);
				if (wrong_name != null) {
						error_count++;
//						printError("duplicate name \"" + type_name + "\". The same name used for a defined type and for " + wrong_name + " at line " + t.beginLine + ", column " + t.beginColumn);
						printErrorMsg("" + type_name + "- duplicate type name, the name is already in use in the current scope", null, true);
				}
			}
			dt = (jsdai.SExtended_dictionary_schema.EDefined_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDefined_type.class);
		  active_scope_extension = new ECtScope(active_scope, dt, active_scope_extension, active_scope_string, type_name, type_name.toLowerCase());
  		active_scope_string = "";
			active_scope = dt;
		  ltd = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$type_declaration.class);
			ltd.setParent(null, sd);
			// parent_schema is now derived instead of explicit 
			// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				// ltd.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
			// }
			ltd.setDefinition(null, dt);
			if (flag_oc) {
				dt.setName(null, type_name);
			} else {
				dt.setName(null, type_name.toLowerCase());
			}
			hm_current_type_declarations.put(type_name.toLowerCase(), ltd);
//                      dt.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
			// now it is inverse
			// dt.createWhere_rules(null);
			createDocumentationEntity2(dt, a_token);
		} else
		{
			dt = findDefined_type(type_name);
		  active_scope_extension = new ECtScope(active_scope, dt, active_scope_extension, active_scope_string, type_name, type_name.toLowerCase());
  		active_scope_string = "";
			active_scope = dt;
			if (dt == null) {
				error_count++;
				if (parser_pass == 2) {
//					printError("defined type not found: " + type_name);
					printErrorMsg("" + type_name + " - defined type not found", null, true);
				}
				printDebug("TypeDecl - defined type not found: " + type_name);
			}

		}
	}
	 "=" UnderlyingType(dt) ";" [WhereClause(dt)] <END_TYPE>
	 {
		active_scope = null;
		active_scope_string = active_scope_extension.getParent_scope_string();
		active_scope_extension = active_scope_extension.getParent();

		current_scope = (Vector)scope_stack.pop();
		printDebug("In TypeDecl, ending. Type: " + type_name);


// System.out.println("O-O-12 - defined type: " + dt);
	 } ";"
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	if (parser_pass == 1) {
//		printError(e.getMessage());
		printErrorMsg(e.getMessage(), null, true);
		error_count++;
		System.out.println("ERROR RECOVERY: skipping to END_TYPE");
	}
//	System.out.println("error_count before: " + error_count);
	recoverFromParseException(END_TYPE, e);
//	System.out.println("error_count after: " + error_count);
}
{
	self_type = false;
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.305------------ */
String TypeId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/* - LOOKAHEAD 2 - (Columns 3 & 19) --------------------------------------------------- ISO 10303-11:A.2.306------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at 3 and 19.
		 Common prefix <SIMPLE_ID>
		 Lookahead of 2 should be used for the earlier expansion.
*/
String TypeLabel() throws jsdai.lang.SdaiException :
{
	String label = null;
}
{
	{
		printDebug("In TypeLabel, starting");
	}
//      (label = TypeLabelId() | TypeLabelRef())
	label = TypeLabelId()
	{
		printDebug("In TypeLabel, ending");
		return label;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.307------------ */
String TypeLabelId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*--------- ISO 10303-14:B.2.219  ---*/
jsdai.SExtended_dictionary_schema.EDefined_type  TypeReference() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EDefined_type  dt = null;
}
{
	// choice conflict - simple_id
	// this should work (or lookahead (2), if there is no "." following TypeReference(), seems not to be
	[ LOOKAHEAD(SchemaRef() ".") SchemaRef() "." ] dt = TypeRef(0) {
		return dt;
	}
}



/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.308------------ */
int UnaryOp() throws jsdai.lang.SdaiException :
{
	int t;

}
{
	{
		printDebug("In UnaryOP");
	}
	("+" {t = 1;}| "-" {t = 2;}
	| <NOT> {t = 3;})
	{
		return t;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.309------------ */
void UnderlyingType(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAggregation_type at = null;
	jsdai.SExtended_dictionary_schema.ESimple_type st = null;
	jsdai.SExtended_dictionary_schema.EDefined_type dt2 = null;
}
{
	ConstructedTypes(dt)
	| at = AggregationTypes(dt)
	{
		// if (parser_pass > 3) {  // was == 2
		//	 dt.setDomain(null, at);
		// }
		if ((dt != null) && (at != null)) {
	  	if (!(dt.testDomain(null))) {
				if (isDTDomainValid(dt, at)) {
					dt.setDomain(null, at);
				} else {
					error_count++;
					printErrorMsg("" + dt.getName(null) + " - invalid underlying type", null, true);
				}	
			}
		} 
	}
	| st = SimpleTypes(dt)
	{
		if (parser_pass > 3) {  // was == 3
			if (st != null) {
				if (isDTDomainValid(dt, st)) {
					dt.setDomain(null, st);
				} else {
					error_count++;
					printErrorMsg("" + dt.getName(null) + " - invalid underlying type", null, true);
				}	
			} else {
				printVerbose("ERROR: domain st unset");
			}
		}
	}
	| dt2 = TypeRef(0) // previously - TypeRef(4); - who knows why
	{
		if (parser_pass > 3) {  // was == 3
			if (isDTDomainValid(dt, dt2)) {
				dt.setDomain(null, dt2);
			} else {
				error_count++;
				printErrorMsg("" + dt.getName(null) + " - invalid underlying type", null, true);
			}	
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.310------------ */
void UniqueClause(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{}
{
	<UNIQUE> (UniqueRule(ed) ";")+
}
/* - LOOKAHEAD 2 or > - (Column 3) ---------------------------------------------------- ISO 10303-11:A.2.311------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict in [] construct (column 3).
		 Expansion nested within construct and expansion following construct have common prefixes,
		 one of which is <SIMPLE_ID>. Lookahead of 2 or more should be used for the nested expansion.
*/
void UniqueRule(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	String name = null;
	jsdai.SExtended_dictionary_schema.EUniqueness_rule ur;
	jsdai.SExtended_dictionary_schema.AAttribute aa = null;
	jsdai.SExtended_dictionary_schema.EAttribute a;
	int index = 1;
}
{
	// <SIMPLE_ID> choice conflict, ":" allows to confirm the optional label, lookahead 2 is ok
	[LOOKAHEAD(2) name = Label() ":"] a = ReferencedAttribute(ed)
	{
		if (parser_pass == 5) {
			ur = (jsdai.SExtended_dictionary_schema.EUniqueness_rule)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CUniqueness_rule.class);
			if (name != null)
				ur.setLabel(null, name);
			ur.setParent_entity(null, ed);
			aa = ur.createAttributes(null);
			if (a != null)
				aa.addByIndex(index++, a);
			else {
				error_count++;
//				printError("Uniqness rule " + name + " in entity " + ed.getName(null) + ": attribute not found");
				printErrorMsg("" + name + " - uniqness rule in entity " + ed.getName(null) + ": attribute not found", null, true);
			}
		}
	}
	("," a = ReferencedAttribute(ed)
	{
		if (parser_pass == 5) {
			if (a != null)
				aa.addByIndex(index++, a);
			else {
				error_count++;
//				printError("Uniqness rule " + name + " in entity " + ed.getName(null) + ": attribute not found");
				printErrorMsg("" + name + " - uniqness rule in entity " + ed.getName(null) + ": attribute not found", null, true);
//				printError("Uniqness rule - attribute not found");
			}
		}
	}
	)*
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.312------------ */
void UntilControl() throws jsdai.lang.SdaiException :
{}
{
	<UNTIL> LogicalExpression()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.313------------ */
void UseClause(Vector used_vector) throws jsdai.lang.SdaiException :
{
  String used_schema;
	jsdai.lang.SdaiModel interfaced_model;
	boolean items_listed = false;
	jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
	Vector items_vector;
	jsdai.SExtended_dictionary_schema.EUse_from_specification ufs = null;
//	jsdai.SExtended_dictionary_schema.AUsed_declaration items = null;
	jsdai.SExtended_dictionary_schema.AInterfaced_declaration items = null;
}
{
	<USE> <FROM> used_schema = SchemaRef()
	{
	
	  if (used_schema != null) {
	  	if (used_schema.equalsIgnoreCase("mixed_complex_types")) {
				error_count++;
				printErrorMsg("USE FROM " + used_schema + " - this special schema should not be interfaced explicitly", null, true);
	  	}
	  }
		items_vector = new Vector();
		interfaced_model = findModel(used_schema);
//              if (interfaced_model == null) {
		if ((interfaced_model == null) && (parser_pass != 1)) {
			error_count++;
			if (parser_pass == 2) {
				if (used_schema != null) {
//					printError("interfaced schema not found: " + used_schema);
					printErrorMsg("" + used_schema + " - interfaced schema not found", null, true);
				} else {
//					printError("interfaced schema not found, its name not determined");
					printErrorMsg("" + "" + "- interfaced schema not found, its name not determined", null, true);
				}
			}
			printDebug("USEd FROM schema not found: " + used_schema);
		}
// 		if ((parser_pass == 2) && (interfaced_model != null)) {
 		if (interfaced_model != null) {
			if (interfaced_model.getMode() == jsdai.lang.SdaiModel.NO_ACCESS) {
				interfaced_model.startReadOnlyAccess();
      }
    }
	}
	["(" dc = NamedTypeOrRename(interfaced_model) {items_listed = true; items_vector.addElement(dc);}("," dc = NamedTypeOrRename(interfaced_model) { items_vector.addElement(dc);})* ")"] ";"
	{
		if (parser_pass == 2) {
			ufs = (jsdai.SExtended_dictionary_schema.EUse_from_specification)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CUse_from_specification.class);
			jsdai.SExtended_dictionary_schema.ESchema_definition asd = getSchema_definitionFromModel(interfaced_model);
			if (asd != null) {
				ufs.setForeign_schema(null, asd);  // generic_schema_definition;
			}
			ufs.setCurrent_schema(null, sd); // generic_schema_definition;
			if (!items_listed) {
				if (interfaced_model != null) {
					createAllUsedDeclarations(interfaced_model);
					// here the interfaced_model is stored.
					used_vector.addElement(interfaced_model);
				}
			} else {
				items = ufs.createItems(null);		
				for (int i = 0; i < items_vector.size(); i++) {
//					items.addByIndex(i, (jsdai.SExtended_dictionary_schema.EUsed_declaration)items_vector.elementAt(i));
//					items.addByIndex(i, (jsdai.SExtended_dictionary_schema.EInterfaced_declaration)items_vector.elementAt(i));
					Object ivi = items_vector.elementAt(i);
					if (ivi != null) {
						items.addUnordered((jsdai.SExtended_dictionary_schema.EUsed_declaration)ivi);
					}
				}
				if (items.getMemberCount() == 0) {
					ufs.deleteApplicationInstance();
				}
			}
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.314------------ */
String VariableId() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*-+-------- ISO 10303-14:B.2.223  ---*/
void ViewAttributeDecl(jsdai.SExtended_dictionary_schema.EIndependent_view_definition vd, jsdai.SExtended_dictionary_schema.EView_partition partition, boolean first_partition) throws jsdai.lang.SdaiException :
{
	String attr_name;
	boolean is_optional = false;
	jsdai.SExtended_dictionary_schema.ESchema_definition ssd = null;
	jsdai.lang.EEntity bt = null;
	jsdai.SExtended_dictionary_schema.EView_attribute va = null;
	jsdai.SExtended_dictionary_schema.EView_partition_attribute vpa = null;
}
{
//      ViewAttributeId() ":" [ <OPTIONAL> ] [ SourceSchemaRef() "." ] BaseType(null) ":=" Expression() ";"
//	attr_name = ViewAttributeId() ":" [ <OPTIONAL> {is_optional = true;}] [  LOOKAHEAD(2) ssd = (jsdai.SExtended_dictionary_schema.ESchema_definition)InterpretedRef(PI_SOURCE_SCHEMA) "." ] bt = BaseType(ssd) ":=" Expression() ";"
	// <SIMPLE_ID> choice conflict, "." allows to confirm the optional part, lookahead 2 is ok.
	attr_name = ViewAttributeId() ":" [ <OPTIONAL> {is_optional = true;}] [  LOOKAHEAD(2) ssd = SourceSchemaRef() "." ] bt = BaseType(ssd) ":=" Expression() ";"
	{
		// check which parser pass better to use.
		if (parser_pass == 1) {
				va = findView_attribute(attr_name, vd);
				if (va != null) {
					// error
				}

			if (first_partition) {
				// if first partition, create both view_attribute and view_partition_attirbute
				va =  (jsdai.SExtended_dictionary_schema.EView_attribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CView_attribute.class);
//				va.setParent_entity(null, vd);
				va.setParent(null, vd);
				va.setName(null, attr_name);
//				va.setOrder(null, view_attribute_order_count++);
				va.setOptional_flag(null, is_optional);
// System.out.println("SET OPTIONAL 05, attribute: " + va);
			} else {
				// if subsequent partition, find view_attribute and create view_partition_attribute
				va = findView_attribute(attr_name, vd);
			}
			vpa = (jsdai.SExtended_dictionary_schema.EView_partition_attribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CView_partition_attribute.class);
			vpa.setParent_view_attribute(null, va);
			vpa.setRelated_partition(null, partition);
		} else {
			va = findView_attribute(attr_name, vd);			
			if (parser_pass == 4) {
				va.setOrder(null, view_attribute_order_count++);
			}
		}
	}
}

/*--------- ISO 10303-14:B.2.224  ---*/
String ViewAttributeId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*-+-------- ISO 10303-14:B.2.225  ---*/
void ViewAttrDeclStmtList(jsdai.SExtended_dictionary_schema.EIndependent_view_definition vd, jsdai.SExtended_dictionary_schema.EView_partition partition, boolean first_partition) throws jsdai.lang.SdaiException :
{}
{
	{
		view_attribute_order_count = 0;
	}
	( ViewAttributeDecl(vd, partition, first_partition) )+
}

/*-+-------- ISO 10303-14:B.2.226  ---*/
Object ViewCall() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
	jsdai.SExtended_dictionary_schema.EView_partition vp = null;
	jsdai.SExtended_dictionary_schema.EMap_or_view_partition partition = null;
}
{
	{
		printDebug("In ViewCall, starting");
	}
	vd = ViewReference() [ partition = PartitionQualification(vd) ] "(" [ ExpressionOrWild() ( "," ExpressionOrWild() )* ] ")"
	{
		printDebug("In ViewCall, ending");
	  return null;
	}
}

/*-+-------- ISO 10303-14:B.2.227  ---*/


//view_decl = VIEW view_id independent_view_decl | dependent_view_decl  END_VIEW ';'
void ViewDecl() throws jsdai.lang.SdaiException :
{
	String view_name;
	Token a_token;
}
{
	{
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	a_token = <VIEW> view_name = ViewId()  ( DependentViewDecl(a_token, view_name) | IndependentViewDecl(a_token, view_name) ) <END_VIEW> ";"
	{
		current_scope = (Vector)scope_stack.pop();
	}
}

// independent_view_decl = root_view_decl | subtype_view_decl
void IndependentViewDecl(Token a_token, String view_name) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration vld = null;
}
{
	{
		printDebug("Current view: " + view_name);
		if (parser_pass == 1) {
			// check if a view with this name already exists in the extent.
			vd = findView_definition(view_name, null);
			if (vd != null) {
				error_count++;
//				printError("duplicate view name \"" + view_name + "\"");
				printErrorMsg("" + view_name + " - duplicate view name", null, true);
			} else {
				String wrong_name = findAnyName(view_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + view_name + "\". The same name used for a view and for " + wrong_name);
					printErrorMsg("" + view_name + " - duplicate view name, the name is already in use in the current scope", null, true);
				}
				vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CIndependent_view_definition.class);
				active_scope = vd;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				vld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$view_declaration.class);


//				vld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				vld.setParent(null, sd);
				vld.setDefinition(null, vd);

				vd.setName(null, view_name);
				// supertypes is non-optional attribute, although there are no supertypes in dependent_views.
//				vd.createSupertypes(null);
				vd.createGeneric_supertypes(null);
			}
		}       else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper()
			vd = findView_definition(view_name, null);
			active_scope = vd;
			if (vd == null) {
				error_count++;
//				printError("ViewDecl - the view not found: " + view_name);
				printErrorMsg("" + view_name + " - view not found", null, true);
			}
		}
		// createDocumentationEntity2(vd, a_token);
	}
	[ SupertypeConstraint(vd) ]
	( SubtypeViewDecl(vd) | RootViewDecl(vd) ) 
}

// root_view_decl = [supertype_constraint] ';' binding_header independent_view_project_clause {binding_header independent_view_project_clause}
void RootViewDecl(jsdai.SExtended_dictionary_schema.EView_definition vd) throws jsdai.lang.SdaiException :
{
	jsdai.lang.EEntity partition_e = null;
	jsdai.SExtended_dictionary_schema.EView_partition partition = null;
}
{
	  ";"
	  partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	  IndependentViewProjectClause(vd, partition, true) 
	  ( 
//           LOOKAHEAD(BindingHeader(vd)) partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	    partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	    IndependentViewProjectClause(vd, partition, false) 
	  )* 
}

// subtype_view_decl = [supertype_constraint] subtype_declaration ';' subtype_binding_header independent_view_project_clause {subtype_binding_header independent_view_project_clause}
void SubtypeViewDecl(jsdai.SExtended_dictionary_schema.EView_definition vd) throws jsdai.lang.SdaiException :
{
	jsdai.lang.EEntity gen_partition = null;
}
{
 	  SubtypeDeclaration(vd) ";"
	  gen_partition = SubtypeBindingHeader(vd) 
	  IndependentViewProjectClause(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, true) 
	  // <PARTITION> choice conflict
	  ( 
//	    LOOKAHEAD(SubtypeBindingHeader(vd)) gen_partition = SubtypeBindingHeader(vd) 
	    gen_partition = SubtypeBindingHeader(vd) 
	    IndependentViewProjectClause(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, false) 
	  )* 
}

// dependent_view_decl = ':' base_type [supertype_constraint] ';' binding_header RETURN expression {binding_header RETURN expression}
void DependentViewDecl(Token a_token, String view_name) throws jsdai.lang.SdaiException :
{
	jsdai.lang.EEntity bt = null;
	jsdai.lang.EEntity partition_e = null;
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration vld = null;
	jsdai.SExtended_dictionary_schema.EView_partition partition = null;
}
{
	":" bt = BaseType(null) 
	
	{
		printDebug("Current view: " + view_name);
		if (parser_pass == 1) {
			// check if a view with this name already exists in the extent.
			vd = findView_definition(view_name, null);
			if (vd != null) {
				error_count++;
//				printError("duplicate view name \"" + view_name + "\"");
				printErrorMsg("" + view_name + " - duplicate view name", null, true);
			} else {
				String wrong_name = findAnyName(view_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + view_name + "\". The same name used for a view and for " + wrong_name);
					printErrorMsg("" + view_name + " - duplicate view name, the name is already in use in the current scope", null, true);
				}
				vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDependent_view_definition.class);
				((jsdai.SExtended_dictionary_schema.EDependent_view_definition)vd).setDomain(null, bt);
				active_scope = vd;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				vld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$view_declaration.class);


//				vld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				vld.setParent(null, sd);
				vld.setDefinition(null, vd);

				vd.setName(null, view_name);
				// supertypes is non-optional attribute, although there are no supertypes in dependent_views.
//				vd.createSupertypes(null);
				vd.createGeneric_supertypes(null);
			}
		} else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper()
			vd = findView_definition(view_name, null);
			active_scope = vd;
			if (vd == null) {
				error_count++;
//				printError("ViewDecl - the view not found: " + view_name);
				printErrorMsg("" + view_name + " - view not found", null, true);
			}
		}
		// createDocumentationEntity2(vd, a_token);
	}
	
	
	[ SupertypeConstraint(vd) ] 
        partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	<RETURN> Expression()
	( 
	    // the choice problem here
	    partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	    <RETURN> Expression()
	)* 
}

// independent_view_project_clause = SELECT view_attr_decl_stmt_list;
void IndependentViewProjectClause(jsdai.SExtended_dictionary_schema.EView_definition vd, jsdai.SExtended_dictionary_schema.EView_partition partition, boolean first_partition) throws jsdai.lang.SdaiException :
{}
{
	<SELECT> ViewAttrDeclStmtList((jsdai.SExtended_dictionary_schema.EIndependent_view_definition)vd, partition, first_partition)
}

void ViewDecl_previous() throws jsdai.lang.SdaiException :
{
	String view_name;
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration vld = null;
	Token a_token;
	boolean is_dependent_view = false;
	jsdai.lang.EEntity bt = null;
	jsdai.SExtended_dictionary_schema.EView_partition partition = null;
	jsdai.lang.EEntity partition_e = null;
	jsdai.lang.EEntity gen_partition = null;
}
{
//      <VIEW> ViewId() [ ":" BaseType(null) ] [ SupertypeRule() ] ";" ( ViewSubtypeOfClause() ( SubtypeBindingHeader() ViewProjectClause() )+ ) | ( ( BindingHeader() ViewProjectClause() )+ ) <END_VIEW> ";"
// not making the change from DIS
//old	<VIEW> ViewId() [ ":" BaseType(null) ] [ SupertypeConstraint(null) ] ";" ( ViewSubtypeOfClause() ( LOOKAHEAD(3) SubtypeBindingHeader() ViewProjectClause() )+ ) | ( ( BindingHeader() ViewProjectClause() )+ ) <END_VIEW> ";"
	a_token = <VIEW> view_name = ViewId() [ ":" bt = BaseType(null) { is_dependent_view = true;}]  
	{
		printDebug("Current view: " + view_name);
		if (parser_pass == 1) {
			// check if a view with this name already exists in the extent.
			vd = findView_definition(view_name, null);
			if (vd != null) {
				error_count++;
//				printError("duplicate view name \"" + view_name + "\"");
				printErrorMsg("" + view_name + " - duplicate view name", null, true);
			} else {
				String wrong_name = findAnyName(view_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + view_name + "\". The same name used for a view and for " + wrong_name);
					printErrorMsg("" + view_name + " - duplicate view name, the name is already in use in the current scope", null, true);
				}
				if (is_dependent_view) {
					vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDependent_view_definition.class);
					((jsdai.SExtended_dictionary_schema.EDependent_view_definition)vd).setDomain(null, bt);
				} else {
					vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CIndependent_view_definition.class);
				}
				active_scope = vd;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				vld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$view_declaration.class);


//				vld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				vld.setParent(null, sd);
				vld.setDefinition(null, vd);

				vd.setName(null, view_name);
				// supertypes is non-optional attribute, although there are no supertypes in dependent_views.
//				vd.createSupertypes(null);
				vd.createGeneric_supertypes(null);
			}
		}       else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper()
			vd = findView_definition(view_name, null);
			if (vd == null) {
				error_count++;
//				printError("ViewDecl - the view not found: " + view_name);
				printErrorMsg("" + view_name + " - view not found", null, true);
			}
		}
		// createDocumentationEntity2(vd, a_token);
	}

	SubSuper(vd) ";" 
	( 
	  partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	  ViewProjectClause(vd, partition, true) 
	  ( 
//           LOOKAHEAD(BindingHeader(vd)) partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
//	    partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	    LOOKAHEAD(100) partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	    ViewProjectClause(vd, partition, false) 
	  )* 
	) 
	|
	(  
	  gen_partition = SubtypeBindingHeader(vd) 
	  ViewProjectClause(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, true) 
	  // <PARTITION> choice conflict
	  ( 
//	    LOOKAHEAD(SubtypeBindingHeader(vd)) gen_partition = SubtypeBindingHeader(vd) 
	    gen_partition = SubtypeBindingHeader(vd) 
	    ViewProjectClause(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, false) 
	  )* 
	) 
	<END_VIEW> ";"
}


void ViewDecl_old() throws jsdai.lang.SdaiException :
{
	String view_name;
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration vld = null;
	Token a_token;
	boolean is_dependent_view = false;
	jsdai.lang.EEntity bt = null;
	jsdai.SExtended_dictionary_schema.EView_partition partition = null;
	jsdai.lang.EEntity partition_e = null;
	jsdai.lang.EEntity gen_partition = null;
}
{
//      <VIEW> ViewId() [ ":" BaseType(null) ] [ SupertypeRule() ] ";" ( ViewSubtypeOfClause() ( SubtypeBindingHeader() ViewProjectClause() )+ ) | ( ( BindingHeader() ViewProjectClause() )+ ) <END_VIEW> ";"
// not making the change from DIS
//old	<VIEW> ViewId() [ ":" BaseType(null) ] [ SupertypeConstraint(null) ] ";" ( ViewSubtypeOfClause() ( LOOKAHEAD(3) SubtypeBindingHeader() ViewProjectClause() )+ ) | ( ( BindingHeader() ViewProjectClause() )+ ) <END_VIEW> ";"
	a_token = <VIEW> view_name = ViewId() [ ":" bt = BaseType(null) { is_dependent_view = true;}]  
	{
		printDebug("Current view: " + view_name);
		if (parser_pass == 1) {
			// check if a view with this name already exists in the extent.
			vd = findView_definition(view_name, null);
			if (vd != null) {
				error_count++;
//				printError("duplicate view name \"" + view_name + "\"");
				printErrorMsg("" + view_name + " - duplicate view name", null, true);
			} else {
				String wrong_name = findAnyName(view_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + view_name + "\". The same name used for a view and for " + wrong_name);
					printErrorMsg("" + view_name + " - duplicate view name, the name is already in use in the current scope", null, true);
				}
				if (is_dependent_view) {
					vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDependent_view_definition.class);
					((jsdai.SExtended_dictionary_schema.EDependent_view_definition)vd).setDomain(null, bt);
				} else {
					vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CIndependent_view_definition.class);
				}
				active_scope = vd;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				vld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$view_declaration.class);

	if (sd == null) {		
//              System.out.println("SD NULL, view_name: " + view_name + ", pass: " + parser_pass);
	} else {
	}

//				vld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				vld.setParent(null, sd);
				vld.setDefinition(null, vd);

				vd.setName(null, view_name);
				// supertypes is non-optional attribute, although there are no supertypes in dependent_views.
//				vd.createSupertypes(null);
				vd.createGeneric_supertypes(null);
			}
		}       else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper()
			vd = findView_definition(view_name, null);
			if (vd == null) {
				error_count++;
//				printError("ViewDecl - the view not found: " + view_name);
				printErrorMsg("" + view_name + " - view not found", null, true);
			}
		}
		// createDocumentationEntity2(vd, a_token);
	}

{
printDebug("In ViewDecl, before SubSuper");
}
	SubSuper(vd) ";" 
{
printDebug("In ViewDecl, after SubSuper");
}
	(  
{
printDebug("In ViewDecl, starting subtype branch");
}
	gen_partition = SubtypeBindingHeader(vd) 
{
printDebug("In ViewDecl, subtype branch, before ViewProjectClause");
}
	ViewProjectClause(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, true) 
{
printDebug("In ViewDecl, subtype branch, after 1st ViewProjectClause");
}
	// <PARTITION> choice conflict
	( LOOKAHEAD(SubtypeBindingHeader(vd)) gen_partition = SubtypeBindingHeader(vd) 
	ViewProjectClause(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, false) )* ) | 
	( 
{
printDebug("In ViewDecl, starting no-subtype branch");
}
	partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
{
printDebug("In ViewDecl, no-subtype branch, before ViewProjectClause");
}
	ViewProjectClause(vd, partition, true) 
{
printDebug("In ViewDecl, no-subtype branch, after 1st ViewProjectClause");
}
	( partition_e = BindingHeader(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	ViewProjectClause(vd, partition, false) )* ) <END_VIEW> ";"
}


/*--------- ISO 10303-14:B.2.228  ---*/
String ViewId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*-+-------- ISO 10303-14:B.2.229  ---*/
void ViewProjectClause(jsdai.SExtended_dictionary_schema.EView_definition vd, jsdai.SExtended_dictionary_schema.EView_partition partition, boolean first_partition) throws jsdai.lang.SdaiException :
	{}
{
	 ( <SELECT> ViewAttrDeclStmtList((jsdai.SExtended_dictionary_schema.EIndependent_view_definition)vd, partition, first_partition) ) | ( <RETURN> Expression() )
}

/*--------- ISO 10303-14:B.2.230 ---*/
jsdai.SExtended_dictionary_schema.EView_definition ViewReference() throws jsdai.lang.SdaiException :
{ 
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
}
{
//      [ (SchemaMapRef() | SchemaViewRef() ) "." ] ViewRef()
//      [ SchemaRef()  "." ] ViewRef()
		// "." allows to confirm the presence of the optional prefix, lookahead 2 is ok
		[  LOOKAHEAD(2) InterpretedRef(PI_SCHEMA_MAP_OR_SCHEMA_VIEW) "." ] InterpretedRef(PI_VIEW)
	{
		return vd;
	}
}

/*-+-------- ISO 10303-14:B.2.231  ---*/
// removed -

//R void ViewSubtypeOfClause() throws jsdai.lang.SdaiException :
//R {}
//C {
//	<SUBTYPE> <OF> "(" ViewReference() ( "," ViewReference() )* ")" 
// my correction:
//R	<SUBTYPE> <OF> "(" ViewReference() ( "," ViewReference() )* ")" ";" 
//R }


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.315------------ */
void WhereClause(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EWhere_rule wr = null;
	jsdai.SExtended_dictionary_schema.AWhere_rule ar = null;
  	int index = 1;
  	no_label_nr = 0;
  	if (parser_pass == 5) {
  	}
}
{
	{
		where_rule_order_count = 0;
		active_scope = parent;
		// active scope should not be changed 
		printDebug("In WhereClause, starting, parent: " + parent);
		domain_rule_labels.clear();
	}
	// choice conflict here
	// <WHERE> ( LOOKAHEAD(2) wr = DomainRule(parent)
	// problem is for_expr in SimpleFactor and EntityInstantiation_loop in map_decl_body
//	<WHERE> (wr = DomainRule(parent)

// this approach causes parse exceptions in some cases in expressions, a more subtle approach is needed.
// for now, nothing, it is ok, if express x not used





	// attempt to distinguish between domain rule in WHERE clause in map and following FOR instantion loop

	// works in maps, but causes problems in some where rules, it seems
//	 <WHERE> (LOOKAHEAD(DomainRule(parent))wr = DomainRule(parent)


//	<WHERE> (LOOKAHEAD((isDomainRule())) wr = DomainRule(parent)

//	<WHERE> (wr = DomainRule(parent)

//	<WHERE> (LOOKAHEAD({isDomainRule()}) wr = DomainRule(parent)

////	<WHERE> (wr = DomainRule(parent)

 

	// let's try using this semanthic lookahead:
//	<WHERE> (LOOKAHEAD({getToken(1).kind != <FOR>})wr = DomainRule(parent)
//	<WHERE> (LOOKAHEAD({!(getToken(1).image.equalsIgnoreCase("FOR"))})wr = DomainRule(parent)



//// the original which is not able to handle WHERE + FOR instantiation loop in maps
//	<WHERE> (wr = DomainRule(parent) ";")+ 

//	<WHERE> (LOOKAHEAD((getToken(1).kind != Compiler2Constants.FOR))wr = DomainRule(parent) ";")+

// seems that we are not using whatever is returned from DomainRule, at least in these passes

// the original which is not able to handle WHERE + FOR instantiation loop in maps
//	<WHERE> (DomainRule(parent) ";")+ 

//	<WHERE> (LOOKAHEAD({getToken(1).kind != Compiler2Constants.FOR}) DomainRule(parent) ";")+ // not enough, have to expand
//	 <WHERE> (LOOKAHEAD(DomainRule(parent))wr = DomainRule(parent) ";")+  // works in maps, but causes problems elsewhere


// WORKS OK EVERYWHERE, this one has to be used:
// BTW, the problem with the whole DomainRule in lookahead is now fixed, but this one is more optimal
	<WHERE> (LOOKAHEAD({isDomainRule()}) wr = DomainRule(parent) ";")+  // experimental

{
		printDebug("In WhereClause, ending");
}

}

/*-------------------------------*/
/*
void ChoiceConflict () :
{}
{
	<BASED_ON> | <BASED_ON>
}
*/
/*-------------------------------*/


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.316------------ */
void WhileControl() throws jsdai.lang.SdaiException :
{}
{
	<WHILE> LogicalExpression()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.317------------ */
int Width() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = NumericExpression()
	{
		return value;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.318------------ */
int WidthSpec() throws jsdai.lang.SdaiException :
{

	int wide;
	boolean is_fixed = false;
}
{
	"(" wide = Width() ")" [<FIXED> {is_fixed = true;}]
	{

		if (parser_pass == 5) {
			if (wide > 0) {
				if (is_fixed) {
					wide = -wide;
				}
			}

		}
		return wide;
	}
}

/************ 5th pass ----- starts ---------------------------------- **************/


/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.145 ------------*/
jsdai.SExtended_dictionary_schema.EAttribute AttributeRef5(jsdai.SExtended_dictionary_schema.EEntity_definition ed, jsdai.SExtended_dictionary_schema.EEntity_definition ed2, int attr_type, Object reference)  throws jsdai.lang.SdaiException #AttributeRef :
{
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	String attribute_name;
	Token attribute_token;
	String attr_key = null;
	int attr_type_original;
	boolean to_debug = false;
}
{
{
	printDebug("In AttributeRef5, starting, ed: " + ed + ", ed2: " + ed2 + ", attr. type: " + attr_type + ", reference: " + reference + ", pass: " + parser_pass);
		attr_type_original = attr_type;
		if (attr_type == -40) {
			attr_type = 0;
			to_debug = true;
			System.out.println("to debug explicit in AttributeRef5 - ed: " + ed + ", ed2: " + ed2 + ", reference: " + reference + ", active_scope: " + active_scope);
		}


}
	attribute_token = AttributeId5()
	{
		if (flag_oc) {
			attribute_name = attribute_token.image;
		} else {
			attribute_name = attribute_token.image.toLowerCase();
		}

		if (to_debug) {
			System.out.println("debugging AttributeRef5, attribute_name: " + attribute_name);
		}
//System.out.println("In AttributeRef, starting, ed: " + ed + ", ed2: " + ed2 + ", attr. type: " + attr_type + ", reference: " + reference + ", pass: " + parser_pass);
//System.out.println("attribute name: " + attribute_name);
		printDebug("In AttributeRef5, attribute name: " + attribute_name);
		if (parser_pass == 1) {
			if (attr_type == 0) { // explicit
// System.out.println("<=EA-3=>");
				attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExplicit_attribute.class);
				attr.setName(null, attribute_name);
				attr.unsetOrder(null);
				// attr.setOrder(null, Integer.MIN_VALUE);
				attr.setParent(null, ed);
				// currently, ed is declared as entity_definition, but who knows what will happen in the future
				// parent_entity is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// attr.setParent_entity(null, ed);
				// }
			} else
			if (attr_type == 1) { // derived
// System.out.println("<=DA-3=>");
				attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDerived_attribute.class);
				attr.setName(null, attribute_name);
				attr.unsetOrder(null);
				// attr.setOrder(null, Integer.MIN_VALUE);
				attr.setParent(null, ed);
				// parent_entity is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// attr.setParent_entity(null, ed);
				// }
			} else
			if (attr_type == 2) { // inverse
// System.out.println("<=IA-3=>");
				attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInverse_attribute.class);
				attr.setName(null, attribute_name);
				attr.unsetOrder(null);
				// attr.setOrder(null, Integer.MIN_VALUE);
				attr.setParent(null, ed);
				// parent_entity is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// attr.setParent_entity(null, ed);
				// }
			}
		} else
		if (parser_pass == 2) {
		} else
		if (parser_pass == 3) {
		} else
		if (parser_pass == 4) {
			if (attr_type >= 0) {
				if (attr_type == 3) {
// System.out.println("@X 1 name: " + attribute_name + ", ed: " + ed2);
					attr = findAttribute(attribute_name, ed2, 0, ed, attr_key);
				}
				else {
// System.out.println("@X 2 name: " + attribute_name + ", ed: " + ed);

//        changed back from ed to ed2, not clear why it was changed to ed in the first place
//					attr = findAttribute(attribute_name, ed, attr_type);
					attr = findAttribute(attribute_name, ed2, attr_type, ed, attr_key);
				}
			}
		} else
		if (parser_pass == 5) {




		
				if (flag_in_redeclaring) {
//				 	attr_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + attribute_name.toLowerCase();
				 	attr_key = "#" + global_schema_name + "_#" + global_entity_ref + "_#_#" + attribute_name.toLowerCase();
				} else {
//				 	hm_attribute_key = "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
					attr_key = null;
				}
		if (to_debug) {
			System.out.println("debugging AttributeRef5, attr_key: " + attr_key);
		}				
		
		
		
		
			if (attr_type >= 0) {
				if (attr_type == 3) {
						// printDDebug("######0 in AttributeRef5 name: " + attribute_name + ", entity name: " + ed2.getName(null) + ", attribute type: " + attr_type);
// System.out.println("@#@# Invoking findAttribute from AttributeRef5, pass = 5, type = 3, name: " + attribute_name + ", ed: " + ed2); 
					attr = findAttribute(attribute_name, ed2, 0, ed, attr_key); 
// if (attr == null) {
 //System.out.println("attr_type = 3, name: " + attribute_name + ", ed2: " + ed2 + ", ed: " + ed + ", attr: " + attr + ", key: " + attr_key); 
//}
				} 
				else {	
						// printDDebug("######else in AttributeRef5 name: " + attribute_name + ", entity name: " + ed2.getName(null) + ", attribute type: " + attr_type);
//		repository.exportClearTextEncoding(p21_file);
// System.out.println("XXXX 01: name: " + attribute_name + ", ed: " + ed2 + ", type: " + attr_type);
// System.out.println("@#@# Invoking findAttribute from AttributeRef5, pass = 5, type != 3, name: " + attribute_name + ", ed: " + ed2); 
// 	System.out.println("before findAttirbute: " + attr_type + ", name: " + attribute_name + ", ed2: " + ed2 + ", ed: " + ed + ", key: " + attr_key); 
					attr = findAttribute(attribute_name, ed2, attr_type_original, ed, attr_key);
//					attr = findAttribute(attribute_name, ed2, attr_type, ed, attr_key);
		if (to_debug) {
			System.out.println("debugging AttributeRef5, after findAttribute: attribute_name: " + attribute_name + ", ed2: " + ed2 + ", attr_type: " + attr_type + ", ed: " + ed + ", attr_key: " + attr_key + ", result attr: "  + attr);
		}				


// if (attr == null) {
// 	System.out.println("attr_type != 3: " + attr_type + ", name: " + attribute_name + ", ed2: " + ed2 + ", ed: " + ed + ", attr: " + attr + ", key: " + attr_key); 
//}
// System.out.println("XXXX 02: attribute: " + attr);
				}

/*	
System.out.println("attribute: " + attribute_name);
System.out.println("hm key: " + attr_key);
System.out.println("===== hm_attributes: " + hm_attributes );
Set keyset = hm_attributes.keySet();
Iterator keyset_iterator = keyset.iterator();
System.out.println("\n==============================================\n");
while (keyset_iterator.hasNext()) {
	String a_key = (String)keyset_iterator.next();
System.out.println("a hashmap key: " + a_key + ", value: " + hm_attributes.get(a_key));
}
*/	


	
			  if (attr == null) {
			  	if (flag_in_redeclaring) {
// temp solution - to allow continuation
//		 				error_count++;
			 			if (flag_derived_expression) {
							printErrorMsgW("" + attribute_name +  " - attribute not found in entity " + ed2.getName(null) + " in a derived attribute expression", null, true);
						} else {
							if (attr_type == 0) {
								// redeclaring attribute is explicit
/*
System.out.println("hm key: " + attr_key);
System.out.println("===== hm_attributes: " + hm_attributes );
Set keyset = hm_attributes.keySet();
Iterator keyset_iterator = keyset.iterator();
System.out.println("\n==============================================\n");
while (keyset_iterator.hasNext()) {
	String a_key = (String)keyset_iterator.next();
System.out.println("a hashmap key: " + a_key + ", value: " + hm_attributes.get(a_key));
}
*/
                // replacing WARNING by ERROR
								error_count++;
//								printErrorMsgW("" + attribute_name +  " -  explicit attribute not found in entity " + ed2.getName(null) + " while attempting to redeclare it as explicit", null, true);
								printErrorMsg("" + attribute_name +  " -  explicit attribute not found in entity " + ed2.getName(null) + " while attempting to redeclare it as explicit", null, true);

							} else
							if (attr_type == 1) {
								// redeclaring attribute is derived
								// replacing WARNING by ERROR
								error_count++;
								// printErrorMsgW("" + attribute_name +  " - explicit or derived attribute not found in entity " + ed2.getName(null) + " while attempting to redeclare it as derived", null, true);
								printErrorMsg("" + attribute_name +  " - explicit or derived attribute not found in entity " + ed2.getName(null) + " while attempting to redeclare it as derived", null, true);
							} else
							if (attr_type == 2) {
								// redeclaring attribute is inverse
								// replacing WARNING by ERROR
								error_count++;
								// printErrorMsgW("" + attribute_name +  " - inverse attribute not found in entity " + ed2.getName(null) + " while attempting to redeclare it as inverse", null, true);
								printErrorMsg("" + attribute_name +  " - inverse attribute not found in entity " + ed2.getName(null) + " while attempting to redeclare it as inverse", null, true);
							} else {
								// may be an internal error
								// replacing WARNING by ERROR
								error_count++;
								// printErrorMsgW("" + attribute_name +  " - attribute not found in entity " + ed2.getName(null) + " while attempting to redeclare it", null, true);
								printErrorMsg("" + attribute_name +  " - attribute not found in entity " + ed2.getName(null) + " while attempting to redeclare it", null, true);
							}
						}
					} else {
//			 			error_count++;
//						printErrorMsg("" + attribute_name +  " - attribute not found in entity " + ed2.getName(null), null, true);

						if (flag_print_attribute_not_found_error) {
							// may be wrong reporting 
							printWarningMsg("" + attribute_name +  " - attribute not found in entity ed2: " + ed2 + ", ed: " + ed, null, true);
						}

					}

//			 			error_count++;
//						printErrorMsg("" + attribute_name +  " - attribute not found in entity " + ed2.getName(null), null, true);
//						printErrorMsg("" + attribute_name +  " - attribute not found in entity: " + ed2 + " (" + ed + ")", null, true);
				}
			} else {
			
		if (hm_attributes != null) {
			if (attr_key != null) {
				Object attr_from_hm_object = hm_attributes.get(attr_key);			
				if (attr_from_hm_object != null) {
					if (attr_from_hm_object instanceof jsdai.SExtended_dictionary_schema.EAttribute) {
// System.out.println("<= hm_attribute @ work, key: " + attr_key + ", attribute: " + attr_from_hm_object);
						attr = (jsdai.SExtended_dictionary_schema.EAttribute)attr_from_hm_object;
					}
				}
			}
		}
			
			}



			
			if (expression_instances) {
				if (attr == null) {
					String e_name, e_name2;
					if (ed2 != null) {
						e_name2 =  ed2.getName(null);
					} else {
							e_name2 = "NULL";
					}
					if (ed != null) {
						e_name =  ed.getName(null);
					} else {
							e_name = "NULL";
					}
					printDDebug("## AttributeRef5 - NULL: " + attribute_name + ", ed: " + e_name + ", ed2: " + e_name2 + ", type: " + attr_type);
				}
// System.out.println("Making node - name: " + attribute_name + ", attribute: " + attr + ", reference: " + reference);
				jjtThis.attribute = attr;
				if (attr != null) {
//					jjtThis.name = attr.getName(null);
					jjtThis.name = getOriginalAttributeName(attr);
				} else {
//System.out.println("<EC> attr null: " + attribute_name);
printErrorMsgX("reference to unknown attribute: " + attribute_name, null, true);
					jjtThis.name = attribute_name;
				}
				jjtThis.reference = reference;

/*
if (attr != null) {
	printDDebug("#__# Before process: " + attr.getName(null));
	if (attr instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
		printDDebug("#__# Before TEST - EXPLICIT ATTRIBUTE");
		boolean test_domain = ((jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr).testDomain(null);
		printDDebug("#__# AFTER TEST DOMAIN");
		if (test_domain)
			printDDebug("#__# DOMAIN - TRUE");
		else
			printDDebug("#__# DOMAIN - FALSE");

		jsdai.lang.EEntity rr_attr_type = ((jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr).getDomain(null);
		printDDebug("#__# Before process - AFTER GET DOMAIN");
	}
}
else printDDebug("#__# Before process - attribute is NULL");
printDDebug("#__# JUST Before process");
*/
//                              jjtThis.process();
// printDDebug("#__# After process");
			}
		}
//              if (attr == null) {
//              printDDebug("##_________## Inside Attribute Ref = NULL");
//              } else {
//                      printDDebug("##_________## Inside Attribute Ref: " + attr.getName(null));
//              }
//System.out.println("AttrRef returning: " + attr);		

/*
System.out.println("+++++++++++ Resolving attribute reference +++++++++++++++++++++++");

System.out.println("attribute_name: " + attribute_name);
System.out.println("ed: " + ed);
System.out.println("ed2: " + ed2);
System.out.println("reference: " + reference);
System.out.println("active_scope: " + active_scope);
System.out.println("attr_key: " + attr_key);

System.out.println("attr_type: " + attr_type);
System.out.println("attr_type_original: " + attr_type_original);

System.out.println("hm_attributes: " + hm_attributes);
System.out.println("---------------------------------------------------------------");
System.out.println("resolved attr: "  + attr);


System.out.println("+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
*/
		return attr;
	}
}
/* ------------------------------------------------------------------------------ ISO 10303-11:A.1.5-interpreted identifiers----------- */

/*
	 This is all my idea - the InterpretedId5() is outside the part 11 grammar.

	 the following identifier can not be distinguished by the parser, but could be distinguished by the 1st pass information:

	 attribute_ref
	 constant_ref
	 entity_ref
	 enumeration_ref
	 function_ref
	 parameter_ref
	 procedure_ref
	 schema_ref
	 type_label_ref
	 type_ref
	 variable_ref

	 So it is better to use them only where they are used alone, and InterpretedId5() non-terminal symbol to use when there is
	 a choice between them. That would allow to make them more specialized.

*/

/*
void InterpretedId5() :
{}
{
	ConstantId5()
}
*/
String InterpretedId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			global_name = t.image;
			return (t.image);
		} else {
			global_name = t.image.toLowerCase();
			return (t.image.toLowerCase());
		}
	}
}

Object InterpretedRef5(int possible_interpretations) throws jsdai.lang.SdaiException :
{
	String name = null;
	Object result = null;
}
{
	name = InterpretedId5()
	{
		printDDebug("InterpretedRef5 - name: " + name + ", possible: " + possible_interpretations + ", pass: " + parser_pass);
		result = findInterpretedId2(name, possible_interpretations);
		return result;
	}
}

// temporory Express X interpreted identifiers

jsdai.SExtended_dictionary_schema.ESchema_definition SourceSchemaRef55() throws jsdai.lang.SdaiException :
{
	Object result = null;
}
{
	// SchemaId5()
	result = InterpretedRef5(PI_SOURCE_SCHEMA)
	{
		return (jsdai.SExtended_dictionary_schema.ESchema_definition)result;
	}
}

Object TargetSchemaRef55() throws jsdai.lang.SdaiException :
{}
{
	SchemaId5()
	{
		return null;
	}
}

Object DummyQualifiableFactor5() throws jsdai.lang.SdaiException :
{}
{
	{
		return null;
	}
}

jsdai.SExtended_dictionary_schema.EView_attribute ViewAttributeRef5() throws jsdai.lang.SdaiException :
{
	String name;
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
}
{
	name = ViewAttributeId5()
	{
		if (active_scope instanceof jsdai.SExtended_dictionary_schema.EView_definition) {
			vd = (jsdai.SExtended_dictionary_schema.EView_definition)active_scope;
		}
		return findView_attribute(name, vd);
	}
}

Object SchemaMapRef5() throws jsdai.lang.SdaiException :
{}
{
	SchemaMapId5()
	{
		return null;
	}
}
Object SchemaViewRef55() throws jsdai.lang.SdaiException :
{}
{
	SchemaViewId5()
	{
		return null;
	}
}
jsdai.SExtended_dictionary_schema.EMap_or_view_partition PartitionRef5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	String name;
	jsdai.SExtended_dictionary_schema.EMap_or_view_partition result = null; 
}
{
	name = PartitionId5()
	{
		result = findMap_or_view_partition(name, parent);
		return result;
	}
}

// Removed in DIS
/*
Object InstanceRef() throws jsdai.lang.SdaiException :
{}
{
	InstanceId()
	{
		return null;
	}
}
*/

Object ViewRef5() throws jsdai.lang.SdaiException :
{}
{
	ViewId5()
	{
		return null;
	}
}


/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.146 ------------ */
Object ConstantRef5() throws jsdai.lang.SdaiException #ConstantRef:
{
  Object result = null;
  jsdai.SExtended_dictionary_schema.EConstant_definition cd = null;	
  String name;


}
{
	name = ConstantId5()
	{ 
//		cd = findConstant_definition(name);
		cd = findConstant_definitionX(name);
		if (cd == null) {
			// printError("Constant not found: " + name);
		}
		result = cd;
		if (parser_pass == 5) {
			if (cd != null) {
				jjtThis.name = cd.getName(null);
			} else {
//System.out.println("<EC> constant null: " + name);
printErrorMsgX("reference to unknown constant: " + name, null, true);
				jjtThis.name = name;
			}
			jjtThis.cd = cd;
			jjtThis.depth = getConstantDepth(name);
		}
		return result;
	} 
}

/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.147 ------------ */
jsdai.SExtended_dictionary_schema.EEntity_definition EntityRef5(jsdai.SExtended_dictionary_schema.ESchema_definition optional_schema) throws jsdai.lang.SdaiException :
{
	String entity_name = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
//      jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration eld;
}
{
	{
		printDebug("In EntityRef5, starting");
	}
	entity_name = EntityId5()
	{
		global_entity_ref = entity_name.toLowerCase();
		printDebug("In EntityRef5, entity: " + entity_name);
		// if parser pass = 2;
		if (parser_pass == 1) {
		} else
		if (parser_pass == 2) {
		} else
		if (parser_pass > 2) {
			// check if an entity with this name exists in the extent.
			ed = findEntity_definition(entity_name, optional_schema);
			if (ed == null) {
				error_count++;
				printErrorMsg5("" + entity_name + " - entity not found", null, true);
				printDebug("entity \"" + entity_name + "\" not found in pass " + parser_pass);                 
// printDDebug("##1 current schema: " + sd.getName(null) + ", pass: " + parser_pass);
				_data_type_name = "_ENTITY_NOT_FOUND_" + entity_name;
			} else {
				_data_type_name = ed.getName(null);
			}
		}
		if (ed == null) {
			printDebug("In EntityRef5, ending with null, pass: " + parser_pass);
		} else {
			printDebug("In EntityRef5, ending with non-null, pass: " + parser_pass);
		}
		return ed;
	}
}

/*----------------------------------------------------------------------------------- introduced by eRRe ----------------*/
jsdai.SExtended_dictionary_schema.ENamed_type NamedTypeRef55() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ENamed_type nt = null;
	String named_type_name;
}
{
	named_type_name = NamedTypeId5()
	{
		named_type_name = named_type_name.replace('$', '+');
		if (parser_pass == 1) {
		} else
		if (parser_pass == 2) {
		} else
		if (parser_pass > 2) {
			nt = findNamed_type(named_type_name);
			if (nt == null) {
				error_count++;
				printErrorMsg5("" + named_type_name + " - named_type not found", null, true);
				printDebug("named type \"" + named_type_name + "\" not found in pass " + parser_pass);
			}
		}
		return nt;
	}
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.148 ------------ */
void EnumerationRef5(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException #EnumerationRef:
{
	String name = null;
	Integer enumeration_value_object = null;
	int enumeration_value = 0;
}
{
	{
		printDebug("In EnumerationRef5, starting in pass " + parser_pass);
	}
	name = EnumerationId5()
	{

		if (parser_pass == 5) {
			printStack("PUSH: EnumerationRef5 int value: " + enumeration_value);
			if (dt == null) {
				dt = findEnumerationType(null, name);
			}
			enumeration_value = findEnumerationValue(dt, name);
			if (enumeration_value <= 0) {
				printDebug("Enumeration " + dt.getName(null) + " value not found: " + name);
			}
			enumeration_value_object = new Integer(enumeration_value);
			argument_stack.push(enumeration_value_object);
			if (flag_type_tracking) 
				type_stack.push(new String("_enumeration_"));  // temp solution
			if (expression_instances) {
				jjtThis.value = enumeration_value_object.intValue();;
				if (dt != null) {
//					jjtThis.name = dt.getName(null);
					jjtThis.name = name;
				} else {
//System.out.println("<EC> type null: " + name);
printErrorMsgX("reference to unknown type: " + name, null, true);
					jjtThis.name = name;
				}
				jjtThis.dt = dt;
				// placeholder
				// expression_stack.push(enumeration_value_object);
			}
		}
		printDebug("In EnumerationRef5: " + name + ", ending in pass " + parser_pass);
	}
}

/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.149 ------------ */
jsdai.SExtended_dictionary_schema.EFunction_definition FunctionRef5() throws jsdai.lang.SdaiException :
{
	String function_id = null;
	jsdai.SExtended_dictionary_schema.EFunction_definition fd = null;
}
{
	function_id = FunctionId5()
	{
		if (parser_pass == 5) {
//			fd = findFunction_definition(function_id);
			fd = findFunction_definitionX(function_id);
			if (fd == null) {
				printDebug("Function not found: " + function_id);
			}
		}
		return fd;
	}
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.150 ------------ */
jsdai.SExtended_dictionary_schema.EParameter ParameterRef5() throws jsdai.lang.SdaiException #ParameterRef :
{
	String name;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
}
{
	name = ParameterId5()
	{
		if(parser_pass == 5) {
			if (expression_instances) {
				par = findParameter(name);
				if (par == null) {
//					printError("parameter not found: " + name + " in " + current_scope);
					if (function_depth > 1) {
						printDebug("parameter not found: " + name + " in " + active_scope);
					} else {
						printDebug("parameter not found: " + name + " in " + active_scope);
					}
					printEDebug("Parameter not found: " + name + " in " + current_scope);
				}
//				jjtThis.name = "_e_" + name;
				if (par != null) {
					 jjtThis.name = "_e_" + par.getName(null);
				} else {
  		    // not a good situation
//System.out.println("<EC> parameter null: " + name);
printErrorMsgX("reference to unknown parameter: " + name, null, true);
  				jjtThis.name = "_e_" + name;
				}
				jjtThis.parameter = par;
			}
		}
		return par;
	}
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.151 ------------ */
jsdai.SExtended_dictionary_schema.EProcedure_definition ProcedureRef5() throws jsdai.lang.SdaiException :
{
	String procedure_id = null;
	jsdai.SExtended_dictionary_schema.EProcedure_definition pd = null;
}
{
	procedure_id = ProcedureId5()
	{
		if (parser_pass == 5) {
//			pd = findProcedure_definition(procedure_id);
			pd = findProcedure_definitionX(procedure_id);
//			pd = findProcedure(procedure_id);
			if (pd == null) {
				printDebug("Procedure not found: " + procedure_id);
			}
		}
		return pd;
	}
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.152 ------------ */
String SchemaRef5() throws jsdai.lang.SdaiException :
{
  String schema_name;
}
{
  schema_name = SchemaId5()
  {
		if (flag_oc) {
	    return schema_name;
		} else {
	    return schema_name.toLowerCase();
		}
  }
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.153 ------------ */
void TypeLabelRef5() throws jsdai.lang.SdaiException :
{}
{
	TypeLabelId5()
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.154 ------------ */
jsdai.SExtended_dictionary_schema.EDefined_type TypeRef5(int scope) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
	String type_name;
}
{
	type_name = TypeId5()
	{
		printDebug("In TypeRef5 starting in pass: " + parser_pass + ": " + type_name);
		if (parser_pass != 1) { // it is  a risky implementation leftover from 2 pass compiler. OK, if TypeRef5(0) is invoked from pass 4.
			if (scope == 0) {
				dt = findDefined_type(type_name);
				if (dt == null) {
					if (parser_pass > 2) {
						error_count++;
						printErrorMsg5("" + type_name + " - type not found", null, true);
						printDebug("Type reference - defined type \"" + type_name + "\" not found in pass " + parser_pass);
					} else {
						// error_count++;
						// may not be an error - chained USE FROMs are processed between passes 2 and 3.
						// printWarning("Type reference - defined type \"" + type_name + "\" not found in pass " + parser_pass);
					}
				}
			}
			else if (scope == 1) {
//        printDDebug("Enumeration scope: " + type_name);
			}
			else {
//        printDDebug("Unknown scope: " + type_name);
			}
		}
		printDebug("In TypeRef5 ending in pass: " + parser_pass);
		return dt;
	}
}
/* ---------------------------------------------------------------------------------- ISO 10303-11:A.1.5.155 ------------ */
ECtVariable VariableRef5() throws jsdai.lang.SdaiException #VariableRef :
{
	String name;
	ECtVariable var = null;
}
{
	name = VariableId5()
	{
		if (parser_pass == 5) {
// System.out.println("<about to find var, 03, name: " + name); 
			var = findVariableX(name);
			if (var == null) {
//				printError("variable not found: " + name + " in " + current_scope);
//				printError("variable not found: " + name + " in " + active_scope);
				printErrorMsg("" + name + " - variable not found in " + active_scope, null, true);
				printEDebug("Variable not found: " + name + " in " + current_scope);
				// printDDebug("Variable not found: " + name);
			}
			if (expression_instances) {
				if (var != null) {
// System.out.println("variable: " + var);
// System.out.println("variable type: " + var.getType());
// System.out.println("variable type name: " + var.getType().getName(null)); 				
					if (var.getType().getName(null).equals("_implicit_variable_")) {
// 					jjtThis.name = name;
 						jjtThis.name = var.getName();
// System.out.println("VR - variable name - implicit: " + name);
					} else {
// 					jjtThis.name = "_e_" + name;
 						jjtThis.name = "_e_" + var.getName();
// System.out.println("VR - variable name - NOT implicit: " + "_e_" + name);
					}
				} else {
//System.out.println("<EC> variable null: " + name);	
printErrorMsgX("reference to unknown variable: " + name, null, true);
				}
				jjtThis.variable = var;
				jjtThis.scope = active_scope;
				jjtThis.depth = function_depth;
// System.out.println("VR - variable: " + var);
			}
		}
		return var;
	}
}


/**************************************************************************************************************************
 *                                         ISO 10303-11:A.2 Grammar rules                                                 *
 **************************************************************************************************************************/

/* -----------------------------------------------------------------Amendment---------- ISO 10303-11:A.2.156 ------------ */
void AbstractSupertypEDeclaration5(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{
	boolean has_supertype = false;
}
{
	<ABSTRACT> [ <SUPERTYPE> { has_supertype = true; }[SubtypeConstraint5(ed)]]
	{
		if (parser_pass == 5) {
			if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
				((jsdai.SExtended_dictionary_schema.EEntity_definition)ed).setInstantiable(null, false);
//                     		ed.setInstantiable(null, 0);
				if (!has_supertype) {
					((jsdai.SExtended_dictionary_schema.EEntity_definition)ed).setAbstract_entity(null, true);
				}
			}
		}
	}
}

/* -------------------------------------------------------------------Amendment-------- ISO 10303-11:A.2.401 ------------ */
jsdai.lang.EEntity ConcreteTypes5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.lang.EEntity ae = null;
}
{
	{
		printDebug("Starting ConcreteTypes5");
	}
	(ae = AggregationTypes5(whose) | ae = SimpleTypes5(whose) | ae = NamedTypes5(whose))
	{
		printDebug("Ending ConcreteTypes5: " + ae);
//System.out.println(">ConcreteTypes5<  returning: " + ae);
		return ae;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.157 ------------ */
int ActualParameterList5(Vector arguments, Vector expressions) throws jsdai.lang.SdaiException :
{
	int argument_count = 0;
	Object argument [] = null;
}
{
	{
		printDebug("Starting ActualParameterList5");
	}
	("(" [argument = Parameter5() {argument_count++; arguments.addElement(argument[0]); expressions.addElement(argument[1]);}("," argument = Parameter5(){argument_count++; arguments.addElement(argument[0]);expressions.addElement(argument[1]);})*] ")")
	{
		printDebug("Ending ActualParameterList5, nr of arguments: " + argument_count);
		return argument_count;
	}
// I have added the [] to allow empty list like function()
// It is especially needed for entity constructors as I removed the separate entity constructor in favor of function call.

//  "(" Parameter5() ("," Parameter5())* ")"
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.158 ------------ */
int AddLikeOp5() throws jsdai.lang.SdaiException :
{
	int value = 0;
}
{
	( "+" {value = 1;}
				| "-" {value = 2;}
				| <OR> {value = 3;}
				| <XOR> {value = 4;}
	)
	{
		return value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.159 ------------ */
void AggregateInitializer5() throws jsdai.lang.SdaiException #AggregateInitializer :
{
	Vector members = new Vector();
	Vector member_types = new Vector();
	Object member = null;
	Object member_type = null;
	Object pop_inst = null;
}
{
	{
		printDebug("In AggregateInitializer5, starting");
	}
	"[" [Element5()
	{
		if (parser_pass == 5) {
			member = argument_stack.pop();
			if (flag_type_tracking) 
				member_type = type_stack.pop();
			printStack("POP: AggregateInitializer5, 1st member: " + member);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
			members.addElement(member);
			if (flag_type_tracking) 
				member_types.addElement(member);
		}
	}
	("," Element5()
	{
		if (parser_pass == 5) {
			member = argument_stack.pop();
			if (flag_type_tracking) 
				member_type = type_stack.pop();
			printStack("POP: AggregateInitializer5, next member: " + member);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
			members.addElement(member);
			if (flag_type_tracking) 
				member_types.addElement(member);
		}
	}
	)*
	 ] "]"
	{
		if (parser_pass == 5) {
			argument_stack.push(members);
			if (flag_type_tracking) 
				type_stack.push(member_types); // or should be push here just aggregate type?
			printStack("PUSH: AggregateInitialize: " + members);
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
		printDebug("In AggregateInitializer5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.160 ------------ */
void AggregateSource5() throws jsdai.lang.SdaiException #AggregateSource :
{}
{
	{
		printDebug("In AggregateSource5, starting");
	}

 SimpleExpression5()
	{
		printDebug("In AggregateSource5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.161 ------------ */
jsdai.SExtended_dictionary_schema.EParameter AggregateType5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter result = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	String Label5 = "";
	jsdai.SExtended_dictionary_schema.EAggregation_type at = null;
	jsdai.lang.A_string labels = null;
	String bound_name;
	boolean optional = false;
	boolean unique = false;
}
{
	{
		printDebug("In AggregateType5, starting");
	}
	<AGGREGATE> [":" Label5 = TypeLabel5()] <OF> par = ParameterType5()
	{
		if (parser_pass == 5) {

			boolean must_create = false;

			if (par != null) {
				if (par.testParameter_type(null)) {			
					if (par.getParameter_type(null) != _st_generic) {
						must_create = true;
					}
		  	} else {
		  		// why unset?
		  		must_create = true;
		  	}
		  } else {
		    // not standart type, but, on the other hand, something wrong here
		  	must_create = true;
		  }
			
			if (must_create) {
		
		
			at = (jsdai.SExtended_dictionary_schema.EAggregation_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAggregation_type.class);
//		  at.setName(null, "_AGGREGATE");
//		  _data_type_name = "_AGGREGATE";
			at.setName(null, "_AGGREGATE" + _data_type_name);
			_data_type_name = "_AGGREGATE"  + _data_type_name;

			if (par != null) {
			  if (par.testParameter_type(null)) {
				at.setElement_type(null, par.getParameter_type(null));
			  } else {
		  		printDDebug("Oo> parameter_type unset in aggregate_type: AGGREGATE OF " + par);
		  	}
	
	  /*
		  	if (par.testType_labels(null)) {
					labels = par.getType_labels(null);
				}
		  	if (Label5.length() > 0) {
					if (labels == null) {
						labels = par.createType_labels(null);
					}
					labels.addByIndex(1, Label5);
		 		} else {
					if (labels != null) {
						labels.addByIndex(1, Label5);
					}
		  	}
		*/
		
			}
			// for some reason I replaced the Parameter5 type, probably a bug, if not, don't remember why.
			// par.setParameter_type(null, at);

		  } else {
		  	at = _st_aggregate_generic;
				_data_type_name = "_AGGREGATE_GENERIC";
		  }
	
			result = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			result.setParameter_type(null, at);
			result.setName(null, "_PARAMETER_AGGREGATE");
			_data_type_name = "_PARAMETER_AGGREGATE";
			
			if (par.testType_labels(null)) {
				// need to add those labels to this one
				jsdai.lang.A_string new_labels = result.createType_labels(null);
        jsdai.lang.A_string labels2 = par.getType_labels(null);
        jsdai.lang.SdaiIterator iter_labels = labels2.createIterator();
        String label = Label5;
				if (label == null) label = "";
        int label_index = 1;
				new_labels.addByIndex(label_index++, label);
        while (iter_labels.next()) {
	        label  = labels2.getCurrentMember(iter_labels);
					new_labels.addByIndex(label_index++, label);
        }

				
			} else {
				// even though element label(s) is/are not present, AGGREGATE itself still may have a label
				if (Label5 != null) {
					if (!Label5.equals("")) {
						jsdai.lang.A_string new_labels = result.createType_labels(null);
						new_labels.addByIndex(1, Label5);
												
					}
				}
			}
			



		}
		printDebug("In AggregateType5, ending");
		return result;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.162 ------------ */
jsdai.SExtended_dictionary_schema.EAggregation_type AggregationTypes5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAggregation_type at;
}
{
	{
		printDebug("In AggregationTypes5, starting, whose: " + whose);
	}
	(at = ArrayType5(whose) | at = BagType5(whose) | at = ListType5(whose) | at = SetType5(whose))
	{
		printDebug("In AggregationTypes5, ending: " + at);
//System.out.println(">AggregationTypes5<  returning: " + at);
		return at;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.163 ------------ */
void AlgorithmHead5() throws jsdai.lang.SdaiException #AlgorithmHead :
{}
{
	{
		printDebug("In AlgorithmHead5, starting");
//System.out.println(">BEFORE< current scope: " + current_scope);	
	}
	(Declaration5())* [ConstantDecl5()] [LocalDecl5()]
	{
//System.out.println(">AFTER< current scope: " + current_scope);	
		printDebug("In AlgorithHead, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.164 ------------ */
void AliasStmt5() throws jsdai.lang.SdaiException #AliasStmt :
{
	Object operand = null;
	ECtVariable var = null;
	String variable_id = null;
	jsdai.lang.EEntity variable_parameter_type = null;
	jsdai.SExtended_dictionary_schema.EParameter variable_type = null;
}
{
	{
		printDebug("In AliasStmt5, starting");
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	<ALIAS> variable_id = VariableId5() <FOR> GeneralRef5() (Qualifier5(null))* ";" (Stmt5())+ <END_ALIAS> ";"
	{
		if (parser_pass == 5) {

			variable_type = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			// variable_type.setName(null, "_query_variable_");
			variable_type.setName(null, "_PARAMETER");
			_data_type_name = "_PARAMETER";

			// variable_type.setParameter_type(null, variable_parameter_type);
			var = new ECtVariable(variable_id, variable_type);
			current_scope.addElement(var);


//                      operand = argument_stack.pop();
//                      printStack("POP: AliasStmt5, return value: " + operand);

		} else { // other passes - added to handle interpreted IDs
			var = new ECtVariable(variable_id, variable_type);
			current_scope.addElement(var);
		}
		current_scope = (Vector)scope_stack.pop();
		printDebug("In AliasStmt5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.165 ------------ */
jsdai.SExtended_dictionary_schema.EArray_type ArrayType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EArray_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = null;
	jsdai.SExtended_dictionary_schema.EBound bounds [] = null;
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	String bound_name;
	// int optional = 0;
	// int unique = 0;
	boolean optional = false;
	boolean unique = false;

	jsdai.lang.EEntity bt;
}
{

	<ARRAY> bounds = BoundSpec5() <OF> [<OPTIONAL>{optional = true;}] [<UNIQUE>{unique = true;}]
	{
		if (parser_pass == 3) {
			if (whose != null) {
				at = (jsdai.SExtended_dictionary_schema.EArray_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CArray_type.class);
//				bound_name = getBoundString(1, bounds, optional, unique);
//				at.setName(null, "_ARRAY" + bound_name + _data_type_name);
//				_data_type_name = "_ARRAY"  + bound_name + _data_type_name;
				at.setUnique_flag(null, unique); 
				at.setOptional_flag(null, optional); 
// System.out.println("SET OPTIONAL 06, attribute: " + at);
			}
		} else 
		if (parser_pass == 4) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EArray_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CArray_type.class);
//				bound_name = getBoundString(1, bounds, optional, unique);
//				at.setName(null, "_ARRAY" + bound_name + _data_type_name);
//				_data_type_name = "_ARRAY"  + bound_name + _data_type_name;
				at.setUnique_flag(null, unique); 
				at.setOptional_flag(null, optional); 
// System.out.println("SET OPTIONAL 07, attribute: " + at);
			}
		} else	
		if (parser_pass == 5) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EArray_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EArray_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CArray_type.class);
//				bound_name = getBoundString(1, bounds, optional, unique);
//				at.setName(null, "_ARRAY" + bound_name + _data_type_name);
//				_data_type_name = "_ARRAY"  + bound_name + _data_type_name;
				at.setUnique_flag(null, unique); 
				at.setOptional_flag(null, optional); 
// System.out.println("SET OPTIONAL 08, attribute: " + at);
			}
			at.setLower_index(null, bounds[0]); 

			if (bounds[1] != null) {
				at.setUpper_index(null, bounds[1]); 
			}
			else { // should never happen for an array.
				printDebug("Undefined upper Index5 of an array");                 
			}
			// set element_type
		}
	}  
	bt = BaseType5(at)
	{
		if (parser_pass > 3) {
//			if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			if (!(at.testElement_type(null))) {
				if(bt instanceof jsdai.SExtended_dictionary_schema.EData_type) {
					at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EData_type)bt);
				} else 
				if(bt instanceof jsdai.SExtended_dictionary_schema.EParameter) {
					if (((jsdai.SExtended_dictionary_schema.EParameter)bt).testParameter_type(null)) {			
						at.setElement_type(null, ((jsdai.SExtended_dictionary_schema.EParameter)bt).getParameter_type(null));
		 			} else {
					}
				} else {
					// possible express amendment issue
				}
			}
		}
		bound_name = getBoundString(1, bounds, optional, unique);
		_data_type_name = "_ARRAY"  + bound_name + _data_type_name;
		if (at != null) {
			at.setName(null, _data_type_name);
		}
		return at;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.166 ------------ */
void AssignmentStmt5() throws jsdai.lang.SdaiException #AssignmentStmt :
{
	Object operand = null;
	Object operand_type = null;
	Object pop_inst = null;
	Object general_reference = null;
	Object qualified_reference = null;
}
{
	{
		printDebug("In AssignmentStmt5, starting");
	}
	general_reference = GeneralRef5()
	{
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.general_reference = general_reference;
			}
		}
	}
	(qualified_reference = Qualifier5(general_reference)
	{
		general_reference = qualified_reference;
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.qualifiers.addElement(qualified_reference);
			}
		}
	}

	)* ":=" Expression5() ";"
	{
		if (parser_pass == 5) {
			operand = argument_stack.pop();
			if (flag_type_tracking) 
				operand_type = type_stack.pop();
			printStack("POP: AssignmentStmt5, return value: " + operand);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
		printDebug("In AssignmentStmt5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.167 ------------ */
jsdai.SExtended_dictionary_schema.EAttribute AttributeDecl5(jsdai.SExtended_dictionary_schema.EEntity_definition ed, int attr_type) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	jsdai.SExtended_dictionary_schema.AExplicit_attribute aea;
	String attribute_name;
	Token attribute_token;
	String attr_key = null;
	boolean to_debug = false;
	int attr_type_original;
}
{
{
		printDebug("In AttributeDecl5, starting");
		attr_type_original = attr_type;
		if (attr_type == -40) {
			attr_type = 0;
			to_debug = true;
			// ok, we do not want to debug non-redeclared cases for now
			to_debug = false;
		}

}

	(attribute_token = AttributeId5()
	 {
			if (flag_oc) {
				attribute_name = attribute_token.image;
			} else {
				attribute_name = attribute_token.image.toLowerCase();
			}
		 if (to_debug) {
		 	System.out.println("attribute name: " + attribute_name);
		 }
		 if (parser_pass == 1) {
			 if (attr_type == 0) { // explicit
// System.out.println("<=EA-4=>");
				 attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExplicit_attribute.class);
//			   attr.setOrder(null, explicit_attribute_order_count++);
				 // aea = ed.getExplicit_attributes(null);
				 // aea.addByIndex(aea.getMemberCount() + 1, attr); // + 1 because it is a list?
			 } else
			 if (attr_type == 1) { // derived
// System.out.println("<=DA-4=>");
				 attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDerived_attribute.class);
//				 attr.setOrder(null, derived_attribute_order_count++);
			 } else
			 if (attr_type == 2) { // inverse
// System.out.println("<=IA-4=>");
				 attr = (jsdai.SExtended_dictionary_schema.EAttribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInverse_attribute.class);
//				 attr.setOrder(null, inverse_attribute_order_count++);
			 }
			 attr.setName(null, attribute_name);
			 attr.setParent(null, ed);
			 // parent_entity is now derived instead of explicit 
			 // if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
			 	 // attr.setParent_entity(null, ed);
			 // }
			 createDocumentationEntity2(attr, attribute_token);
		 } else
		 if (parser_pass == 2) { // pass 2
		 } else
		 if (parser_pass == 3) { // pass 2
		 } else
		 if (parser_pass == 4) { // pass 2
// System.out.println("@X 3 name: " + attribute_name + ", ed: " + ed);
			 attr = findAttribute(attribute_name, ed, attr_type, null, attr_key); // also can check for duplicate attribute names.
			 if (attr_type == 0) { // explicit
			   attr.setOrder(null, explicit_attribute_order_count++);
			 } else
			 if (attr_type == 1) { // derived
//System.out.println(">PARSER setting order - AttributeDecl - order: " + derived_attribute_order_count  + ", pass: " + parser_pass + ", attr: " + attr); 
				 attr.setOrder(null, derived_attribute_order_count++);
			 } else
			 if (attr_type == 2) { // inverse
				 attr.setOrder(null, inverse_attribute_order_count++);
			 }	
		 } else
		 if (parser_pass > 4) { // pass 2
// System.out.println("@X 4 name: " + attribute_name + ", ed: " + ed);
			 
			 attr_key =  "#" + global_schema_name + "_#" + global_entity_name + "_#_#" + attribute_name.toLowerCase();
			 attr = findAttribute(attribute_name, ed, attr_type, null, attr_key); // also can check for duplicate attribute names.
		 	if (to_debug) {
				System.out.println("findAttribute - attr_key: " + attr_key + ", attribute_name: " + attribute_name + ", ed: " + ed + ", result attr: " + attr);
		 	}			 


			 if (attr_type == 0) { // explicit
			   attr.setOrder(null, explicit_attribute_order_count++);
			 } else
			 if (attr_type == 1) { // derived
//System.out.println(">PARSER setting order - AttributeDecl5 - order: " + derived_attribute_order_count  + ", pass: " + parser_pass + ", attr: " + attr); 
				 attr.setOrder(null, derived_attribute_order_count++);
			 } else
			 if (attr_type == 2) { // inverse
				 attr.setOrder(null, inverse_attribute_order_count++);
			 }	

//System.out.println("@X 4-2 found attribute: " + attr);
		 }
	 }
//	 | attr = QualifiedAttribute5(ed, attr_type)) // the attribute must be created in pass 1, found and redeclaring field set - in pass 2

//	 | attr = RedeclaredAttribute5(ed, attr_type)) // the attribute must be created in pass 1, found and redeclaring field set - in pass 2
	 | attr = RedeclaredAttribute5(ed, attr_type_original)) // - for debugging - the attribute must be created in pass 1, found and redeclaring field set - in pass 2
	 {
if (attr == null) {

	if (parser_pass == 1) {
//              printDDebug("######43 in AttributeDecl5 NULL ");
	}
}
//               createDocumentationEntity(attr);
		 _data_type_name = "";
	printDebug("In AttributeDecl5, ending");
		 return attr;
	 }
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.168 ------------ */
Token AttributeId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
{
//      if (doc_token == null) doc_token = t;
	return (t);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.169 ------------ */
jsdai.SExtended_dictionary_schema.EAttribute AttributeQualifier5(jsdai.SExtended_dictionary_schema.EEntity_definition ed, jsdai.SExtended_dictionary_schema.EEntity_definition ed2, int attr_type, Object reference) throws jsdai.lang.SdaiException #AttributeQualifier :
{
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr2 = null;
	String name;
	String name_original = null;
	String x_operand = "";
	Object mark_obj = null;
	String attr_key = null;
	int attr_type_original;
	boolean to_debug = false;
}
{
	{
	printDebug("In AttributeQualifier5, starting");

		attr_type_original = attr_type;
		if (attr_type == -40) {
			attr_type = 0;
			to_debug = true;
			System.out.println("to debug explicit in AttributeQualifier5 - ed: " + ed + ", ed2: " + ed2 + ", reference: " + reference + ", active_scope: " + active_scope);
		}

// System.out.println("@X 10-500 In attribute Qualifier5, starting");
// System.out.println("@X 10-501 ed: " + ed);
// System.out.println("@X 10-502 ed2: " + ed2);
// System.out.println("@X 10-503 reference: " + reference);
// System.out.println("@X 10-504 type: " + attr_type);
		if (reference == null) {
			reference = active_scope;
// System.out.println("@X 10-505 new reference: " + reference);
		}
		if (ed2 == null) {
			if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
				ed2 = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
// System.out.println("@X 10-506 new e2: " + reference);
			} else {
			}
		}
//		 System.out.println("@X 6-1 - before AttributeRef5  - ed: " + ed + ", ed2: " + ed2 + ", reference: " + reference);
	
	}

//	"." attr2 = AttributeRef5(ed, ed2, attr_type, reference)
	"." attr2 = AttributeRef5(ed, ed2, attr_type_original, reference) // debugging mode -40
	{
//		System.out.println("@X 6-2 - after AttributeRef5  - attr2: " + attr2);
		if(flag_in_redeclaring) {
//			flag_in_redeclaring = false;
		}
		if (attr2 == null) {
			if (to_debug) {
				System.out.println("attr2 = null in AttributeQualifier5");
			}
			printDebug("In AttributeQualifier5, ending with attr2 = NULL");
			return null;
		}
		if (to_debug) {
			System.out.println("debugging AttributeQualifier5, attr2: " + attr2);
		}
		if (parser_pass == 1) {
		} else
		if (parser_pass == 2) {
		} else
		if (parser_pass == 3) {
		} else
		if (parser_pass == 4) {
			// if (attr2 == null) return null;
			if (attr_type < 0) return null;
			name = attr2.getName(null);
			if (attr_type == 0) { // explicit
// System.out.println("@X 5 name: " + name + ", ed: " + ed);
				attr = findAttribute(name, ed, attr_type, ed2, attr_key);
				((jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2);
				 attr.unsetOrder(null);
			} else
			if (attr_type == 1) { // derived
// System.out.println("@X 6 name: " + name + ", ed: " + ed);
				attr = findAttribute(name, ed, attr_type, ed2, attr_key);
				if (attr2 instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					((jsdai.SExtended_dictionary_schema.EDerived_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2);
//System.out.println(">PARSER setting order - AttributeQualifier5 - order: " + derived_attribute_order_count  + ", pass: " + parser_pass + ", attr: " + attr); 
					 attr.setOrder(null, derived_attribute_order_count++);
					
				} else
				if (attr2 instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					((jsdai.SExtended_dictionary_schema.EDerived_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EDerived_attribute)attr2);
				 attr.unsetOrder(null);
				}
//                              if (parser_pass == 4) {
//                                      if (expression_instances) {
//                                              x_operand = (String)expression_stack.pop();
//                                              x_operand += attr.getName(null);
//                                              expression_stack.push(x_operand);
//                                      }
//                              }
			} else
			if (attr_type == 2) { // inverse
// printDDebug("######2 in AttributeQ name: " + name + ", entity name: " + ed.getName(null) + ", attribute type: " + attr_type);
// System.out.println("@X 7 name: " + name + ", ed: " + ed);
				attr = findAttribute(name, ed, attr_type, ed2, attr_key);
				((jsdai.SExtended_dictionary_schema.EInverse_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EInverse_attribute)attr2);
				 attr.unsetOrder(null);
			}
			if (attr_type == 4) { // uniqueness rule
// printDDebug("######4 in AttributeQ name: " + name + ", entity name: " + ed.getName(null) + ", attribute type: " + attr_type);
// System.out.println("@X 8 name: " + name + ", ed: " + ed);
				attr = findAttribute(name, ed, attr_type, ed2, attr_key);
// no need to set redeclaring for uniqueness rule
//                              if (attr instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
//                                      ((jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2);
//                              } else
//                              if (attr instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
//                                      ((jsdai.SExtended_dictionary_schema.EInverse_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EDerived_attribute)attr2);
//                              } else
//                              if (attr instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
//                                      ((jsdai.SExtended_dictionary_schema.EInverse_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EInverse_attribute)attr2);
//                              }
			} else
			if (attr_type == 5) { // expressions, from Qualifier5()
// System.out.println("@X 9 name: " + name + ", ed: " + ed);
				attr = findAttribute(name, ed, attr_type, ed2, attr_key);
			}
		} else
		if (parser_pass == 5) {
//		 System.out.println("@X 6-3 - attr_type: " + attr_type);
			if (attr_type < 0) return null;
			name = attr2.getName(null);
      name_original = name;
	   	mark_obj = attr2.getTemp();
    	if (mark_obj instanceof String) {
    		name = (String) mark_obj;
//				 System.out.println("@X 6-4-A - replacing name to RENAMED - name: " + name);
    	}


// System.out.println("@X 10 name: " + name + ", ed: " + ed);
//		 System.out.println("@X 6-4 - before findAttribute - name: " + name + ", ed: " + ed + ", ed2: " + ed2);


				 	attr_key = "#" + global_schema_name + "_#" + global_entity_name + "_#" + global_entity_ref + "_#" + name_original.toLowerCase();
// System.out.println("<=OOOOO-pass5 attr_key: " + attr_key);
			attr = findAttribute(name, ed, attr_type, ed2, attr_key); 
// System.out.println("<= pass 5 redeclaring: " + attr + ", redeclared: " + attr2);

       // moved from here, because redeclaring still has its domain unset, if redeclared is RENAMED
       // but have to provide the necessary information to the proper location
       global_redeclaring = attr;
       global_redeclared = attr2;
       
//			if (!(isRedeclared_attrCompatible(attr, attr2))) { 
//				error_count++;
//				printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared attribute in entity " + attr.getParent(null).getName(null), null, true);
//			}



			if (attr_type == 0) { // explicit
				if (attr2 instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (isRedeclared_attrCompatible(attr, attr2)) { 
						if (attr == attr2) {
							printErrorMsg("" + attr.getName(null) + " - attribute is redeclaring itself, entity: " + attr.getParent(null).getName(null), null, true);
							error_count++;
						} else {
//System.out.println("OXO- redeclaring attr: " + attr + ", redeclared attr2: " + attr2);
//System.out.println("OXO- ed: " + ed + ", ed2: " + ed2 + ", reference: " + reference);
							((jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2);
//System.out.println("OXO-OK");
						}
					} else {
						error_count++;
//						printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared attribute in entity " + attr.getParent(null).getName(null), null, true);
					}
				}	else {
					error_count++;
					Token t = getToken(0);
			   	int line = t.beginLine;
			   	int column = t.beginColumn;
					if (attr2 instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
						String attr_name_err = ""; 
						String entity_name_err = "";
						if (attr != null) {
							if (attr instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
								attr_name_err = attr.getName(null);
							}
							// parent_entity no longer explicit
							// if (attr.testParent_entity(null)) {
								// entity_name_err = attr.getParent_entity(null).getName(null);
							// }
							if (attr.testParent(null)) {
								entity_name_err = attr.getParent(null).getName(null);
							}
						}
//						printError("on line " + line + ", column " + column  + ": probably an attempt to redeclare a derived attribute as explicit. Entity: " + entity_name_err + ", attribute: " + attr_name_err);
						printErrorMsg("" + attr_name_err +  " - in entity " + entity_name_err + ", probably an attempt to redeclare a derived attribute as explicit", null, true);
					} else {
//						printError("on line " + line + ", column " + column  + ": this attribute must be explicit: " + attr2);
						printErrorMsg("" + attr2 + " - this attribute must be explicit", null, true);
					}
					printDebug("error in AttributeQualifier, not explicit: " + attr2 + ", in pass " + parser_pass);  
				}
				 attr.unsetOrder(null);
			} else
			if (attr_type == 1) { // derived
				if (attr2 instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (isRedeclared_attrCompatible(attr, attr2)) { 
						if (attr == attr2) {
							printErrorMsg("" + attr.getName(null) + " - attribute is redeclaring itself, entity: " + attr.getParent(null).getName(null), null, true);
							error_count++;
						} else {
							((jsdai.SExtended_dictionary_schema.EDerived_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2);
						}
					} else {
						error_count++;
//						printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared attribute in entity " + attr.getParent(null).getName(null), null, true);
					}
//					 if (!attr.testOrder(null)) {
//System.out.println(">WARNING - PARSER setting order - AttributeQualifier5-2 - order: " + derived_attribute_order_count  + ", pass: " + parser_pass + ", attr: " + attr); 
					 	attr.setOrder(null, derived_attribute_order_count++);
//					 }
// System.out.println("DONE 5 - order set: attr: " + attr);				
					
				} else
				if (attr2 instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (isRedeclared_attrCompatible(attr, attr2)) { 
						if (attr == attr2) {
							printErrorMsg("" + attr.getName(null) + " - attribute is redeclaring itself, entity: " + attr.getParent(null).getName(null), null, true);
							error_count++;
						} else {
							((jsdai.SExtended_dictionary_schema.EDerived_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EDerived_attribute)attr2);
						}
					} else {
						error_count++;
//						printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared attribute in entity " + attr.getParent(null).getName(null), null, true);
					}
				 attr.unsetOrder(null);
				} else {
// System.out.println("KLAIDA 5: attr2: " + attr2);				
				}
//                              if (parser_pass == 4) {
//                                      if (expression_instances) {
//                                              x_operand = (String)expression_stack.pop();
//                                              x_operand += attr.getName(null);
//                                              expression_stack.push(x_operand);
//                                      }
//                              }
			} else
			if (attr_type == 2) { // inverse
				if (isRedeclared_attrCompatible(attr, attr2)) { 
						if (attr == attr2) {
							printErrorMsg("" + attr.getName(null) + " - attribute is redeclaring itself, entity: " + attr.getParent(null).getName(null), null, true);
							error_count++;
						} else {
							((jsdai.SExtended_dictionary_schema.EInverse_attribute)attr).setRedeclaring(null, (jsdai.SExtended_dictionary_schema.EInverse_attribute)attr2);
						}
	      } else {
					error_count++;
//					printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared attribute in entity " + attr.getParent(null).getName(null), null, true);
	      }
				 attr.unsetOrder(null);
			}
			if (attr_type == 4) { // uniqueness rule
			} else
			if (attr_type == 5) { // expressions, from Qualifier()
			}




//		 System.out.println("@X 6-5 - after findAttribute - attr: " + attr);
// System.out.println("@X 10-100 original: " + attr2 + ", found: " + attr);
		}
		printDebug("In AttributeQualifier5, ending, attr: " + attr);
//		 System.out.println("@X 6-6 - so, returning - attr: " + attr);
		return attr;
	}
}




/*-+------- ISO 10303-14: B2.40 -------------------------------------------------------------------------------------------*/
void BackwardPathQualifier5() throws jsdai.lang.SdaiException #BackwardPathQualifier :
{
	Object reference = null;
	int attr_type = -1;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed2 = null;
}
{
//	<BPATH> [ AttributeRef5(ed, ed2, attr_type, reference) ] PathCondition5()
	"<-" [ AttributeRef5(ed, ed2, attr_type, reference) ] PathCondition5()
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.170 ------------ */
jsdai.SExtended_dictionary_schema.EBag_type BagType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EBag_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	jsdai.lang.EEntity bt;
	String bound_name;
}
{
	<BAG> [bounds = BoundSpec5()]
	{
		if (parser_pass == 3) {
			if (whose != null) {
				at = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
//				bound_name = getBoundString(0, bounds, false, false);
//				at.setName(null, "_BAG" + bound_name + _data_type_name);
//				_data_type_name = "_BAG"  + bound_name + _data_type_name;
			}
		}
		else 
		if (parser_pass == 4) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
//				bound_name = getBoundString(0, bounds, false, false);
//				at.setName(null, "_BAG" + bound_name + _data_type_name);
//				_data_type_name = "_BAG" + bound_name + _data_type_name;
			}
		} else 
		if (parser_pass == 5) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EBag_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
//				bound_name = getBoundString(0, bounds, false, false);
//				at.setName(null, "_BAG" + bound_name + _data_type_name);
//				_data_type_name = "_BAG" + bound_name + _data_type_name;
			}
			if (bounds[0] == null) {
				// should I do this or not? 
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			}
			at.setLower_bound(null, bounds[0]); 
			if (bounds[1] != null) {
				at.setUpper_bound(null, bounds[1]); 
			} else {
				at.unsetUpper_bound(null);  // no need for that it is unset after creating
			}
		}
	}  
	<OF> bt = BaseType5(at)
	{
//System.out.println("<RR><PASS 5> bag element type: " + bt + ", pass: " + parser_pass);
		if (parser_pass > 3) {
//			if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			if (!(at.testElement_type(null))) {
				if(bt instanceof jsdai.SExtended_dictionary_schema.EData_type) {
					at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EData_type)bt);
				} else 
				if(bt instanceof jsdai.SExtended_dictionary_schema.EParameter) {
					if (((jsdai.SExtended_dictionary_schema.EParameter)bt).testParameter_type(null)) {			
						at.setElement_type(null, ((jsdai.SExtended_dictionary_schema.EParameter)bt).getParameter_type(null));
		 			} else {
					}
				} else {
				}
			}
		}
		bound_name = getBoundString(0, bounds, false, false);
		_data_type_name = "_BAG"  + bound_name + _data_type_name;
		if (at != null) {
			at.setName(null, _data_type_name);
		}
		return at;
	}
}




/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.171 ------------ */
// changed according to Amendment - 171

// CHOICE CONFLICT between aggregates and generalized aggregates
/*
    ARRAY OF ParameterType5
    ARRAY OF BaseType5
	
*/


jsdai.lang.EEntity BaseType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.lang.EEntity ae;
}
{
	{
		printDebug("In BaseType5, starting, whose: " + whose);
	}
//	(ae = AggregationTypes5(whose) | ae = SimpleTypes5(whose) | ae = NamedTypes5(whose))
	(LOOKAHEAD (ConcreteTypes5(whose)) ae = ConcreteTypes5(whose) | ae = GeneralizedTypes5(whose))
	{
		printDebug("In BaseType5, ending: " + ae);
//System.out.println(">BaseType5<  returning: " + ae);
		return ae;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.172 ------------ */
jsdai.SExtended_dictionary_schema.EBinary_type BinaryType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EBinary_type bt = null;
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	int width_spec = 0;
	boolean is_fixed = false;
	String str_fixed;
}
{
	<BINARY> 
	{
	}
	[ width_spec = WidthSpec5()]
	{
		if (width_spec == Integer.MIN_VALUE) {
			width_spec = 0;
		}
		if (width_spec < 0) {
			width_spec = -width_spec;
			is_fixed = true;
			str_fixed = "_FIXED";
		} else {
			is_fixed = false;
			str_fixed = "";
		}
		if (parser_pass == 3) {
			if (width_spec == 0) {
				bt = _st_binary;
			} else {
				bt = (jsdai.SExtended_dictionary_schema.EBinary_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBinary_type.class);
				_data_type_name = "_Binary_" + width_spec + str_fixed;
				// _data_type_name = "_Binary_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
				bt.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, width_spec);
				bt.setWidth(null, b1);
				if (is_fixed) {
					bt.setFixed_width(null, true);
				} else {
					bt.setFixed_width(null, false);
				}
			}
		} 
		if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBinary_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (bt == null) {
				if (width_spec == 0) {
					bt = _st_binary;
				} else {
					bt = (jsdai.SExtended_dictionary_schema.EBinary_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBinary_type.class);
					_data_type_name = "_Binary_" + width_spec + str_fixed;
					// _data_type_name = "_Binary_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
					bt.setName(null, _data_type_name);
					b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
					b1.setBound_value(null, width_spec);
					bt.setWidth(null, b1);
					if (is_fixed) {
						bt.setFixed_width(null, true);
					} else {
						bt.setFixed_width(null, false);
					}
				}	
			}
		} 
		if ((parser_pass == 5) && (width_spec != 0)) {
				bt = (jsdai.SExtended_dictionary_schema.EBinary_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBinary_type.class);
				_data_type_name = "_Binary_" + width_spec + str_fixed;
				// _data_type_name = "_Binary_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
				bt.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, width_spec);
				bt.setWidth(null, b1);
				if (is_fixed) {
					bt.setFixed_width(null, true);
				} else {
					bt.setFixed_width(null, false);
				}

		}
		return bt;	
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.172 ------------ */

/*-------- ISO 10303-14: B2.44 -------------------------------------------------------------------------------------------*/
jsdai.lang.EEntity BindingHeader5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException #BindingHeader :
{
	String partition_name = "_implicit_partition_"; // partition may be implicit, let's have name "_implicit_partition_" for it (so far)
	// I would like to have partition entity, supertype of map_partition and view_partition.
	jsdai.SExtended_dictionary_schema.EMap_partition mp = null;
	jsdai.SExtended_dictionary_schema.EView_partition vp = null;
	jsdai.lang.EEntity partition = null;
}
{

/*
Warning: Choice conflict in [...] construct at line 2134, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "partition"
	 Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in [...] construct at line 2135, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "from"
	 Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in [...] construct at line 2136, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "local"
	 Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in [...] construct at line 2137, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "where"
	 Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in [...] construct at line 2138, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "identified_by"
	 Consider using a lookahead of 2 or more for nested expansion.
Warning: Choice conflict in [...] construct at line 2139, column 9.
	 Expansion nested within construct and expansion following construct
	 have common prefixes, one of which is: "ordered_by"
*/
	{
printDebug("In BindingHeader5, starting, parent: " + parent);
	
	}
	[ <PARTITION> partition_name = PartitionId5() ";" ]
	{
			if (parent instanceof jsdai.SExtended_dictionary_schema.EView_definition) {
				vp = findView_partition(partition_name, (jsdai.SExtended_dictionary_schema.EView_definition)parent);
				partition = (jsdai.lang.EEntity)vp;
			} else
			if (parent instanceof jsdai.SExtended_dictionary_schema.EMap_definition) {
				mp = findMap_partition(partition_name, (jsdai.SExtended_dictionary_schema.EMap_definition)parent);
				partition = (jsdai.lang.EEntity)mp;
			} else {
				// error
			}
			if (expression_instances) {
				jjtThis.partition = (jsdai.SExtended_dictionary_schema.EMap_or_view_partition)partition;
			}
	}
	[ FromClause5(partition) ]
	// only for map_partition, not for view_partition
	[ LocalDecl5() ]
	[ WhereClause5(parent) ]
	[ IdentifiedByClause5() ]
	[ OrderedByClause5() ]
	{
		printDebug("In BindingHeader5, ending");
		return partition;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.173 ------------ */
jsdai.SExtended_dictionary_schema.EBoolean_type BooleanType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EBoolean_type bt = null; 
}
{
	<BOOLEAN>
	{
		if (parser_pass == 3) {
			// bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBoolean_type.class);
			bt = _st_boolean;
		}
		else if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}
			}
			if (bt == null) {
				// bt = (jsdai.SExtended_dictionary_schema.EBoolean_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBoolean_type.class);
				bt = _st_boolean;
			}
		} 
		return bt;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.174 ------------ */
jsdai.SExtended_dictionary_schema.EBound Bound15(boolean make_pdb) throws jsdai.lang.SdaiException:
{
	int value;
	jsdai.SExtended_dictionary_schema.EBound b1 = null;
	String bound_description = null;
	Token start_token = null;
	Token end_token = null;
	boolean first_token = true;
}
{
	{
		if (parser_pass == 5) {
			bound_description = " ";
			for (int i = 1; ; i++) {
				Token t = getToken(i);
				if (
//					t.kind == SEMICOLON   ||
					t.kind == COLON         ||
//					t.kind == RBRACKET    ||
					t.kind == TO         //   ||
//					t.kind == BY          ||
//					t.kind == WHILE       ||
//					t.kind == UNTIL       ||
//					t.kind == RETURN      
				) {
					break;
				}
				if (flag_oc) {
					bound_description += t.image + " ";
				} else {
					bound_description += t.image.toLowerCase() + " ";
				}
				if (first_token) {
					start_token = t;
					end_token = t;
					first_token = false;
				} else {
					end_token = t;
				}
			}
		}	
	}

	(value = NumericExpression5()
	{
		if (parser_pass == 5) {
			if (numeric_expression_calculated) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				// this line is probably not needed for aggregate bound and dangerous in other cases, better remove
				if (value == Integer.MIN_VALUE) value = 0;
				b1.setBound_value(null, value);
			} else {
				b1 = (jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CPopulation_dependent_bound.class);
				jjtThis.pdb = (jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b1;
				// schema_name, entity_name, method_name
				((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b1).setSchema_name(null, sd.getName(null));
				if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b1).setEntity_name(null, ((jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope).getName(null));
					jjtThis.entity = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
				} else
				if (active_scope instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
					((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b1).setEntity_name(null, ((jsdai.SExtended_dictionary_schema.EFunction_definition)active_scope).getName(null));
					jjtThis.function = (jsdai.SExtended_dictionary_schema.EFunction_definition)active_scope;
				} else
				if (active_scope instanceof jsdai.SExtended_dictionary_schema.EProcedure_definition) {
					((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b1).setEntity_name(null, ((jsdai.SExtended_dictionary_schema.EProcedure_definition)active_scope).getName(null));
					jjtThis.procedure = (jsdai.SExtended_dictionary_schema.EProcedure_definition)active_scope;
				} else
				if (active_scope instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
					((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b1).setEntity_name(null, ((jsdai.SExtended_dictionary_schema.EGlobal_rule)active_scope).getName(null));
					jjtThis.rule = (jsdai.SExtended_dictionary_schema.EGlobal_rule)active_scope;
				}
				((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b1).setMethod_name(null, getPDBname());
				createExpressEntity(b1, bound_description, start_token, end_token);
			}
		}
		return b1;
	}) #PopulationDependentBound((!numeric_expression_calculated) && make_pdb)

}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.175------------ */
jsdai.SExtended_dictionary_schema.EBound Bound25(boolean make_pdb) throws jsdai.lang.SdaiException:
{
	int value;
	jsdai.SExtended_dictionary_schema.EBound b2 = null;
	String bound_description = null;
	Token start_token = null;
	Token end_token = null;
	boolean first_token = true;
}
{
	{
		if (parser_pass == 5) {
			bound_description = " ";
			for (int i = 1; ; i++) {
				Token t = getToken(i);
				if (t.kind == SEMICOLON   ||
//					t.kind == COLON       ||
					t.kind == RBRACKET      ||
//					t.kind == TO          ||
					t.kind == BY            ||
					t.kind == WHILE         ||
					t.kind == UNTIL         ||
					t.kind == RETURN        
				) {
					break;
				}
				if (flag_oc) {
					bound_description += t.image + " ";
				} else {
					bound_description += t.image.toLowerCase() + " ";
				}
				if (first_token) {
					start_token = t;
					end_token = t;
					first_token = false;
				} else {
					end_token = t;
				}
			}
		}	
	}

	(value = NumericExpression5()
	{
		if (parser_pass == 5) {
			if (value != Integer.MIN_VALUE) {
				b2 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b2.setBound_value(null, value);
			} else if (!numeric_expression_calculated) {
				b2 = (jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CPopulation_dependent_bound.class);
				jjtThis.pdb = (jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b2;
				((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b2).setSchema_name(null, sd.getName(null));	
				if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b2).setEntity_name(null, ((jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope).getName(null));
					jjtThis.entity = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
				} else
				if (active_scope instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
					((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b2).setEntity_name(null, ((jsdai.SExtended_dictionary_schema.EFunction_definition)active_scope).getName(null));
					jjtThis.function = (jsdai.SExtended_dictionary_schema.EFunction_definition)active_scope;
				} else
				if (active_scope instanceof jsdai.SExtended_dictionary_schema.EProcedure_definition) {
					((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b2).setEntity_name(null, ((jsdai.SExtended_dictionary_schema.EProcedure_definition)active_scope).getName(null));
					jjtThis.procedure = (jsdai.SExtended_dictionary_schema.EProcedure_definition)active_scope;
				} else
				if (active_scope instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
					((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b2).setEntity_name(null, ((jsdai.SExtended_dictionary_schema.EGlobal_rule)active_scope).getName(null));
					jjtThis.rule = (jsdai.SExtended_dictionary_schema.EGlobal_rule)active_scope;
				}
				((jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)b2).setMethod_name(null, getPDBname());
				createExpressEntity(b2, bound_description, start_token, end_token);
//				createExpressEntity(b2, bound_description);
			}
		}
		return b2;
	}) #PopulationDependentBound((!numeric_expression_calculated) && make_pdb)
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.176------------ */

// jsdai.SExtended_dictionary_schema.EInteger_bound [] BoundSpec5() throws jsdai.lang.SdaiException :
jsdai.SExtended_dictionary_schema.EBound [] BoundSpec5() throws jsdai.lang.SdaiException :
{
	// jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EBound[2];
	// jsdai.SExtended_dictionary_schema.EInteger_bound b1 = null;
	// jsdai.SExtended_dictionary_schema.EInteger_bound b2 = null;
	jsdai.SExtended_dictionary_schema.EBound b1 = null;
	jsdai.SExtended_dictionary_schema.EBound b2 = null;
}
{
	"[" 
	b1 = Bound15(true) ":"  
	{
		if (parser_pass == 5) {
			bounds[0] = b1;
		}
	}		

	b2 = Bound25(true) "]"	
	{	
		if (parser_pass == 5) {
			bounds[1] = b2;
		}
		return bounds;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.177------------ */
Object BuiltInConstant5() throws jsdai.lang.SdaiException #BuiltInConstant :
{
	Object result = null;
	Integer l;
	Double d;
	Token t;
}
{
	<CONST_E> 
	// 2.71828182845904523536028747135266249775724709369996..
	{ 
		if (parser_pass == 5) {
			// maybe I should store in dictionary extension, etc, the fact about E constant, not the value
			d = new Double(2.718281828459); // whatever number, check
			result = d;
			argument_stack.push(d);
			if (flag_type_tracking) 
				type_stack.push(jsdai.lang.ExpressTypes.REAL_TYPE); 
			printStack("PUSH - BuiltInConstant5: E");
			if (expression_instances) {
				 jjtThis.type = 1;
				// expression_stack.push(null);
			}
		}
		return result;
	}

	| <PI> 
	{ 
		if (parser_pass == 5) {
			// maybe I should store in dictionary extension, etc, the fact about PI constant, not the value
			d = new Double(3.1415926);
			result = d;
			argument_stack.push(d); 
			if (flag_type_tracking) 
				type_stack.push(jsdai.lang.ExpressTypes.REAL_TYPE); 
			printStack("PUSH - BuiltInConstant5: PI");
			if (expression_instances) {
				 jjtThis.type = 2;
				// expression_stack.push(null);
			}
		}
		return result;
	}
	|t = <SELF>
	{ // using Token for SELF for now, later will see.
		if (parser_pass == 5) {
			argument_stack.push(t); 
			if (flag_type_tracking) 
				type_stack.push(jsdai.lang.ExpressTypes.GENERIC_TYPE); // we really need Named Type here 
			result = t;
			printStack("PUSH - BuiltInConstant5: <SELF>");
			if (expression_instances) {
				 jjtThis.type = 3;
				// expression_stack.push(null);
			}
		}
		return result;
	} 
	| "?" 
	{ 
		if (parser_pass == 5) {
			l = new Integer(Integer.MIN_VALUE);
			result = l;
			argument_stack.push(l); 
			if (flag_type_tracking) 
				type_stack.push(jsdai.lang.ExpressTypes.INTEGER_TYPE); // not really right
			printStack("PUSH - BuiltInConstant5: ?");
			if (expression_instances) {
				 jjtThis.type = 4;
				// expression_stack.push(null);
			}
		}
		return result;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.178------------ */

int BuiltInFunction5() :
{
	int id = 0;
}
{
	(<ABS> {id = 1;} |
	<ACOS> {id = 2;} |
	<ASIN> {id = 3;} |
	<ATAN> {id = 4;} |
	<BLENGTH> {id = 5;} |
	<COS> {id = 6;} |
	<EXISTS> {id = 7;} |
	<EXTENT> {id = 30;} |
	<EXP> {id = 8;} |
	<FORMAT> {id = 9;} |
	<HIBOUND> {id = 10;} |
	<HIINDEX> {id = 11;} |
	<LENGTH> {id = 12;} |
	<LOBOUND> {id = 13;} |
	<LOINDEX> {id = 14;} |
	<LOG> {id = 15;} |
	<LOG2> {id = 16;} |
	<LOG10> {id = 17;} |
	<NVL> {id = 18;} |
	<ODD> {id = 19;} |
	<ROLESOF> {id = 20;} |
	<SIN> {id = 21;} |
	<SIZEOF> {id = 22;} |
	<SQRT> {id = 23;} |
	<TAN> {id = 24;} |
	<TYPEOF> {id = 25;} |
	<USEDIN> {id = 26;} |
	<VALUE> {id = 27;} |
	<VALUE_IN> {id = 28;} |
	<VALUE_UNIQUE> {id = 29;})
	{
		printDebug("In BuiltInFunction5, function: " + id);
		return id;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.179------------ */
int BuiltInProcedure5() throws jsdai.lang.SdaiException :
{
	int id = 0;
}
{
	(<INSERT>{id = 1;} | <REMOVE> {id = 2;})
	{
		return id;
	}
}
/* -+----------------------------------------------------------------------------------- ISO 10303-11:A.2.180------------ */
void CaseAction5() throws jsdai.lang.SdaiException #CaseAction :
{}
{
	CaseLabel5() (  "," CaseLabel5())* ":" Stmt5()
}
/*-+-------- ISO 10303-14:B2.53 ---------*/
void CaseExpr5() throws jsdai.lang.SdaiException #CaseExpr :
{
	int case_count = 0;
	boolean otherwise_present = false;
}
{
//	<CASE> Selector5() <OF> ( CaseExprAction5() )* [ <OTHERWISE> ":" MapAttrAssgnmtExpr() ] <END_CASE>
	<CASE> Selector5() <OF> ( CaseExprAction5() {case_count++;} )* [ <OTHERWISE> ":" Expression5() {otherwise_present = true;}] <END_CASE>
	{
		if (expression_instances) {
			jjtThis.case_count = case_count;
			jjtThis.otherwise_present = otherwise_present;
		}
		
	}
}

/*-+-------- ISO 10303-14:B2.54 ---------*/
void CaseExprAction5() throws jsdai.lang.SdaiException #CaseExprAction :
{}
{
//	CaseLabel5() ("," CaseLabel5())* ":" MapAttrAssgnmtExpr() ";"
	CaseLabel5() ( "," CaseLabel5())* ":" Expression5() ";"
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.181------------ */
void CaseLabel5() throws jsdai.lang.SdaiException #CaseLabel :
{
	Object op_case_label = null;
	Object op_case_label_type = null;
	Object pop_inst = null;
}
{
	{
		printDebug("In CaseLabel5, starting, pass " + parser_pass);
	}
	Expression5()
	{
		if (parser_pass == 5) {
			op_case_label = argument_stack.pop();
			if (flag_type_tracking) 
				op_case_label_type = type_stack.pop();
			printStack("POP: CaseStmt5 - CaseAction5 - CaseLabel5: " + op_case_label);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
		printDebug("In CaseLabel5, ending, pass " + parser_pass);
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.182------------ */
void CaseStmt5() throws jsdai.lang.SdaiException #CaseStmt :
{
	Object op_selector = null;
	Object op_selector_type = null;
	Object pop_inst = null;
	boolean otherwise_present = false;
}
{
	{
		printDebug("In CaseStmt5, starting");
	}
	<CASE> (Selector5()) #CaseSelector
	{
		if (parser_pass == 5) {
			jjtThis.otherwise_present = otherwise_present;
			op_selector = argument_stack.pop();
			if (flag_type_tracking) 
				op_selector_type = type_stack.pop();
			printStack("POP: CaseStmt5, Selector5: " + op_selector);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
	}
	 <OF> (CaseAction5())* [<OTHERWISE> {otherwise_present = true;}":" (Stmt5()) #CaseOtherwise ] <END_CASE> ";"
	{
		printDebug("In CaseStmt5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.183------------ */
void CompoundStmt5() throws jsdai.lang.SdaiException #CompoundStmt :
{
	Object operand = null;
}
{
	{
		printDebug("In CompoundStmt5, starting");
	}
	<BEGIN> (Stmt5())+ <END> ";"
	{
		if (parser_pass == 5) {
//                      operand = argument_stack.pop();
///             printStack("POP: CompoundStmt5, return value: " + operand);
		}
		printDebug("In CompoundStmt5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.184------------ */
void ConstantBody5() throws jsdai.lang.SdaiException #ConstantBody:
{
	jsdai.SExtended_dictionary_schema.EConstant_definition cd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration cond;
	int Index5 = 1;
	String name;
  Object operand = null;
  Object operand_type = null;
	Object pop_inst = null;
  jsdai.lang.EEntity bt = null;
	Token start_token = null;
	Token end_token = null;
	boolean first_token = true;
	jsdai.lang.EEntity active_scope_backup = null;
}
{
	{
		active_scope_backup = active_scope;
	}

	name = ConstantId5()
	{
		if (parser_pass == 1) {
			printVerbose("Constant: " + name);
			//cd = findConstant_definition(name);
			// why it was still old without X?
			cd = findConstant_definitionX(name);
			if (cd != null) {
						error_count++;
						printErrorMsg5("" + name + " - duplicate constant name", null, true);
						printDebug("duplicate constant name \"" + name + "\"");
			} else {
				String wrong_name = findAnyName(name);
				if (wrong_name != null) {
						error_count++;
						printErrorMsg5("" + name + " - duplicate name, used for a constant and for something else", null, true);
						printDebug("duplicate name \"" + name + "\". The same name used for a constant and for " + wrong_name);
				}
			}
			printDebug("In ConstantBody5, before 1st create");
			cd = (jsdai.SExtended_dictionary_schema.EConstant_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CConstant_definition.class);
			printDebug("In ConstantBody5, after 1st create");
			active_scope = cd;
		  cond = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CConstant_declaration$local_declaration.class);
			printDebug("In ConstantBody5, after 2nd create");
			cond.setParent(null, sd);
			// parent_schema is now derived instead of explicit 
			// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				// cond.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);	
			// }
			cond.setDefinition(null, cd);
			if (flag_oc) {
				cd.setName(null, name);
			} else {
				cd.setName(null, name.toLowerCase());
			}
		} else {
//			cd = findConstant_definition(name);
			cd = findConstant_definitionX(name);
		  active_scope_extension = new ECtScope(active_scope, cd, active_scope_extension, active_scope_string, name, constructConstantKey(name));
  		active_scope_string = "";
			active_scope = cd;
			if (cd == null) {
				error_count++;
				printErrorMsg5("" + name + " - constant not found", null, true);
				printDebug("ConstantBody5- constant not found: " + name);
			}
		}
	}
 ":" bt = BaseType5(cd)
 {

			if (bt != null) {
				// possible additional check because of the changes for amendment and because of the way paramater_type is implemented.
				cd.setDomain(null, bt);
			} else {
				printDebug("In ConstantBody5, after BaseType5, base type is NULL in pass: " + parser_pass + ", constantn_definition: " + cd);				
			}

 }
  ":=" 
  {
		if (parser_pass == 5) {
//			String constant_expression_description = "";
			String constant_expression_description = " ";
 			for (int i = 1; ; i++) {
				Token t = getToken(i);
				if (t.kind == SEMICOLON) {
					break;
				}
				// is it needed?
				if (flag_oc) {
					constant_expression_description += t.image + " ";
				} else {
					constant_expression_description += t.image.toLowerCase() + " ";
				}
				if (first_token) {
					start_token = t;
					end_token = t;
					first_token = false;
				} else {
					end_token = t;
				}
//				constant_expression_description += t.image;
 			}
			createExpressEntity(cd, constant_expression_description, start_token, end_token);
//			createExpressEntity(cd, constant_expression_description);
		}
  }
  Expression5()
	{
		if (parser_pass == 5) {

			operand = argument_stack.pop();
			if (flag_type_tracking) 
				operand_type = type_stack.pop();
			printStack("POP: ConstantDecl5 - ConstantBody5: " + operand);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
				jjtThis.cd = cd;
				if (cd != null) {
					jjtThis.name = cd.getName(null);
				} else {
//System.out.println("<EC> constant null: " + name);	
printErrorMsgX("reference to unknown constant: " + name, null, true);
					jjtThis.name = name;
				}
			}
		}
		active_scope = active_scope_backup;
    // moved from ConstantDecl5
		active_scope_string = active_scope_extension.getParent_scope_string();
		active_scope_extension = active_scope_extension.getParent();
	}
  ";"
}

void ConstantDecl5() throws jsdai.lang.SdaiException #ConstantDecl :
{
	jsdai.lang.EEntity active_scope_backup = null;

}
{
try {
(
	{
		printDebug("In ConstantDecl5, starting");
		active_scope_backup = active_scope;
	}
	<CONSTANT> (ConstantBody5())+ <END_CONSTANT> ";"
	{
		
		active_scope = active_scope_backup;
// in ConstBody5
// 		active_scope_string = active_scope_extension.getParent_scope_string();
//	  active_scope_extension = active_scope_extension.getParent();


		if ((active_scope instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) || (active_scope instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule)) {
			jjtThis.inner_constant = true;
		} else {
			jjtThis.inner_constant = false;
		}
		printDebug("In ConstantDecl5, ending");
	}
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	 printErrorMsg5(e.getMessage(), null, true);
	// System.out.println("ERROR RECOVERY: skipping to END_CONSTANT");
		error_count++;
	recoverFromParseException(END_CONSTANT, e);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.186------------ */
void ConstantFactor5() throws jsdai.lang.SdaiException :
{
}
{

//      BuiltInConstant5() | ConstantRef5()
	BuiltInConstant5() | InterpretedRef5(PI_CONSTANT)
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.187------------ */
String ConstantId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* ---------------------------------------------------------- ISO 10303-11:A.2.188------------ */
void ConstructedTypes5(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException :
{}
{
	// choice conflict involving <EXTENSIBLE>, lookahead 2 is enough
	LOOKAHEAD(2) EnumerationType5(dt) | SelectType5(dt)
}

// -- removed in DIS version
/*--------- ISO 10303-14:B.2.62 ---*/
/*
void CreateMapDecl() throws jsdai.lang.SdaiException :
{}
{
	<CREATE> InstanceId() ":" TargetEntityReference5() ";" [ <WHERE> LogicalExpression5() ";" ] (MapAttributeDeclaration5())+  <END_CREATE> ";"
}
*/

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.189 ------------ */
void Declaration5() throws jsdai.lang.SdaiException #Declaration :
{}
{
	{
		printDebug("In Declaration5, starting");
	}
	( EntityDecl5() | SubtypeConstraintDecl5() | FunctionDecl5() | ProcedureDecl5() | TypeDecl5() )
	{
		printDebug("In Declaration5, ending");
	}

}

/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.411 ------------ */
void SubtypeConstraintBody5(jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc0) throws jsdai.lang.SdaiException :
{
	boolean is_abstract = false;
	jsdai.lang.EEntity ee = null;
	jsdai.SExtended_dictionary_schema.ESubtype_expression constraint = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc;
	jsdai.lang.EEntity se;
	Object se_type = null;
	Object pop_inst = null;
	jsdai.SExtended_dictionary_schema.EAndor_subtype_expression andor;
	// pre-X	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_or_subtype_expression generic_operands;
	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands;
}
{
	{
		printDebug("In SubtypeConstraintBody5, starting");
	}
	[AbstractSupertype5() {is_abstract = true;}] [TotalOver5(sc0)] 
	[SupertypeExpression5() 
	{

		if (parser_pass == 5) {


			se = (jsdai.lang.EEntity)argument_stack.pop();
			if (flag_type_tracking) 
				se_type = type_stack.pop();
			printStack("POP: SubtypeConstraint5: " + se);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
  
      ed = sc0.getSuper_type(null);
			if (se instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) {
//1				sc = (jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSub_supertype_constraint.class);
//2				sc.setGeneric_supertype(null, ed);
				// super_type is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// sc.setSuper_type(null, (jsdai.SExtended_dictionary_schema.EEntity_definition)ed);
				// }
//3
				sc0.setConstraint(null, (jsdai.SExtended_dictionary_schema.ESubtype_expression)se);
// System.out.println("<SC-B-1> not created: " + sc0);

			} else 
			if (se instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) // SUPERTYPE OF (single_entity)
	    {
//4				sc = (jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSub_supertype_constraint.class);
//5			sc.setGeneric_supertype(null, ed);
				// super_type is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// sc.setSuper_type(null, (jsdai.SExtended_dictionary_schema.EEntity_definition)ed);
				// }
				andor = (jsdai.SExtended_dictionary_schema.EAndor_subtype_expression)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAndor_subtype_expression.class);
				generic_operands = andor.createGeneric_operands(null);
				// operands is now derived instead of explicit 
				// operands = andor.createOperands(null);
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) se);
				// operands is now derived instead of explicit 
				// if (!(se instanceof jsdai.SExtended_dictionary_schema.EView_definition)) {
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) se);
				// }
//6
				sc0.setConstraint(null, (jsdai.SExtended_dictionary_schema.ESubtype_expression)andor);
// System.out.println("<SC-B-2> not-created: " + sc0);
			}
			else { //
				error_count++;
				printErrorMsg5(" name not available - internal error in SubtypeConstraint5", null, true);
				printEDebug("Internal error in SubtypeConstraint5");
			}
		}
	}

	
";"]
	{
		if (is_abstract) {
			if (sc0 != null) {
				sc0.setAbstract_supertype(null, true);
//				if (sc0.testSuper_type(null)) {
//					ed = sc0.getSuper_type(null);
//					ed.setInstantiable(null, false);
//				}

//				if (sc0.testGeneric_supertype(null)) {
//					ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)sc0.getGeneric_supertype(null);
//					ed.setInstantiable(null, false);
//				}
			} else {
			 printErrorMsg5("supertype_constraint is null", null, true);
			}
		}
		printDebug("In SubtypeConstraintBody5, ending");
	}

}

/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.412 ------------ */
void SubtypeConstraintDecl5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc = null;
}
{
	{
		printDebug("In SubtypeConstraintDecl5, starting");
	}
	sc = SubtypeConstraintHead5() SubtypeConstraintBody5(sc) <END_SUBTYPE_CONSTRAINT> ";"
	{
		printDebug("In SubtypeConstraintDecl5, ending");
	}

}
/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.413 ------------ */
jsdai.SExtended_dictionary_schema.ESub_supertype_constraint SubtypeConstraintHead5() throws jsdai.lang.SdaiException :
{
	String constraint_id = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc = null;
	jsdai.SExtended_dictionary_schema.ESubtype_constraint_declaration scd = null;
}
{
	{
		printDebug("In SubtypeConstraintHead5, starting");
	}
	<SUBTYPE_CONSTRAINT> constraint_id = SubtypeConstraintId5() <FOR> ed = EntityRef5(null) ";" 
	{
		printDebug("In SubtypeConstraintHead5, ending");

		if (parser_pass == 1) {
			sc = findSubtype_constraint(constraint_id);
			if (sc != null) {
					error_count++;
					printErrorMsg5("" + constraint_id + " - duplicate subtype_constraint name", null, true);
					printDebug("duplicate subtype_constraint name \"" + constraint_id + "\"");
			} else {
				String wrong_name = findAnyName(constraint_id);
				if (wrong_name != null) {
					error_count++;
					printErrorMsg5("" + constraint_id + " - duplicate name, the same name used for a subtype_constraint and for something else", null, true);
					printDebug("duplicate name \"" + constraint_id + "\". The same name used for a subtype_constraint and for " + wrong_name);
				}
				sc = (jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSub_supertype_constraint.class);
				scd = (jsdai.SExtended_dictionary_schema.ESubtype_constraint_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$subtype_constraint_declaration.class);
				scd.setDefinition(null, sc);
				// parent_schema is now derived instead of explicit 
				// scd.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				scd.setParent(null, sd);
				sc.setName(null, constraint_id);
				sc.setAbstract_supertype(null, false);
				if (ed != null) {
					// super_type is now derived instead of explicit 
					// sc.setSuper_type(null, ed);
					sc.setGeneric_supertype(null, ed);
				}
// System.out.println("<SC-1> created constraint: " + sc);
			}
		} else { // parser_pass > 1 
			sc = findSubtype_constraint(constraint_id);
			if (sc == null) {
				error_count++;
				printErrorMsg5("" + constraint_id + " - subtype_constraint not found", null, true);
				printDebug("subtype_constraint not found:  \"" + constraint_id + "\"");
			} else {
				if (ed != null) {
					// super_type is now derived instead of explicit 
					// sc.setSuper_type(null, ed);
					sc.setGeneric_supertype(null, ed);
				}
			}	
// System.out.println("<SC-2> found constraint: " + sc + ", pass: " + parser_pass);
		}
		
 		return sc;
	}

}
/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.414 ------------ */
String SubtypeConstraintId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	{
		printDebug("In SubtypeConstraintId5, starting");
	}
	t = <SIMPLE_ID>
	{
		printDebug("In SubtypeConstraintId5, ending");
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}

}
/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.415 ------------ */
void TotalOver5(jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.AEntity_definition total_cover = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition sub_ed = null;;
	int Index5 = 1;
}
{
	{
		printDebug("In TotalOver5, starting");
	}
	<TOTAL_OVER> "(" 
	{
	}
	sub_ed = EntityRef5(null) 
	{
	}
	( "," 
	sub_ed = EntityRef5(null)
	{
	}
	
	)* ")" ";"
	{
		printDebug("In TotalOver5, ending");
	}

}

/* --------------------------------------------------------------Amendment--------------- ISO 10303-11:A.2.400 ------------ */
void AbstractSupertype5() throws jsdai.lang.SdaiException :
{
}
{
	{
		printDebug("In AbstractSupertype5, starting");
	}
	<ABSTRACT> <SUPERTYPE> ";"	
	{
		printDebug("In AbstractSupertype5, ending");
	}

}
/*-+-------- ISO 10303-14:B.2.64 ---*/
void DependentMapDecl5() throws jsdai.lang.SdaiException #DependentMapDecl:
{
//	jsdai.SExtended_dictionary_schema.EDependent_map_declaration dmdc = null;
	jsdai.SExtended_dictionary_schema.EMap_declaration dmdc = null;
	jsdai.SExtended_dictionary_schema.EDependent_map_definition dmd = null;
	String map_name = null;
}
{
	{
		target_parameter_order_count = 0;
	}
//	<DEPENDENT_MAP> MapId5() <AS> ( TargetParameter5())+ ";" [ MapSubtypeOfClause5() ] ( LOOKAHEAD(3) DepMapPartition5())+ <END_DEPENDENT_MAP> ";"
	<DEPENDENT_MAP> map_name = MapId5() <AS> 
	
	{
		printDebug("In DependentMapDecl5, starting: " + map_name);
		if (parser_pass == 1) {
			// check if a dependent_map with this name already exists in the extent.
			dmd = findDependent_map_definition(map_name, null);
			if (dmd != null) {
				error_count++;
//				printError("duplicate dependent_map name \"" + map_name + "\"");
			} else {
				String wrong_name = findAnyName(map_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + map_name + "\". The same name used for a dependent_map and for " + wrong_name);
				}
				dmd = (jsdai.SExtended_dictionary_schema.EDependent_map_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDependent_map_definition.class);
				active_scope = dmd;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
//no				dmdc = (jsdai.SExtended_dictionary_schema.EDependent_map_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$dependent_map_declaration.class);
				dmdc = (jsdai.SExtended_dictionary_schema.EMap_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$map_declaration.class);


//no				dmdc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				dmdc.setParent(null, sd);
				dmdc.setDefinition(null, dmd);

				dmd.setName(null, map_name);
				// supertypes - added this attribute
//				dmd.createSupertypes(null);
//				dmd.createSuper_type(null);
			}
		}       else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper5()
			dmd = findDependent_map_definition(map_name, null);
			active_scope = dmd;
			if (dmd == null) {
				error_count++;
//				printError("DependentMapDecl5 - the dependent_map not found: " + map_name);
				printErrorMsg("" + map_name + " - dependent map not found", null, true);
			}
		
			if (parser_pass == 5) {
					if (expression_instances) {
							jjtThis.definition = dmd;
					}
			}
		
		
		}
		// createDocumentationEntity2(md, a_token);

		target_parameter_order_count = 0;
	}
	
	( TargetParameter5(dmd))+ ";" [ MapSubtypeOfClause5(dmd) ] ( DepMapPartition5(dmd))+ <END_DEPENDENT_MAP> ";"
}

/*-+-------- ISO 10303-14:B.2.65 ---*/
void DepBindingDecl5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{}
{
//	DepFromClause5() [ WhereClause5(null) ] [  LOOKAHEAD(4) OrderedByClause5() ]
	DepFromClause5(parent) [ WhereClause5(null) ] [ OrderedByClause5() ]
}

/*-+-------- ISO 10303-14:B.2.66 ---*/
void DepFromClause5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{}
{
	<FROM> ( DepSourceParameter5(parent) ";")+
}

/*--------- ISO 10303-14:B.2.67 ---*/
void DepMapDeclBody5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{}
{
	DepBindingDecl5(parent) MapProjectClause5(parent)
}

/*--------- ISO 10303-14:B.2.68 ---*/
void DepMapPartition5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException #DepMapPartition:
{
	String partition_name = "_implicit_partition_";
	jsdai.lang.EEntity partition = null;
	jsdai.SExtended_dictionary_schema.EDependent_map_partition mp = null;
}
{
	[ <PARTITION> partition_name = PartitionId5() ":" ] 
	{
				mp = (jsdai.SExtended_dictionary_schema.EDependent_map_partition)findDependent_map_partition(partition_name, (jsdai.SExtended_dictionary_schema.EDependent_map_definition)parent);
				partition = (jsdai.lang.EEntity)mp;

				if (expression_instances) {
						jjtThis.partition = mp;
						jjtThis.definition = (jsdai.SExtended_dictionary_schema.EDependent_map_definition)parent;
				}

	}
	DepMapDeclBody5(mp)
}

/*-+-------- ISO 10303-14:B.2.69 ---*/
void DepSourceParameter5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	String source_parameter_name;
	jsdai.SExtended_dictionary_schema.ESource_parameter sp0 = null;
	jsdai.SExtended_dictionary_schema.EDependent_source_parameter sp = null;
	jsdai.SExtended_dictionary_schema.EData_type er = null;	// fix dictionary - need defined_type or simple type
	jsdai.SExtended_dictionary_schema.ESimple_type st = null;
	jsdai.SExtended_dictionary_schema.EDefined_type  dt = null;
}
{
	source_parameter_name = SourceParameterId5() ( "," SourceParameterId5())* ":" ( st = SimpleTypes5(null) | dt = TypeReference5() )
	{
			sp0 = findSource_parameter(source_parameter_name);
			if (sp0 == null) {
				// error - should have been found
			}		
			if (parser_pass == 4) {
	 				if ((st != null) && (dt == null)) {
		 				sp0.setExtent(null, st);
	 				} else
	 				if ((st == null) && (dt != null)) {
		 				sp0.setExtent(null, dt);
	 				} else {
	 				}
			 	sp.setOrder(null, from_order_count++);
	 		}
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.190------------ */
void DerivedAttr5(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException #DerivedAttr:
{
	jsdai.SExtended_dictionary_schema.EAttribute da;
	jsdai.lang.EEntity bt = null;
	Object exp = null;
	Object exp_type = null;
	Object pop_inst = null;
	//3.0 jsdai.SExtended_dictionary_schema.EJava_code je = null;
	String error_attr_name = "";
	String error_current_name = "";
	String error_supertype_name = "";
	String x_operand = "";
	Token start_token = null;
	Token end_token = null;
	boolean first_token = true;
//	argument_stack.push(ed);
//	if (ed != null)
//		printStack("PUSH: DerivedAttr5: entity " + ed.getName(null));
//	else
//		printStack("PUSH: DerivedAttr5: entity_definition = null");
}
{
	{
		printDebug("In derived attribute of entity: " + ed.getName(null));
		active_scope = ed; // of course
		flag_derived_expression = false;
 	}
	(da = AttributeDecl5(ed, 1) ":" bt = BaseType5(da) ":=" 
	{
//System.out.println(">DerivedAttr5<  BaseType: " + bt);

		if (parser_pass == 5) {

			if (da == null) {
				// attribute not found, probably redeclaring problem
				error_attr_name = global_attribute_name;
				error_current_name = ed.getName(null);
				if (global_entity2 != null) {
					error_supertype_name = global_entity2.getName(null);
				}
// this error already reported elsewhere (?)


//				error_count++;
		 // printError("redeclaring attribute \"" + error_attr_name + "\" in entity \"" + error_current_name + "\": the attribute not found in supertype entity \"" + error_supertype_name + "\" entity_name + "\"");

//				printError("redeclaring attribute \"" + error_attr_name + "\" in entity  \"" + error_current_name + "\": the attribute not found in the supertype entity \"" + error_supertype_name + "\"");

//RR
				
				// TO_FIX: may not be redeclaring only, if it is not redeclaring, then an internal error
//				printErrorMsg("" + error_attr_name + " - redeclaring attribute in entity  \"" + error_current_name + "\": the attribute not found in the supertype entity \"" + error_supertype_name + "\"", null, true);
				
			} else {
				if (!(da instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute)) {
					printErrorMsg("" + error_attr_name + " - expected derived attribute is not derived: " + da, null, true);
					error_count++;
				
				}
			}


			if (da != null) {


//			String derived_description = "";
			String derived_description = " ";
	  		for (int i = 1; ; i++) {
				Token t = getToken(i);
				if (t.kind == SEMICOLON) {
					break;
				}
				if (first_token) {
					start_token = t;
					end_token = t;
					first_token = false;
				} else {
					end_token = t;
				}
				// is it needed?
				if (flag_oc) {
					derived_description += t.image + " "; 
				} else {
					derived_description += t.image.toLowerCase() + " "; 
				}
//				derived_description += t.image; 
	  	}  
			// printDDebug("Derived attribute " + da.getName(null) + " is : " + derived_description);
			createExpressEntity(da, derived_description, start_token, end_token);
//			createExpressEntity(da, derived_description);
			if (expression_instances) {
//				je = createJavaEntity(da, null);
//				expression_stack.push(x_operand);
			}
		
			} // da != null
		} // pass == 5 ?
		flag_derived_expression = true;
	}
	Expression5() ";")
	{
		flag_derived_expression = false;
		
		if (da != null) {
		
		if (parser_pass > 3) {
			if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) {
				if (!((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).testDomain(null)) {
					((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).setDomain(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
				}
			} else
			if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
				if (!((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).testDomain(null)) {
					((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).setDomain(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
				}
			} else
			if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				if (da != null) {
					if (!((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).testDomain(null)) {
// not derived attribute here in the next line !!!!!
						((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).setDomain(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);
					}
				} else {
					printVerbose("ERROR, derived attribute da is NULL");
				}
			} else 
			if (bt instanceof jsdai.SExtended_dictionary_schema.EParameter) {
				// generalized, the entity should be abstract, perhaps it could be checked.
				if (!((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).testDomain(null)) {
				((jsdai.SExtended_dictionary_schema.EDerived_attribute)da).setDomain(null, (jsdai.SExtended_dictionary_schema.EParameter)bt);
				}
				
			}
			if (parser_pass == 5) {
					if (expression_instances) {
							jjtThis.owner_entity = ed;
							jjtThis.attribute = da;
					} // maybe include the next line or two
					exp = argument_stack.pop();
					if (flag_type_tracking) 
						exp_type = type_stack.pop();
					printStack("POP: DerivedAttr5: Expression5: " + exp);
					if (expression_instances) {
							// x_operand = (String)expression_stack.pop(); // could be je;
							// printXStack("POP: DerivedAttr5: Expression5: " + x_operand);
							//RR-Tue				je = createJavaEntity(da, x_operand);
							//				jsdai.lang.A_string values = je.getValues(null);
							//				String vvv = (String)expression_stack.pop();
							//				values.addByIndex(2, vvv);
					}

				// let's add the type compatibility check here
				if (flag_in_redeclaring) {
//					if (!(isRedeclared_attrCompatible(global_redeclaring, global_redeclared))) {
					if (false) {
						error_count++;
//					printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared derived attribute in entity " + attr.getParent(null).getName(null), null, true);
					}
					global_redeclaring = null;
					global_redeclared = null;			
					flag_in_redeclaring = false;
				}
			} 
		}
		} // da != null
// System.out.println(">DerivedAttr5<  after expression: " + da + ", base type: " + bt);
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.191------------ */
void DeriveClause5(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{}
{
	<DERIVE> (DerivedAttr5(ed))+
}
/* - LOOKAHEAD 2 or > - (Column 3) ---------------------------------------------------- ISO 10303-11:A.2.192------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict in [] construct (column 3).
		 Expansion nested within construct and expansion following construct have common prefixes,
		 one of which is <SIMPLE_ID>. Lookahead of 2 or more should be used for the nested expansion.
*/
jsdai.SExtended_dictionary_schema.EWhere_rule DomainRule5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException #DomainRule :
{
	jsdai.SExtended_dictionary_schema.EWhere_rule wr = null;
	Object exp = null;
	Object exp_type = null;
	Object pop_inst = null;
  String name = null;
	Token start_token = null;
	Token end_token = null;
	boolean first_token = true;
	boolean is_outer_sizeof = false;
	boolean is_negative_number = false;
  boolean	is_spec_warning_sizeof = false;
  boolean is_spec_error_sizeof = false;
	int sizeof_restriction_value = -1;
}
{
		{
			printDebug("In DomainRule5, parent: " + parent);
//			sizeof_depth = 0;
//			parenthesis_depth = 0;
		}
		// lookahead 2 should be enough, because ":" confirms optional Label5
		([LOOKAHEAD(2) name = Label5(){printDebug("Domain rule name: " + name);} ":"]
		{
			if (parser_pass == 5) {

			if (name == null) {
				// optional label missing
				no_label_nr++;
				name = "no_label_" + no_label_nr;
			}


//				if (!(parent instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule)) {
//				String where_description = "";
				String where_description = " ";
  			is_outer_sizeof = false;
  			is_negative_number = false;
  			is_spec_warning_sizeof = false;
  			is_spec_error_sizeof = false;
	      sizeof_restriction_value = -1;
  			for (int i = 1; ; i++) {
					Token t = getToken(i);
// System.out.println("token " + i + ": " + t.image + ", kind: " + t.kind);
					if ((i == 1) &&(t.kind == SIZEOF)) {
						is_outer_sizeof = true;
					}
					if (t.kind == SEMICOLON) {
						if (is_outer_sizeof) {
						 Token tv = getToken(i-1);
						 if (tv.kind == INTEGER_LITERAL) {
							Token ts;
							ts = getToken(i-2);
							if (ts.kind == MINUS) {
								is_negative_number = true;
								ts = getToken(i-3);
							}
							if (ts.kind == EQ) {  // =
								if (!is_negative_number) {
									if (tv.image.equals("0")) {
										is_spec_error_sizeof = true;
									} else {
										is_spec_warning_sizeof = true;
										// we might want this value to pass as a parameter of the sizeof, perhaps
										String s = tv.image;
										Integer l = new Integer(s);
										sizeof_restriction_value = l.intValue();

									}
								} else {
									// makes no sense, should not occur, but if occured, ignore, default sizeof
									// but perhaps we could allow = -0
									if (tv.image.equals("0")) {
										is_spec_error_sizeof = true;
									} else {
										// just ignore
									}
								}
							} else
							if (ts.kind == GT) {  // >
								// no error or warning, just ignore
							} else
							if (ts.kind == LT) { // <
								if (!is_negative_number) {
									if (tv.image.equals("0")) {
                  	//  < 0 makes no sense, ignore
                  } else {
										is_spec_warning_sizeof = true;
										// we might want this value to pass as a parameter of the sizeof, perhaps
										String s = tv.image;
										Integer l = new Integer(s);
										sizeof_restriction_value = l.intValue();
									}
								} else {
									// ignore, should not occur and makes no sense
								}
							} else
							if (ts.kind == LE) { // <=
								if (!is_negative_number) {
									if (tv.image.equals("0")) {
										// <= 0 - the = 0 part can be considered here, so error
										is_spec_error_sizeof = true;
									} else {
										is_spec_warning_sizeof = true;
										// we might want this value to pass as a parameter of the sizeof, perhaps
										String s = tv.image;
										Integer l = new Integer(s);
										sizeof_restriction_value = l.intValue();
									}
								} else {
									 // perhaps makes sense  <= -0
									 // because -0 = 0, the same as <= 0, and then = 0 part is ok, or = -0, if you wish
									if (tv.image.equals("0")) {
										is_spec_error_sizeof = true;
									} else {
										// makes no sense, ignore
									}
								}
							} else
							if (ts.kind == GE) { // >=
								// everything here is not an error or warning, ignore
							} else
							if (ts.kind == NE) { // <>
								// interesting case here, perhaps with the second parameter
								if (!is_negative_number) {
									if (tv.image.equals("0")) {
										//  <> 0 - no violation, ignore, the same as > 0
									} else {
										// <> 5 , for example, perhaps we could pass as a parameter, if exactly 5, then print them? not sure
										String s = tv.image;
										Integer l = new Integer(s);
										sizeof_restriction_value = l.intValue();
									}
								} else {
									// either not a violation ( <> -0 - can be the same as > 0), or makes no sense, so - ignore
								}			
							}
						 } // integer literal - else - not supported so far
						 
						} // outer_sizeof
						break;
					}
					if (first_token) {
						start_token = t;
						end_token = t;
						first_token = false;
					} else {
						end_token = t;
					}
					// is it needed?
					if (flag_oc) {
						where_description += t.image + " ";
					} else {
						where_description += t.image.toLowerCase() + " ";
					}
//					where_description += t.image;
	  		}
					// printDDebug("Where rule " + name + " is : " + where_description);
//				} // if not global_rule
				wr = (jsdai.SExtended_dictionary_schema.EWhere_rule)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CWhere_rule.class);
				if (name != null) {
					wr.setLabel(null, name);
				} else {
//					wr.setLabel(null, "_no_label_" + no_label_nr);
					// perhaps it is safe to assume, that if no label, then only one domain rule? I'm making this assupmtion for now.
					// I am also assuming, that there are no mixed cases label-no label
					// it is not easy to implement unique labels, because in the case of incremental, only a fraction may have to be parsed,
				  // and the unique number would be different.
					wr.setLabel(null, "WR1");
					no_label_nr++;
				}
				wr.setOrder(null, where_rule_order_count++);
//				createExpressEntity(wr, where_description);
				createExpressEntity(wr, where_description, start_token, end_token);
			} // pass 5
			global_sizeof_restriction_value = sizeof_restriction_value;
			global_is_spec_error_sizeof = is_spec_error_sizeof;
			global_is_spec_warning_sizeof = is_spec_warning_sizeof;
			global_is_outer_sizeof = is_outer_sizeof;
		}

		(LogicalExpression5()) #DomainRuleLogicalExpression )
	{

		if (parser_pass == 5) {
			exp = argument_stack.pop();
			if (flag_type_tracking) 
				exp_type = type_stack.pop();
			printStack("POP: DomainRule5: LogicalExpression5: " + exp);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
			if (expression_instances) {
// System.out.println("outer sizeof: " + is_outer_sizeof + ", erorr: " + is_spec_error_sizeof + ", warning: " + is_spec_warning_sizeof);
				jjtThis.where_rule = wr;
				if ((parent instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule)) {
					jjtThis.global_rule = true;
					jjtThis.map_definition = false;
				}else	if ((parent instanceof jsdai.SExtended_dictionary_schema.EMap_definition)) {
					jjtThis.map_definition = true;
					jjtThis.global_rule = false;
				}else {
					jjtThis.global_rule = false;
					jjtThis.map_definition = false;
				}

			}
		}
		return wr;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.193------------ */
void Element5() throws jsdai.lang.SdaiException #Element :
{
	int rep = 1;
}
{
	{
		printDebug("In Element5, starting");
	}
	Expression5() [":" rep = Repetition5()]
	{
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.repetition = rep;
//				if (rep > 1) {
//					jjtThis.repetition = rep;
//				} else {
//					jjtThis.repetition = 1;
//				}
			}
		}
		printDebug("In Element5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.194 ------------ */
void EntityBody5(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	{
		attribute_order_count = 0;
		explicit_attribute_order_count = 0;
		derived_attribute_order_count = 0;
		inverse_attribute_order_count = 0;
		where_rule_order_count = 0;
		hs_redeclared_attribute_originals = new HashSet();

	}
}
{
	 (ExplicitAttr5(ed))* [DeriveClause5(ed)] [InverseClause5(ed)] [UniqueClause5(ed)]
	 [
	 {
		printDebug("before where clause, entity: " + ed.getName(null));
	 }WhereClause5(ed)]
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.195------------ */
void EntityConstructor5() throws jsdai.lang.SdaiException #EntityConstructor :
{
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	int parameter_counter = 0;
}
{
	ed = EntityRef5(null) "(" [EntityConstructorParameter5(){parameter_counter++;} ("," EntityConstructorParameter5(){parameter_counter++;})*] ")"  
	{
		if (parser_pass == 5) {
			jjtThis.ed = ed;
			argument_stack.push(ed);
			if (flag_type_tracking) 
				type_stack.push(ed); // perhaps we could push GENERIC_ENTITY here, but better be as precise as possible
			printStack("PUSH: EntityConstructor5: " + ed);
		}

	}
}

void EntityConstructorParameter5() throws jsdai.lang.SdaiException #EntityConstructorParameter :
{
}
{
	Expression5()
} 


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.196 ------------ */
void EntityDecl5()  throws jsdai.lang.SdaiException #EntityDecl :
{
	{
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	jsdai.SExtended_dictionary_schema.EEntity_definition ed;
}
{
try {
(
	ed = EntityHead5() EntityBody5(ed) <END_ENTITY> 
	{
		active_scope = null;
 		active_scope_string =  active_scope_extension.getParent_scope_string();
	  active_scope_extension = active_scope_extension.getParent();


	}";"
	{
		current_scope = (Vector)scope_stack.pop();
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.entity_definition = ed;
			}
		}
	}
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	 printErrorMsg5(e.getMessage(), null, true);
	// System.out.println("ERROR RECOVERY: skipping to END_ENTITY");
		error_count++;
	recoverFromParseException(END_ENTITY, e);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.197 ------------ */
jsdai.SExtended_dictionary_schema.EEntity_definition EntityHead5() throws jsdai.lang.SdaiException:
{
	String entity_name;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	// have to change complex interface either to the corresponding complex class, or into EDeclaration - more general interface.
//      jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration eld;
	jsdai.SExtended_dictionary_schema.EDeclaration eld;
  Token a_token;
	boolean is_abstract_entity = false;
}
{
	/* <ENTITY> EntityId5() [SubSuper5()] ";" - In ISO, but [] expands to [[] []], so the outer [] not needed? (javaCC ERROR) */
	a_token = <ENTITY> entity_name = EntityId5()
	{
		global_entity_name = entity_name.toLowerCase();
		printDebug("Current entity: " + entity_name);
		if (parser_pass == 1) {
			// check if an entity with this name already exists in the extent.
			ed = findEntity_definition(entity_name, null);
			if (ed != null) {
					error_count++;
					printDebug("duplicate entity name \"" + entity_name + "\"");
			}       else {
				String wrong_name = findAnyName(entity_name);
				if (wrong_name != null) {
					error_count++;
					printDebug("duplicate name \"" + entity_name + "\". The same name used for an entity and for " + wrong_name);
				}
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_definition.class);
				active_scope = ed;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				eld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);

	if (sd == null) {
//              printDDebug("SD NULL, entity_name: " + entity_name + ", complex: " + is_complex_schema + ", pass: " + parser_pass);
	} else {
	}

				eld.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// eld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				eld.setDefinition(null, ed);
				hm_current_entity_declarations.put(entity_name.toLowerCase(), eld);

				if (flag_oc) {
					ed.setName(null, entity_name);
				} else {
	        ed.setName(null, entity_name.toLowerCase());
				}
//                              ed.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				ed.setInstantiable(null, true); // later must be repalaced to true, must be true for all entities except ABSTRACT
	if (is_complex_schema)
					ed.setComplex(null, true); // unnecessary, 0 by default
				else
					ed.setComplex(null, false); // unnecessary, 0 by default
				ed.setAbstract_entity(null, false);
				ed.createGeneric_supertypes(null);
				// supertypes is now derived instead of explicit 
				// ed.createSupertypes(null);
				// now it is inverse.
				// ed.createWhere_rules(null);
				// no longer
				// ed.createExplicit_attributes(null);
			}
		}       else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper5()
			ed = findEntity_definition(entity_name, null);
		  active_scope_extension = new ECtScope(active_scope, ed, active_scope_extension, active_scope_string, entity_name, entity_name.toLowerCase());
  		active_scope_string = "";
			active_scope = ed;
			if (ed == null) {
				error_count++;
				printErrorMsg5("" + entity_name + " - entity not found", null, true);
				printDebug("EntityHead5 - the entity not found: " + entity_name);
			}
		}
		createDocumentationEntity2(ed, a_token);
	}
		SubSuper5(ed) ";"
//	SubSuperNoAbstract5(ed) ";"
//   ( ";" | ( [ <ABSTRACT> {is_abstract_entity = true;}  ";" ] ) | ([SupertypeConstraint5(ed)] [SubtypeDeclaration5(ed)]  ";"))
	{
//	  if (parser_pass == 1) {
//	  	if (is_abstract_entity) {
//	  		ed.setInstantiable(null, false);
//			}
//	  }
		return ed;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.198 ------------ */
String EntityId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image.replace('$', '+'));
		} else {
			return (t.image.toLowerCase().replace('$', '+'));
		}
	}
}

/*--------- ISO 10303-14:B.2.74 ---*/
void EntityInstantiationLoop5(jsdai.lang.EEntity partition) throws jsdai.lang.SdaiException #EntityInstantiationLoop :
{
	boolean increment_like_present = false;
	String var_id = "";
}
{
	{
		printDebug("In EntityInstantiationLoop5, starting");

		//  it has its own scope which extends through the MapProjectClause
		// the openiing of the scope will be handled inside InstantiationLoopControl,
		// closing - here
	
	
		variable_uid++;
		var_id += "_implicit_" + variable_uid + "_";
		variable_id_stack.push(var_id);
		scope_stack.push(current_scope);
		current_scope = new Vector();

	
	}
	<FOR> increment_like_present = InstantiationLoopControl5() ";" MapProjectClause5(partition)
	{


		jjtThis.variable_uid = variable_uid;
		jjtThis.variable_id = var_id;
		jjtThis.partition = (jsdai.SExtended_dictionary_schema.EMap_or_view_partition)partition;
		jjtThis.map_definition = (jsdai.SExtended_dictionary_schema.EMap_definition)active_scope;

		current_scope = (Vector)scope_stack.pop();
		variable_id_stack.pop();

		if (increment_like_present) {
			active_scope_string = active_scope_extension.getParent_scope_string();
			active_scope_extension = active_scope_extension.getParent();
		}

		printDebug("In EntityInstantiationLoop5, ending");
	}
}



/*-+-------- ISO 10303-14:B.2.75 ---*/
jsdai.SExtended_dictionary_schema.EEntity_definition EntityRef5erence5() throws jsdai.lang.SdaiException :
{
	String schema_name = null;
	String entity_name = null;
}
{
//      [ ( SourceSchemaRef55() | TargetSchemaRef55() | SchemaRef5() ) "." ] EntityRef5()

	{
		printDebug("In EntityRef5erence5, starting");
	}
	[ LOOKAHEAD(2) schema_name = InterpretedId5() "."] entity_name = InterpretedId5() 
	{
		printDebug("In EntityRef5erence5, ending,but before find method");
	        return findEntityReference(entity_name, schema_name);
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.199------------ */
String EnumerationId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/* - LOOKAHEAD 2 or > - (Column 3) ---------------------------------------------------- ISO 10303-11:A.2.200------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict in [] construct (column 3).
		 Expansion nested within construct and expansion following construct have common prefixes,
		 one of which is <SIMPLE_ID>. Lookahead of 2 or more should be used for the nested expansion.
*/

// grammar change is needed here
void EnumerationReference5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
}
{
	{
		printDebug("In EnumerationReference5");
	}
	// lookahead 2 should be enough to confirm optional prefix, because of "."
	[LOOKAHEAD(2) dt = TypeRef5(0) "."] EnumerationRef5(dt)
//    (<SIMPLE_ID> ".")? <SIMPLE_ID>
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.201------------ */


// new 
void EnumerationType5(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException:
{
	jsdai.SExtended_dictionary_schema.EEnumeration_type et = null;
	// String Element5;
	jsdai.lang.A_string elements = null;
	// int Index5 = 1;
	boolean is_extensible = false;
	boolean is_extension = false;
	Vector elementz = new Vector();
	jsdai.SExtended_dictionary_schema.EDefined_type enum_super = null;
}
{
	[<EXTENSIBLE> {is_extensible = true;} ] <ENUMERATION> 
	{
		// changed from pass 4 to pass 1 in all 3 places.
    // better to use pass 3 for extensible selects with interfacing from other schemas.
	}
	[( ( <OF> elementz = EnumerationItems5(elementz) ) | (enum_super = EnumerationExtension5(elementz){is_extension = true;}))]
	{
		if (parser_pass == 3) {
			if (is_extensible) {
				if (is_extension) {
					// extended_enumeration_type+extensible_enumeration_type
						et = (jsdai.SExtended_dictionary_schema.EEnumeration_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtended_enumeration_type$extensible_enumeration_type.class);
				} else {
					// extensible_enumeration_type
					et = (jsdai.SExtended_dictionary_schema.EEnumeration_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtensible_enumeration_type.class);
				}
			} else {
				if (is_extension) {
					// extended_enumeration_type
						et = (jsdai.SExtended_dictionary_schema.EEnumeration_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtended_enumeration_type.class);
				} else {
					// enumeration_type - rather weird, perhaps we needed non-extensible enumeration type in dictionary too.
					et = (jsdai.SExtended_dictionary_schema.EEnumeration_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEnumeration_type.class);
				}
			}	
			et.setName(null, "_ENUMERATION_" + dt.getName(null));
//		elements = et.createElements(null);
			elements = et.createLocal_elements(null);
			dt.setDomain(null, et);

			for (int i = 0; i < elementz.size(); i++) {
				elements.addUnordered((String)elementz.elementAt(i));
			}
			dt.setDomain(null, et);
			if (is_extension) {
				if (et instanceof jsdai.SExtended_dictionary_schema.EExtended_enumeration_type) {
					if (enum_super != null) {
						if (enum_super.testDomain(null)) {
//							((jsdai.SExtended_dictionary_schema.EExtended_enumeration_type)et).setIs_based_on(null, (jsdai.SExtended_dictionary_schema.EExtensible_enumeration_type)enum_super.getDomain(null));
							((jsdai.SExtended_dictionary_schema.EExtended_enumeration_type)et).setIs_based_on(null, enum_super);
						} else {
						}
					} else {
						
					}
				} else {
					// something wrong here - internal error
				}
			}
		}
	}
}

// in this version, return  is no longer really needed
Vector EnumerationItems5(Vector elementz) throws jsdai.lang.SdaiException :
{
	String Element5;
	int Index5 = 1;
}
{
	"(" Element5 = EnumerationId5()
	{
		if (parser_pass == 3) {
			elementz.addElement(Element5);
		}
	}
	("," Element5 = EnumerationId5()
	{
		if (parser_pass == 3) {
			// duplicate Element5 names are now allowed but evaluate to the same value
//			if (isEnumerationElementNotUnique(elements, Element5)) {
//				error_count++;
//				printError("duplicate enumeration Element5 name \"" + Element5 + "\" in enumeration: " + dt.getName(null));
//			}
			elementz.addElement(Element5);
		}
	}
	)* ")"
	{
		return elementz;
	}
}


// jsdai.lang.A_string EnumerationExtension5(jsdai.SExtended_dictionary_schema.EDefined_type dt, jsdai.SExtended_dictionary_schema.EEnumeration_type et, jsdai.lang.A_string elements) throws jsdai.lang.SdaiException :
jsdai.SExtended_dictionary_schema.EDefined_type EnumerationExtension5(Vector elementz) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EDefined_type enum_super = null;
}
{
	<BASED_ON> enum_super = TypeRef5(0) [ <WITH> EnumerationItems5(elementz)]
	{
	// further implementation depends on the approach	
		return enum_super;
	}
}



/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.202------------ */
void EscapeStmt5() throws jsdai.lang.SdaiException #EscapeStmt :
{}
{
	{
		printDebug("In EscapeStmt5 starting");
	}
	<ESCAPE> ";"
	{
		printDebug("In EscapeStmt5 ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.203------------ */
void ExplicitAttr5(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute a;
	jsdai.SExtended_dictionary_schema.EExplicit_attribute ea = null;
	jsdai.SExtended_dictionary_schema.AExplicit_attribute aa = null;
	jsdai.lang.EEntity bt = null;
	int i = 1;
	boolean optional_flag = false;
	String error_attr_name = "";
	String error_current_name = "";
	String error_supertype_name = "";
//	boolean good_type = true;
}
{

{
	printDebug("In ExplicitAttribute5, starting");
}
	a = AttributeDecl5(ed, 0) // 0 - explicit
//	a = AttributeDecl5(ed, -40) // -42 - 0 = explicit, but also debug AttributeDecl5
	{
// System.out.println("XXX: attribute: " + a + ", entity: " + ed + ", pass: " + parser_pass);
		if (parser_pass > 3) {

			if (a == null) {
				// attribute not found, probably redeclaring problem
				error_attr_name = global_attribute_name;
				error_current_name = ed.getName(null);
				if (global_entity2 != null) {
					error_supertype_name = global_entity2.getName(null);
				}
//				error_count++;
	
		// printError("redeclaring attribute \"" + error_attr_name + "\" in entity \"" + error_current_name + "\": the attribute not found in supertype entity \"" + error_supertype_name + "\" entity_name + "\"");

		//				printError("redeclaring attribute \"" + error_attr_name + "\" in entity  \"" + error_current_name + "\": the attribute not found in the supertype entity \"" + error_supertype_name + "\"");

//				printErrorMsg("" + error_attr_name + " - redeclaring attribute in entity  \"" + error_current_name + "\": the attribute not found in the supertype entity \"" + error_supertype_name + "\"", null, true);
				printDebug("the result from AttributeDecl5 is NULL");
System.out.println("Attribute-NULL, error_attr_name: " + error_attr_name + ", error_current_name " +  error_current_name + ", error_supertype_name " + error_supertype_name + ", entity: " + ed);
				
			} else {
				if (!(a instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute)) {
					printWarningMsg("" + a.getName(null) + " - not explicit in pass 5 - STRONG WARNING -, in entity: " + ed.getName(null), null, true);
				}
			}




			if (a != null) {


			ea = (jsdai.SExtended_dictionary_schema.EExplicit_attribute)a;
			i = 1;
			aa = new jsdai.SExtended_dictionary_schema.AExplicit_attribute();
			if (ea != null) {
//System.out.println("<1> index i: " + i + ", ea: " + ea + ", parent entity: " + ea.getParent(null));
				aa.addByIndex(i++, ea);
			} else {
//System.out.println("<1-2> ea is null");
				printVerbose("ERROR: explicit attribute ea is NULL");
			}
		} 
		else {
		// a == null
				printDebug("Yes, the result from AttributeDecl5 is NULL");
				// creating just to avoid null pointer exception later on
					aa = new jsdai.SExtended_dictionary_schema.AExplicit_attribute();
			}
	
		}
	}
	("," a = AttributeDecl5(ed, 0)
	{
		if (parser_pass > 3) {
		  ea = null;
		  if (a != null) {
				printDebug("the result from AttributeDecl5 - a = " + a);
				ea = (jsdai.SExtended_dictionary_schema.EExplicit_attribute)a;
			} else {
				printDebug("a is NULL (the result from AttributeDecl5");
			}
			if (ea != null) {
//System.out.println("<2> index i: " + i + ", ea: " + ea + ", parent entity: " + ea.getParent(null));
				aa.addByIndex(i++, ea);
			} else {
				printVerbose("ERROR: explicit attribute ea is NULL");
			}
		}
	}
	)*  ":" [<OPTIONAL> {optional_flag = true;}] bt = BaseType5(a) ";" // was BaseType5(null)
	{
		if (parser_pass > 3) {
 	printDebug("XXX: base type: " + bt);


			// if it is redeclaration of an attribute, check if the type of the redeclaring attribute is compatible with the type of the redeclared one

//			good_type = isExplicitAttributeTypeCompatible(ed, ea, aa, bt);
//			if (!good_type) {
				// perhaps the printing of the error and the increasing of the number will be done in the function inside
//			}




			jsdai.lang.SdaiIterator attr_iter = aa.createIterator();

printDDebug("<XXX>");
			while (attr_iter.next()) {
				ea = aa.getCurrentMember(attr_iter);
//System.out.println("OO attribute: " + ea   + ", bt: " + bt);
				if (bt == null) {
printDDebug("XP: ERROR - explicit atttribute daclaration, base type - null: " + ea.getName(null) + ", t: " + bt);
				} else
				if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) {
// in earlier passes standard string_type is returned instead of the custom one, here - ok, so take this
//					if (!ea.testDomain(null)) {
						ea.setDomain(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//					}
				} else
				if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
printDDebug("XP: explicit atttribute daclaration, base type - aggregate: " + ea.getName(null) + ", t: " + bt);
					if (!ea.testDomain(null)) {
						ea.setDomain(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
					}
				} else
				if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
printDDebug("XP: explicit atttribute daclaration, base type - named type: " + ea.getName(null) + ", t: " + bt);
					if (!ea.testDomain(null)) {
						ea.setDomain(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);
					}
				} else 
				if (bt instanceof jsdai.SExtended_dictionary_schema.EParameter) {
					// express amendment generalized base type issue
					if (!ea.testDomain(null)) {
						ea.setDomain(null, (jsdai.SExtended_dictionary_schema.EParameter)bt);
					}
				} else {
printDDebug("XP: ERROR - explicit atttribute daclaration, base type - unknown type: " + ea.getName(null) + ", t: " + bt);
				}
				ea.setOptional_flag(null, optional_flag);
//System.out.println("SET OPTIONAL 09, attribute: " + ea);
// System.out.println("@X15 attr: " + ea);
			}
			// let's add the type compatibility check here
			if (flag_in_redeclaring) {
//				if (!(isRedeclared_attrCompatible(global_redeclaring, global_redeclared))) {
				if (false) {
					error_count++;
//					printErrorMsg("" + attr.getName(null) + " - incompatible type of redeclared explicit attribute in entity " + attr.getParent(null).getName(null), null, true);
				}
				global_redeclaring = null;
				global_redeclared = null;			
				flag_in_redeclaring = false;
			}
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.204------------ */
X_Expression Expression5() throws jsdai.lang.SdaiException #Expression :
// void Expression5() throws jsdai.lang.SdaiException :
{
	Object operand1 = null;
	Object operand1_type = null;
	Object operand2 = null;
	Object operand2_type = null;
	Object result = "";
	String x_operand1 = "";
	String x_operand2 = "";
	double op1double;
	double op2double;
	int op1int;
	int op2int;
	int operation = 0;
	String x_result = "";
	int op_nr = 0;
	int nr_of_operands = 0;
}
{
	{
		printDebug("In Expression5 before SimpleExpression5");
	}
		(
		SimpleExpression5()
	{
		printDebug("In Expression5 after SimpleExpression5");
		if (parser_pass == 5) {
			nr_of_operands++;
			operand1 = argument_stack.pop();
			if (flag_type_tracking) 
				operand1_type = type_stack.pop();
			printStack("POP: Expression5, operand1: " + operand1);
			if (expression_instances) {
				// x_operand1 = (String)expression_stack.pop();
				//printXStack("POP: Expression5, operand1: " + x_operand1);
				// x_result = x_operand1;
			}
			result = operand1;
		}
	}
	// without lookahead, "<" is ambiguous, although I do not imagine "<" in other situations in correct schemas?
	// even in theory, a backward path Qualifier5 "<-" is not the reason there, perhaps some issues with nesting
	// adding lookahead 2 mostly to suppress the warning, will see later
	[ LOOKAHEAD(2) operation = RelOpExtended5()
	SimpleExpression5()
	{
		printDebug("In Expression5 after the second SimpleExpression5");

		if (parser_pass == 5) {
			nr_of_operands++;
			if (expression_instances) {
//				jjtThis.operations[op_nr++] = operation;
				jjtThis.operations.add(new Integer(operation));
				op_nr++;
			}
			operand2 = argument_stack.pop();
			if (flag_type_tracking) 
				operand2_type = type_stack.pop();
			printStack("POP: Expression5, operand2: " + operand2);
			if (expression_instances) {
				// x_operand2 = (String)expression_stack.pop();
				// printXStack("POP: Expression5, operand2: " + x_operand2);
			}
		}
	}
	]
	) #RelOpExtended(nr_of_operands > 1)
	{
		if (parser_pass == 5) {
			switch (operation) {
				case 1: // <
					if (expression_instances) {
						// result = "(" + x_operand1 + " < " + x_operand2 + ")";
					}
					break;
				case 2: // >
					if (expression_instances) {
						// result = "(" + x_operand1 + " > " + x_operand2 + ")";
					}
					break;
				case 3: // <=
					if (expression_instances) {
						// result = "(" + x_operand1 + " <= " + x_operand2 + ")";
					}
					break;
				case 4: // >=
					if (expression_instances) {
						// result = "(" + x_operand1 + " >= " + x_operand2 + ")";
					}
					break;
				case 5: // <>
					if (expression_instances) {
						// result = "(" + x_operand1 + " != " + x_operand2 + ")";
					}
					break;
				case 6: // =
					if (expression_instances) {
						// result = "(" + x_operand1 + " == " + x_operand2 + ")";
					}
					break;
				case 7: // :<>:
					break;
				case 8: // :=:
					break;
				case 9: // <IN>
					break;
				case 10: // <LIKE>
					break;
				case  0:
				default:
	//                              printError ("unknown RelOperation"); - or rather no second operand - perfectly ok.
					break;
			}
			argument_stack.push(result);
			printStack("PUSH: Expression5, result: " + result);
			if (expression_instances) {
				// expression_stack.push(x_result);
			  //    printXStack("PUSH: Expression5, result: " + x_result);
			}
		}
		return jjtThis;
	}
}

/*--------- ISO 10303-14:B.2.79 ---*/
void ExpressionOrWild5() throws jsdai.lang.SdaiException :
{}
{
	Expression5() | <OP_UNDERSCORE>
}

/*--------- ISO 10303-14:B.2.80 ---*/
jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ExtentReference5() throws jsdai.lang.SdaiException :
{
	String schema_name = null;
	String object_name = null;
}
{
//      SourceEntityReference5() | ViewReference5()

	[ LOOKAHEAD(2) schema_name = InterpretedId5() "."] object_name = InterpretedId5() 
	{
	        return findEntity_or_view_definition(object_name, schema_name);
	}
		
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.205------------ */
void Factor5() throws jsdai.lang.SdaiException :
{
	Object operand1 = null;
	Object operand2 = null;
	String x_operand1 = "";
	String x_operand2 = "";
	String x_result = "";
	boolean power_present = false;
}
{
	{
		printDebug("In Factor5 before SimpleFactor5");
	}
	(SimpleFactor5()
	{
		printDebug("In Factor5 after SimpleFactor5");
		if (parser_pass == 5) {
			operand1 = argument_stack.pop();
			printStack("POP: Factor5, operand1: " + operand1);
			if (expression_instances) {
		// x_operand1 = (String)expression_stack.pop();
				// x_result = x_operand1;
				// printXStack("POP: Factor5, operand1: " + x_operand1);
			}
		}
	}
	 // seems to be an issue with nested grammar, lookahead 2 added to suppress the warning, otherwise should be OK
	 [ LOOKAHEAD(2) ( "**" SimpleFactor5()
	{
		power_present = true;
		printDebug("In Factor5 after second SimpleFactor5");
		if (parser_pass == 5) {
			operand2 = argument_stack.pop();
			printStack("POP: Factor5, operand 2: " + operand2);
			if (expression_instances) {
				// x_operand2 = (String)expression_stack.pop();
				// printXStack("POP: Factor5, operand2: " + x_operand2);
				// modify x_result here
			}
		}
	}
	 )]) #PowerOp(power_present)
	{
		if (parser_pass == 5) {
			// implement ** operation here operand1 = operand1 ** operand2
			argument_stack.push(operand1);
			printStack("PUSH: Factor5: " + operand1);
			if (expression_instances) {
				// expression_stack.push(x_result);
				// printXStack("PUSH: Factor5, result: " + x_result);
			}
		}
	}
}

/*--------- ISO 10303-14:B.2.82 ---*/
void ForeachExpr5() throws jsdai.lang.SdaiException #ForeachExpr :
{
	Object in_exp = null;
	Object return_exp = null;
	ECtVariable var = null;
	String variable_id = null;
	jsdai.lang.EEntity variable_parameter_type = null;
	jsdai.SExtended_dictionary_schema.EParameter variable_type = null;
	String var_id = "";
	String variable_key = "";


}
{
{
		printDebug("In ForEachExpr5, starting");
		variable_uid++;
		var_id += "_implicit_" + variable_uid + "_";
		variable_id_stack.push(var_id);
		scope_stack.push(current_scope);
		current_scope = new Vector();

}
//	<EACH> VariableId5() <IN> Expression5() [ WhereClause5(null) ] <RETURN> MapAttrAssgnmtExpr()
	<EACH> variable_id = VariableId5()
{
		global_flag_for_expression_inside = false;
		if (expression_instances) {
				jjtThis.foreach_variable_id = variable_id;
				jjtThis.foreach_variable_uid = (String)variable_id_stack.peek() + variable_id;
				jjtThis.foreach_variable_scope_id = (String)variable_id_stack.peek();
		}

		// do we need to create it anew?
	  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension, active_scope_string, "" + variable_uid, variable_id);
		active_scope_string = "";

		var = findVariableX(variable_id);
		var.scope_id = (String)variable_id_stack.peek();
		current_scope.addElement(var);
}
 <IN> Expression5() 
 {
		// TOCHECK - if pop is needed
		// in_exp = argument_stack.pop();
		// printStack("POP: For EACH IN Expression5 in Query: " + in_exp);
}
 [ WhereClause5(active_scope) ] 
 <RETURN> Expression5()
{

		// TOCHECK - if pop is needed
		return_exp = argument_stack.pop();
		printStack("POP: For EACH RETURN Expression5 in Query: " + return_exp);

		if (expression_instances) {
// System.out.println("ForEach - setting outer: " + 	global_flag_for_expression_inside);	
			jjtThis.outer = global_flag_for_expression_inside;
		}				

		global_flag_for_expression_inside = true;
// System.out.println("ForEach - before returning: " + 	global_flag_for_expression_inside);	




		current_scope = (Vector)scope_stack.pop();
		variable_id_stack.pop();
		active_scope_string = active_scope_extension.getParent_scope_string();
	  active_scope_extension = active_scope_extension.getParent();
		printDebug("In ForEachExpr5, ending");

}
}

/*--------- ISO 10303-14:B.2.83 ---*/
void ForloopExpr5() throws jsdai.lang.SdaiException #ForloopExpr :
{
	Object operand = null;
	String var_id = "";
	boolean increment_present = false;
}
{
	{
		variable_uid++;
		var_id += "_implicit_" + variable_uid + "_";
//		var_id += "_implicit_" + variable_uid + "_" + "_e_";
		variable_id_stack.push(var_id);
		printDebug("In ForLoopExpr5, starting");
		scope_stack.push(current_scope);
		current_scope = new Vector();
		global_flag_for_expression_inside = false;
	}
	// RepeatControl5() <RETURN> MapAttrAssgnmtExpr()
	increment_present = RepeatControl5() <RETURN> Expression5()
	{
		if (parser_pass == 5) {
//			operand = argument_stack.pop();
//			printStack("POP: RepeatStmt5, return value: " + operand);


		}

		if (expression_instances) {
			jjtThis.outer = global_flag_for_expression_inside;
		}				
		global_flag_for_expression_inside = true;

		current_scope = (Vector)scope_stack.pop();
		variable_id_stack.pop();
		printDebug("In ForLoopExpr5, ending");
		if (increment_present) {
	  	active_scope_string = active_scope_extension.getParent_scope_string();
			active_scope_extension = active_scope_extension.getParent();
		}		
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.206------------ */
jsdai.lang.EEntity FormalParameter5(jsdai.SExtended_dictionary_schema.AParameter parameters, boolean var_present, /* jsdai.SSdai_expressions_schema.AVariable fp_parameters,*/ jsdai.lang.EEntity owner) throws jsdai.lang.SdaiException :
{
	String par_name;
	Vector par_names = new Vector();
	jsdai.lang.EEntity pt = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	// jsdai.SSdai_expressions_schema.EEntity_variable ev = null;
	int parameter_counter = 0;
	jsdai.SExtended_dictionary_schema.EParameter par2 = null;
}
{
	{
		printDebug("In FormalParameter5, starting");
	}
	par_name = ParameterId5()
	{
		parameter_counter++;
		par_names.addElement(par_name);
	}
	 ("," par_name = ParameterId5()
	 {
			parameter_counter++;
			par_names.addElement(par_name);
	 }
	 )* ":" par = ParameterType5()
	{
		if (parser_pass == 5) {
			if (parameters != null) {
// printDDebug("Last Parameter5 name: " + par_name);
if (par == null) {
;//     printDDebug("par is NUL");
} else {
;//     printDDebug("par is NOT null");
}
if (par_names == null) {
;//     printDDebug("par_names is NUL");
} else {
;//     printDDebug("par_names is NOT null, number: " + par_names.size());
}

				if (par != null) {
					par.setName(null, (String)par_names.elementAt(0));
					if (var_present) {
						par.setVar_type(null, true);
					}
					current_scope.addElement(par);
					parameters.addByIndex(parameters.getMemberCount()+1,par);
					for (int i = 1; i < parameter_counter; i++) {
						par2 = (jsdai.SExtended_dictionary_schema.EParameter)par.copyApplicationInstance(model);
						par2.setName(null, (String)par_names.elementAt(i));
						if (var_present) {
							par2.setVar_type(null, true);
						}
						current_scope.addElement(par2);
						parameters.addByIndex(parameters.getMemberCount()+1, par2);
					}
				} else {
					printVerbose("ERROR: formal parameter par NULL");
				}
			}
			if (expression_instances) {
				if (pt != null) {
					if (pt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
						for (int i = 0; i < par_names.size(); i++) {
							String par_name1 = (String)par_names.elementAt(i);
						  // ev = (jsdai.SSdai_expressions_schema.EEntity_variable)expression_model.createEntityInstance(jsdai.SSdai_expressions_schema.CEntity_variable.class);
							// ev.setOwner(null, owner);
							// ev.setVariable_name(null, par_name1);
							// ev.setDefinition(null, (jsdai.SExtended_dictionary_schema.EEntity_definition)pt);
		// fp_parameters.addByIndex(fp_parameters.getMemberCount()+i+1, ev);
							// current_scope.addElement(ev);
	    }
					} else {
						printDebug("In Formal Parameter5 - not entity");
					}
				}
			}
		}
		
		printDebug("In FormalParameter5, ending");
		return pt; // really needed at all?
	}
}

/*--------- ISO 10303-14:B.2.85 ---*/
void ForwardPathQualifier5() throws jsdai.lang.SdaiException #ForwardPathQualifier :
{}
{
	// choice conflict "{" but Interval5 hear for correct schema does not seem possible, adding lookahead just in case and
	// to suppress the warning 
//	<FPATH> AttributeRef5(null, null, -1, null) [ LOOKAHEAD(PathCondition5()) PathCondition5() ]
	"::" AttributeRef5(null, null, -1, null) [ LOOKAHEAD(PathCondition5()) PathCondition5() ]
}

/*-+-------- ISO 10303-14:B.2.86 ---*/
// void ForExpr5() throws jsdai.lang.SdaiException #ForExpr :
void ForExpr5() throws jsdai.lang.SdaiException :
{}
{
	<FOR> ( ForeachExpr5() | ForloopExpr5() )
}

/*-+-------- ISO 10303-14:B.2.87 ---*/
void FromClause5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In FromClause5, starting, parent: " + parent);
		from_order_count = 0;
	}
	<FROM> ( SourceParameter5(parent) ";" )+
	{
printDebug("In FromClause5, ending");
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.207------------ */
Object FunctionCall5() throws jsdai.lang.SdaiException #FunctionCall :
{
	int built_in_id = -1;
	Vector arguments = new Vector();
	Vector expressions = new Vector();
	int arg_count = -1;
	Object result = null;
	Object function_instance = null;
	jsdai.SExtended_dictionary_schema.EFunction_definition fd = null;
	int sizeof_restriction_value;
	boolean is_spec_error_sizeof;
	boolean is_spec_warning_sizeof;
	boolean is_outer_sizeof;

	// jsdai.SIso13584_expressions_schema.EAbs_function abs_f = null;
}
{
	{
		printDebug("Starting FunctionCall5");
		sizeof_restriction_value = global_sizeof_restriction_value;
		is_spec_error_sizeof = global_is_spec_error_sizeof;
		is_spec_warning_sizeof = global_is_spec_warning_sizeof;
		is_outer_sizeof = global_is_outer_sizeof;

		global_sizeof_restriction_value = -1;
		global_is_spec_error_sizeof = false;
		global_is_spec_warning_sizeof = false;
		global_is_outer_sizeof = false;
	}
	// choice conflict, "(" in optional Parameter5 list, but I don't think 	the other case can happen in correct schemas.
  // LOOKAHEAD eliminates a choice conflict, but when the whole ActualParameterList used, incorrect result
  // it causes a problem with a certain long form schema - wrong 	number of Sizeof() arguments returned:
  // mim_lf.exp - contains 
  // Ap203_configuration_controlled_3d_design_of_mechanical_parts_and_assemblies_mim_LF
  // (* E2: '{ 1 0 10303 403 2 1 2}'*)
  // the problem caused by 
  // Entity datum  WR1
  // 
  // ERROR:  line: 10001, column: 14. function call has wrong number of arguments for built-in function SIZEOF: -1
	// ERROR:  line: 10001, column: 14. Encountered "( QUERY ( x <* SELF \\ datum . established_by_relationships | SIZEOF ( TYPEOF ( x \\" at line 10001, column 21.
	// Was expecting one of: a long long list here
	// the same entity and the same WR1 is ok in short forms, though
  // removing the lookahead fixes this error, but the real underlying problem remains
  
  
// causes the problem:  
//	((built_in_id = BuiltInFunction5() | fd = FunctionRef5()) [ LOOKAHEAD(ActualParameterList5(arguments, expressions)) arg_count = ActualParameterList5(arguments, expressions)])
// risks eliminating the lookahead, but fixes the problem:
	((built_in_id = BuiltInFunction5() | fd = FunctionRef5()) [ arg_count = ActualParameterList5(arguments, expressions)])

	{
		if (parser_pass == 5) {
			if (built_in_id > 0) {
				result = new Integer(built_in_id);
			} else {
				result = fd;
				if (fd.getName(null).equalsIgnoreCase("bag_to_set")) {
					// treat this function as a  built-in one, the optimized version is implemented in lang
					built_in_id = 31;
				}
			}
			if (built_in_id == 22) {
//				++sizeof_depth;
			if (is_outer_sizeof) {
				jjtThis.outer_sizeof = true;
				jjtThis.sizeof_is_warning = is_spec_warning_sizeof;
				jjtThis.sizeof_is_error = is_spec_error_sizeof;
				jjtThis.sizeof_value = sizeof_restriction_value;
			} else {
				jjtThis.outer_sizeof = false;
				jjtThis.sizeof_is_warning = false;
				jjtThis.sizeof_is_error = false;
				jjtThis.sizeof_value = -1;
			}

			} else {
			}
			jjtThis.built_in_id = built_in_id;
			jjtThis.fd = fd;
			jjtThis.scope = active_scope;
			jjtThis.arguments = arguments;
			jjtThis.argument_count = arg_count;
			switch (built_in_id) {
				case -1: // not a built in function
					break;
				case  0: // unknown built in function, internal error
					break;
				case  1: // ABS - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ABS", null, true);
						
					}
					// create instance of abs_function, assign it to function_instance variable.
					// set the operand attribute with the value from expressions (Parameter5 from ActualParameterList5() - extract the first Element5 of Vector)
					if (expression_instances) {
// printDebug("before creating abs_function instance");
						// abs_f = (jsdai.SIso13584_expressions_schema.EAbs_function)expression_model.createEntityInstance(jsdai.SIso13584_expressions_schema.CAbs_function.class);
// printDebug("after creating abs_function instance");
						// Object arg_inst = expressions.elementAt(0);
						// if (arg_inst instanceof jsdai.SIso13584_expressions_schema.ENumeric_expression) {
							// abs_f.setOperand(null, (jsdai.SIso13584_expressions_schema.ENumeric_expression)arg_inst);
						// } else {
							// printError("INSTANTIATING EXPRESSIONS: ABS built-in function argument is not a numeric_expression");
						// }
						// function_instance = abs_f;
					}
					break;
				case  2: // ACOS - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ACOS", null, true);
						
					}
					// acos_function
					break;
				case  3: // ASIN - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ASIN", null, true);
						
					}
					// asin_function
					break;
				case  4: // ATAN - 2
					if (arg_count != 2) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ATAN", null, true);
						
					}
					break;
				case  5: // BLENGTH - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function BLENGTH", null, true);
						
					}
					break;
				case  6: // COS  - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function COS", null, true);
						
					}
					// cos_function
					break;
				case  7: // EXISTS  - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function EXISTS", null, true);
						
					}
					break;
				case  8: // EXP - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function EXP", null, true);
						
					}
					// exp_function
					break;
				case  9: // FORMAT - 2
					if (arg_count != 2) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function FORMAT", null, true);
						
					}
					break;
				case 10: // HIBOUND - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function HIBOUND", null, true);
						
					}
					break;
				case 11: // HIINDEX - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function HIINDEX", null, true);
						
					}
					break;
				case 12: // LENGTH - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LENGTH", null, true);
						
					}
					break;
				case 13: // LOBOUND  - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LOBOUND", null, true);
						
					}
					break;
				case 14: // LOINDEX - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LOINDEX", null, true);
						
					}
					break;
				case 15: // LOG - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LOG", null, true);
						
					}
					// log_function
					break; 
				case 16: // LOG2 - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LOG2", null, true);
						
					}
					// log2_function
					break;
				case 17: // LOG10 - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function LOG10", null, true);
						
					}
					// log10_function
					break;
				case 18: // NVL - 2
					if (arg_count != 2) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function NVL", null, true);
						
					}
					break;
				case 19: // ODD - 1 
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ODD", null, true);
						
					}
					break;
				case 20: // ROLESOF - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function ROLESOF", null, true);
						
					}
					break;
				case 21: // SIN - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function SIN", null, true);
						
					}
					break;
				case 22: // SIZEOF - 1
//					arg_count = 1; // temporary fix
					if (arg_count != 1) {
						error_count++;
//						printErrorMsg5("function call has wrong number of arguments for built-in function SIZEOF", null, true);

System.out.println("5th pass");						
						printErrorMsg5("function call has wrong number of arguments for built-in function SIZEOF: " + arg_count, null, true);
						
					}
					break;
				case 23: // SQRT - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function SQRT", null, true);
						
					}
					// square_root_function
					break;
				case 24: // TAN - 1
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function TAN", null, true);
						
					}
					// tan_function
					break;
				case 25: // TYPEOF - 1 parameter
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function TYPEOF", null, true);
						
					}
					break;
				case 26: // USEDIN  - 2 parameters
					if (arg_count != 2) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function USEDIN", null, true);
						
					}
					break;
				case 27: // VALUE - 1 parameter
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function VALUE", null, true);
						
					}
					break;
				case 28: // VALUE_IN - 2  parameters
					if (arg_count != 2) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function VALUE_IN", null, true);
						
					}
					break;
				case 29: // VALUE_UNIQUE - 1 parameter
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has wrong number of arguments for built-in function VALUE_UNIQUE", null, true);
						
					}
					break;
				case 30: // EXTENT - ?  - this is Express X, look up the number of parameters
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has a wrong number of arguments for built-in function EXTENT", null, true);
					}
					break;
				case 31: // bag_to_set - ?  - this is a pseudo-built-in function
					if (arg_count != 1) {
						error_count++;
						printErrorMsg5("function call has a wrong number of arguments for function bag_to_set", null, true);
					}
					break;
				default: // must be an internal error.
					break;
			}
			argument_stack.push(result);
			printStack("PUSH: FunctionCall5: " + result);
			if (expression_instances) {
				// expression_stack.push(function_instance);
			}
			printDebug("Ending FunctionCall5: " + built_in_id);
		}
		return result;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.208------------ */
void FunctionDecl5() throws jsdai.lang.SdaiException #FunctionDecl :
{
	jsdai.SExtended_dictionary_schema.EFunction_definition fd = null;
}
{
try {
(
	{
		printDebug("In FunctionDecl5, starting");
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}


	fd = FunctionHead5()     AlgorithmHead5() (Stmt5())+ #ListOfStmt <END_FUNCTION> 
	
	
	{
		function_depth--; 
		if (function_depth > 0) {
			active_scope = getParentFunctionProcedureRuleDefinition(fd);
  		active_scope_string =  active_scope_extension.getParent_scope_string();
		  active_scope_extension = active_scope_extension.getParent();
		} else {
// System.out.println("function ending in pass 5 - active_scope BEFORE: " + active_scope);	
// System.out.println("function ending in pass 5 - active_scope_extension BEFORE: " + active_scope_extension);	
			active_scope = null;
  		active_scope_string =  active_scope_extension.getParent_scope_string();
		  active_scope_extension = active_scope_extension.getParent();
// System.out.println("function ending in pass 5 - AFTER: " + fd.getName(null) + ", active_scope_extension: " + active_scope_extension);	
		}
	} ";"
	





//      fd = FunctionHead5()     AlgorithmHead5() (Stmt5())+ <END_FUNCTION> {function_depth--; active_scope = null;}";"
/*  FunctionHead5() [AlgorithmHead5()] (Stmt5())+ <END_FUNCTION> ";"  - [ ()* [] [] ] javaCC ERROR */
	{
		current_scope = (Vector)scope_stack.pop();
		printDebug("In FunctionDecl5, ending");
		if (parser_pass == 5) {
			{
// System.out.println("YHAA-01: " + rtp); 
				jjtThis.fd = fd;
//				jjtThis.return_type_parameter = rtp;
			}
		}
	}
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	 printErrorMsg5(e.getMessage(), null, true);
	// System.out.println("ERROR RECOVERY: skipping to END_FUNCTION");
		error_count++;
	recoverFromParseException(END_FUNCTION, e);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.209------------ */
jsdai.SExtended_dictionary_schema.EFunction_definition FunctionHead5() throws jsdai.lang.SdaiException #FunctionHead  :
{
	String name = null;
	jsdai.SExtended_dictionary_schema.EFunction_definition fd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration fund;
	// jsdai.SSdai_expressions_schema.EExpress_function ef = null;
	// jsdai.SSdai_expressions_schema.AVariable ef_parameters = null;
	jsdai.SExtended_dictionary_schema.EParameter rpt = null;
//      jsdai.lang.EEntity rt = null;
	jsdai.SExtended_dictionary_schema.EData_type rt = null;
	jsdai.SExtended_dictionary_schema.AParameter parameters = null;
	String return_type_label = null;
	jsdai.lang.A_string return_type_labels = null;
	Token start_token = null;
	Token end_token = null;
	boolean first_token = true;
}
{
	{
		printDebug("In FunctionHead5, starting");
	}
	<FUNCTION> {function_depth++;} name = FunctionId5()
	{
		if ((expression_instances) && (parser_pass == 5) && (function_depth > 1)){
			if (active_scope instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
//				printWarning("nested functions not yet supported. Inner function: " + name + " in " + ((jsdai.SExtended_dictionary_schema.EFunction_definition)active_scope).getName(null));

//				printWarningMsg("" + name + " - inner function, nested functions not yet supported, in " + ((jsdai.SExtended_dictionary_schema.EFunction_definition)active_scope).getName(null), null, true);
			} else {
//				printWarning("nested functions not yet supported. Inner function: " + name);
//				printWarningMsg("" + name + " - inner function, nested functions not yet supported", null, true);
			}
		}
		if (parser_pass == 1) {
			printVerbose("Function: " + name);
//			fd = findFunction_definition(name);
			fd = findFunction_definitionX(name);
			if (fd != null) {
						error_count++;
						printDebug("duplicate function name \"" + name + "\"");
			} else {
				String wrong_name = findAnyName(name);
				if (wrong_name != null) {
						error_count++;
						printDebug("duplicate name \"" + name + "\". The same name used for a function and for " + wrong_name);
				}
			}
		  if (function_depth == 1) {
				fd = (jsdai.SExtended_dictionary_schema.EFunction_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_definition.class);
				active_scope = fd;
				fund = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_declaration$local_declaration.class);
				fund.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				// fund.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				fund.setDefinition(null, fd);
				if (flag_oc) {
					fd.setName(null, name);
				} else {
					fd.setName(null, name.toLowerCase());
				}
				parameters = fd.createParameters(null);
				hm_current_function_declarations.put(name.toLowerCase(), fund);
			} else {


				fd = (jsdai.SExtended_dictionary_schema.EFunction_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_definition.class);
				fund = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_declaration$inner_declaration.class);
				fund.setParent(null, sd);
				((jsdai.SExtended_dictionary_schema.EInner_declaration)fund).setScope(null,active_scope);
				active_scope = fd;
								// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					// fund.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				fund.setDefinition(null, fd);
				hm_current_function_declarations.put(name.toLowerCase(), fund);
				if (flag_oc) {
					fd.setName(null, name);
				} else {
					fd.setName(null, name.toLowerCase());
				}
				parameters = fd.createParameters(null);



			}
		} else {
			if (function_depth == 1) {
//				fd = findFunction_definition(name);
				fd = findFunction_definitionX(name);
			  active_scope_extension = new ECtScope(active_scope, fd, active_scope_extension, active_scope_string, name, name.toLowerCase());
  			active_scope_string = "";
				active_scope = fd;
				if (fd == null) {
					error_count++;
					printErrorMsg5("" + name + " - function not found", null, true);
					printDebug("FunctionHead5 - function not found: " + name);
				} else {
					parameters = fd.getParameters(null);
				}
			} else {

//				fd = findFunction_definition(name);
				fd = findFunction_definitionX(name);
			  active_scope_extension = new ECtScope(active_scope, fd, active_scope_extension, active_scope_string, name, constructFunctionKey(name));
  			active_scope_string = "";
				active_scope = fd;
				if (fd == null) {
					error_count++;
					printErrorMsg5("" + name + " - function not found", null, true);
					printDebug("FunctionHead5 - function not found: " + name);
				} else {
					parameters = fd.getParameters(null);
				}

			}
			if (parser_pass == 5) {
				if (expression_instances) {
				  // ef = (jsdai.SSdai_expressions_schema.EExpress_function)expression_model.createEntityInstance(jsdai.SSdai_expressions_schema.CExpress_function.class);
					// ef.setDefinition(null, fd);
					// ef_parameters = ef.createParameters(null);
				}
			}
		}
	}
	 ["(" FormalParameter5(parameters, false, /* ef_parameters, ef*/ null) (";" FormalParameter5(parameters, false, /* ef_parameters, ef */ null))* ")"] ":" rpt = ParameterType5() ";"
	{
		if (parser_pass == 5) {
//                      jjtThis.name = name;
			if (rpt != null) {
//  System.out.println("YHAA-02: " + rpt); 
			 jjtThis.return_type_parameter = rpt;

//				rtp = rpt;
				if (rpt.testParameter_type(null)) {
					rt = rpt.getParameter_type(null);
					if (rpt.testType_labels(null)) {
						jsdai.lang.A_string type_labels = rpt.getType_labels(null);
			 			if (type_labels.getMemberCount() > 0) {
            	jsdai.lang.A_string return_labels = fd.createReturn_type_labels(null);
            	jsdai.lang.SdaiIterator iter_labels = type_labels.createIterator();
              int label_count = 1;
              boolean already_done = false; // deprecated
              while (iter_labels.next()) {
              String label = type_labels.getCurrentMember(iter_labels);
              	return_labels.addByIndex(label_count++, label);
              	// the whole "if" stuff is depricated, attribute return_type_label is depricated
              	if (!label.equals("") && !already_done) {
              		return_type_label = label;
              		already_done = true;
              	}
              } // while
			 			}
			 		}
			 } else {
		  			printDDebug("Oo> parameter_type unset in function_head: " + name);
		  		}
			}
//                      jjtThis.return_type = rt;
			if (fd != null) {
				if (rt != null) {
					fd.setReturn_type(null, rt);
				} else {
					printDDebug("In FunctionHead5, rt is NULL, function: " + name); 
				}
				if (return_type_label != null) {
					fd.setReturn_type_label(null, return_type_label);
				}
			}
			printVerbose("Function: " + name);
			if (expression_instances) {
				// if (rt != null) {
					// if (rt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) {
						// ef.setReturn_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)rt);
					// } else
					// if (rt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
						// ef.setReturn_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)rt);
					// }
				// }
			}
			if (function_depth == 1) {
//				String function_description = "";
				String function_description = " ";
				int local_function_depth = 1;
			for (int i = 1; ; i++) {
					Token t = getToken(i);
					if (t.kind == FUNCTION) {
						local_function_depth++;
					}
					if (t.kind == END_FUNCTION) {
						local_function_depth--;
						if (local_function_depth == 0) {
						 // printDDebug("Break, function depth: " + local_function_depth);
						 break;
						} else {
						 ; // printDDebug("Continue, function depth: " + local_function_depth);
						}

					}
					if (first_token) {
						start_token = t;
						end_token = t;
						first_token = false;
					} else {
						end_token = t;
					}
					// is it needed?
					if (flag_oc) {
						function_description += t.image + " ";
					} else {
						function_description += t.image.toLowerCase() + " ";
					}
//					function_description += t.image;
			}
				// printDDebug("Function: " + function_description);
				createExpressEntity(fd, function_description, start_token, end_token);
//				createExpressEntity(fd, function_description);
			}
		}

		printDebug("In FunctionHead5, ending: " + name);
		// return ef;
		return fd;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.210------------ */
String FunctionId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
// printDDebug("## FUNCTION: " + t.image.toLowerCase());
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.211------------ */
// extended - GenericEntityType5 ----

jsdai.SExtended_dictionary_schema.EParameter GeneralizedTypes5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	// jsdai.lang.EEntity gt = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.lang.EEntity ae = null;
}
{
	{
		printDebug("In GeneralizedTypes5, starting");
	}
	( par = GenericEntityType5() |  par = AggregateType5() | par = GeneralAggregationTypes5() | par = GenericType5() )
	{
		printDebug("In GeneralizedTypes5, ending: " + par);
		return par;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.212------------ */
jsdai.SExtended_dictionary_schema.EParameter GeneralAggregationTypes5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter par = null;
}
{
	{
		printDebug("In GeneralAggregationTypes5, starting");
	}
	(par = GeneralArrayType5() | par = GeneralBagType5() | par = GeneralListType5() | par = GeneralSetType5())
	{
		printDebug("In GeneralAggregationTypes5, ending");
		return par;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.213------------ */
jsdai.SExtended_dictionary_schema.EParameter GeneralArrayType5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter result = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.SExtended_dictionary_schema.EArray_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	String bound_name;
	jsdai.lang.EEntity bt;
	boolean optional = false;
	boolean unique = false;
}
{
	{
		printDebug("In GeneralArrayType5, starting");
	}
	<ARRAY> [bounds = BoundSpec5()] <OF> [<OPTIONAL> {optional = true;}] [<UNIQUE> {unique = true;}] par = ParameterType5()
	{
		if (parser_pass == 5) {
			at = (jsdai.SExtended_dictionary_schema.EArray_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CArray_type.class);
			bound_name = getBoundString(1, bounds, optional, unique);
			at.setName(null, "_GENERALARRAY" + bound_name + _data_type_name);
			_data_type_name = "_GENERALARRAY"  + bound_name + _data_type_name;
			// better check these bounds for array
			if (bounds[0] == null) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			}
			at.setLower_index(null, bounds[0]);
			if (bounds[1] != null) {
				at.setUpper_index(null, bounds[1]);
			}	else {
				printDebug("Undefined upper Index5 of an array");
//      at.unsetUpper_index(null);  // no need for that it is unset after creating
			}
			// set element_type
			at.setUnique_flag(null, unique);
			at.setOptional_flag(null, optional);
// System.out.println("SET OPTIONAL 10, attribute: " + at);
			if (par.testParameter_type(null)) {
				at.setElement_type(null, par.getParameter_type(null));
			} else {
		  		printDDebug("Oo> parameter_type unset in general_array_type: ARRAY OF " + par);
		  	}
//                      bt = par.getParameter_type(null);
//                      if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type)
//                              at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//                      else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type)
//                              at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//                      else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//                              at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			result = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			result.setParameter_type(null, at);
			result.setName(null, "_general_array_type_");
			if (par.testType_labels(null)) {
				// need to add those labels to this one
				jsdai.lang.A_string new_labels = result.createType_labels(null);
        jsdai.lang.A_string labels = par.getType_labels(null);
        jsdai.lang.SdaiIterator iter_labels = labels.createIterator();
        String label = "";
        int label_index = 1;
				new_labels.addByIndex(label_index++, label);
        while (iter_labels.next()) {
	        label  = labels.getCurrentMember(iter_labels);
					new_labels.addByIndex(label_index++, label);
        }

				
			}



		}
		printDebug("In GeneralArrayType5, ending");
		return result;
	}
}

/*--------- ISO 10303-14:B.2.95 ---*/
void GeneralAttributeQualifier5() throws jsdai.lang.SdaiException :
{}
{
//      "." ( AttributeRef5(null, null, -1, null) | ViewAttributeRef5() )
	// better add Parameter5 value for ViewAttributeRef5
	"." ( AttributeRef5(null, null, -1, null) )
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.214------------ */
jsdai.SExtended_dictionary_schema.EParameter GeneralBagType5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter result = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.SExtended_dictionary_schema.EBag_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	String bound_name;
	int bound_value;
	jsdai.lang.EEntity bt;
}
{
	{
		printDebug("In GeneralBagType5, starting");
	}
	<BAG> [bounds = BoundSpec5()] <OF> par = ParameterType5()
	{
//System.out.println("<RR><PASS 5> generalbag element type: " + par + ", pass: " + parser_pass);
		if (parser_pass == 5) {

			boolean must_create = false;
			if (bounds[1] != null) {
				if (bounds[1] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[1]).getBound_value(null);
					if (bound_value != Integer.MIN_VALUE) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}
			if (bounds[0] != null) {
				if (bounds[0] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[0]).getBound_value(null);
					if (bound_value != 0) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}

			if (par != null) {
				if (par.testParameter_type(null)) {			
					if (par.getParameter_type(null) != _st_generic) {
						must_create = true;
					} else {
						if (par.testType_labels(null)) {
							must_create = true;
						}
					}
		  	} else {
		  		// why unset?
		  		must_create = true;
		  	}
		  } else {
		    // not standart type, but, on the other hand, something wrong here
		  	must_create = true;
		  }
			
			if (must_create) {


			at = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
			bound_name = getBoundString(0, bounds, false, false);
			at.setName(null, "_GENERALBAG" + bound_name + _data_type_name);
			_data_type_name = "_GENERALBAG" + bound_name + _data_type_name;
			if (bounds[0] == null) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			}
			at.setLower_bound(null, bounds[0]);
			if (bounds[1] != null) {
				at.setUpper_bound(null, bounds[1]);
			}	else {
				at.unsetUpper_bound(null);  // no need for that it is unset after creating
			}
			// set element_type
			if (par.testParameter_type(null)) {
				at.setElement_type(null, par.getParameter_type(null));
				// at.setElement_type(null, par); // impossible
			} else {
		  		printDDebug("Oo> parameter_type unset in general_bag_type: BAG OF " + par);
		  	}

		  } else {
		  	at = _st_bag_generic;
//				_data_type_name = "_BAG_GENERIC";
				_data_type_name = "_GENERALBAG_0_GENERIC";
		  }

// System.out.println("<RR><PASS 5> generalbag type: " + at + ", pass: " + parser_pass);

//      bt = par.getParameter_type(null);
//	    if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type)
//  	    at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//      else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type)
//  	    at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//      else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//    	  at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			result = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			result.setParameter_type(null, at);
			result.setName(null, "_general_bag_type_");
			if (par.testType_labels(null)) {
				// need to add those labels to this one
				jsdai.lang.A_string new_labels = result.createType_labels(null);
        jsdai.lang.A_string labels = par.getType_labels(null);
        jsdai.lang.SdaiIterator iter_labels = labels.createIterator();
        String label = "";
        int label_index = 1;
				new_labels.addByIndex(label_index++, label);
        while (iter_labels.next()) {
	        label  = labels.getCurrentMember(iter_labels);
					new_labels.addByIndex(label_index++, label);
        }

				
			}
		}


		printDebug("In GeneralBagType5, ending");
		return result;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.215------------ */
jsdai.SExtended_dictionary_schema.EParameter GeneralListType5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter result = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.SExtended_dictionary_schema.EList_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	String bound_name;
	int bound_value;
	jsdai.lang.EEntity bt;
	boolean unique = false;
}
{
	{
		printDebug("In GeneralListType5, starting");
	}
	<LIST> [bounds = BoundSpec5()] <OF> [<UNIQUE> {unique = true;}] par = ParameterType5()
	{
		if (parser_pass == 5) {

			boolean must_create = false;
			if (unique) {
				must_create = true;
			}
			if (bounds[1] != null) {
				if (bounds[1] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[1]).getBound_value(null);
					if (bound_value != Integer.MIN_VALUE) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}
			if (bounds[0] != null) {
				if (bounds[0] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[0]).getBound_value(null);
					if (bound_value != 0) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}

			if (par != null) {
				if (par.testParameter_type(null)) {			
					if (par.getParameter_type(null) != _st_generic) {
						must_create = true;
					}
		  	} else {
		  		// why unset?
		  		must_create = true;
		  	}
		  } else {
		    // not standart type, but, on the other hand, something wrong here
		  	must_create = true;
		  }
			
			if (must_create) {


			at = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
printDDebug(".oO0Oo. LIST TYPE CREATED - GeneralListType5 pass 4");
			bound_name = getBoundString(2, bounds, false, unique);
			at.setName(null, "_GENERALLIST" + bound_name + _data_type_name);
			_data_type_name = "_GENERALLIST"  + bound_name + _data_type_name;
			if (bounds[0] == null) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			}
			at.setLower_bound(null, bounds[0]);
			if (bounds[1] != null) {
				at.setUpper_bound(null, bounds[1]);
			} else {
				at.unsetUpper_bound(null);  // no need for that it is unset after creating
			}
			// set element_type
			at.setUnique_flag(null, unique);
			if (par.testParameter_type(null)) {
				at.setElement_type(null, par.getParameter_type(null));
		  	} else {
//		  		printDDebug("Oo> parameter_type unset i_type: LIST OF " + par);
		  	}


		  } else {
		  	at = _st_list_generic;
//				_data_type_name = "_LIST_GENERIC";
				_data_type_name = "_GENERALLIST_0_GENERIC";
		  }

//    bt = par.getParameter_type(null);
//    if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type)
//	    at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//    else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type)
//  	  at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//    else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//    	at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			result = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			result.setParameter_type(null, at);
			result.setName(null, "_general_list_type_");
			if (par.testType_labels(null)) {
				// need to add those labels to this one
				jsdai.lang.A_string new_labels = result.createType_labels(null);
        jsdai.lang.A_string labels = par.getType_labels(null);
        jsdai.lang.SdaiIterator iter_labels = labels.createIterator();
        String label = "";
        int label_index = 1;
				new_labels.addByIndex(label_index++, label);
        while (iter_labels.next()) {
	        label  = labels.getCurrentMember(iter_labels);
					new_labels.addByIndex(label_index++, label);
        }

				
			}


		}


		printDebug("In GeneralListType5, ending");
		return result;
	}
}


// 135 map_call = [ target_parameter_ref '@' ] map_reference [ partition_qualification ] '(' expression_or_wild { ',' expression_or_wild } ')'


/* - LOOKAHEAD 2 - (Columns 3 & 20) --------------------------------------------------- ISO 10303-11:A.2.216------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at columns 3 and 20.
		 Common prefix <SIMPLE_ID>
		 Lookahead of 2 should be used for the earlier expansion.
*/
Object GeneralRef5() throws jsdai.lang.SdaiException :
{
	Object return_value = null;
	String name;
}
{
// likely a grammar change is needed here.
	{
		printDebug("In GeneralRef5, starting");
	}
	// making changes in the grammar:
	// (LOOKAHEAD(2) return_value = ParameterRef5() | return_value = VariableRef5() )
		name = InterpretedId5()
		{
//			if (parser_pass == 5) {

//				return_value = findInterpretedId(name);
				return_value = findInterpretedIdX(name);
//			}
		}
	{
		printDebug("In GeneralRef5, ending, name: " + name + ", result: " + return_value + ", parser pass: " + parser_pass);
		return return_value;
	}
}

/*--------- ISO 10303-14:B.2.100 ---*/
void GeneralSchemaAliasId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	// SchemaId5() | SchemaMapId5() | SchemaViewId5()
	t = <SIMPLE_ID>
}

/*--------- ISO 10303-14:B.2.101 ---*/
jsdai.SExtended_dictionary_schema.EGeneric_schema_definition GeneralSchemaRef5() throws jsdai.lang.SdaiException :
{
  // jsdai.SExtended_dictionary_schema.EGeneric_schema_definition result = null;
  Object result = null;
}
{
//      SchemaRef5() | SchemaMapRef5() | SchemaViewRef55()
//      SchemaRef5()
	result =  InterpretedRef5(PI_SCHEMA_OR_SCHEMA_MAP_OR_SCHEMA_VIEW)
	{
		
		return (jsdai.SExtended_dictionary_schema.EGeneric_schema_definition)result;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.217------------ */
jsdai.SExtended_dictionary_schema.EParameter GeneralSetType5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter result = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.SExtended_dictionary_schema.ESet_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	int bound_value;
	jsdai.lang.EEntity bt;
	String bound_name;

}
{
	{
		printDebug("In GeneralSetType5, starting");
	}
	<SET> [bounds = BoundSpec5()] <OF> par = ParameterType5()
	{
		if (parser_pass == 5) {
			// see perhaps general set of generic
			// both bounds must be missing or bound 1 must be 0 and bound 2 must be ?
			// and the par paramete_type must be standart express type generic
			// if not - create

			boolean must_create = false;
			boolean is_generic = false;
			if (bounds[1] != null) {
				if (bounds[1] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[1]).getBound_value(null);
					if (bound_value != Integer.MIN_VALUE) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}
			if (bounds[0] != null) {
				if (bounds[0] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
					bound_value = ((jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[0]).getBound_value(null);
					if (bound_value != 0) {
						must_create = true;
					}
				} else {
					must_create = true;
				}
			}

			if (par != null) {
				if (par.testParameter_type(null)) {			
					if ((par.getParameter_type(null) != _st_generic) && (par.getParameter_type(null) != _st_string)) {
						must_create = true;
					} else {
						if (par.getParameter_type(null) == _st_generic) {
							is_generic = true;
						} 
						if (par.testType_labels(null)) {
							must_create = true;
						}
						
					}
		  	} else {
		  		// why unset?
		  		must_create = true;
		  	}
		  } else {
		    // not standart type, but, on the other hand, something wrong here
		  	must_create = true;
		  }
			
			if (must_create) {
				at = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
				bound_name = getBoundString(2, bounds, false, false);
				at.setName(null, "_GENERALSET" + bound_name + _data_type_name);
				_data_type_name = "_GENERALSET"  + bound_name + _data_type_name;
				if (bounds[0] == null) {
					b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
					b1.setBound_value(null, 0);
					bounds[0] = b1;
				}
				at.setLower_bound(null, bounds[0]);
				if (bounds[1] != null) {
					at.setUpper_bound(null, bounds[1]);
				}	else {
					at.unsetUpper_bound(null);  // no need for that it is unset after creating
				}
				// set element_type
				if (par != null) {
					if (par.testParameter_type(null)) {			
						at.setElement_type(null, par.getParameter_type(null));
		 			} else {
		 				printDDebug("Oo> parameter_type unset in general_set_type: SET OF " + par);
		 			}
		 		}
		  } else {
		    // again, do we need separate types for generic set and for set?
		    // currently, the same one in dictionary for standard set/generalset type
		    if (is_generic) {
		  		at = _st_set_generic;
//					_data_type_name = "_SET_GENERIC";
					_data_type_name = "_GENERALSET_0_GENERIC";
		  	} else {
		  		at = _st_set_string;
//					_data_type_name = "_SET_STRING";
					_data_type_name = "_GENERALSET_0_STRING";
		  	}
		  }
//    bt = par.getParameter_type(null);
//    if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type)
//	    at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//    else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type)
//  	  at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//    else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//     at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);

			result = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			result.setParameter_type(null, at);
			result.setName(null, "_general_set_type_");
			if (par.testType_labels(null)) {
				// need to add those labels to this one
				jsdai.lang.A_string new_labels = result.createType_labels(null);
        jsdai.lang.A_string labels = par.getType_labels(null);
        jsdai.lang.SdaiIterator iter_labels = labels.createIterator();
        String label = "";
        int label_index = 1;
				new_labels.addByIndex(label_index++, label);
        while (iter_labels.next()) {
	        label  = labels.getCurrentMember(iter_labels);
					new_labels.addByIndex(label_index++, label);
        }

				
			}


		}
		printDebug("In GeneralSetType5, ending");
		return result;
	}
}

/* ------------------------------------------------------------------------------------ Extension to EXPRESS, E2?------------ */
jsdai.SExtended_dictionary_schema.EParameter GenericEntityType5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter par = null;
//	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EData_type ed = null;
	jsdai.SExtended_dictionary_schema.EEntity_declaration edc = null;
	String Label5 = null;
	jsdai.SExtended_dictionary_schema.EDeclaration eld = null;
	jsdai.lang.A_string labels = null;
}
{
	{
		printDebug("In GenericEntityType5, starting");
	}
	<GENERIC_ENTITY> [":" Label5 = TypeLabel5()]
	{
		_data_type_name = "_ENTITY";		
		if (parser_pass == 5) {
			par = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			par.setName(null, "_generic_entity_");
			// ed = findEntity_definition("Entity");
			// changed generic entity from entity_definition to data_type because of bootstrapping problems in lang
//			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)_st_entity;
			ed = _st_entity;
//                      if (ed == null) {
//                              ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_definition.class);
//                              eld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
//                              eld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//                              eld.setDefinition(null, ed);
//                              ed.setName(null, "Entity");
//                              ed.setInstantiable(null, false); // guessing
//                              ed.setComplex(null, false);
//                              ed.createSupertypes(null);
				// now it is inverse
				// ed.createWhere_rules(null);
				// no longer
				// ed.createExplicit_attributes(null);
//                      }
			par.setParameter_type(null, ed);
			if (Label5 != null) {
				labels = par.createType_labels(null);
				labels.addByIndex(1, Label5);
				// par.setType_label(null, Label5);
			}
		}
		printDebug("In GenericEntityType5, ending");
		return par;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.218------------ */

jsdai.SExtended_dictionary_schema.EParameter GenericType5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	jsdai.SExtended_dictionary_schema.EData_type gt = null;
	String Label5 = null;
	jsdai.lang.A_string labels = null;
}
{
	{
		printDebug("In GenericType5, starting");
	}
	<GENERIC> [":" Label5 = TypeLabel5()]
	{
		_data_type_name = "_GENERIC";		
		if (parser_pass == 5) {
			par = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
			par.setName(null, "_generic_");
			gt = _st_generic;
			// gt = (jsdai.SExtended_dictionary_schema.EData_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type.class);
			par.setParameter_type(null, gt);
			if (Label5 != null) {
				labels = par.createType_labels(null);
				labels.addByIndex(1, Label5);
//                              par.setType_label(null, Label5);
			}
		}
		printDebug("In GenericType5, ending: " + par);
		return par;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.219------------ */
jsdai.SExtended_dictionary_schema.EEntity_definition GroupQualifier5() throws jsdai.lang.SdaiException #GroupQualifier:
{
	jsdai.SExtended_dictionary_schema.EEntity_definition ed0 = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed;
}
{
	{
		printDebug("In GroupQualifier5, starting");
	}
	<BACKSLASH> ed = EntityRef5(null)
	{
		if (ed == null) {
			printDebug("In GroupQualifier5, Entity Reference is null");
		} else {
			if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
				ed0 = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
    		if (ed == ed0) {
					// perhaps it is a warning only? The requirement is that the entity reference should be of a type in the same sub-supertype graf as the instance
					// but the issue with the looping should be fixed
//					printWarningMsg("" + ed.getName(null) + " - in group qualifier, own entity type", null, true);
//					error_count++;
    		}

				// actually, if the group qualifier is a part of an attribute redeclaration, the requirement must be that ed is supertype of ed0,
				// if not redeclaration of an attribute - perhaps  that ed and ed0 are in the same sub-supertype graph
				if (flag_in_redeclaring) {
					// check that ed is supertype of ed0
			 			
			 		if (!flag_derived_expression) {
						// if in derived expression on the right side of := then this check reports non-existing errors
						if (!isSpecifiedEntityOfRedeclaredAttributeIsSupertype(ed0, ed)) {
							// error
							printErrorMsg("" + ed.getName(null) + " - is not supertype of entity " + ed0.getName(null) + " as it should be when redeclaring an attribute", null, true);
							error_count++;
						}
					}

				} else {
					// check that ed and ed0 are in the same sub-supertype graph
				}

    	}
		}

		if (parser_pass == 5) {
			argument_stack.push(ed);
			if (ed != null) {
				printStack("PUSH: GroupQualifier5, entity reference: " + ed.getName(null));
			} else {
				printStack("PUSH: GroupQualifier5, entity reference: NULL");
			}
			if (expression_instances) {
					jjtThis.ed = ed;
			}
		}
		printDebug("In GroupQualifier5, ending");
		return ed;
	}
}

/*--------- ISO 10303-14:B.2.105 ---*/
void IdentifiedByClause5() throws jsdai.lang.SdaiException #IdentifiedByClause :
{}
{
	// expressions follows, potential <FOR> conflict, better play it a bit safer
	<IDENTIFIED_BY> ( LOOKAHEAD(IdParameter5() ";") IdParameter5() ";")+
}

/*-+-------- ISO 10303-14:B.2.106  ---*/
void IdParameter5() throws jsdai.lang.SdaiException #IdParameter :
{}
{       //  here, ":"  confirms the presense of optional ID, lookahead 2 is ok.
	[  LOOKAHEAD(2) IdParameterId5() ":" ] Expression5()
}

/*--------- ISO 10303-14:B.2.107  ---*/
void IdParameterId5() throws jsdai.lang.SdaiException :
{}
{
	ParameterId5()
}

/*-+-------- ISO 10303-14:B.2.108  ---*/
void IfExpr5() throws jsdai.lang.SdaiException #IfExpr :
{

	int elsif_count = 0;
	boolean else_present = false;
	

}
{
//	<IF> LogicalExpression5() <THEN> MapAttrAssgnmtExpr() ( <ELSIF> LogicalExpression5() MapAttrAssgnmtExpr() )* [ <ELSE> MapAttrAssgnmtExpr() ] <END_IF>
	<IF> LogicalExpression5() <THEN> Expression5() ( <ELSIF> LogicalExpression5() Expression5() {elsif_count++;})* [ <ELSE> Expression5() {else_present = true;}] <END_IF>
	{
		if (expression_instances) {
			jjtThis.elsif_count = elsif_count;
			jjtThis.else_present = else_present;
		}
		
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.220------------ */
void IfStmt5() throws jsdai.lang.SdaiException #IfStmt :
{
	Object operand = null;
	Object pop_inst = null;
	int if_count = 0;
	int else_count = 0;
}
{
	{
		printDebug("In IfStmt5, starting");
//              system.out.println("<><> if count: " + if_count + ", else count: " + else_count);
	}
	<IF> (LogicalExpression5()) #IfCondition
	{
		if (parser_pass == 5) {
			operand = argument_stack.pop();
			printStack("POP: IfStmt5, logical Expression5: " + operand);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
	}
	 <THEN> (Stmt5() {if_count++;})+ [<ELSE> (Stmt5(){else_count++;})+] <END_IF> ";"
	{
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.if_count = if_count;
				jjtThis.else_count = else_count;
			}
//                      operand = argument_stack.pop();
//      printStack("POP: IfStmt5, return value: " + operand);
		}
		printDebug("In IfStmt5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.221------------ */
int Increment5() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = NumericExpression5()
	{
		return value;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.222------------ */
void IncrementControl5() throws jsdai.lang.SdaiException #IncrementControl :
{
	ECtVariable var = null;
	String variable_id = null;
	jsdai.lang.EEntity variable_parameter_type = null;
	jsdai.SExtended_dictionary_schema.EParameter variable_type = null;
	boolean increment_present = false;
	String variable_key = "";
}
{
	variable_id = VariableId5() {}":=" Bound15(false) <TO> Bound25(false) [<BY> Increment5() {increment_present = true;}]  
	{
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.variable_id = variable_id;
				jjtThis.variable_uid = (String)variable_id_stack.peek() + variable_id;
				jjtThis.variable_scope_id = (String)variable_id_stack.peek();
				jjtThis.increment_present = increment_present;
			}
//			variable_type = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
//			variable_type.setName(null, "_implicit_variable_");
			// variable_type.setParameter_type(null, variable_parameter_type);



		  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension, active_scope_string, "" + variable_uid, variable_id);
 			active_scope_string = "";
//			active_scope = null;  // not using on schema level (yet)

/*

			variable_key = constructImplicitVariableKey(variable_id, variable_uid);

			var = new ECtVariable(variable_id, variable_type, function_depth, variable_key, active_scope, true, 1, (String)variable_id_stack.peek());
//			var = new ECtVariable(variable_id, variable_type, (String)variable_id_stack.peek());

			if (variable_key != null) {
				if (!(hm_current_variables.containsKey(variable_key))) {
					hm_current_variables.put(variable_key, var);
				} else {
					// error - perhaps more than one variable with the same name in a function
				}
			} else {
				System.out.println("INTERNAL ERROR - ImplicitVariable in IncrementControl: " + variable_id + "  - wrong active scope: " + active_scope);
			}

*/
//System.out.println("about to find variable X, IncrementControl5 : " + variable_id); 		
			var = findVariableX(variable_id);
//System.out.println("IncrementControl5, did we find var " + variable_id + ", see: " + var + ", scope : " + active_scope);

// protection against null pointer exception
if (var == null ) {
	System.out.println("INTERNAL ERROR in IncrementControl5, variable not found: " + variable_id);
} else {
      var.scope_id = (String)variable_id_stack.peek();
}

//			var = new ECtVariable(variable_id, variable_type, (String)variable_id_stack.peek());
			current_scope.addElement(var);

		} else { // other passes - added to handle interpreted IDs
			var = new ECtVariable(variable_id, variable_type);
			current_scope.addElement(var);
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.223------------ */
int Index5() throws jsdai.lang.SdaiException #Index:
{
	int value;
}
{
	value = NumericExpression5()
	{
		return value;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.224------------ */
int Index15() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = Index5()
	{
		return value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.225------------ */
int Index25() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = Index5()
	{
		return value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.226------------ */
Object IndexQualifier5(Object general_reference) throws jsdai.lang.SdaiException #IndexQualifier :
{
	int ind1 = Integer.MIN_VALUE;
	int ind2 = Integer.MIN_VALUE;
//	jsdai.lang.EEntity reference = null;
	Object reference = null;
//	jsdai.SExtended_dictionary_schema.EData_type gen_data = null;
	Object gen_data = null;
	
}
{
	{
		printDebug("In IndexQualifier5, starting");
	}
	"[" ind1 = Index15() [":" ind2 = Index25()] "]"
	{
		if (parser_pass == 5) {


			if (general_reference instanceof jsdai.SExtended_dictionary_schema.EParameter) {
				// jsdai.lang.EEntity ref_type;
				if (((jsdai.SExtended_dictionary_schema.EParameter)general_reference).testParameter_type(null)) {
					reference = ((jsdai.SExtended_dictionary_schema.EParameter)general_reference).getParameter_type(null);
				} else {
					printDDebug("Oo> parameter_type unset in Index5 Qualifier5: reference = Parameter5: " + general_reference);
				}
			} else
			if (general_reference instanceof ECtVariable) {
				jsdai.SExtended_dictionary_schema.EParameter par_type;
				par_type = ((ECtVariable)general_reference).getType();
				if (par_type.testParameter_type(null)) {
					reference = par_type.getParameter_type(null);
				} else {
					printDDebug("Oo> parameter_type unset in Index5 Qualifier5: reference = variable: " + general_reference);
				}
			} else {
				reference = general_reference;
			}
	
			while (reference instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
				if ( ((jsdai.SExtended_dictionary_schema.EDefined_type)reference).testDomain(null) ) {
					reference = ((jsdai.SExtended_dictionary_schema.EDefined_type)reference).getDomain(null);
				}
			}

			if (reference instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
				if (((jsdai.SExtended_dictionary_schema.EAggregation_type)reference).testElement_type(null)) {
					gen_data = ((jsdai.SExtended_dictionary_schema.EAggregation_type)reference).getElement_type(null);
				} else {
					printDebug("Index5 Qualifier5: aggregate Element5 not set");	
				}
			} else 
			if (reference instanceof jsdai.SExtended_dictionary_schema.EString_type) {
				gen_data = reference;
			} else 
			if (reference instanceof jsdai.SExtended_dictionary_schema.EBinary_type) {
				gen_data = reference; 
       } else 
			if (reference instanceof jsdai.SExtended_dictionary_schema.ETarget_parameter) {
				jsdai.SExtended_dictionary_schema.ETarget_parameter tp = (jsdai.SExtended_dictionary_schema.ETarget_parameter)reference;
				if (tp.testExtent(null)) {
					gen_data  = tp.getExtent(null);
				
				}
	
			} else {
				printDebug("Index5 Qualifier5: reference of incompatible type:" + reference);	
			}
	
			
			if (expression_instances) {
				jjtThis.index1 = ind1;
				jjtThis.index2 = ind2;	
			}
		}
	 	printDebug("In IndexQualifier5, ending");
	 	return gen_data;
	}  
}


// REMOVED IN DIS
/*--------- ISO 10303-14:B.2.116  ---*/
/*
String InstanceId() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		return (t.image.toLowerCase());
		}
}
*/

/*--------- ISO 10303-14:B.2.117  ---*/
int InstantiationForeachControl5() throws jsdai.lang.SdaiException #InstantiationForeachControl :
{
	ECtVariable var1 = null;
	ECtVariable var2 = null;
	String iterator_name;
	String index_name;
	String var_id = "";
	jsdai.SExtended_dictionary_schema.EParameter variable_type1 = null;
	jsdai.SExtended_dictionary_schema.EParameter variable_type2 = null;
	String variable_key1 = "";
	String variable_key2 = "";

	ECtScope active_scope_extension_prev = null;
	int implicit_present = 0;
}
{
{
		printDebug("In InstantiationForeachControl5, starting");
//		variable_uid++;
//		var_id += "_implicit_" + variable_uid + "_";
//		variable_id_stack.push(var_id);
//		scope_stack.push(current_scope);
//		current_scope = new Vector();
		implicit_present = 2;  // asume for now that INDEXING is always present, this grammar does not even make it optional
		
}
//      <EACH> (VariableId5() <IN> SourceAttributeReference5() <INDEXING> VariableId5())+

// working with test schemas
	<EACH> iterator_name = VariableId5() <IN> SourceAttributeReference5() <INDEXING> index_name = VariableId5()
	
	// need to support multiple iterators - problems even with building the parser
//	<EACH> iterator_name = VariableId5() <IN> Expression5() (AND VariableId5() IN Expression5())*  <INDEXING> index_name = VariableId5()

//	<EACH> iterator_name = VariableId5() <IN> Expression5()  <INDEXING> index_name = VariableId5()
	
	{

		if (expression_instances) {
				jjtThis.iterator_name = iterator_name;
				jjtThis.iterator_uid = (String)variable_id_stack.peek() + iterator_name;
				jjtThis.index_name = index_name;
				jjtThis.index_uid = (String)variable_id_stack.peek() + index_name;
				jjtThis.variable_scope_id = (String)variable_id_stack.peek();
		}


		active_scope_extension_prev = active_scope_extension;
	
	  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension, active_scope_string, "" + variable_uid, iterator_name);
		active_scope_string = "";

		var1 = findVariableX(iterator_name);
		var1.scope_id = (String)variable_id_stack.peek();
		current_scope.addElement(var1);

//	  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension_prev, active_scope_string, "" + variable_uid, index_name);
//		active_scope_string = "";

		active_scope_extension.set2ndId("" + variable_uid);
		active_scope_extension.set2ndKey(index_name);

		var2 = findVariableX(index_name);
		var2.scope_id = (String)variable_id_stack.peek();
		current_scope.addElement(var2);

		// this part perhaps needs to be after attribute mappings 
//		current_scope = (Vector)scope_stack.pop();
//		variable_id_stack.pop();
//		active_scope_string = active_scope_extension.getParent_scope_string();
//	  active_scope_extension = active_scope_extension.getParent();
		
		printDebug("In InstantiationForeachControl, ending");
		return (2);
	}
}

/*-+-------- ISO 10303-14:B.2.118  ---*/
boolean InstantiationLoopControl5() throws jsdai.lang.SdaiException :
{
	boolean increment_present = false;
	int increments_present = 0;
}
{
	{
		printDebug("In InstantiationLoopControl5, starting");
//		variable_uid++;
//		scope_stack.push(current_scope);
//		current_scope = new Vector();

//		variable_uid++;
//		var_id += "_implicit_" + variable_uid + "_";
//		variable_id_stack.push(var_id);
//		scope_stack.push(current_scope);
//		current_scope = new Vector();
	}

	 (increments_present = InstantiationForeachControl5() | increment_present = RepeatControl5())
	{
		if (increments_present > 0) increment_present = true;
		// current_scope = (Vector)scope_stack.pop();
		

//		current_scope = (Vector)scope_stack.pop();
//		variable_id_stack.pop();
//		if (increment_present) {
//	  	active_scope_string = active_scope_extension.getParent_scope_string();
//			active_scope_extension = active_scope_extension.getParent();
//		}	else
//		if (increments_present > 0) {
			// do we need anything special for the difference between only iterator and both iterator and index?
//	  	active_scope_string = active_scope_extension.getParent_scope_string();
//			active_scope_extension = active_scope_extension.getParent();
//		}		
		

		printDebug("In InstantiationLoopControl5, ending");
		return increment_present;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.227------------ */
jsdai.SExtended_dictionary_schema.EInteger_type IntegerType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EInteger_type it = null; 
}
{
	<INTEGER>
	{
		if (parser_pass == 3) {
			// it = (jsdai.SExtended_dictionary_schema.EInteger_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_type.class);
			it = _st_integer;	
		}
		else if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						it = (jsdai.SExtended_dictionary_schema.EInteger_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}
			}
			if (it == null) {
				// it = (jsdai.SExtended_dictionary_schema.EInteger_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_type.class);
				it = _st_integer;
		printDDebug("In integer_type, pass > 3, dd = null: " + it);
			}
		} 
		printDDebug("In integer_type, ending: " + it);
		return it;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.228 ------------ */
void InterfaceSpecification5(Vector used_vector, Vector referenced_vector) throws jsdai.lang.SdaiException :
{}
{
	(ReferenceClause5(referenced_vector) | UseClause5(used_vector))
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.229------------ */
void Interval5() throws jsdai.lang.SdaiException #Interval :
{
	Object low = null;
	Object item = null;
	Object high = null;
	Object result = null;
	Object pop_inst_low = null;
	Object pop_inst_item = null;
	Object pop_inst_high = null;
	Object exp_inst_result = null;
}
{
	{
		printDebug("In Interval5, starting");
	}
	"{" IntervalLow5()
	{
		if (parser_pass == 5) {
			low = argument_stack.pop();
			printStack("POP: Interval5, IntervalLow5: " + low);
			if (expression_instances) {
				// pop_inst_low = expression_stack.pop();
			}
		}
	}
 IntervalOp5() IntervalItem5()
	{
		if (parser_pass == 5) {
			item = argument_stack.pop();
			printStack("POP: Interval5, IntervalItem5: " + item);
			if (expression_instances) {
				// pop_inst_item = expression_stack.pop();
			}
		}
	}
IntervalOp5() IntervalHigh5()
	{
		if (parser_pass == 5) {
			high = argument_stack.pop();
			printStack("POP: Interval5, IntervalHigh5: " + high);
			if (expression_instances) {
				// pop_inst_high = expression_stack.pop();
			}
		}
	}
"}"
	{
		if (parser_pass == 5) {
			argument_stack.push(result);
			printStack("PUSH: Interval5: " + result);
			if (expression_instances) {
				// expression_stack.push(exp_inst_result);
			}
		}
		printDebug("In Interval5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.230------------ */
void IntervalHigh5() throws jsdai.lang.SdaiException #IntervalHigh  :
{}
{
	SimpleExpression5()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.231------------ */
void IntervalItem5() throws jsdai.lang.SdaiException #IntervalItem  :
{}
{
	SimpleExpression5()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.232------------ */
void IntervalLow5() throws jsdai.lang.SdaiException #IntervalLow  :
{}
{
	SimpleExpression5()
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.233------------ */
void IntervalOp5() throws jsdai.lang.SdaiException #IntervalOp  :
{
	int op = -1;
}
{
	("<" {op = 1;} | "<=" {op = 2;})
	{
		if (expression_instances) {
			jjtThis.operator = op;
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.234------------ */
void InverseAttr5(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute a;
	jsdai.SExtended_dictionary_schema.EAttribute a2;
	jsdai.SExtended_dictionary_schema.EInverse_attribute ia;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed2;
	jsdai.SExtended_dictionary_schema.EExplicit_attribute ar;
//  jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	boolean duplicates = false;
	int bag_set = -1;

	jsdai.SExtended_dictionary_schema.ESet_type at = null;
	jsdai.SExtended_dictionary_schema.EBag_type bt = null;
	String _aggr_name = null;
	String bound_name = null;
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
}
{
	(a = AttributeDecl5(ed, 2) ":"
	[(<SET> {duplicates = false; bag_set = 0;}| <BAG>{duplicates = true; bag_set = 1;}) [bounds = BoundSpec5()] <OF>] ed2 = EntityRef5(null) <FOR> a2 = AttributeRef5(ed, ed2, 3, null) ";" )
	{
		if (parser_pass > 3)
		{
			ia = null;
			if (a != null) {
				ia = (jsdai.SExtended_dictionary_schema.EInverse_attribute)a;
			}
			ar = null;
			if (a2 != null) {
				ar = (jsdai.SExtended_dictionary_schema.EExplicit_attribute)a2;
			}
			if (ia != null) {
				if (ed2 != null) {
					ia.setDomain(null, ed2);
				} else {
					printVerbose("ERROR - inverse attribute domain ed2 is null");
				}
				if (!(isInverted_attrCompatible(ed, ar))) {
//				if (!ia.testInverted_attr(null)) {
//					printError("inverse attribute has incompatible inverted attribute. Entity: " + ed.getName(null).toLowerCase() + ", attribute: " + ia.getName(null).toLowerCase());
					printErrorMsg("" + ia.getName(null) + " - inverse attribute has incompatible inverted attribute, entity: " + ed.getName(null), null, true);
//				}
					error_count++;
				}
				if (ar != null) {
					ia.setInverted_attr(null, ar);
				} else {
					printVerbose("ERROR - inverse attribute inverted_attr ar is null");
				}
				if (bag_set < 0) { // single entity, no set or bag
					duplicates = false;
					ia.unsetMin_cardinality(null);  // not really needed.
					ia.unsetMax_cardinality(null);  // not really needed.
				}
				else {
					
					if (bounds[0] == null) {
						b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
						b1.setBound_value(null, 0);
						bounds[0] = b1;
					}
					ia.setMin_cardinality(null,bounds[0]);
					if (bounds[1] != null) {
						ia.setMax_cardinality(null,bounds[1]);
					}
					
					if (parser_pass == 5) {
						// create aggregate in the dictionary
						if (duplicates) {

							bt = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
							if (bounds[0] == null) {
								b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
								b1.setBound_value(null, 0);
								bounds[0] = b1;
							} 
							bt.setLower_bound(null, bounds[0]); 
							if (bounds[1] != null) {
								bt.setUpper_bound(null, bounds[1]); 
							}	else {
								bt.unsetUpper_bound(null);  // no need for that it is unset after creating
							}
							if(ed2 != null) {
								bt.setElement_type(null, ed2);
							} 
							bound_name = getBoundString(0, bounds, false, false);
							_aggr_name = "_BAG"  + bound_name + "_" + ed2.getName(null);
							bt.setName(null, _aggr_name);

						} else {

							at = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
							if (bounds[0] == null) {
								b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
								b1.setBound_value(null, 0);
								bounds[0] = b1;
							} 
							at.setLower_bound(null, bounds[0]); 
							if (bounds[1] != null) {
								at.setUpper_bound(null, bounds[1]); 
							}	else {
								at.unsetUpper_bound(null);  // no need for that it is unset after creating
							}
							if(ed2 != null) {
								at.setElement_type(null, ed2);
							} 
							bound_name = getBoundString(0, bounds, false, false);
							_aggr_name = "_SET"  + bound_name + "_" + ed2.getName(null);
							at.setName(null, _aggr_name);
						
						
						} // no duplicates - set
					}	
				}
				ia.setDuplicates(null, duplicates);
			} else {
				printVerbose("ignoring previous errors, ERROR: inverse attribute ia is NULL");
			}

			// let's add the type compatibility check here

			if (flag_in_redeclaring) {
//				if (!(isRedeclared_attrCompatible(global_redeclaring, global_redeclared))) {
				if (false) {
					error_count++;
//					printErrorMsg("" + attr.getName(null) + " - incompatible type of inverse attribute in entity " + attr.getParent(null).getName(null), null, true);
				}
				global_redeclaring = null;
				global_redeclared = null;			
				flag_in_redeclaring = false;
			}
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.235------------ */
void InverseClause5(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{}
{
	<INVERSE> (InverseAttr5(ed))+
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.236------------ */
String Label5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.237------------ */
jsdai.SExtended_dictionary_schema.EList_type ListType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EList_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	jsdai.lang.EEntity bt;
	String bound_name;
	boolean unique = false;
}
{
	<LIST> [bounds = BoundSpec5()] <OF> [<UNIQUE>{unique = true;}]
	{
		if (parser_pass == 3) {
			if (whose != null) {
				at = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
//				bound_name = getBoundString(0, bounds, false, unique);
//				at.setName(null, "_LIST" + bound_name + _data_type_name);
//				_data_type_name = "_LIST"  + bound_name + _data_type_name;
				at.setUnique_flag(null, unique); 
			}
		} else 
		if (parser_pass == 4) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
//				bound_name = getBoundString(0, bounds, false, unique);
//				at.setName(null, "_LIST" + bound_name + _data_type_name);
//				_data_type_name = "_LIST"  + bound_name + _data_type_name;
				at.setUnique_flag(null, unique); 
			}
		} else 
		if (parser_pass == 5) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.EList_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
//				bound_name = getBoundString(0, bounds, false, unique);
//				at.setName(null, "_LIST" + bound_name + _data_type_name);
//				_data_type_name = "_LIST"  + bound_name + _data_type_name;
				at.setUnique_flag(null, unique); 
			}
			if (bounds[0] == null) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			}
			at.setLower_bound(null, bounds[0]); 
			if (bounds[1] != null) {
				at.setUpper_bound(null, bounds[1]); 
			} else {
				at.unsetUpper_bound(null);  // no need for that it is unset after creating
			}
		}
		if ((parser_pass == 5) && (at == null)) {
			printDDebug("XP ########### ListType5 is NULL: " + _data_type_name);
		}
	}  
 	bt = BaseType5(at)
 	{
		if (parser_pass > 3) {
			// set element_type
//			if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);
			
			if (!(at.testElement_type(null))) {
				if(bt instanceof jsdai.SExtended_dictionary_schema.EData_type) {
					at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EData_type)bt);
				} else 
				if(bt instanceof jsdai.SExtended_dictionary_schema.EParameter) {
					if (((jsdai.SExtended_dictionary_schema.EParameter)bt).testParameter_type(null)) {			
						at.setElement_type(null, ((jsdai.SExtended_dictionary_schema.EParameter)bt).getParameter_type(null));
		 			} else {
					}
				} else {
				  // express amendment issue
					printDDebug("in ListType5, error while setting Element_type, base type: " + bt + "list type: " +at);
				}
			}
		}
		bound_name = getBoundString(0, bounds, false, unique);
		_data_type_name = "_LIST"  + bound_name + _data_type_name;
		if (at != null) {
			at.setName(null, _data_type_name);
		}
		return at;
 	}	
}




/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.238------------ */
void Literal5() throws jsdai.lang.SdaiException #Literal:
{
	Token t = null;
	String s;
	Integer l;
	int logical_value;
	Double d;
	BitSet b;
	String str_value;
	String x_operand = "";
	jsdai.lang.Binary blt = null;
}
{
	{
		printDebug("In Literal5, starting");
	}
	(t = <BINARY_LITERAL>
	{
		printDebug("In Binary Literal5: " + t.image);

		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.type = 1;
			}
			s = t.image;
			/* should contain % and 1s and 0s.
				1. Drop the initial %
				2. create BitSet with initial size of the length of the remaining string.
				3. Make a loop through all the characters in the string and set or clear the bits in the bitset
			*/
			String bits = s.substring(1);
//                      printDDebug("Initial: " + s + ", after: " + bits + ", length: " + bits.length());

//          bl = (jsdai.lang.Binary)model.createEntityInstance(jsdai.lang.Binary.class);

			blt = new jsdai.lang.Binary(bits);
			if (expression_instances) {
				jjtThis.binary_value = blt;
			}

			b = new BitSet(bits.length());
			for (int i = 0; i < bits.length(); i++) {
				char c = bits.charAt(i);
				if (c == '1') {
					b.set(i);
				} else
				if (c == '0') {
					b.clear(i); // probably unnecessary
				} else {
					System.out.println("Error in binary Literal5 - illegal character: " + c);
				}
			}
			argument_stack.push(b);
			printStack("PUSH: Literal5: <BINARY_LITERAL>: " + b.toString());
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	}
	| t = <INTEGER_LITERAL>
	{
		printDebug("In Integer Literal5: " + t.image);
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.type = 2;
			}
			s = t.image;
			l = new Integer(s);
			if (expression_instances) {
				jjtThis.int_value = l.intValue();
			}
			argument_stack.push(l);
			printStack("PUSH: Literal5: <INTEGER_LITERAL>: " + s);
			if (expression_instances) {
// printDDebug("#2# Literal5: " + s);
//                              x_operand = (String)expression_stack.pop();
				// x_operand = s;
				// expression_stack.push(x_operand);
				// printXStack("PUSH: Literal5: <INTEGER_LITERAL>: " + x_operand);
			}
		}
	}
	| logical_value = LogicalLiteral5()
	{
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.type = 3;
				jjtThis.logical_value = logical_value;
			}
		}
	}
	|t = <REAL_LITERAL>
	{
		printDebug("In Real Literal5: " + t.image);
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.type = 4;
			}
			s = t.image;
			d = new Double(s);
			if (expression_instances) {
				jjtThis.double_value = d.doubleValue();
			}
			argument_stack.push(d);
			printStack("PUSH: Literal5: <REAL_LITERAL>: " + s);
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	}
	| str_value = StringLiteral5()
	{
		if (parser_pass == 5) {
			if (expression_instances) {
				String str_value_mod = replace_schema_name(str_value);
				String str_original_schema_name = get_original_schema_name(str_value);
				jjtThis.type = 5;
				jjtThis.string_value = str_value_mod;
				jjtThis.original_schema_name = str_original_schema_name;
			}
		}
	}
	)
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.239------------ */
void LocalDecl5() throws jsdai.lang.SdaiException #LocalDecl:
{}
{
	{
		printDebug("In LocalDecl5, starting");
	}
	<LOCAL> (LocalVariable5())+ <END_LOCAL> ";"
	{
		printDebug("In LocalDecl5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.240------------ */
void LocalVariable5() throws jsdai.lang.SdaiException #LocalVariable:
{
	Object operand = null;
	Object pop_inst = null;
	Vector variable_ids = new Vector();
	Vector node_variable_ids = new Vector();
	String str = null;
	jsdai.SExtended_dictionary_schema.EParameter par_type = null;
	ECtVariable var = null;
}
{
	{
		printDebug("In LocalVariable5, starting");
	}
	str = VariableId5() {variable_ids.addElement(str); node_variable_ids.addElement("_e_" + str);}("," str = VariableId5(){variable_ids.addElement(str);node_variable_ids.addElement("_e_" + str);})* ":" par_type = ParameterType5() [":=" Expression5()
	{
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.expression_present = true;
			}
			operand = argument_stack.pop();
	printStack("POP: LocalVariable5 Expression5: " + operand);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
	}
	] ";"
	{
		if (parser_pass == 5) {
if (par_type == null) {
	 printDDebug("#123: Parameter5 type = NULL");
	 System.out.println("#123: Parameter5 type = NULL");
} else {
	; // printDDebug("#123: Parameter5 type NOT NULL");
}
			if (expression_instances) {
				jjtThis.variable_ids = node_variable_ids;
				jjtThis.parameter_type = par_type;
			}
			// make ECtVariable instances and add them to the current_scope

			for (int i = 0; i < variable_ids.size(); i++) {
				String id = (String)variable_ids.elementAt(i);
//				var = new ECtVariable(id, par_type);
				
//System.out.println("<about to find var, 04, name: " + id); 
				var = findVariableX(id);
				// temporary solution, perhaps better to move creation of parameters to pass 1 as well, we'll see
//	 printDDebug("#123-2: setting parameter type, variable: " + var + ", parameter: " + par_type );

//	 System.out.println("#123-2: setting parameter type, variable: " + var + ", parameter: " + par_type );


//if (id.equalsIgnoreCase("ct")) {
//System.out.println(">>>>>>>>>>>>>>>> var: " + id + ", par_type: " + par_type + ", variable: " + var + ", scope: " + active_scope);
//}


				var.setType(par_type);
				current_scope.addElement(var);
			}

		} else { // other passes - added to handle interpreted IDs
/*
			for (int i = 0; i < variable_ids.size(); i++) {
				String id = (String)variable_ids.elementAt(i);
				var = new ECtVariable(id, par_type);
				current_scope.addElement(var);
			}
*/
		}
		printDebug("In LocalVariable5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.241------------ */
void LogicalExpression5() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In LogicalExpression5, starting");
	}
	Expression5()
	{
		printDebug("In LogicalExpression5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.242------------ */
int LogicalLiteral5() :
{
	int return_value = -1;
}
{
	{
		printDebug("In Logical Literal5");
	}
	(<FALSE>
	{
		return_value = 1;
		if (parser_pass == 5) {
			argument_stack.push(new Integer(0));
			printStack("PUSH: Literal5: <LOGICAL_LITERAL>: FALSE");
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	}
	| <TRUE>
	{
		return_value = 2;
		if (parser_pass == 5) {
			argument_stack.push(new Integer(1));
			printStack("PUSH: Literal5: <LOGICAL_LITERAL>: TRUE");
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	}
	| <UNKNOWN>
	{
		return_value = 3;
		if (parser_pass == 5) {
			argument_stack.push(new Integer(2));
			printStack("PUSH: Literal5: <LOGICAL_LITERAL>: UNKNOWN");
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	})
	{
		return return_value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.243------------ */
jsdai.SExtended_dictionary_schema.ELogical_type LogicalType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ELogical_type lt = null; 
}
{
	<LOGICAL>
	{
		if (parser_pass == 3) {
			// lt = (jsdai.SExtended_dictionary_schema.ELogical_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLogical_type.class);
			lt = _st_logical;
		}
		else if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						lt = (jsdai.SExtended_dictionary_schema.ELogical_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}
			}
			if (lt == null) {
				// lt = (jsdai.SExtended_dictionary_schema.ELogical_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLogical_type.class);
				lt = _st_logical;
			}
		} 
		return lt;
	}
}


/*-+-------- ISO 10303-14:B.2.133  ---*/
void MapAttributeDeclaration5(jsdai.lang.EEntity partition) throws jsdai.lang.SdaiException #MapAttributeDeclaration:
{
	Object general_reference = null;
	Object qualified_reference = null;
	Object operand = null;
}
{
	{
		printDebug("In MapAttributeDeclaration5, starting");
	}
//	[ TargetParameterRef5() [ IndexQualifier5() ] [ GroupQualifier5() ] "." ] AttributeRef5(null, null, -1, null) [ IndexQualifier5() ] ":=" MapAttrAssgnmtExpr() ";"
	// <SIMPLE_ID> choice conflict, better to reach "." here, but Expression5 in Index5 Qualifier5, number unknown
	// have to fix IndexQualifier5() argument



// Antano	[  LOOKAHEAD(TargetParameterRef5() [ IndexQualifier5(null) ] [ GroupQualifier5() ] "." ) TargetParameterRef5() [ IndexQualifier5(null) ] [ GroupQualifier5() ] "." ] AttributeRef5(null, null, -1, null) [ IndexQualifier5(null) ] ":=" Expression5() ";"


//previous	[  LOOKAHEAD(TargetParameterRef5() [ IndexQualifier5(null) ] [ GroupQualifier5() ] "." ) TargetParameterRef5() [ IndexQualifier5(null) ] [ GroupQualifier5() ] "." ] AttributeRef5(null, null, -1, null) [ IndexQualifier5(null) ] ":=" Expression5() ";"

//	[  LOOKAHEAD(TargetParameterRef5() [ IndexQualifier5(null) ] [ GroupQualifier5() ] "." ) TargetParameterRef5() [ IndexQualifier5(null) ] [ GroupQualifier5() ] "." ] AttributeRef5(null, null, -1, null) [ IndexQualifier5(null) ] ":=" Expression5() ";"


//	[  LOOKAHEAD(TargetParameterRef5() [ IndexQualifier5(null) ] [ GroupQualifier5() ] "." ) general_reference = TargetParameterRef5() 


//	general_reference = TargetParameterRef5() 
	general_reference = TargetParameterRefStrict5() 


	{
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.target_parameter = (jsdai.SExtended_dictionary_schema.ETarget_parameter)general_reference;
				
//				jjtThis.partition = (jsdai.SExtended_dictionary_schema.EMap_partition)partition;
				jjtThis.partition = (jsdai.SExtended_dictionary_schema.EMap_or_view_partition)partition;
			}
		}
	}
	(qualified_reference = Qualifier5(general_reference)
	{
		general_reference = qualified_reference;
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.qualifiers.addElement(qualified_reference);
			}
		}
	}

	)* ":=" Expression5() ";"
	{
		if (parser_pass == 5) {
			operand = argument_stack.pop();
			printStack("POP: MapAttributeDeclarationStmt: " + operand);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
		printDebug("In MapAttributeDeclaration5, ending");
	}
}


/*--------- ISO 10303-14:B.2.134  ---*/
// eliminated
/*
void MapAttrAssgnmtExpr() throws jsdai.lang.SdaiException :
{}
{
	Expression5() | IfExpr5() | CaseExpr5() | ForExpr5()
}
*/

/*-+-------- ISO 10303-14:B.2.135  ---*/
// Object MapCall5(jsdai.SExtended_dictionary_schema.ETarget_parameter tp) throws jsdai.lang.SdaiException :
// 135map_call = [ target_parameter_ref '@' ] map_reference [ partition_qualification ] '(' expression_or_wild { ',' expression_or_wild } ')'

// Object MapCall5(String target_parameter_name) throws jsdai.lang.SdaiException :
Object MapCall5() throws jsdai.lang.SdaiException #MapCall:
{
	Token t = null;
	String name = null;
	Object reference = null;
	jsdai.SExtended_dictionary_schema.EMap_definition md = null;
	jsdai.SExtended_dictionary_schema.EMap_or_view_partition partition = null;
  // here target_parameter can be found from its name and map definition md
	jsdai.SExtended_dictionary_schema.ETarget_parameter tp = null;
	int arg_count = 0;
}
{
	{
//		printDebug("In MapCall5, starting, target Parameter5 name: " + target_parameter_name);
		printDebug("In MapCall5, starting");
	}

//	[ tp = TargetParameterRef5() <OP_AT> ] md = MapRef5() [ partition = PartitionQualification5(md) ] '(' ExpressionOrWild5 ( ',' ExpressionOrWild5 )* ')'

//	md = MapRef5() [ partition = PartitionQualification5(md) ] "(" ExpressionOrWild5() ( "," ExpressionOrWild5())* ")"
	[ LOOKAHEAD(<SIMPLE_ID> <OP_AT>) tp = TargetParameterRef5() <OP_AT> ] md = MapRef5() [ partition = PartitionQualification5(md) ] "(" ExpressionOrWild5() {arg_count++;} ( "," ExpressionOrWild5(){arg_count++;})* ")"

  {
	
		if (expression_instances) {
			jjtThis.map_definition = md;
			if (tp == null) {
				jjtThis.target_parameter_present = false;
			} else {
				jjtThis.target_parameter_present = true;
			}
			jjtThis.target_parameter = tp;
			if (partition == null) {
				jjtThis.partition_present = false;
			} else {
				jjtThis.partition_present = true;
			}
			jjtThis.partition = partition;
			jjtThis.scope = active_scope;
			jjtThis.argument_count = arg_count;

		}
	
		printDebug("In MapCall5, ending");
  	return md;
  }
  
}

////////////// not needed

/*-+-------- ISO 10303-14:B.2.98 ---*/
Object GeneralOrMapCall5() throws jsdai.lang.SdaiException :
{
	Token t = null;
	jsdai.SExtended_dictionary_schema.ETarget_parameter tp = null;
	Object reference = null;
	String name = null;
}
{
	{
		printDebug("In GeneralOrMapCall5, starting");
	}
	// GeneralRef5() [ <MANO_BURBULAS> Map		Call() ]

//	[ LOOKAHEAD({isTargetParameterRef5(this)})tp = TargetParameterRef5() <OP_AT> ] reference = MapCall5(tp) 
	[ LOOKAHEAD(<SIMPLE_ID> <OP_AT>) t = <SIMPLE_ID> <OP_AT> 
	{
		if (t != null) {
			name = t.image;
		}
	}
//	] reference = MapCall5(name) 
	] reference = MapCall5() 
	{
		printDebug("In GeneralOrMapCall5, ending");
		return reference;
	}
}


/////////////////// not needed end



/*-+-------- ISO 10303-14:B.2.136  ---*/
void MapDecl5() throws jsdai.lang.SdaiException #MapDecl : 
{
	jsdai.SExtended_dictionary_schema.EMap_definition md = null;
	jsdai.SExtended_dictionary_schema.EMap_declaration mdc = null;
	String map_name;
	jsdai.lang.EEntity partition = null;
}
{
	{
		target_parameter_order_count = 0;
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	<MAP> map_name = MapId5() <AS> 
	{
		printDebug("In MapDecl5, starting: " + map_name);
		if (parser_pass == 1) {
			// check if a view with this name already exists in the extent.
			md = findMap_definition(map_name, null);
			if (md != null) {
				error_count++;
//				printError("duplicate map name \"" + map_name + "\"");
			} else {
				String wrong_name = findAnyName(map_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + map_name + "\". The same name used for a map and for " + wrong_name);
				}
				md = (jsdai.SExtended_dictionary_schema.EMap_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CMap_definition.class);
				active_scope = md;
printDDebug("active_scope in map 1: " + active_scope);
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				mdc = (jsdai.SExtended_dictionary_schema.EMap_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$map_declaration.class);


//				mdc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				mdc.setParent(null, sd);
				mdc.setDefinition(null, md);

				md.setName(null, map_name);
				// supertypes - added this attribute
//				md.createSupertypes(null);
//				md.createSuper_type(null);
			}
		} else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper5()
			md = findMap_definition(map_name, null);

		  active_scope_extension = new ECtScope(active_scope, md, active_scope_extension, active_scope_string, map_name, map_name.toLowerCase());
  		active_scope_string = "";
			active_scope = md;



			if (parser_pass == 5) {
					if (expression_instances) {
							jjtThis.map_definition = md;
					}
			}

printDDebug("active_scope in map 2: " + active_scope);
			if (md == null) {
				error_count++;
//				printError("MapDecl5 - the map not found: " + map_name);
				printErrorMsg("" + map_name + " - map not found", null, true);
			}
		}
		// createDocumentationEntity2(md, a_token);

		target_parameter_order_count = 0;
	}
	( TargetParameter5(md) ";")+
	(
	  ( 
	    partition = BindingHeader5(md) MapDeclBody5(partition) ( partition = BindingHeader5(md) MapDeclBody5(partition) )* 
// making map_decl_body optional, according to examples in part 14, 
// or maybe just map_project_clause in map_decl_body could be optional
//	    BindingHeader5(md) [ MapDeclBody5() ] ( BindingHeader5(md) MapDeclBody5() )* 
          )
        
	  |
	
	  (
	    MapSubtypeOfClause5(md) partition = SubtypeBindingHeader5(md) MapDeclBody5(partition)
            ( 
//            LOOKAHEAD(SubtypeBindingHeader5(md) MapDeclBody5()) SubtypeBindingHeader5(md) MapDeclBody5() 
              partition = SubtypeBindingHeader5(md) MapDeclBody5(partition) 
            )* 
          )
        )
        <END_MAP> 
	{
		active_scope = null;
 		active_scope_string =  active_scope_extension.getParent_scope_string();
	  active_scope_extension = active_scope_extension.getParent();


	}";"
        

	{
		current_scope = (Vector)scope_stack.pop();
		printDebug("In MapDecl5, ending");



	}
}



/*-+-------- ISO 10303-14:B.2.137  ---*/
void MapDeclBody5(jsdai.lang.EEntity partition) throws jsdai.lang.SdaiException :
{}
{
	{	
		printDebug("In MapDeclBody5, starting");
	}
	 // <FOR> choice conflict, better safer implementation	
	 (( LOOKAHEAD(EntityInstantiationLoop5(partition)) EntityInstantiationLoop5(partition) )+ | MapProjectClause5(partition) | ( <RETURN> Expression5() ";" ))
	{
		printDebug("In MapDeclBody5, ending");
	}
}

/*--------- ISO 10303-14:B.2.138  ---*/
String MapId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*--------- ISO 10303-14:B.2.139  ---*/
void MapProjectClause5(jsdai.lang.EEntity partition) throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In MapProjectClause5, starting");
	}
//	<SELECT> ( MapAttributeDeclaration5(partition) )+
	<SELECT> ( MapAttributeDeclaration5(partition) )*
	{
		printDebug("In MapProjectClause5, ending");
	}
}

/*--------- ISO 10303-14:B.2.140  ---*/
jsdai.SExtended_dictionary_schema.EMap_definition MapRef5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EMap_definition result = null;
	String name;
}
{
	name = MapId5()
	{
		result = findMap_definition(name, null);
		return result;
	}
}

/*-+-------- ISO 10303-14:B.2.141  ---*/
jsdai.SExtended_dictionary_schema.EMap_definition MapReference5() throws jsdai.lang.SdaiException :
{
	Object map_reference = null;

}
{
//      [ SchemaMapRef5() "." ] MapRef5()
	// "." allows to confirm the presence of optional prefix, lookahead 2 is ok.
	[  LOOKAHEAD(2) InterpretedRef5(PI_SCHEMA_MAP) "." ] map_reference = InterpretedRef5(PI_MAP)
//	[ LOOKAHEAD ( { getToken(1).kind == SIMPLE_ID && getToken(2).kind == DOT } ) SchemaMapRef5() "." ] MapRef5()

	{
		return (jsdai.SExtended_dictionary_schema.EMap_definition)map_reference;
	}
}

/*--------- ISO 10303-14:B.2.142  ---*/
void MapSubtypeOfClause5(jsdai.SExtended_dictionary_schema.EMap_definition md) throws jsdai.lang.SdaiException :
{
	// Object supertype_obj = null;
	jsdai.SExtended_dictionary_schema.EMap_definition supertype = null;
	jsdai.SExtended_dictionary_schema.AMap_definition supertypes = null;
}
{
	{
		printDebug("In MapSubtypeOfClause5, starting");
	}
	<SUBTYPE> <OF> "(" supertype = MapReference5() ")" ";"
	{
		if (parser_pass == 2) {
//			supertypes = md.createSupertypes(null);
//			supertypes = md.createSuper_type(null);
//			supertypes.addByIndex(1, supertype);		
//				supertype = (jsdai.SExtended_dictionary_schema.EMap_definition)supertype_obj;
				md.setSuper_type(null, supertype);
		}
		printDebug("In MapSubtypeOfClause5, ending");
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.244------------ */
int MultiplicationLikeOp5() throws jsdai.lang.SdaiException :
{
	int operation = 0;
}
{
	("*" {operation = 1;}
				| "/" {operation = 2;}
				| <DIV> {operation = 3;}
				| <MOD> {operation = 4;}
				| <AND> {operation = 5;}
				| "||" {operation = 6;}
				)
				{
					return operation;
				}
}
/* - LOOKAHEAD 2 - (Columns 3 & 17) --------------------------------------------------- ISO 10303-11:A.2.245------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at columns 3 and 17.
		 Common prefix <SIMPLE_ID>
		 Lookahead of 2 should be used for the earlier expansion.
*/
//  (LOOKAHEAD(2) a_type = EntityRef5() | a_type = TypeRef5(0))
//  TypeRef5()

// new interpreted identifier NamedTypeRef55() introduced into the grammar instead of EntityRef5() | TypeRef5)
// must also cover ViewRef5() now for ExpressX
jsdai.SExtended_dictionary_schema.ENamed_type NamedTypes5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ENamed_type nt = null;
}
{
		{
			printDebug("In NamedTypes5, starting is pass " + parser_pass + ", from: " + whose);
		}
		nt = NamedTypeRef55()
		{
			if (nt != null) {
				if (nt.testName(null)) {
					_data_type_name = "_" + nt.getName(null);
				}
				printDebug("In NamedTypes5, ending in pass: " + parser_pass + ": " + nt.getName(null));
			} else {
				printDebug("In NamedTypes5, ending - null ");
			}

			return nt;
		}
}
/* ------------------------------------------------------------------------------------ introduced by eRRe ------------ */
String NamedTypeId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/* - LOOKAHEAD 2 - (Columns 23 & 36) ------------------------------------------------ ISO 10303-11:A.2.246------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at columns 23 and 36.
		 Common prefix <SIMPLE_ID>
		 Lookahead of 2 should be used for the earlier expansion.
*/
jsdai.SExtended_dictionary_schema.EDeclaration NamedTypeOrRename5(jsdai.lang.SdaiModel interfaced_model) throws jsdai.lang.SdaiException :
{
	String named_type_name;
  String alias_name = null;
	jsdai.SExtended_dictionary_schema.ENamed_type nt = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
	jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
//      jsdai.SExtended_dictionary_schema.EEntity_declaration$used_declaration edc = null;
//      jsdai.SExtended_dictionary_schema.EType_declaration$used_declaration tdc = null;
}
{
	named_type_name = NamedTypeId5()
	{
		if (parser_pass == 2) {
			ed = findInterfacedEntity_definition(interfaced_model, named_type_name);
			if (ed == null) {
				dt = findInterfacedDefined_type(interfaced_model, named_type_name);
				if (dt == null) {
					error_count++;
//					printError("USE FROM: interfaced named type \"" + named_type_name + "\" not found in model: " + interfaced_model.getName());
					if (interfaced_model != null ) {
						printDebug("USE FROM: interfaced named type \"" + named_type_name + "\" not found in model: " + interfaced_model.getName());
					} else {
						printDebug("USE FROM: interfaced named type \"" + named_type_name + "\" not found in model: NULL");
					}
				} else {
//                                      tdc = checkTypeUsedDeclaration(dt);
//                                      if (tdc == null ) {
					if (neededTypeUsedDeclaration(dt)) {
						dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CType_declaration$used_declaration.class);
						dc.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
							// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						// }
						dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)dt);
						hm_current_type_declarations.put(named_type_name.toLowerCase(), dc);
						dt.setTemp(FLAG_USED);
					}
				}
			} else { // entity_definition
//                                      edc = checkEntityUsedDeclaration(ed);
//                                      if (edc == null ) {
					if (neededEntityUsedDeclaration(ed)) {
						dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$used_declaration.class);
						dc.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
							// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						// }
						dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)ed);
						hm_current_entity_declarations.put(named_type_name.toLowerCase(), dc);
						// at this stage, perhaps ECtRenamed object could be already removed and converted back to Integer where needed
						// it could be done at the end of the resolve() stage of ECtRenamed between the parser passes
						// still, just in case, we may have this protection here at least for now
						Object t_object = ed.getTemp();
						if (t_object == null) {
							ed.setTemp(FLAG_USED);
						} else {
							if (t_object instanceof ECtRenamed) {
								((ECtRenamed)t_object).interfaced_flag = FLAG_USED;
							} else {
								System.out.println("<ExpressCompiler> INTERNAL ERROR - NamedTypeOrRename 5 - temp_object: " + t_object + ", entity: " + ed);
							}
						}
					}
			}
		} else
		if (parser_pass == 3) {
		} else
		if (parser_pass == 4) {
		} else
		if (parser_pass == 5) {
		}
	}
	// <SIMPLE_ID> choice conflict, here, interpretation is absolutely necessary for correct choice
	// however, these are IDs, not references, only the name string is important, it seems
	// therefore, I don't care, let it go to EntityId5() always, lookahead 2 to suppress warning
	[<AS> (LOOKAHEAD(2) alias_name = EntityId5() | alias_name = TypeId5())]
//metamata does not like (, but then error here -       [<AS> LOOKAHEAD(2) alias_name = EntityId5() | alias_name = TypeId5()]
	{
		if (parser_pass == 2) {
			if ((alias_name != null) && (dc != null)) {
				((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dc).setAlias_name(null, alias_name);
			}

//                      if (dc instanceof jsdai.SExtended_dictionary_schema.EEntity_declaration$used_declaration) {
//                              dc.set
//                      } else
//                      if (dc instanceof jsdai.SExtended_dictionary_schema.EType_declaration$used_declaration) (
//                      }
		}
		return dc;
	}

}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.247------------ */
void NullStmt5() throws jsdai.lang.SdaiException #NullStmt:
{}
{
	{
		printDebug("In NullStmt5 starting");
	}
	";"
	{
		printDebug("In NullStmt5 ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.248------------ */
jsdai.SExtended_dictionary_schema.ENumber_type NumberType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ENumber_type nt = null; 
}
{
	<NUMBER>
	{
		if (parser_pass == 3) {
			// nt = (jsdai.SExtended_dictionary_schema.ENumber_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CNumber_type.class);
			nt = _st_number;
		}
		else if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						nt = (jsdai.SExtended_dictionary_schema.ENumber_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}
			}
			if (nt == null) {
				// nt = (jsdai.SExtended_dictionary_schema.ENumber_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CNumber_type.class);
				nt = _st_number;
			}
		} 
		return nt;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.249------------ */
int NumericExpression5() throws jsdai.lang.SdaiException :
{
	int value = Integer.MIN_VALUE;
	Object argument;
	Object x_argument = null;
}
{
	SimpleExpression5()
	{
		if (parser_pass == 5) {
			argument = argument_stack.pop();
			printStack("POP: NumericExpression5: " + argument);
			if (expression_instances) {
				// x_argument = expression_stack.pop();
			}
			if (argument instanceof Integer) {
				value = ((Integer)argument).intValue();
				numeric_expression_calculated = true;
			} else
			if (argument instanceof Number) {
				value = ((Number)argument).intValue();
				// not sure if ever happens
				numeric_expression_calculated = false;
			}
			else {
				value = Integer.MIN_VALUE;
				numeric_expression_calculated = false;
			}
		}
		return value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.250------------ */
void OneOf5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EOneof_subtype_expression one_of = null;;
// pre-X	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_or_subtype_expression generic_operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.lang.EEntity ee;
	Object pop_inst = null;
}
{
	<ONEOF> "(" SupertypeExpression5()
	{
		if (parser_pass == 5) {
			one_of = (jsdai.SExtended_dictionary_schema.EOneof_subtype_expression)model.createEntityInstance(jsdai.SExtended_dictionary_schema.COneof_subtype_expression.class);
			generic_operands = one_of.createGeneric_operands(null);
			// operands is now derived instead of explicit 
			// operands = one_of.createOperands(null);
			ee = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: OneOf: " + ee);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
			if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression)  { // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				// operands is now derived instead of explicit 
				// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
			} else 
			if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				// operands is now derived instead of explicit 
				// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
			} else 
			if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
			} else  {
			error_count++;
				printErrorMsg5(" name not available  - internal error in OneOf 1", null, true);
				printEDebug("Internal error in OneOf 1");
			}
		}
	}
	("," SupertypeExpression5()
	{
		if (parser_pass == 5) {
			ee = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: OneOf: " + ee);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
			if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression)  { // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				// operands is now derived instead of explicit 
				// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
			} else 
			if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {  // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				// operands is now derived instead of explicit 
				// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
			} else 
			if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) {  // better with C?
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
			} else {
				error_count++;
				printErrorMsg5(" name not available - internal error in OneOf 2", null, true);
				printEDebug("Internal error in OneOf 2");
			}
		}
	 }
	)* ")"
	{
		if (parser_pass == 5) {
			argument_stack.push(one_of);
			printStack("PUSH: OneOf: " + one_of);
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	}
}

/*-+-------- ISO 10303-14:B.2.149  ---*/
void OrderedByClause5() throws jsdai.lang.SdaiException :
{}
{
//	<ORDERED_BY> ( Expression5() ";" )+
	<ORDERED_BY> Expression5() ( ","  Expression5() )* ";"
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.251------------ */
Object [] Parameter5() throws jsdai.lang.SdaiException #Parameter :
{
	Object [] results = new Object[2];
	results[0] = null;
	results[1] = null;
}
{
	{
		printDebug("Starting Parameter5");
	}
	Expression5()
	{
		if (parser_pass == 5) {
			results[0] = argument_stack.pop();
			printStack("POP: Parameter5: " + results[0]);
			if (expression_instances) {
				// results[1] = expression_stack.pop();
			}
		}
		printDebug("Ending Parameter5");
		return results;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.252------------ */
String ParameterId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	{
		printDebug("In ParameterId5, starting");
	}
	t = <SIMPLE_ID>
	{
		printDebug("In ParameterId5, ending: " + t.image);
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.253------------ */
jsdai.SExtended_dictionary_schema.EParameter ParameterType5() throws jsdai.lang.SdaiException :
{
//      jsdai.lang.EEntity pt = null;
	jsdai.SExtended_dictionary_schema.EData_type pt = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
}
{
	{
		printDebug("In ParameterType5, starting");
	}
	// seems that there is no conflict, lookahead is not needed
//	(LOOKAHEAD(GeneralizedTypes5())par = GeneralizedTypes5() | pt = NamedTypes5() | pt = SimpleTypes5(null))
	(par = GeneralizedTypes5(null) | pt = NamedTypes5(null) | pt = SimpleTypes5(null))
	{
		if (parser_pass == 5) {
			if (pt !=null) {
				// par must be null, of course, NamedTypes5() or SimpleTypes5() was chosen. Parameter5 instance must be created now.
//                              if (create_instances) {
					par = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);
					par.setParameter_type(null, pt);
					par.setName(null, "_named_or_simple_");
//                              }
			} else {
//				System.out.println("@#PT Parameter5 type null ERROR or generalized type");
			}
		}
		if (par == null) {
			printDebug("In ParameterType5, ending - null");
		} else {
			printDebug("In ParameterType5, ending - OK");
		}
		return par;
	}
}

/*--------- ISO 10303-14:B.2.153  ---*/
String PartitionId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*--------- ISO 10303-14:B.2.154  ---*/
jsdai.SExtended_dictionary_schema.EMap_or_view_partition PartitionQualification5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EMap_or_view_partition result = null;
}
{
       <BACKSLASH> result = PartitionRef5(parent)
	 //<BACKSLASH> InterpretedRef5(PI_PARTITION)
	{
		return result;
	}
}

/*--------- ISO 10303-14:B.2.155  ---*/
void PathCondition5() throws jsdai.lang.SdaiException :
{}
{
	"{" ExtentReference5() [ "|" LogicalExpression5() ] "}"
}

/*-+-------- ISO 10303-14:B.2.156  ---*/
void PathQualifier5() throws jsdai.lang.SdaiException :
{}
{
	 ForwardPathQualifier5() | BackwardPathQualifier5()
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.254------------ */
jsdai.SExtended_dictionary_schema.EEntity_definition Population5() throws jsdai.lang.SdaiException #Population :
{
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
}
{
	{
		printDebug("In Population5, starting");
	}

	ed = EntityRef5(null)
	{
		if (parser_pass == 5) {
			// argument_stack.push(ed); - doing it in qualifiable factor already
			printStack("PUSH: Population5, entity reference: " + ed.getName(null));
			if (expression_instances) {
				jjtThis.ed = ed;
				// expression_stack.push(null);
			}
			// creating set type in dictionary
			if (ed != null) {
				// String set_name = "_SET_0_" + _data_type_name;
				// static fields are not generated for each possible no-name aggregate, but on demand only
				// demand, such as attribute type, Parameter5 type or local variable type
				// for Population5, it is not possible to determine by demand, let's distinguish by name.
				String set_name = "_POPULATION_" + _data_type_name;
				printDebug("SET_NAME: " +set_name);
				if (!(isDataTypePresent(set_name))) {
					jsdai.SExtended_dictionary_schema.ESet_type st = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
					st.setName(null, set_name);
					st.setElement_type(null, ed);
					jsdai.SExtended_dictionary_schema.EInteger_bound b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
					b1.setBound_value(null, 0);
					st.setLower_bound(null, b1); 
					st.unsetUpper_bound(null);  // no need for that - it is unset after creating
				} 
			}
		}
		printDebug("In Population5, ending");
		return ed;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.255------------ */
int PrecisionSpec5() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = NumericExpression5()
	{
		return value;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.256------------ */
void Primary5() throws jsdai.lang.SdaiException  :
{
	Object reference = null;
}
{
	{
		printDebug("In Primary5");
	}
	(Literal5() | 
	// choice conflict - ()* and next may have "["
	// also  ()* and next may have simple_id - index_qualifier, attribute_qualifier
	// should not happen in real schemas, I think - until proven I'm wrong.
	// Therefore it is safe to choose Qualifier5 in these cases.
	// adding a lookahead mostly to eliminate the warning

	(reference = QualifiableFactor5() (LOOKAHEAD(2) reference = Qualifier5(reference))*))
}



/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.257------------ */
void ProcedureCallStmt5() throws jsdai.lang.SdaiException #ProcedureCallStmt :
{
	int builtin_proc_id = -1;
	Vector arguments = new Vector();
	Vector expressions = new Vector();
	int argument_count = -1;
	Object operand = null;
	jsdai.SExtended_dictionary_schema.EProcedure_definition pd = null;
}
{
	{
		printDebug("In ProcedureCallStmt5, starting");
	}
	(builtin_proc_id = BuiltInProcedure5() | pd = ProcedureRef5()) [argument_count = ActualParameterList5(arguments, expressions)] ";"
	{
		if (parser_pass == 5) {
			jjtThis.built_in_id = builtin_proc_id;
// System.out.println("OOOO pd = " + pd);
			jjtThis.pd = pd;
			jjtThis.arguments = arguments;
			jjtThis.scope = active_scope;
			jjtThis.argument_count = argument_count;
//                      operand = argument_stack.pop();
//                      printStack("POP: ProcedureCallStmt5, return value: " + operand);
		}
		printDebug("Ending ProcedureCallStmt5: " + builtin_proc_id);
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.258------------ */
void ProcedureDecl5() throws jsdai.lang.SdaiException #ProcedureDecl :
{
	jsdai.SExtended_dictionary_schema.EProcedure_definition pd = null;
}
{
try {
(
	{
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	pd = ProcedureHead5() AlgorithmHead5() (Stmt5())* #ListOfStmt<END_PROCEDURE>
	{
//	active_scope = null;
		function_depth--; 
		if (function_depth > 0) {
			active_scope = getParentFunctionProcedureRuleDefinition(pd);
 			active_scope_string =  active_scope_extension.getParent_scope_string();
		  active_scope_extension = active_scope_extension.getParent();
		} else {
			active_scope = null;
 			active_scope_string =  active_scope_extension.getParent_scope_string();
		  active_scope_extension = active_scope_extension.getParent();
		}



	} ";"
	/* ProcedureHead5() [AlgorithmHead5()] (Stmt5())* <END_PROCEDURE> ";"  - JavaCC ERROR: [ ()* [] [] ] */
	{
		current_scope = (Vector)scope_stack.pop();
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.pd = pd;
			}
		}
	}
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	printErrorMsg5(e.getMessage(), null, true);
	// System.out.println("ERROR RECOVERY: skipping to END_PROCEDURE");
		error_count++;
	recoverFromParseException(END_PROCEDURE, e);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.259------------ */
jsdai.SExtended_dictionary_schema.EProcedure_definition ProcedureHead5() throws jsdai.lang.SdaiException #ProcedureHead :
{
	String name;
	jsdai.SExtended_dictionary_schema.EProcedure_definition pd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration prod;
	String key = "";




	jsdai.SExtended_dictionary_schema.AParameter parameters = null;
	boolean var_present = false;
	boolean first_token = true;
	Token start_token = null;
	Token end_token = null;
}
{
	<PROCEDURE> {function_depth++;} name = ProcedureId5()
	{
		if (parser_pass == 1) {
			printVerbose("Procedure: " + name);
//			pd = findProcedure(name);
//			pd = findProcedure_definition(name);
			pd = findProcedure_definitionX(name);
			if (pd != null) {
						error_count++;
						printDebug("duplicate procedure name \"" + name + "\"");
			} else {
				String wrong_name = findAnyName(name);
				if (wrong_name != null) {
						error_count++;
						printDebug("duplicate name \"" + name + "\". The same name used for a procedure and for " + wrong_name);
				}
			}
		  if (function_depth == 1) {
				pd = (jsdai.SExtended_dictionary_schema.EProcedure_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CProcedure_definition.class);
				active_scope = pd;
			  prod = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$procedure_declaration.class);
				prod.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					// prod.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				prod.setDefinition(null, pd);
				if (flag_oc) {
					pd.setName(null, name);
				} else {
					pd.setName(null, name.toLowerCase());
				}
				parameters = pd.createParameters(null);
			  // is it really needed here in the 5-th pass?
				hm_current_procedure_declarations.put(name.toLowerCase(), prod);
			}
		} else {
			if (function_depth == 1) {
//			pd = findProcedure(name);
//				pd = findProcedure_definition(name);
				pd = findProcedure_definitionX(name);
			  active_scope_extension = new ECtScope(active_scope, pd, active_scope_extension, active_scope_string, name, name.toLowerCase());
  			active_scope_string = "";
				active_scope = pd;
				if (pd == null) {
					error_count++;
					printErrorMsg5("" + name + " - procedure not found", null, true);
					printDebug("ProcedureHead5 - procedure not found: " + name);
				} else {
					parameters = pd.getParameters(null);
				}
			} else {
//				pd = findProcedure_definition(name);
				pd = findProcedure_definitionX(name);
			  active_scope_extension = new ECtScope(active_scope, pd, active_scope_extension, active_scope_string, name, constructProcedureKey(name));
  			active_scope_string = "";
				active_scope = pd;
				if (pd == null) {
					error_count++;
					printErrorMsg5("" + name + " - procedure not found", null, true);
					printDebug("ProcedureHead5 - procedure not found: " + name);
				} else {
					parameters = pd.getParameters(null);
				}
			}
		}
	}
	 ["(" {var_present = false;}[<VAR> {var_present = true;}] FormalParameter5(parameters, var_present, /* null,*/ null) (";" {var_present = false;}[<VAR>{var_present = true;}] FormalParameter5(parameters, var_present, /* null,*/ null))* ")"] ";"
	 {
		if (parser_pass == 5) {
			if (function_depth == 1) {
//				String procedure_description = "";
				String procedure_description = " ";
				int local_function_depth = 1;
			for (int i = 1; ; i++) {
					Token t = getToken(i);
					if (t.kind == PROCEDURE) {
						local_function_depth++;
					}
					if (t.kind == END_PROCEDURE) {
						local_function_depth--;
						if (local_function_depth == 0) {
						 // printDDebug("Break, function depth: " + local_function_depth);
						 break;
						} else {
						 ; // printDDebug("Continue, function depth: " + local_function_depth);
						}

					}
					if (first_token) {
						start_token = t;
						end_token = t;
						first_token = false;
					} else {
						end_token = t;
					}
					// is it needed?
					if (flag_oc) {
						procedure_description += t.image + " ";
					} else {
						procedure_description += t.image.toLowerCase() + " ";
					}
//					procedure_description += t.image;
			}
				// printDDebug("Procedure: " + procedure_description);
				createExpressEntity(pd, procedure_description, start_token, end_token);
//				createExpressEntity(pd, procedure_description);
			}
  	}
	return pd;
    }
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.260------------ */
String ProcedureId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* - LOOKAHEAD 2 - (Columns 3 & 20, 20 & 39, 39 & 56, 56 & 71) ------------------------ ISO 10303-11:A.2.261------------ */
// here, the bnf must be modified to handle interpreted identifiers.

Object QualifiableFactor_old5() throws jsdai.lang.SdaiException  :
{
		Object reference = null;
		Object function_call = null;
		printDebug("In QualifiableFactor5");
		int which_selected = 0;
		Token t = null;
		String name = null;
		global_name = null;
		Object constant = null;
 		jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
}
{
//      (LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | 
//			LOOKAHEAD(2) ConstantFactor5(){which_selected = 2;} | 
//      LOOKAHEAD(2) GeneralRef5(){which_selected = 3;} | 
//      LOOKAHEAD(2) AttributeRef5(null, null, -1){which_selected = 4;} | 
//      Population5(){which_selected = 5;})
//      LOOKAHEAD(t = InterpretedId5()) QFInterpretedId5(t) {which_selected = 3;} | 
//      LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | 
//      BuiltInConstant5(){which_selected = 2;}
//      LOOKAHEAD( { getToken(1) == <SIMPLE_ID>} ) QFInterpretedId5(t) {which_selected = 3;} | 
//      LOOKAHEAD((BuiltInFunction5() | 
//      FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | 
//      BuiltInConstant5(){which_selected = 2;}

// Express X stuff is interpreted, so it will be handled by QFInterpretedId5

//      (LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) QFInterpretedId5(name) {which_selected = 3;} | LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | BuiltInConstant5(){which_selected = 2;})

// (LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | 
//  LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId5(name) {which_selected = 3;} | 
//  BuiltInConstant5(){which_selected = 2;}) | 
//  GeneralOrMapCall5() | 
//  InstanceRef() | 
//  ViewAttributeRef5() | 
//  ViewCall5()

//	(LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | 

/*

	(LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") function_call = FunctionCall5() {which_selected = 1;} | 
		LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId5(name) {which_selected = 3;} |
				

//	    BuiltInConstant5(){which_selected = 2;})
	constant = BuiltInConstant5(){which_selected = 2;} 
  // GeneralOrMapCall5() |   // GeneralRef5() [ <MANO_BURBULAS> MapCall5() ] 
  // ViewAttributeRef5() | 
	// ViewCall5()

*/

	{
		if (flag_oc) {
		  name = getToken(1).image;
		} else {
		  name = getToken(1).image.toLowerCase();
		}
		printDebug("In QualifiableFactor5 - token: " + name);
	}

	(LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") function_call = FunctionCall5() {which_selected = 1;} | 
		LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId5(name) {which_selected = 3;} |
				
//	    BuiltInConstant5(){which_selected = 2;})
	constant = BuiltInConstant5(){which_selected = 2;} 
  // GeneralOrMapCall5() |   // GeneralRef5() [ <MANO_BURBULAS> MapCall5() ] 
  // ViewAttributeRef5() | 
	// ViewCall5()





	
	
	)


	{

		switch (which_selected) {
			case 0:
				printDebug("In QualifiableFactor5 nothing selected: " + name);
				break;
			case 1:
				printDebug("In QualifiableFactor5 selected FunctionCall5: " + name);
				if (parser_pass == 5) {
					// stack is pushed in FunctionCall5
					reference = function_call;
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 2:
				printDebug("In QualifiableFactor5 selected BuiltInConstant5: " + name);
				if (parser_pass == 5) {
					// stack is pushed in BuiltInConstant5
					reference = constant;
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 3:
				printDebug("In QualifiableFactor5 selected InterpretedId5: " + name);
				break;
			default:
				printDebug("In QualifiableFactor5 - error: " + name);
				break;
		}


		return reference;
	}

}

///// ----------------- S

Object QualifiableFactor5() throws jsdai.lang.SdaiException  :
{
		Object reference = null;
		printDebug("In QualifiableFactor5");
		int which_selected = 0;
		Token t = null;
		String name = null;
		global_name = null;
		Object constant = null;
 		jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
		jsdai.SExtended_dictionary_schema.EEntity_definition pop_ed = null;
		jsdai.SExtended_dictionary_schema.EParameter par = null;
		jsdai.SExtended_dictionary_schema.EAttribute attr = null; 
		ECtVariable var = null;
}
{

  {
		if (flag_oc) {
		  name = getToken(1).image;
		} else {
		  name = getToken(1).image.toLowerCase();
		}
		printDebug("In QualifiableFactor5 - token: " + name);
// System.out.println("@#Q in QualifiableFactor5 - active scope: " + active_scope);		
		if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
    }
//    ahead = whatsAhead(this);
	}
	
    (   

/*
		LOOKAHEAD({isDummy(this)}) reference = DummyQualifiableFactor5() 
		{
			printDebug("In QualifiableFactor5 selected DummyQualifiableFactor5: " + name);
			if (parser_pass == 5) {
				// stack is pushed in BuiltInConstant5
				// reference = constant;
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		| 
*/

//		ConstantFactor5() |                // eliminated - builtin_constant | constant_ref
		LOOKAHEAD(BuiltInConstant5()) reference = BuiltInConstant5() 
		{
			printDebug("In QualifiableFactor5 selected BuiltInConstant5: " + name);
			if (parser_pass == 5) {
				// stack is pushed in BuiltInConstant5
				// reference = constant;
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		| 

		LOOKAHEAD({isAttributeRef()}) attr = AttributeRef5(null, ed, 4, null)
		{
// System.out.println("@#A AttributeRef5 in QualifiableFactor5, ed: " + ed);
			printDebug("In QualifiableFactor5 selected Attribute: " + name);
			if (parser_pass == 5) {
				argument_stack.push(attr);
				reference = attr;
				if (attr != null) {
					printStack("PUSH: QF attribute: " + attr.getName(null));
					if (expression_instances) {
						String x_operand = attr.getName(null);
					}
				} else {
						printVerbose("ERROR: QF attribute is NULL");
				}
//				printStack("PUSH: QF attribute: " + attr.getName(null));
			}
		}
		| 


		LOOKAHEAD({isConstantRef()}) reference = ConstantRef5()
		{
			printDebug("In QualifiableFactor5 selected Constant: " + name);
			if (parser_pass == 5) {
				argument_stack.push(reference);
				// reference = constant;
				printStack("PUSH: QF constant: " + reference);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		|

		LOOKAHEAD({isFunctionCall()}) reference = FunctionCall5() 
		{
			printDebug("In QualifiableFactor5 selected FunctionCall5: " + name);
			if (parser_pass == 5) {
				// stack is pushed in FunctionCall5
				// reference = function_call;
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		|   
    

		LOOKAHEAD({isViewAttributeRef()}) reference = ViewAttributeRef5()
		{
			printDebug("In QualifiableFactor5 selected ViewAttributeRef5: " + name);
			if (parser_pass == 5) {
				argument_stack.push(reference);
				printStack("PUSH: QF view_attribute_ref: " + reference);
			}
		}
		|      

		LOOKAHEAD({isSourceParameterRef()}) reference = SourceParameterRef5()
		{
			printDebug("In QualifiableFactor5 selected SourceParameterRef5: " + name);
			if (parser_pass == 5) {
				argument_stack.push(reference);
				printStack("PUSH: QF source_parameter_ref: " + reference);
			}
		}
		|      

		LOOKAHEAD({isTargetParameterRef()}) reference = TargetParameterRef5()
		{
			printDebug("In QualifiableFactor5 selected TargetParameterRef5: " + name);
			if (parser_pass == 5) {
				argument_stack.push(reference);
				printStack("PUSH: QF target_parameter_ref: " + reference);
			}
		}
		|      
		
		LOOKAHEAD({isViewCall()}) reference = ViewCall5()
		{
			printDebug("In QualifiableFactor5 selected ViewCall5: " + name);
			if (parser_pass == 5) {
				// is stack pushed in ViewCall5? to see how to implement
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		|
		       
//  GeneralRef5()
    // GeneralRef5 -> ParameterRef5() | VariableRef5()
    // in this implementation, parameter_ref or variable_ref if not followed by @, otherwise - map call    
    LOOKAHEAD({isParameterRef()}) par = ParameterRef5()
    {
			printDebug("In QualifiableFactor5 selected Parameter5: " + name);
			if (parser_pass == 5) {
				argument_stack.push(par);
				reference = par;
				printStack("PUSH: QF Parameter5: " + par);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
    }
    |
    
    LOOKAHEAD({isVariableRefX()}) var = VariableRef5()
    {
			printDebug("In QualifiableFactor5 selected Variable: " + name);
			if (parser_pass == 5) {
				argument_stack.push(var);
				reference = var;
				printStack("PUSH: QF variable: " + var);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
    }
    |


		LOOKAHEAD({isPopulation()}) pop_ed = Population5()
		{
			printDebug("In QualifiableFactor5 selected Population5: " + name);
			if (parser_pass == 5) {
				// CHECK: are we pushing it the second time here? also in Population5()
				argument_stack.push(pop_ed);
				reference = pop_ed;
				printStack("PUSH: QF Population5: " + pop_ed.getName(null));
			}
		}
		|    
    
//		GeneralOrMapCall5() |              // new X 
    // may have variable_ref or parameter_ref prefix, but handled here as map_call, 
    // lookahead may not be needed, if left last in the order


    // WRONG!!! map_call is supposed to have [ target_parameter_ref @ ] optional prefix, not general_ref
    // general_ref does not include target_parameter_ref 
    // also in our dictionary Parameter5 has nothing to do with target_parameter.


//    LOOKAHEAD({isMapCall(this)}) reference =  GeneralOrMapCall5() 

  
//    LOOKAHEAD({isGeneralOrMapCall()}) reference =  GeneralOrMapCall5() 
    LOOKAHEAD({isMapCall()}) reference =  MapCall5() 
    {
			printDebug("In QualifiableFactor5 selected MapCall5: " + name);
			if (parser_pass == 5) {
				// is pushed in MapCall5 - to be implemented
				// reference = view_call;
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
    }

		|
		
		// hopefully it will not happen in pass 5
		reference = UnrecognizedReference5()
    {
			printDebug("In QualifiableFactor5 nothing selected: " + name);
			if (parser_pass == 5) {
				// is pushed in MapCall5 - to be implemented
				// reference = view_call;

				// experimental stuff, but perhaps push is always needed even for push(null)
				argument_stack.push(reference);
//				reference = unknown;
				printStack("PUSH: QF Unrecognized Object: " + reference);


				if (expression_instances) {
//					printErrorMsg("reference to unknown object in qualifiable_factor: " + name, null, true);
					printErrorMsg("" + name + " - reference to unknown object in an expression", null, true);
  				error_count++;
					// expression_stack.push(null);
				}
			}
    }
	
	
	)


	{
		return reference;
	}

}


UnknownObject UnrecognizedReference5() throws jsdai.lang.SdaiException  #UnrecognizedReference :
{
	Token t;
	String name;
	UnknownObject unknown;
	
}
{
{
			printDebug("In UnrecognizedReference5, starting in pass: " + parser_pass);
}
//    <SIMPLE_ID> [ "(" Expression5() ")" [";"] ]
    t = <SIMPLE_ID> [ "(" [ Expression5() ] ("," Expression5())* ")" ]
//    t = <SIMPLE_ID> [ "(" Expression5()   ("," Expression5())*  ")" ]
//    t = <SIMPLE_ID> [ Expression5()   ("," Expression5())*  ]
//    t = <SIMPLE_ID> [ Expression5() ]

//    t = <SIMPLE_ID> Expression5() 
	{
	
		if (flag_oc) {
			name = t.image;
		} else {
			name = t.image.toLowerCase();
		}
		unknown = new UnknownObject(name, active_scope, sd, express_file);	
	
	// if goes here in pass 5, empty stack exeption may occur.
		if (parser_pass == 5) {
//			argument_stack.push(null);
				if (expression_instances) {
					jjtThis.unknown = unknown;
				}
		}
		printDebug("In UnrecognizedReference5, ending: " + t.image);
		return unknown;
	}

}



Object QualifiableFactor_new_abandoned5() throws jsdai.lang.SdaiException  :
{
		Object reference = null;
		Object function_call = null;
		printDebug("In QualifiableFactor5");
		int which_selected = 0;
		Token t = null;
		String name = null;
		global_name = null;
		Object constant = null;
 		jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
}
{
//      (LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | 
//			LOOKAHEAD(2) ConstantFactor5(){which_selected = 2;} | 
//      LOOKAHEAD(2) GeneralRef5(){which_selected = 3;} | 
//      LOOKAHEAD(2) AttributeRef5(null, null, -1){which_selected = 4;} | 
//      Population5(){which_selected = 5;})
//      LOOKAHEAD(t = InterpretedId5()) QFInterpretedId5(t) {which_selected = 3;} | 
//      LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | 
//      BuiltInConstant5(){which_selected = 2;}
//      LOOKAHEAD( { getToken(1) == <SIMPLE_ID>} ) QFInterpretedId5(t) {which_selected = 3;} | 
//      LOOKAHEAD((BuiltInFunction5() | 
//      FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | 
//      BuiltInConstant5(){which_selected = 2;}

// Express X stuff is interpreted, so it will be handled by QFInterpretedId5

//      (LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) QFInterpretedId5(name) {which_selected = 3;} | LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | BuiltInConstant5(){which_selected = 2;})

// (LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | 
//  LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId5(name) {which_selected = 3;} | 
//  BuiltInConstant5(){which_selected = 2;}) | 
//  GeneralOrMapCall5() | 
//  InstanceRef() | 
//  ViewAttributeRef5() | 
//  ViewCall5()

//	(LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") FunctionCall5() {which_selected = 1;} | 

/*

	(LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") function_call = FunctionCall5() {which_selected = 1;} | 
		LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId5(name) {which_selected = 3;} |
				

//	    BuiltInConstant5(){which_selected = 2;})
	constant = BuiltInConstant5(){which_selected = 2;} 
  // GeneralOrMapCall5() |   // GeneralRef5() [ <MANO_BURBULAS> MapCall5() ] 
  // ViewAttributeRef5() | 
	// ViewCall5()



	(LOOKAHEAD((BuiltInFunction5() | FunctionRef5()) "(") function_call = FunctionCall5() {which_selected = 1;} | 
		LOOKAHEAD({getToken(1).kind == Compiler2Constants.SIMPLE_ID}) reference = QFInterpretedId5(name) {which_selected = 3;} |
				
//	    BuiltInConstant5(){which_selected = 2;})
	constant = BuiltInConstant5(){which_selected = 2;} 
  // GeneralOrMapCall5() |   // GeneralRef5() [ <MANO_BURBULAS> MapCall5() ] 
  // ViewAttributeRef5() | 
	// ViewCall5()

*/

// ######### new approach #################/

	
	{
		if (flag_oc) {
		  name = getToken(1).image;
		} else {
		  name = getToken(1).image.toLowerCase();
		}
		printDebug("In QualifiableFactor5 - token: " + name);
		if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
    }
    ahead = whatsAhead();
	}
	
    (   
		LOOKAHEAD({ahead == WA_ATTRIBUTE_REF}) reference = AttributeRef5(null, ed, 4, null)
		{
		}
		| 

//		ConstantFactor5() |                // eliminated - builtin_constant | constant_ref
		LOOKAHEAD({ahead == WA_BUILTIN_CONSTANT}) reference = BuiltInConstant5() 
		{
		}
		| 

		LOOKAHEAD({ahead == WA_CONSTANT_REF}) reference = ConstantRef5()
		{
		}
		|

		LOOKAHEAD({ahead == WA_FUNCTION_CALL}) reference = FunctionCall5() 
		{
		}
		|   
    
		LOOKAHEAD({ahead == WA_POPULATION}) reference = Population5()
		{
		}
		|    

		LOOKAHEAD({ahead == WA_VIEW_ATTRIBUTE_REF}) reference = ViewAttributeRef5()
		{
		}
		|      
		
		LOOKAHEAD({ahead == WA_VIEW_CALL}) reference = ViewCall5()
		{
		}
		|
		       
//  GeneralRef5()
    // GeneralRef5 -> ParameterRef5() | VariableRef5()
    // in this implementation, parameter_ref or variable_ref if not followed by @, otherwise - map call    
    LOOKAHEAD({ahead == WA_PARAMETER_REF}) reference = ParameterRef5()
    {
    }
    |
    
    LOOKAHEAD({ahead == WA_VARIABLE_REF}) reference = VariableRef5()
    {
    }
    |
    
//		GeneralOrMapCall5() |              // new X 
    // may have variable_ref or parameter_ref prefix, but handled here as map_call, 
    // lookahead may not be needed, if left last in the order
    LOOKAHEAD({ahead == WA_MAP_CALL}) reference =  GeneralOrMapCall5() 
    {
    }


	
	
	)


	{
/*
		switch (which_selected) {
			case 0:
				printDebug("In QualifiableFactor5 nothing selected: " + name);
				break;
			case 1:
				printDebug("In QualifiableFactor5 selected FunctionCall5: " + name);
				if (parser_pass == 5) {
					// stack is pushed in FunctionCall5
					reference = function_call;
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 2:
				printDebug("In QualifiableFactor5 selected BuiltInConstant5: " + name);
				if (parser_pass == 5) {
					// stack is pushed in BuiltInConstant5
					reference = constant;
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 3:
				printDebug("In QualifiableFactor5 selected InterpretedId5: " + name);
				break;
			default:
				printDebug("In QualifiableFactor5 - error: " + name);
				break;
		}

*/
		return reference;
	}

}


///////////// E

Object QFInterpretedId5(String name) throws jsdai.lang.SdaiException :
{
	Object reference = null;
	choice = 0;
	int chosen = 0;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EConstant_definition con = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	ECtVariable var = null;
	Object constant = null;
	jsdai.SExtended_dictionary_schema.EParameter par = null;
	Object varpar = null;
	String attr_key = null;
}
{
	{
//              printDDebug("interpreted ID name in QF: " + name);
		if (parser_pass == 1) {
		} else
		if (parser_pass == 2) {
		} else
		if ((parser_pass == 3) || (parser_pass == 4)) {
			ed = findEntity_definition(name, null);
			if (ed != null) { // interpreted ID is entity ID
				choice = 1;
			} else {
				// not an entity
				// con = findConstant(name);
				// ?
				con = findConstant_definitionX(name);
				if (con != null) { // interpreted ID is constant ID
					choice = 3;
				} else {
				// attribute - not in pass 3, Parameter5, variable - not yet applicable, by default - variable (?)
					choice = 5;
				}
			}
		}       else
		if (parser_pass == 5) {
			ed = findEntity_definition(name, null);
			if (ed != null) { // interpreted ID is entity ID
				choice = 1;
			} else {
				// not an entity
//				con = findConstant_definition(name);
				con = findConstant_definitionX(name);
				if (con != null) { // interpreted ID is constant ID
					choice = 3;
				} else {

					if (active_scope instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
						ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)active_scope;
printDDebug("QF entity-attribute: " + ed.getName(null));
// System.out.println("@X 11 name: " + name + ", ed: " + ed);
						attr = findAttribute(name, ed, -1, null, attr_key); // currently, 0, 1, or 2 is ignored, any attribute is returned.
						if (attr != null) { // interpreted ID is an attribute
							choice = 2;
						}
					} else {


						// varpar = findInNestedScope(name);
//						varpar = findInterpretedId(name);
						varpar = findInterpretedIdX(name);
						if (varpar == null) {
							// seems like an error.
						} else {
							if (varpar instanceof jsdai.SExtended_dictionary_schema.EParameter) {
								par = (jsdai.SExtended_dictionary_schema.EParameter)varpar;
								choice = 4;
							} else
							if (varpar instanceof ECtVariable) {
								var = (ECtVariable)varpar;
								choice = 5;
							} else {
								// seems like an error as well. Although I may need to modify the part about constants in QFInterpretedId5.
						  }

						}
						// Parameter5 or variable - not yet applicable, default - variable
						// choice = 5;
					}
				}
			}
		}
//              printDDebug("QF choice nr: " + choice);
	}
	(LOOKAHEAD({choice == 1}) ed = Population5() {chosen = 1;} | 
		LOOKAHEAD({choice == 2}) attr = AttributeRef5(null, ed, 4, null) {chosen = 2;} | 
		LOOKAHEAD({choice == 3}) constant = ConstantRef5() {chosen = 3;} | 
		LOOKAHEAD({choice == 4}) par = ParameterRef5() {chosen = 4;} | 
		var = VariableRef5() {chosen = 5;})
	{
		switch (chosen) {
			case 0:
				printDebug("In QF nothing selected");
				break;
			case 1:
				printDebug("In QF selected Population5");
				if (parser_pass == 5) {
					argument_stack.push(ed);
					reference = ed;
					printStack("PUSH: QF Population5: " + ed.getName(null));
				}
				break;
			case 2:
				printDebug("In QF selected Attribute");
				if (parser_pass == 5) {
					argument_stack.push(attr);
					reference = attr;
					if (attr != null) {
						printStack("PUSH: QF attribute: " + attr.getName(null));
						if (expression_instances) {
							//String x_operand = (String)expression_stack.pop();
							String x_operand = attr.getName(null);
//            x_operand = "this.get" + x_operand.substring(0,1).toUpperCase() + x_operand.substring(1).toLowerCase() + "(null)";
	    // x_operand = "get" + x_operand.substring(0,1).toUpperCase() + x_operand.substring(1).toLowerCase() + "(null)";
						// expression_stack.push(x_operand);
						// printXStack("PUSH: QF attribute: " + x_operand);
						}
					} else {
						printVerbose("ERROR: QF attribute is NULL");
					}
					// printStack("PUSH: QF attribute: " + attr.getName(null));
				}
				break;
			case 3:
				printDebug("In QF selected Constant");
				if (parser_pass == 5) {
					argument_stack.push(constant);
					reference = constant;
					printStack("PUSH: QF constant: " + constant);
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 4:
				printDebug("In QF selected Parameter5");
				if (parser_pass == 5) {
					argument_stack.push(par);
					reference = par;
					printStack("PUSH: QF Parameter5: " + par);
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			case 5:
				printDebug("In QF selected Variable");
				if (parser_pass == 5) {
					argument_stack.push(var);
					reference = var;
					printStack("PUSH: QF variable: " + var);
					if (expression_instances) {
						// expression_stack.push(null);
					}
				}
				break;
			default:
				printDebug("In QF - error");
				break;
		}
		return reference;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.262------------ */
jsdai.SExtended_dictionary_schema.EAttribute QualifiedAttribute5(jsdai.SExtended_dictionary_schema.EEntity_definition ed, int attr_type) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr2 = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed2 = null;
	Token a_token;
	int attr_type_original;
	boolean to_debug = false;
}
{

{
//	 System.out.println("@X 5-1 - going to GroupQualifier + AttributeQualifier - ed: " + ed);
	printDebug("In QualifiedAttribute5, starting");

		attr_type_original = attr_type;
		if (attr_type == -40) {
			attr_type = 0;
			to_debug = true;
			System.out.println("to debug QualifiedAttribute5: " + ed);
		}


}
	a_token = <SELF> ed2 = GroupQualifier5() 
	
	{
//		 System.out.println("@X 5-2 - GroupQualifier returns  - ed2: " + ed2);
//		 System.out.println("@X 5-2 continued - going to AttributeQualifier with - ed: " + ed + ", ed2: " + ed2 + ", attr_type: " + attr_type + ", last parameter - null");
	}
	
	
//	attr2 = AttributeQualifier5(ed, ed2, attr_type, null)
	attr2 = AttributeQualifier5(ed, ed2, attr_type_original, null)  // for debugging -40 means 0
	{
//		 System.out.println("@X 5-3 - AttributeQualifier returns  - attr2: " + attr2);
		 if (parser_pass == 1) {
		 }
		 else { // pass 2
			if (to_debug) {
				System.out.println("attr2 returned by AttributeQualifier5: " + attr2);
			}
		 }
		 createDocumentationEntity3(attr2, a_token);
// if (attr2 == null)
// printDDebug("After createDocumentation in QualifiedAttribute5 - null");
// else
// printDDebug("After createDocumentation in QualifiedAttribute5: " + attr2.getName(null));
	printDebug("In QualifiedAttribute5, ending");
		 return attr2;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.263------------ */
Object Qualifier5(Object general_reference) throws jsdai.lang.SdaiException :
{
	Object reference = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	jsdai.SExtended_dictionary_schema.EData_type gen_data = null;

	printDebug("In Qualifier5, starting, general_reference: " + general_reference);


	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
		ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)general_reference;
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EParameter) {
		jsdai.lang.EEntity ref_type = null;
		if (((jsdai.SExtended_dictionary_schema.EParameter)general_reference).testParameter_type(null)) {
			ref_type = ((jsdai.SExtended_dictionary_schema.EParameter)general_reference).getParameter_type(null);
// System.out.println("@#Q: Parameter5 type: " + ref_type);
		} else {
			printDDebug("Oo> parameter_type unset in Qualifier5: Qualifier5 = Parameter5: " + general_reference);
		}
		if (ref_type instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)ref_type;
		} else {
			if (ref_type instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
				if (((jsdai.SExtended_dictionary_schema.EAggregation_type)ref_type).testElement_type(null)) {
					gen_data = ((jsdai.SExtended_dictionary_schema.EAggregation_type)ref_type).getElement_type(null);
					if (gen_data instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
printDDebug("OoO Parameter5, Entity in aggregate: " + gen_data.getName(null));
						ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)gen_data;
					} else {
						printDDebug("OoO Parameter5, NOT entity in aggregate: " + gen_data.getName(null));
					}
				} else {
					printDDebug("OoO Parameter5, In aggregate Element5 type not set");
				}
			} {
				printDDebug("OoO Parameter5, NOT entity, not aggregate");
			}

		}
	} else
	if (general_reference instanceof ECtVariable) {
		jsdai.SExtended_dictionary_schema.EParameter par_type;
		jsdai.lang.EEntity ref_type = null;
		par_type = ((ECtVariable)general_reference).getType();

    if (par_type == null) {
    	printDDebug("HiHa variable Parameter5 type NULL: " + general_reference);
    } else
		if (par_type.testParameter_type(null)) {
			ref_type = par_type.getParameter_type(null);
		} else {
			printDDebug("Oo> parameter_type unset in Qualifier5: Qualifier5 = variable: " + general_reference);
		}
		if (ref_type == null) {
			printDDebug("OoO variable type is NULL, possibly implicit: " + general_reference);
		} else 
		if (ref_type instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)ref_type;
		} else {
			if (ref_type instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
				if (((jsdai.SExtended_dictionary_schema.EAggregation_type)ref_type).testElement_type(null)) {
					gen_data = ((jsdai.SExtended_dictionary_schema.EAggregation_type)ref_type).getElement_type(null);
					if (gen_data instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
printDDebug("OoO variable, Entity in aggregate: " + gen_data.getName(null));
						ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)gen_data;
					} else {
						printDDebug("OoO variable, NOT entity in aggregate: " + gen_data.getName(null));
					}
				} else {
					printDDebug("OoO variable, In aggregate Element5 type not set");
				}
			} else {
				printDDebug("OoO variable, NOT entity, not aggregate");
			}

		}
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
		if (((jsdai.SExtended_dictionary_schema.EAggregation_type)general_reference).testElement_type(null)) {
			gen_data = ((jsdai.SExtended_dictionary_schema.EAggregation_type)general_reference).getElement_type(null);
			if (gen_data instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
printDDebug("OoO aggregate, Entity in aggregate: " + gen_data.getName(null));
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)gen_data;
			} else {
				printDDebug("OoO aggregate, NOT entity in aggregate: " + gen_data.getName(null));
			}
		} else {
				printDDebug("OoO aggregate, Element5 not set");
		}
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
		if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)general_reference).testDomain(null)) {
			jsdai.lang.EEntity domain =  ((jsdai.SExtended_dictionary_schema.EExplicit_attribute)general_reference).getDomain(null);
			general_reference = domain;
			if (domain instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)domain;
			}
		}	 
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
		if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)general_reference).testDomain(null)) {
			jsdai.lang.EEntity domain =  ((jsdai.SExtended_dictionary_schema.EDerived_attribute)general_reference).getDomain(null);
			general_reference = domain;
			if (domain instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)domain;
			}
		}	 
	} else 
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
		if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)general_reference).testDomain(null)) {
			jsdai.lang.EEntity domain =  ((jsdai.SExtended_dictionary_schema.EInverse_attribute)general_reference).getDomain(null);
			general_reference = domain;
			if (domain instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)domain;
			}
		}	 
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.ESource_parameter) {
		jsdai.SExtended_dictionary_schema.ESource_parameter sp = (jsdai.SExtended_dictionary_schema.ESource_parameter)general_reference;
		if (sp.testExtent(null)) {
				jsdai.lang.EEntity domain =  ((jsdai.SExtended_dictionary_schema.ESource_parameter)general_reference).getExtent(null);
				general_reference = domain;
				//			ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)sp.getExtent(null); 
				ed = (jsdai.SExtended_dictionary_schema.EEntity_definition)domain;
		}
	} else
	if (general_reference instanceof jsdai.SExtended_dictionary_schema.ETarget_parameter) {
		jsdai.SExtended_dictionary_schema.ETarget_parameter tp = (jsdai.SExtended_dictionary_schema.ETarget_parameter)general_reference;
		if (tp.testExtent(null)) {
				ed =  tp.getExtent(null);

// System.out.println("<UUU> ed: " + ed);

		}
	} else
	if (general_reference == null) {
		printDDebug("OoO General reference is NULL");	
	} else {
		printDDebug("OoO NOT variable, NOT Parameter5, NOT entity, NOT aggregate: " + general_reference);	
	} 
}
{
//      (attr = AttributeQualifier5(ed, null, -1, general_reference) | reference = GroupQualifier5() | IndexQualifier5())
//      (attr = AttributeQualifier5(ed, null, 5, general_reference) | reference = GroupQualifier5() | IndexQualifier5())
//      (attr = AttributeQualifier5(null, ed, 5, general_reference) | reference = GroupQualifier5() | IndexQualifier5())
//      (reference = AttributeQualifier5(null, ed, 5, general_reference) | reference = GroupQualifier5() | IndexQualifier5(){reference = general_reference;})
//      (reference = GeneralAttributeQualifier5(null, ed, 5, general_reference) | reference = GroupQualifier5() | IndexQualifier5(){reference = general_reference;} | PathQualifier5())
//	(reference = AttributeQualifier5(null, ed, 5, general_reference) | reference = GroupQualifier5() | IndexQualifier5(){reference = general_reference;} | PathQualifier5() | ViewAttributeRef5())
	(reference = AttributeQualifier5(ed, ed, 5, general_reference) | 
		reference = GroupQualifier5() | 
		reference = IndexQualifier5(general_reference) 
//		IndexQualifier5(){reference = general_reference;} 
		| 
		PathQualifier5() | 
		ViewAttributeRef5())
	{
// System.out.println("<UOU> reference: " + reference);
	
	
		if (reference == null) {
			printDebug("In Qualifier5, ending with reference = null");
		} else {
			printDebug("In Qualifier5, ending with OK reference");
		}
	// if (reference == null) {
	//      reference = general_reference;
	// }	

//if (reference == null) {
//	Token t = Compiler2.getToken(0);
//	int line = t.beginLine;
//	int column = t.beginColumn;

//	System.out.println("Qualifier is null, line: " + line + ", column: " + column);
//}	
	return reference;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.264------------ */
void QueryExpression5() throws jsdai.lang.SdaiException #QueryExpression :
{
	Object aggregate_source = null; // should be entity_definition
	Object log_exp = null;
	Object query_result = null;
	Object pop_inst_aggr_src = null;
	Object pop_inst_log_exp = null;
	ECtVariable var = null;
	String variable_id = null;
	jsdai.lang.EEntity variable_parameter_type = null;
	jsdai.SExtended_dictionary_schema.EParameter variable_type = null;
	String var_id = "";
	String variable_key = "";
}
{
	{
		printDebug("In QueryExpression5, starting");
		variable_uid++;
		var_id += "_implicit_" + variable_uid + "_";
//		var_id += "_implicit_" + variable_uid + "_" + "_e_";
		variable_id_stack.push(var_id);
		scope_stack.push(current_scope);
		current_scope = new Vector();
// System.out.println("Q - new scope: " + current_scope + ", previous: " + scope_stack.elementAt(0));
	}
	<QUERY> "("  variable_id = VariableId5() "<*" AggregateSource5()
	{
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.query_variable_id = variable_id;
				jjtThis.query_variable_uid = (String)variable_id_stack.peek() + variable_id;
				jjtThis.query_variable_scope_id = (String)variable_id_stack.peek();

// System.out.println("Q - jjtThis.query_variable_id: " + variable_id);
// System.out.println("Q - jjtThis.query_variable_uid: " + (String)variable_id_stack.peek() + variable_id);
// System.out.println("Q - jjtThis.query_variable_scope_id: " + (String)variable_id_stack.peek());

			}

 /*
  		variable_type = (jsdai.SExtended_dictionary_schema.EParameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CParameter.class);

			variable_type.setName(null, "_implicit_variable_");

			if (argument_stack.empty()) {
				printVerbose("ERROR: stack empty - QueryExpression");
			} else {
				aggregate_source = argument_stack.pop();
// System.out.println("Q - aggregate_source: " + aggregate_source);
			}	
				
			printStack("POP: AggregateSource5 in Query: " + aggregate_source);
			printDDebug("aggregate_source : " + aggregate_source);
			
			if (aggregate_source instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute){
					printDDebug("getDomain: attr domain: " + ((jsdai.SExtended_dictionary_schema.EExplicit_attribute)aggregate_source).getDomain(null));
					variable_type.setParameter_type(null, (jsdai.SExtended_dictionary_schema.EData_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)aggregate_source).getDomain(null));
			}else
			if (aggregate_source instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute){
					printDDebug("getDomain: attr domain: " + ((jsdai.SExtended_dictionary_schema.EDerived_attribute)aggregate_source).getDomain(null));
					variable_type.setParameter_type(null, (jsdai.SExtended_dictionary_schema.EData_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)aggregate_source).getDomain(null));
			}else
			if (aggregate_source instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute){
					printDDebug("getDomain: attr domain: " + ((jsdai.SExtended_dictionary_schema.EInverse_attribute)aggregate_source).getDomain(null));
					variable_type.setParameter_type(null, (jsdai.SExtended_dictionary_schema.EData_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)aggregate_source).getDomain(null));
			}
			if (aggregate_source instanceof ECtVariable){
// System.out.println("Q - aggregate_source - variable");
//				printDDebug("getDomain: attr domain: " + ((ECtVariable)aggregate_source).getType());
//				variable_type.setParameter_type(null, ((ECtVariable)aggregate_source).getType().getParameter_type(null));
				jsdai.SExtended_dictionary_schema.EParameter tmp = ((ECtVariable)aggregate_source).getType();
				if (tmp.testParameter_type(null)) {
			  		variable_type.setParameter_type(null, tmp.getParameter_type(null));
// System.out.println("Q - parameter_type SET: " + tmp.getParameter_type(null));
				} else {
		  			printDDebug("Oo> parameter_type unset in query_expression, aggregate_source is variable: " + aggregate_source);
// System.out.println("Q - parameter_type UNSET in aggregate_source");
		  	}
			}

*/

		  active_scope_extension = new ECtScope(active_scope, (jsdai.lang.EEntity)null, active_scope_extension, active_scope_string, "" + variable_uid, variable_id);
 			active_scope_string = "";
//			active_scope = null;  // not using on schema level (yet)

/*

			variable_key = constructImplicitVariableKey(variable_id, variable_uid);

			var = new ECtVariable(variable_id, variable_type, function_depth, variable_key, active_scope, true, 1, (String)variable_id_stack.peek());
//			var = new ECtVariable(variable_id, variable_type, (String)variable_id_stack.peek());

			if (variable_key != null) {
				if (!(hm_current_variables.containsKey(variable_key))) {
					hm_current_variables.put(variable_key, var);
				} else {
					// error - perhaps more than one variable with the same name in a function
				}
			} else {
				System.out.println("INTERNAL ERROR - ImplicitVariable in QueryExpression: " + variable_id + "  - wrong active scope: " + active_scope);
			}

*/
//System.out.println("about to find variable X, QueryExpression5 : " + variable_id); 		
			var = findVariableX(variable_id);

// protection against null pointer exception
if (var == null) {
	System.out.println("INTERNAL ERROR, variable not found in QueryExpression5: " + variable_id);

}  else {
 
			var.scope_id = (String)variable_id_stack.peek();

}

//			var = new ECtVariable(variable_id, variable_type, (String)variable_id_stack.peek());

// System.out.println("Q - currrent scope size before: " + current_scope.size());
			current_scope.addElement(var);
// System.out.println("Q - query variable: " + var);
// System.out.println("Q - currrent scope size after: " + current_scope.size() + ", current scope instance: " + current_scope);

			printStack("POP: AggregateSource5 in Query: " + aggregate_source);
			if (expression_instances) {
				// pop_inst_aggr_src = expression_stack.pop();
			}
		} else { // other passes - added to handle interpreted IDs
			var = new ECtVariable(variable_id, variable_type);		
			current_scope.addElement(var);
		}
	}
	 ( "|" LogicalExpression5()) #QueryLogicalExpression
	{
		if (parser_pass == 5) {
			log_exp = argument_stack.pop();
			printStack("POP: Logical Expression5 in Query: " + log_exp);
			if (expression_instances) {
				// pop_inst_log_exp = expression_stack.pop();
			}
		}
	}

	  ")"
	{
		if (parser_pass == 5) {
			argument_stack.push(query_result);
			printStack("PUSH: Query result: " + query_result);
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
		current_scope = (Vector)scope_stack.pop();
		variable_id_stack.pop();
		active_scope_string = active_scope_extension.getParent_scope_string();
	  active_scope_extension = active_scope_extension.getParent();
		printDebug("In QueryExpression5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.265------------ */

jsdai.SExtended_dictionary_schema.EReal_type RealType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EReal_type rt = null; 
	int precision = 0;
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	boolean precision_present = false;
}
{
	<REAL> ["(" precision = PrecisionSpec5(){precision_present = true;} ")"] 
	{
		if (parser_pass == 3) {
			if ((!precision_present) || (precision == Integer.MIN_VALUE)) {
				rt = _st_real;
			} else {
				rt = (jsdai.SExtended_dictionary_schema.EReal_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReal_type.class);
				_data_type_name = "_REAL_" + precision;
				rt.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, precision);
				rt.setPrecision(null, b1);
			}	
		}
		else if (parser_pass > 3) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						rt = (jsdai.SExtended_dictionary_schema.EReal_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			if (rt == null) {
				if ((!precision_present) || (precision == Integer.MIN_VALUE)) {
					rt = _st_real;
				} else {
					rt = (jsdai.SExtended_dictionary_schema.EReal_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReal_type.class);
					_data_type_name = "_REAL_" + precision;
					rt.setName(null, _data_type_name);
					b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
					b1.setBound_value(null, precision);
					rt.setPrecision(null, b1);
				}	
			}
		}	
		if ((parser_pass == 5) && (precision_present) && (precision != Integer.MIN_VALUE)) {
				rt = (jsdai.SExtended_dictionary_schema.EReal_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReal_type.class);
				_data_type_name = "_REAL_" + precision;
				rt.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, precision);
				rt.setPrecision(null, b1);
		}
		return rt;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.266------------ */
jsdai.SExtended_dictionary_schema.EAttribute ReferencedAttribute5(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAttribute a;
}
{
{
	printDebug("In ReferencedAttribute5, starting");
}
	(a = AttributeRef5(null, ed, 4, null) | a = QualifiedAttribute5(ed, 4))
	{
// System.out.println("AttributeRef5,4, ed: " + ed + ", a: " + a);
	printDebug("In ReferencedAttribute5, ending");
		return a;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.267------------ */
/*  ISO 10303-14.B.2.168 */
void ReferenceClause5(Vector referenced_vector) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EGeneric_schema_definition reference_schema = null;
	String reference_schema_str;
	jsdai.lang.SdaiModel interfaced_model = null;
	boolean items_listed = false;
	jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
	Vector items_vector;
	jsdai.SExtended_dictionary_schema.EReference_from_specification rfs = null;
//	jsdai.SExtended_dictionary_schema.AReferenced_declaration items = null;
	jsdai.SExtended_dictionary_schema.AInterfaced_declaration items = null;

}
{
//      <REFERENCE> <FROM> reference_schema = SchemaRef5()
	<REFERENCE> <FROM> reference_schema = SchemaRef5OrRename5()
	{

		items_vector = new Vector();
// what is that? next line, as found:
//		interfaced_model = reference_schema.findEntityInstanceSdaiModel();
		interfaced_model = findReferencedModel(reference_schema);
		if ((interfaced_model == null) && (parser_pass != 1)) {
			error_count++;
			printErrorMsg5("" + reference_schema + " - schema not found", null, true);
			printDebug("schema not found: " + reference_schema);
		}

// 		if ((parser_pass == 2) && (interfaced_model != null)) {
 		if (interfaced_model != null) {
      			if (interfaced_model.getMode() == jsdai.lang.SdaiModel.NO_ACCESS) {
        			interfaced_model.startReadOnlyAccess();
      			}              
    		}

	}
	 ["(" dc = ResourceOrRename5(interfaced_model){items_listed = true; items_vector.addElement(dc);} ("," dc = ResourceOrRename5(interfaced_model) { items_vector.addElement(dc);})* ")"] [ <AS> ( <SOURCE> | <TARGET> ) ] ";"
	{
		if (parser_pass == 2) {
			rfs = (jsdai.SExtended_dictionary_schema.EReference_from_specification)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReference_from_specification.class);
			jsdai.SExtended_dictionary_schema.ESchema_definition asd = getSchema_definitionFromModel(interfaced_model);
			if (asd != null) {
				rfs.setForeign_schema(null, asd);  // generic_schema_definition;
			}

			rfs.setCurrent_schema(null, sd); // generic_schema_definition;
			if (!items_listed) {
				if (interfaced_model != null) {
					createAllReferencedDeclarations(interfaced_model);
					referenced_vector.addElement(interfaced_model);
				}
			} else {
				items = rfs.createItems(null);			
//System.out.println("XXXOOOO: " + items);
				for (int i = 0; i < items_vector.size(); i++) {
//System.out.println("XXXOO: " + items_vector.elementAt(i));
//					 items.addByIndex(i, (jsdai.SExtended_dictionary_schema.EReferenced_declaration)items_vector.elementAt(i));
//					items.addByIndex(i, (jsdai.SExtended_dictionary_schema.EInterfaced_declaration)items_vector.elementAt(i));
//					((jsdai.SExtended_dictionary_schema.AReferenced_declaration)items).addByIndex(i, (jsdai.SExtended_dictionary_schema.EReferenced_declaration)items_vector.elementAt(i));

					 items.addUnordered((jsdai.SExtended_dictionary_schema.EReferenced_declaration)items_vector.elementAt(i));
				}
			}
		}
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.268------------ */
int RelOp5()  throws jsdai.lang.SdaiException :
{
	int op = 0;
}
{
	("<" {op = 1;}|  ">" {op = 2;} |  "<=" {op = 3;}|  ">=" {op = 4;}|  "<>" {op = 5;}|  "=" {op = 6;}|  ":<>:" {op = 7;}|  ":=:" {op = 8;})
	{
		return op;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.269------------ */
int RelOpExtended5()  throws jsdai.lang.SdaiException  :
{
	int op = 0;
}
{
	(op = RelOp5() | <IN> {op = 9;}| <LIKE> {op = 10;})
	{
		return op;
	}
}
/* - LOOKAHEAD 2 - (Columns 3 & 18, 18 & 31, 31 & 46, 46 & 62) ------------------------ ISO 10303-11:A.2.270------------ */
/*
void RenameId5() :
{}
{
	LOOKAHEAD(2) ConstantId5() | LOOKAHEAD(2) EntityId5() | LOOKAHEAD(2) FunctionId5() | LOOKAHEAD(2) ProcedureId5() | TypeId5()
}
*/
String RenameId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.271------------ */
boolean RepeatControl5() throws jsdai.lang.SdaiException :
{
	Object while_op = null;
	Object until_op = null;
	Object pop_inst_while = null;
	Object pop_inst_until = null;
	boolean increment_present = false;
}
{
	{
		printDebug("In RepeatControl5, starting");
		increment_present = false;
	}
	[IncrementControl5() {increment_present = true;}] [WhileControl5()
	{
		if (parser_pass == 5) {
			while_op = argument_stack.pop();
			printStack("POP: RepeatControl5, while: " + while_op);
			if (expression_instances) {
				// pop_inst_while = expression_stack.pop();
			}
		}
	}
	] [UntilControl5()
	{
		if (parser_pass == 5) {
			until_op = argument_stack.pop();
			printStack("POP: RepeatControl5, until: " + until_op);
			if (expression_instances) {
				// pop_inst_until = expression_stack.pop();
			}
		}
	}
	]
	{
	
		printDebug("In RepeatControl5, ending");
		return increment_present;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.272------------ */
void RepeatStmt5() throws jsdai.lang.SdaiException #RepeatStmt :
{
	Object operand = null;
	String var_id = "";
	boolean increment_present = false;
}
{
	{
		variable_uid++;
		var_id += "_implicit_" + variable_uid + "_";
//		var_id += "_implicit_" + variable_uid + "_" + "_e_";
		variable_id_stack.push(var_id);
		printDebug("In RepeatStmt5, starting");
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	<REPEAT> increment_present = RepeatControl5() ";" (Stmt5())+ <END_REPEAT> ";"
	{
		if (parser_pass == 5) {
//			operand = argument_stack.pop();
//			printStack("POP: RepeatStmt5, return value: " + operand);
		}
		current_scope = (Vector)scope_stack.pop();
		variable_id_stack.pop();
		printDebug("In RepeatStmt5, ending");
		if (increment_present) {
	  	active_scope_string = active_scope_extension.getParent_scope_string();
			active_scope_extension = active_scope_extension.getParent();
		}		
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.273------------ */
int Repetition5() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = NumericExpression5()
	{
		/*
			 this is repetition, therefore only positive numbers make sense
			 so we can use a small negative number for non-computable during parsing
			 and MIN_VALUE still may remain for indeterminate, when it is calculated during parsing to be ? constant
		
			BTW, if indeterminate results in 0 (zero) repetitions, we can use 0 as indeterminate value as well. 
		
			So: 
				MIN_VALUE + flag numeric_expression_calculated = true  - means built-in constant ?
		    for this we may generate repetition value 0
		
				flag numeric_expression_calculated = false - 
					means to calculate during run-time, also different java code needs
		      to be generated
		    for this we may generate repetition value -1  
		*/
		if (!numeric_expression_calculated) {
			value = -1;
		} else {
			if (value == Integer.MIN_VALUE) {
				value = 0;
			}
		}
		return value;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.274------------ */
jsdai.SExtended_dictionary_schema.EDeclaration ResourceOrRename5(jsdai.lang.SdaiModel interfaced_model) throws jsdai.lang.SdaiException :
{
  String alias_name = null;
	jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
}
{
	dc = ResourceRef5(interfaced_model) [<AS> alias_name = RenameId5()]
	{
		if (parser_pass == 2) {
			if ((alias_name != null) && (dc != null)) ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dc).setAlias_name(null, alias_name);

//                      if (dc instanceof jsdai.SExtended_dictionary_schema.EEntity_declaration$used_declaration) {
//                              dc.set
//                      } else
//                      if (dc instanceof jsdai.SExtended_dictionary_schema.EType_declaration$used_declaration) (
//                      }
		}
		return dc;
	}
}

/* - LOOKAHEAD 2 - (Columns 3 & 19, 19 & 33, 33 & 49, 49 & 66) ------------------------ ISO 10303-11:A.2.275------------ */
/*  ISO 10303-14.B.2.176 */
// also must handle ViewRef5 and MapRef5 for Express X

jsdai.SExtended_dictionary_schema.EDeclaration ResourceRef5(jsdai.lang.SdaiModel interfaced_model) throws jsdai.lang.SdaiException :
{
  String referenced_type_name = null;
	jsdai.SExtended_dictionary_schema.ENamed_type nt = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
	jsdai.SExtended_dictionary_schema.EConstant_definition cd = null;
	jsdai.SExtended_dictionary_schema.EFunction_definition fd = null;
	jsdai.SExtended_dictionary_schema.EProcedure_definition pd = null;
	jsdai.SExtended_dictionary_schema.EGlobal_rule gr = null;
	jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
//      jsdai.SExtended_dictionary_schema.EEntity_declaration$referenced_declaration edc = null;
//      jsdai.SExtended_dictionary_schema.EReferenced_declaration$type_declaration tdc = null;
}
{
	// this is stupid as only ConstantRef5() is actually always chosen, no matter how many lookahead symbols.
	// better to write and use only one not confusing non-terminal symbol instead

//  ConstantRef5() | EntityRef5() | FunctionRef5() | ProcedureRef5() | TypeRef5(3)

		referenced_type_name = InterpretedId5()
	{
		if (parser_pass == 2) {
			ed = findInterfacedEntity_definition(interfaced_model, referenced_type_name);
printDDebug("#@# ResourceRef5: ed: " + ed);
			if (ed == null) {
				dt = findInterfacedDefined_type(interfaced_model, referenced_type_name);
				if (dt == null) {
					cd = findInterfacedConstant(interfaced_model, referenced_type_name);
					if (cd == null) {
						fd = findInterfacedFunction(interfaced_model, referenced_type_name);
						if (fd == null) {
							pd = findInterfacedProcedure(interfaced_model, referenced_type_name);
							if (pd == null) {
								gr = findInterfacedRule(interfaced_model, referenced_type_name);
								if (gr == null) {
									error_count++;
									printDebug("REFERENCE FROM: interfaced express type \"" + referenced_type_name + "\" not found in model: " + interfaced_model.getName());
								} else {
								printDebug("interfaced rule: " + referenced_type_name);
								/*
									if (neededRuleReferencedDeclaration(gr)) {
										dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReferenced_declaration$rule_declaration.class);
										dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
										dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EGlobal_rule)gr);
										gr.setTemp(FLAG_REFERENCED);
									}
								*/
								}
							} else {
								if (neededProcedureReferencedDeclaration(pd)) {
									dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CProcedure_declaration$referenced_declaration.class);
									dc.setParent(null, sd);
									// parent_schema is now derived instead of explicit 
									// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
										// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
									// }
									dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EProcedure_definition)pd);
									pd.setTemp(FLAG_REFERENCED);
								}
							}
						} else {
							if (neededFunctionReferencedDeclaration(fd)) {
								dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_declaration$referenced_declaration.class);
								dc.setParent(null, sd);
								// parent_schema is now derived instead of explicit 
								// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
									// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
								// }
								dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EFunction_definition)fd);
								hm_current_function_declarations.put(referenced_type_name.toLowerCase(), dc);
								fd.setTemp(FLAG_REFERENCED);
							}
						}
					} else {
						if (neededConstantReferencedDeclaration(cd)) {
							dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CConstant_declaration$referenced_declaration.class);
							dc.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
								// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							// }
							dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EConstant_definition)cd);
							cd.setTemp(FLAG_REFERENCED);
						}
					}
				} else {
//                                      tdc = checkTypeRef5erencedDeclaration(dt);
//                                      if (tdc == null ) {
					if (neededTypeReferencedDeclaration(dt)) {
						dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReferenced_declaration$type_declaration.class);
						dc.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
							// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						// }
						dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)dt);
						hm_current_type_declarations.put(referenced_type_name.toLowerCase(), dc);
						dt.setTemp(FLAG_REFERENCED);
					}
				}
			} else { // entity_definition
//                                      edc = checkEntityRef5erencedDeclaration(ed);
//                                      if (edc == null ) {
					if (neededEntityReferencedDeclaration(ed)) {
						dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$referenced_declaration.class);
						dc.setParent(null, sd);
						// parent_schema is now derived instead of explicit 
						// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
							// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						// }
						dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)ed);
						hm_current_entity_declarations.put(referenced_type_name.toLowerCase(), dc);
						ed.setTemp(FLAG_REFERENCED);
						// at this stage, perhaps ECtRenamed object could be already removed and converted back to Integer where needed
						// it could be done at the end of the resolve() stage of ECtRenamed between the parser passes
						// still, just in case, we may have this protection here at least for now
						Object t_object = ed.getTemp();
						if (t_object == null) {
							ed.setTemp(FLAG_REFERENCED);
						} else {
							if (t_object instanceof ECtRenamed) {
								((ECtRenamed)t_object).interfaced_flag = FLAG_REFERENCED;
							} else {
								System.out.println("<ExpressCompiler> INTERNAL ERROR - ResourceRef 5 - temp_object: " + t_object + ", entity: " + ed);
							}
						}
					}
			}
		} else
		if (parser_pass == 3) {
		} else
		if (parser_pass == 4) {
		} else
		if (parser_pass == 5) {
		}
		return dc;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.276------------ */
void ReturnStmt5() throws jsdai.lang.SdaiException #ReturnStmt :
{
	Object operand = null;
	Object pop_inst = null;
}
{
	{
		printDebug("In ReturnStmt5, starting");
	}
	<RETURN> ["(" Expression5()
	{
		if (parser_pass == 5) {
			operand = argument_stack.pop();
			printStack("POP: ReturnStmt5: " + operand);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
	}
	")"] ";"
	{
		printDebug("In ReturnStmt5, ending");
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.277 ------------ */
void RuleDecl5() throws jsdai.lang.SdaiException #RuleDecl :
{
	jsdai.SExtended_dictionary_schema.EGlobal_rule gr;
}
{
try {
(
	{
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	gr = RuleHead5() AlgorithmHead5() (Stmt5())* WhereClause5(gr) <END_RULE> 
	{
		active_scope = null;
		active_scope_string =  active_scope_extension.getParent_scope_string();
	  active_scope_extension = active_scope_extension.getParent();
		function_depth = 0;


	} ";"
	/* RuleHead5() [AlgorithmHead5()] (Stmt5())* WhereClause5() <END_RULE> ";" - JavaCC ERROR: [ ()* [] [] ] */
	{
		current_scope = (Vector)scope_stack.pop();
		if (parser_pass == 5) {
			if (expression_instances) {
				jjtThis.global_rule = gr;
			}
		}
	}
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	printErrorMsg5(e.getMessage(), null, true);
	// System.out.println("ERROR RECOVERY: skipping to END_RULE");
		error_count++;
	recoverFromParseException(END_RULE, e);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.278------------ */
jsdai.SExtended_dictionary_schema.EGlobal_rule RuleHead5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EGlobal_rule gr = null;
	jsdai.SExtended_dictionary_schema.AEntity_definition aed = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed;
//      jsdai.SExtended_dictionary_schema.ELocal_declaration$rule_declaration lrd;
	jsdai.SExtended_dictionary_schema.EDeclaration lrd;
	int Index5 = 1;
	String name;
	Token start_token = null;
	Token end_token = null;
	boolean first_token = true;
}
{
	<RULE>  {function_depth++;} name = RuleId5() <FOR> "(" ed = EntityRef5(null)
	{
		if (parser_pass != 5) { // throw out
printVerbose("Global Rule: " + name);
			
			if (model != null ) {
			
			gr = (jsdai.SExtended_dictionary_schema.EGlobal_rule)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CGlobal_rule.class);
			active_scope = gr;
		  lrd = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$rule_declaration.class);
			lrd.setParent(null, sd);
			// parent_schema is now derived instead of explicit 
			// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				// lrd.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
			// }
			if (!(hm_current_rule_declarations.containsKey(name.toLowerCase()))) {
				hm_current_rule_declarations.put(name.toLowerCase(), lrd);
			}
			lrd.setDefinition(null, gr);
			if (flag_oc) {
				gr.setName(null, name);
			} else {
				gr.setName(null, name.toLowerCase());
			}
//                      gr.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
			// now it is inverse
			// gr.createWhere_rules(null);
      aed = gr.createEntities(null);
      if (ed != null) {
      	aed.addByIndex(Index5++, ed);
			}
		} //  model not null
		} else {
			gr = findGlobal_rule(name);
			aed = gr.getEntities(null);
		  active_scope_extension = new ECtScope(active_scope, gr, active_scope_extension, active_scope_string, name, name.toLowerCase());
 			active_scope_string = "";
			active_scope = gr;

		}
	}
	("," ed = EntityRef5(null)
	{
		if (parser_pass == 5) {
    // if (aed != null) {
    //  if (ed != null) {
    //  	aed.addByIndex(Index5++, ed);
		//	}
		// }	
		}
	}
	)* ")" ";"
	{
		if (parser_pass == 5) {
//			String rule_description = "";
			String rule_description = " ";
 			for (int i = 1; ; i++) {
				Token t = getToken(i);
				if (t.kind == WHERE) {
					break;
				}
				if (first_token) {
					start_token = t;
					end_token = t;
					first_token = false;
				} else {
					end_token = t;
				}
				// is it needed?
				if (flag_oc) {
					rule_description += t.image + " ";
				} else {
					rule_description += t.image.toLowerCase() + " ";
				}
//				rule_description += t.image;
	 		}
	
	
			
				// printDDebug("Global rule: " + rule_description);
			createExpressEntity(gr, rule_description, start_token, end_token);
//			createExpressEntity(gr, rule_description);
    }
		return gr;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.279------------ */
String RuleId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.280 ------------ */
void SchemaBody5(Vector used_vector, Vector referenced_vector) throws jsdai.lang.SdaiException :
{
}
{
	(InterfaceSpecification5(used_vector, referenced_vector))* [ConstantDecl5()] (Declaration5() | RuleDecl5())*
}

/* -------------------------------------------------------------------Amendment--------------10303-11:A.2.406 ------------ */
jsdai.SExtended_dictionary_schema.EAttribute RedeclaredAttribute5(jsdai.SExtended_dictionary_schema.EEntity_definition ed, int attr_type) throws jsdai.lang.SdaiException :
{
	Token new_name = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr = null;
	jsdai.SExtended_dictionary_schema.EAttribute attr_current = null;
	jsdai.SExtended_dictionary_schema.EAttribute original_attr = null;
	int attr_type_original;
	boolean to_debug = false;
}
{
	// to finish implementing, also in AttributeDecl5()
{
// System.out.println("@X 4-3 - going to RedeclaredAttribute - ed: " + ed);
	printDebug("In RedeclaredAttribute5, starting");

		attr_type_original = attr_type;
		if (attr_type == -40) {
			attr_type = 0;
			to_debug = true;
			System.out.println("to debug RedeclaredAttribute5: " + ed);
		}

}

	{
		flag_in_redeclaring = true;
	}
//	attr = QualifiedAttribute5(ed, attr_type)  [<RENAMED> new_name = AttributeId5() ]	
	attr = QualifiedAttribute5(ed, attr_type_original)  [<RENAMED> new_name = AttributeId5() ]	
	{

// System.out.println("@X 4-4 - after QualifiedAttribute: new name: " + new_name + ", attr: " + attr);

		if (attr != null) { // what if it is null? an internal error probably, to report
//System.out.println("<1> attr: " + attr + ", hs: " + hs_redeclared_attribute_originals);
			original_attr = getOriginalAttributeForRedeclaring(attr);
//System.out.println("<2> original_attr: " + original_attr);
			if (original_attr != null) { // and what if null - internal error, to report
				if (!(hs_redeclared_attribute_originals.add(original_attr))) {
					// multiple redeclaration of the same attribute, express error
					error_count++;
					printErrorMsg5("" + attr.getName(null) +  " - redeclaring the same attribute in entity " + ed.getName(null) + " more than once", null, true);
				}
//System.out.println("<3> hs: " + hs_redeclared_attribute_originals);
			} else {
//				 System.out.println("<D2008>ORIGINAL attribute NULL in pass 5< current attribute: " + attr + ", new name if RENAMED: " + new_name);
			}

		}


		if (new_name != null) {
			// alternative would be to use a separate attribute alias_name in attribute
			// but it is not really necessary, because it is always possible to get the original name from the redeclared attribute
			// however, the old name is also available in the same scope, therefore it is better to have an additional name.
			// Question: which name should be returned by getName()? old or new? If new - better to change the name, if old - better
			// to have an additional attribute alias_name. Perhaps.
// System.out.println("@X 12 name: " + new_name.image + ", ed: " + ed);
// System.out.println("@X5 11 attr: " + attr);
// System.out.println("@X5 12 new name: " + new_name.image + ", ed: " + ed);

//			attr_current = findAttribute(new_name.image, ed, attr_type, null);

// System.out.println("@X5 13 attr_current: " + attr_current);
			
//			if (attr_current != null) {
				// already exists, do nothing
				// attr_current.setName(null, new_name.image);
//			} else {
				if (attr != null) {
//					String old_name = attr.getName(null);
// System.out.println("@X14 attr: " + attr);
					attr.setName(null, new_name.image);
// System.out.println("@X15 attr: " + attr);
				} else { // attr is NULL
//				 System.out.println("<D2008>CURRENT REDECLARED attribute NULL in pass 5< new name if RENAMED: " + new_name);
				}
//			}
		}
//		flag_in_redeclaring = false;
	printDebug("In RedeclaredAttribute5, ending");
		return attr;
	}
}




/* ------------------------------------------------------------------------------------ Amendment ------------ */
void LanguageVersionId5() throws jsdai.lang.SdaiException :
{
}
{
	"{" ( <SIMPLE_ID> | <INTEGER_LITERAL> | "(" | ")" )* "}"
}



 void AllSchemasInLoop5() throws jsdai.lang.SdaiException :
{
}
{
try {
(
//	 [ LanguageVersionId5() ] ( SchemaDecl5()  | SchemaMapDecl5() | SchemaViewDecl5() | GarbageDeclaration5 ()) 
	 [ LanguageVersionId5() ] ( SchemaDecl5() ";" | SchemaMapDecl5() | SchemaViewDecl5() | GarbageDeclaration5 ()) 
//	 [ LanguageVersionId5() ] ( SchemaDecl5() | SchemaMapDecl5() | SchemaViewDecl5() ) 
)
} catch (ParseException e) {
	System.out.println("EXCEPTION: " + e);
		error_count++;
	System.out.println("ERROR RECOVERY: between schemas skipping to the next schema");
	recoverToNextSchema(e);
}
}


void GarbageDeclaration5() throws jsdai.lang.SdaiException :
{}
{
//	 <GARBAGE>
	 <TYPE>
	{
//		System.out.println("ERROR: Garbage between schemas");
		if (recoverToTheNextSchema(null) < 0) return;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.281 ------------ */
X_AllSchemas AllSchemas5() throws jsdai.lang.SdaiException #AllSchemas:
{}
{
	{
	 	printDebug("In AllSchemas5, starting, pass: " + parser_pass);
		current_scope = new Vector();
		schema_depth = 0;
	
		global_sizeof_restriction_value = -1;
  	global_is_spec_error_sizeof = false;
		global_is_spec_warning_sizeof = false;
		global_is_outer_sizeof = false;

		// current_scope.addElement("Universal Scope");
		// scope_stack.push(current_scope);
		// printScopeStack();
	}
//      (SchemaDecl5() (SchemaDecl5())*)
//	( [<HARD_SEPARATOR>] [ LanguageVersionId5() ]( SchemaDecl5() | SchemaMapDecl5() |  SchemaViewDecl5()  ) 
//	(  [<HARD_SEPARATOR>] [ LanguageVersionId5() ] ( SchemaDecl5() | SchemaMapDecl5() | SchemaViewDecl5()  ) )*)

	  // {
	  	// if (x_data != null) {
	  	//	jjtThis = x_data;
	  	//}
	  // }

try {
(

	  ( AllSchemasInLoop5()  ( AllSchemasInLoop5() )* ) 


//	SchemaDecl5() SchemaViewDecl5()			
//	((SchemaDecl5() | SchemaViewDecl5()) (SchemaDecl5() | SchemaViewDecl5())*)			
	{
		// current__scope = scope_stack.pop();
	 printDebug("In AllSchemas5, ending, pass: " + parser_pass);
	 if (_st_real == null) {
		 printDebug("In AllSchemas5, ending, pass: " + parser_pass + ", _st_real is NULL");
	 } else {
		 printDebug("In AllSchemas5, ending, pass: " + parser_pass + ", _st_real is OK");
	 }
	return jjtThis;
	}
)

} catch (TokenMgrError e) {
//System.out.println("<> 5 pass lexical caught: " + jjtThis);
	return jjtThis;
}

}

void SchemaDecl5() throws jsdai.lang.SdaiException #SchemaDecl :
{
	String schema_name = null;
	String version_name = null;
	Token a_token;
	Vector used_vector = null;
	Vector referenced_vector = null;
}
{
try {
(
	{
		Token t;
		express_x = false;
		scope_stack.push(current_scope);
		current_scope = new Vector();
		function_depth = 0;
	}
	a_token = <SCHEMA>  { schema_depth++; } schema_name = SchemaId5()
	{

		global_schema_name = schema_name.toLowerCase();
//System.out.println("<()>schema: " + schema_name);		
		printVerbose0("Parsing schema: " + schema_name + " in pass " + parser_pass);
//		printVerbose("Starting parsing schema: " + schema_name + " in pass " + parser_pass);
		if ((parser_pass == 1) && (!is_complex_schema)) {
//                      if (model == null) {
				model_name = schema_name.toUpperCase() + "_DICTIONARY_DATA";
// listModels();
// printDDebug("Creating model: : " + model_name);
				// If model for the schema already exists we delete it V.N.
				// FIXME related models that have imported declarations from this model
				//       should also be deleted
				model = repository.findSdaiModel(model_name);
				if(model != null) {
					model.deleteSdaiModel();
					jsdai.lang.SdaiModel relatedModel = 
						repository.findSdaiModel("_EXPRESS_" + schema_name.toUpperCase());
					if(relatedModel != null) {
						relatedModel.deleteSdaiModel();
					}
					relatedModel = 
						repository.findSdaiModel("_DOCUMENTATION_" + schema_name.toUpperCase());
					if(relatedModel != null) {
						relatedModel.deleteSdaiModel();
					}
				}
// 				model = findModel(schema_name);
// 				if (model != null) {
// 					error_count++;
// 					printError("Duplicate schema name: " + schema_name);
// 				}
				model = repository.createSdaiModel(model_name, jsdai.SExtended_dictionary_schema.SExtended_dictionary_schema.class);
				model.startReadWriteAccess();
				sd = (jsdai.SExtended_dictionary_schema.ESchema_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSchema_definition.class);
				if (flag_oc) {
					sd.setName(null, schema_name);
				} else {
					sd.setName(null, schema_name.toUpperCase());
				}
				// add simple types:
				if (model_name.equalsIgnoreCase("SDAI_DICTIONARY_SCHEMA_DICTIONARY_DATA")) {
					if (flag_xt_sdai) {
						// create instances of each simple data type
						_st_integer = (jsdai.SExtended_dictionary_schema.EInteger_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_type.class);
						_st_integer.setName(null, "_INTEGER");
						_st_real = (jsdai.SExtended_dictionary_schema.EReal_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReal_type.class);
						_st_real.setName(null, "_REAL");
						_st_number = (jsdai.SExtended_dictionary_schema.ENumber_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CNumber_type.class);
						_st_number.setName(null, "_NUMBER");
						_st_logical = (jsdai.SExtended_dictionary_schema.ELogical_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLogical_type.class);
						_st_logical.setName(null, "_LOGICAL");
						_st_boolean = (jsdai.SExtended_dictionary_schema.EBoolean_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBoolean_type.class);
						_st_boolean.setName(null, "_BOOLEAN");
						_st_string = (jsdai.SExtended_dictionary_schema.EString_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CString_type.class);
						_st_string.setName(null, "_STRING");
						_st_string.setFixed_width(null, false);
						_st_binary = (jsdai.SExtended_dictionary_schema.EBinary_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBinary_type.class);
						_st_binary.setName(null, "_BINARY");
						_st_binary.setFixed_width(null, false);
						_st_generic = (jsdai.SExtended_dictionary_schema.EData_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type.class);
						_st_generic.setName(null, "_GENERIC");
						// because entity_definition causes bootstrapping problems, here is a temp implementation:
						_st_entity = (jsdai.SExtended_dictionary_schema.EData_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type.class);
						_st_entity.setName(null, "_ENTITY");
//                _st_entity = (jsdai.SExtended_dictionary_schema.EEntity_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_definition.class);
//                                              _std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
//                                              _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//                                              _std_entity.setDefinition(null, _st_entity);
//                                              _st_entity.setName(null, "_ENTITY");
//                                              _st_entity.setInstantiable(null, false);
//                                              _st_entity.setComplex(null, false);
//                                              _st_entity.createSupertypes(null);

//                                  _st_list_string  = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
//printDDebug(".oO0Oo. LIST TYPE CREATED - for standard pass 1");
//                                              _st_list_string.setName(null, "_LIST_STRING");

//                                              jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
//                                              jsdai.SExtended_dictionary_schema.EInteger_bound b1;
//                                              b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
//                                              b1.setBound_value(null, 0);
//                                              bounds[0] = b1;
//                                              _st_list_string.setLower_bound(null, bounds[0]);
//                                              _st_list_string.unsetUpper_bound(null);  // no need for that it is unset after creating
//                                              _st_list_string.setUnique_flag(null, false);
//                                              _st_list_string.setElement_type(null, _st_string);


				    _st_list_generic  = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
// printDDebug(".oO0Oo. LIST TYPE CREATED - for standard pass 1");
//						_st_list_generic.setName(null, "_LIST_GENERIC");
						_st_list_generic.setName(null, "_GENERALLIST_0_GENERIC");

						jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
						jsdai.SExtended_dictionary_schema.EInteger_bound b1;
						b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
						b1.setBound_value(null, 0);
						bounds[0] = b1;
						_st_list_generic.setLower_bound(null, bounds[0]);
						_st_list_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_list_generic.setUnique_flag(null, false);
						_st_list_generic.setElement_type(null, _st_generic);

				    _st_set_generic  = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
//						_st_set_generic.setName(null, "_SET_GENERIC");
						_st_set_generic.setName(null, "_GENERALSET_0_GENERIC");

						_st_set_generic.setLower_bound(null, bounds[0]); 
						_st_set_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_set_generic.setElement_type(null, _st_generic);

				    _st_set_string  = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
//						_st_set_string.setName(null, "_SET_STRING");
						_st_set_string.setName(null, "_GENERALSET_0_STRING");

						_st_set_string.setLower_bound(null, bounds[0]); 
						_st_set_string.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_set_string.setElement_type(null, _st_string);

				    _st_bag_generic  = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
//						_st_bag_generic.setName(null, "_BAG_GENERIC");
						_st_bag_generic.setName(null, "_GENERALBAG_0_GENERIC");

						_st_bag_generic.setLower_bound(null, bounds[0]); 
						_st_bag_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_bag_generic.setElement_type(null, _st_generic);

				    _st_aggregate_generic  = (jsdai.SExtended_dictionary_schema.EAggregation_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAggregation_type.class);
						_st_aggregate_generic.setName(null, "_AGGREGATE_GENERIC");

						_st_aggregate_generic.setElement_type(null, _st_generic);

						_st_schema = (jsdai.SExtended_dictionary_schema.ESchema_definition)sd;
						_st_model  = model;

						if (flag_xt_declarations) {
							_std_integer = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_integer.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_integer.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_integer.setDefinition(null, _st_integer);
							_std_real = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_real.setParent(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							// parent_schema is now derived instead of explicit 
							// _std_real.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_real.setDefinition(null, _st_real);
							_std_number = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_number.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_number.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_number.setDefinition(null, _st_number);
							_std_logical = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_logical.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_logical.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_logical.setDefinition(null, _st_logical);
							_std_boolean = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_boolean.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_boolean.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_boolean.setDefinition(null, _st_boolean);
							_std_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_string.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_string.setDefinition(null, _st_string);
							_std_binary = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_binary.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_binary.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_binary.setDefinition(null, _st_binary);
							_std_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_generic.setDefinition(null, _st_generic);
							_std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_entity.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_entity.setDefinition(null, _st_entity);
//            _std_list_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
//            _std_list_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//            _std_list_string.setDefinition(null, _st_list_string);
							_std_list_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_list_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_list_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_list_generic.setDefinition(null, _st_list_generic);

			  			_std_set_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_generic.setDefinition(null, _st_set_generic); 
			  			_std_set_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_string.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_string.setDefinition(null, _st_set_string); 
			  			_std_bag_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_bag_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_bag_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_bag_generic.setDefinition(null, _st_bag_generic); 
			  			_std_aggregate_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_aggregate_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_aggregate_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_aggregate_generic.setDefinition(null, _st_aggregate_generic); 
						}
					} else {
						if (flag_xt_declarations) {
							_std_integer = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_integer.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_integer.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_integer.setDefinition(null, _st_integer);
							_std_real = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_real.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_real.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_real.setDefinition(null, _st_real);
							_std_number = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_number.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_number.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_number.setDefinition(null, _st_number);
							_std_logical = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_logical.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_logical.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_logical.setDefinition(null, _st_logical);
							_std_boolean = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_boolean.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_boolean.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_boolean.setDefinition(null, _st_boolean);
							_std_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_string.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_string.setDefinition(null, _st_string);
							_std_binary = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_binary.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_binary.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_binary.setDefinition(null, _st_binary);
							_std_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_generic.setDefinition(null, _st_generic);
							_std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_entity.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							//_std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_entity.setDefinition(null, _st_entity);
//            _std_list_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
//    	      _std_list_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//	          _std_list_string.setDefinition(null, _st_list_string);
							_std_list_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_list_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_list_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_list_generic.setDefinition(null, _st_list_generic);
			  			_std_set_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_generic.setDefinition(null, _st_set_generic); 
			  			_std_set_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_string.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_string.setDefinition(null, _st_set_string); 
			  			_std_bag_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_bag_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_bag_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_bag_generic.setDefinition(null, _st_bag_generic); 
			  			_std_aggregate_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_aggregate_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_aggregate_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_aggregate_generic.setDefinition(null, _st_aggregate_generic); 
						}
					}
				} else
				if (model_name.equalsIgnoreCase("EXTENDED_DICTIONARY_SCHEMA_DICTIONARY_DATA")) {
					if (!flag_xt_sdai) {
						// create instances of each simple data type
						_st_integer = (jsdai.SExtended_dictionary_schema.EInteger_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_type.class);
						_st_integer.setName(null, "_INTEGER");
						_st_real = (jsdai.SExtended_dictionary_schema.EReal_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReal_type.class);
						_st_real.setName(null, "_REAL");
						_st_number = (jsdai.SExtended_dictionary_schema.ENumber_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CNumber_type.class);
						_st_number.setName(null, "_NUMBER");
						_st_logical = (jsdai.SExtended_dictionary_schema.ELogical_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLogical_type.class);
						_st_logical.setName(null, "_LOGICAL");
						_st_boolean = (jsdai.SExtended_dictionary_schema.EBoolean_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBoolean_type.class);
						_st_boolean.setName(null, "_BOOLEAN");
						_st_string = (jsdai.SExtended_dictionary_schema.EString_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CString_type.class);
						_st_string.setName(null, "_STRING");
						_st_string.setFixed_width(null, false);
						_st_binary = (jsdai.SExtended_dictionary_schema.EBinary_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBinary_type.class);
						_st_binary.setName(null, "_BINARY");
						_st_binary.setFixed_width(null, false);
						_st_generic = (jsdai.SExtended_dictionary_schema.EData_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type.class);
						_st_generic.setName(null, "_GENERIC");
						// because entity_definition causes bootstrapping problems, here is a temp implementation:
						_st_entity = (jsdai.SExtended_dictionary_schema.EData_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type.class);
						_st_entity.setName(null, "_ENTITY");
//          _st_entity = (jsdai.SExtended_dictionary_schema.EEntity_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_definition.class);
//	        _std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
//          _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//          _std_entity.setDefinition(null, _st_entity);
//	        _st_entity.setName(null, "_ENTITY");
//          _st_entity.setInstantiable(null, false);
//          _st_entity.setComplex(null, false);
//          _st_entity.createSupertypes(null);

// 		     _st_list_string  = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
//printDDebug(".oO0Oo. LIST TYPE CREATED - for standard pass 1");
//         _st_list_string.setName(null, "_LIST_STRING");

//         jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
//         jsdai.SExtended_dictionary_schema.EInteger_bound b1;
//         b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
//         b1.setBound_value(null, 0);
//         bounds[0] = b1;
//    	   _st_list_string.setLower_bound(null, bounds[0]);
//  	     _st_list_string.unsetUpper_bound(null);  // no need for that it is unset after creating
//         _st_list_string.setUnique_flag(null, false);
//    	   _st_list_string.setElement_type(null, _st_string);

				    _st_list_generic  = (jsdai.SExtended_dictionary_schema.EList_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CList_type.class);
// printDDebug(".oO0Oo. LIST TYPE CREATED - for standard pass 1");
//						_st_list_generic.setName(null, "_LIST_GENERIC");
						_st_list_generic.setName(null, "_GENERALLIST_0_GENERIC");

						jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
						jsdai.SExtended_dictionary_schema.EInteger_bound b1;
						b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
						b1.setBound_value(null, 0);
						bounds[0] = b1;
						_st_list_generic.setLower_bound(null, bounds[0]);
						_st_list_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_list_generic.setUnique_flag(null, false);
						_st_list_generic.setElement_type(null, _st_generic);

				    _st_set_generic  = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
//						_st_set_generic.setName(null, "_SET_GENERIC");
						_st_set_generic.setName(null, "_GENERALSET_0_GENERIC");

						_st_set_generic.setLower_bound(null, bounds[0]); 
						_st_set_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_set_generic.setElement_type(null, _st_generic);

				    _st_set_string  = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
//						_st_set_string.setName(null, "_SET_STRING");
						_st_set_string.setName(null, "_GENERALSET_0_STRING");

						_st_set_string.setLower_bound(null, bounds[0]); 
						_st_set_string.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_set_string.setElement_type(null, _st_string);

				    _st_bag_generic  = (jsdai.SExtended_dictionary_schema.EBag_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CBag_type.class);
//						_st_bag_generic.setName(null, "_BAG_GENERIC");
						_st_bag_generic.setName(null, "_GENERALBAG_0_GENERIC");

						_st_bag_generic.setLower_bound(null, bounds[0]); 
						_st_bag_generic.unsetUpper_bound(null);  // no need for that it is unset after creating
						_st_bag_generic.setElement_type(null, _st_generic);

				    _st_aggregate_generic  = (jsdai.SExtended_dictionary_schema.EAggregation_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAggregation_type.class);
						_st_aggregate_generic.setName(null, "_AGGREGATE_GENERIC");

						_st_aggregate_generic.setElement_type(null, _st_generic);

						_st_schema = (jsdai.SExtended_dictionary_schema.ESchema_definition)sd;
						_st_model  = model;

						if (flag_xt_declarations) {
							_std_integer = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_integer.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_integer.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_integer.setDefinition(null, _st_integer);
							_std_real = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_real.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_real.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_real.setDefinition(null, _st_real);
							_std_number = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_number.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_number.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_number.setDefinition(null, _st_number);
							_std_logical = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_logical.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_logical.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_logical.setDefinition(null, _st_logical);
							_std_boolean = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_boolean.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_boolean.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_boolean.setDefinition(null, _st_boolean);
							_std_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_string.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_string.setDefinition(null, _st_string);
							_std_binary = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_binary.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_binary.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_binary.setDefinition(null, _st_binary);
							_std_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_generic.setDefinition(null, _st_generic);
							_std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_entity.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_entity.setDefinition(null, _st_entity);
//            _std_list_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
//            _std_list_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//  	        _std_list_string.setDefinition(null, _st_list_string);
							_std_list_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_list_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_list_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_list_generic.setDefinition(null, _st_list_generic);
			  			_std_set_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_generic.setDefinition(null, _st_set_generic); 
			  			_std_set_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_string.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_string.setDefinition(null, _st_set_string); 
			  			_std_bag_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_bag_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_bag_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_bag_generic.setDefinition(null, _st_bag_generic); 
			  			_std_aggregate_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_aggregate_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_aggregate_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_aggregate_generic.setDefinition(null, _st_aggregate_generic); 
						} // declarations
					} else {
						if (flag_xt_declarations) {
							_std_integer = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_integer.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_integer.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_integer.setDefinition(null, _st_integer);
							_std_real = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_real.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_real.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_real.setDefinition(null, _st_real);
							_std_number = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_number.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_number.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_number.setDefinition(null, _st_number);
							_std_logical = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_logical.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_logical.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_logical.setDefinition(null, _st_logical);
							_std_boolean = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_boolean.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_boolean.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_boolean.setDefinition(null, _st_boolean);
							_std_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_string.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_string.setDefinition(null, _st_string);
							_std_binary = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_binary.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_binary.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_binary.setDefinition(null, _st_binary);
							_std_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
							_std_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_generic.setDefinition(null, _st_generic);
							_std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_entity.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_entity.setDefinition(null, _st_entity);
//            _std_list_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
//            _std_list_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//            _std_list_string.setDefinition(null, _st_list_string);
							_std_list_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_list_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
							// _std_list_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
							_std_list_generic.setDefinition(null, _st_list_generic);
			  			_std_set_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_generic.setDefinition(null, _st_set_generic); 
			  			_std_set_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_set_string.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_set_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_set_string.setDefinition(null, _st_set_string); 
			  			_std_bag_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_bag_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_bag_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_bag_generic.setDefinition(null, _st_bag_generic); 
			  			_std_aggregate_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
							_std_aggregate_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
							// _std_aggregate_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
							_std_aggregate_generic.setDefinition(null, _st_aggregate_generic); 
						}
					}
				} else {
					if (flag_xt_declarations) {
						_std_integer = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_integer.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
						// _std_integer.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_integer.setDefinition(null, _st_integer);
						_std_real = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_real.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
						// _std_real.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_real.setDefinition(null, _st_real);
						_std_number = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_number.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
						// _std_number.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_number.setDefinition(null, _st_number);
						_std_logical = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_logical.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
						// _std_logical.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_logical.setDefinition(null, _st_logical);
						_std_boolean = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_boolean.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
						// _std_boolean.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_boolean.setDefinition(null, _st_boolean);
						_std_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_string.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
						// _std_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_string.setDefinition(null, _st_string);
						_std_binary = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_binary.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
						// _std_binary.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_binary.setDefinition(null, _st_binary);
						_std_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$implicit_declaration.class);
						_std_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
						// _std_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_generic.setDefinition(null, _st_generic);
						_std_entity = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_entity.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
						// _std_entity.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_entity.setDefinition(null, _st_entity);
// 	        _std_list_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
//          _std_list_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
//  	      _std_list_string.setDefinition(null, _st_list_string);
						_std_list_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_list_generic.setParent(null, sd);
							// parent_schema is now derived instead of explicit 
						// _std_list_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
						_std_list_generic.setDefinition(null, _st_list_generic);
		  			_std_set_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_set_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
						// _std_set_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
						_std_set_generic.setDefinition(null, _st_set_generic); 
		  			_std_set_string = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_set_string.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
						// _std_set_string.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
						_std_set_string.setDefinition(null, _st_set_string); 
		  			_std_bag_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_bag_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
						// _std_bag_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
						_std_bag_generic.setDefinition(null, _st_bag_generic); 
		  			_std_aggregate_generic = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CData_type_declaration$local_declaration.class);
						_std_aggregate_generic.setParent(null, sd); 
							// parent_schema is now derived instead of explicit 
						// _std_aggregate_generic.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd); 
						_std_aggregate_generic.setDefinition(null, _st_aggregate_generic); 
					}
				}

//                      }
		} else {
			if (is_complex_schema) {
				schema_name = schema_name.substring(3);
// printDDebug("##RR COMPLEX SCHEMA: " + schema_name);
			}
			model = findModel(schema_name);
			if (model == null) {
				printDebug("schema not found: " + schema_name);
			}
			
			hm_current_entity_declarations = (HashMap)hm_entity_declarations.get(model);
			hm_current_type_declarations = (HashMap)hm_type_declarations.get(model);
			hm_current_function_declarations = (HashMap)hm_function_declarations.get(model);
			hm_current_procedure_declarations = (HashMap)hm_procedure_declarations.get(model);
			hm_current_rule_declarations = (HashMap)hm_rule_declarations.get(model);
			hm_current_constant_declarations = (HashMap)hm_constant_declarations.get(model);
			hm_current_subtype_constraint_declarations = (HashMap)hm_subtype_constraint_declarations.get(model);
			hm_current_parameters = (HashMap)hm_parameters.get(model);
			hm_current_variables = (HashMap)hm_variables.get(model);
			
			sd = getSchema_definitionFromModel(model);

		  active_scope_extension = new ECtScope(active_scope, sd, active_scope_extension, active_scope_string, schema_name, schema_name.toLowerCase());
 			active_scope_string = "";
			active_scope = null;  // not using on schema level (yet)


			if (expression_instances) {
				jjtThis.model = model;
				jjtThis.schema_name = schema_name;
// if (model == null) printDDebug("model = NULL, schema: " + schema_name + ", pass: " + parser_pass + ", complex: " + is_complex_schema);
// else printDDebug("model = OK, schema: " + schema_name + ", pass: " + parser_pass + ", complex: " + is_complex_schema);
		
//System.out.println("<()>  node: " +	sd.getName(null));	
				jjtThis.schema_definition = (jsdai.SExtended_dictionary_schema.ESchema_definition)sd;
//System.out.println("KUKU>> name: " + jjtThis.schema_name + ", sd: " + jjtThis.schema_definition);
			}
// if (sd == null)
// printDDebug("##RR SCHEMA DEFINITION NOT FOUND");
//                      sd = (jsdai.SExtended_dictionary_schema.ESchema_definition)model.getDefined_schema();
		}
		createDocumentationEntity2(sd, a_token);

	}
	[version_name = SchemaVersionId5()]
	{
// System.out.println("Schema version: " + version_name);
		if (parser_pass == 1) {
			if (version_name != null) {
				sd.setIdentification(null, version_name);
			}
		}
	if ((parser_pass == 2) && (!is_complex_schema)) {
		used_vector = new Vector();
		referenced_vector = new Vector();
		used_vectors.addElement(used_vector);
		referenced_vectors.addElement(referenced_vector);
		model_vector.addElement(model); // probably not really necessary, the same order in the repository.
	}
	 if (_st_real == null) {
		 printDebug("In SchemaDecl5 before body, pass: " + parser_pass + ", _st_real is NULL");
	 } else {
		 printDebug("In SchemaDecl5 before body, pass: " + parser_pass + ", _st_real is OK");
	 }

	}
//	";" SchemaBody5(used_vector, referenced_vector) <END_SCHEMA>  { schema_depth--; } ";"
	";" SchemaBody5(used_vector, referenced_vector) <END_SCHEMA>
	{
 		// this line in the alt version without ";" only
 		schema_depth--;
 		current_scope = (Vector)scope_stack.pop();
		active_scope = null;
		active_scope_string = active_scope_extension.getParent_scope_string();
		active_scope_extension = active_scope_extension.getParent();

	 if (_st_real == null) {
		 printDebug("In SchemaDecl5, ending, pass: " + parser_pass + ", _st_real is NULL");
	 } else {
		 printDebug("In SchemaDecl5, ending, pass: " + parser_pass + ", _st_real is OK");
	 }

	}
)
} catch (ParseException e) {

//System.out.println("<(!)>: " + schema_name);
//	recoverFromParseException(END_SCHEMA, e);
//			System.out.println(e.getMessage());
	if (recoverToTheNextSchema(e) < 0) return;
}

//} catch (TokenMgrError e) {
////System.out.println("<> 5 pass lexical caught: " + jjtThis);
////	return jjtThis;

////    jjtree.popNode();
//  	  jjtree.closeNodeScope(jjtThis, true);
//    jjtreeCloseNodeScope(jjtThis);
//}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.282 ------------ */
String SchemaId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/*-+-------- ISO 10303-14:B.2.182  ---*/
void SchemaMapBodyElement5() throws jsdai.lang.SdaiException :
{}
{
//      FunctionDecl5() | ProcedureDecl5() | ViewDecl5() | MapDecl5() | DependentMapDecl5() | CreateMapDecl() | RuleDecl5()
	// <PARTITION> <SIMPLE_ID> conflict bitween <VIEW> <MAP> - why?  What about <VIEW> and <MAP>? 
	// C R A Z Y !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	// the conflict only surfaces when ViewDecl5(), MapDecl5() and DependentMapDecl5() are all three together in any order.
	 FunctionDecl5() | ProcedureDecl5() | LOOKAHEAD(ViewDecl5()) ViewDecl5() | MapDecl5() | DependentMapDecl5() | RuleDecl5()
//	 ViewDecl5() | MapDecl5() |  DependentMapDecl5()
// OK	 MapDecl5() |  DependentMapDecl5()
// OK	 ViewDecl5() | DependentMapDecl5()
// OK	 MapDecl5() |  DependentMapDecl5()
//	 ViewDecl5() | MapDecl5() |  DependentMapDecl5()
//	 DependentMapDecl5() | MapDecl5() | ViewDecl5()  
}

/*-+-------- ISO 10303-14:B.2.183  ---*/
void SchemaMapBodyElementList5() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In SchemaMapBodyElementList5");
	}
	( SchemaMapBodyElement5() )+
}

/*-+-------- ISO 10303-14:B.2.184  ---*/
void SchemaMapDecl5() throws jsdai.lang.SdaiException :
{
	String schema_map_name;
	String version_name = null;
	Token a_token;
	Vector used_vector = null;
	Vector referenced_vector = null;
}
{
	{
		express_x = true;
		printDebug("In SchemaMapDecl5");
		scope_stack.push(current_scope);
		current_scope = new Vector();
		function_depth = 0;
	}
	a_token = <SCHEMA_MAP> schema_map_name = SchemaMapId5() 
	{
		printVerbose("Starting parsing schema_map: " + schema_map_name + " in pass " + parser_pass);
  	if (parser_pass == 1) {
//                      if (model == null) {
				model_name = schema_map_name.toUpperCase() + "_DICTIONARY_DATA";
// listModels();
// System.out.println("Creating model: : " + model_name);
				model = repository.findSdaiModel(model_name);
				if(model != null) {
					model.deleteSdaiModel();
					jsdai.lang.SdaiModel relatedModel = 
						repository.findSdaiModel("_EXPRESS_" + schema_map_name.toUpperCase());
					if(relatedModel != null) {
						relatedModel.deleteSdaiModel();
					}
					relatedModel = 
						repository.findSdaiModel("_DOCUMENTATION_" + schema_map_name.toUpperCase());
					if(relatedModel != null) {
						relatedModel.deleteSdaiModel();
					}
				}
// 				model = findModel(schema_map_name);
// 				if (model != null) {
// 					error_count++;
// 					printError("Duplicate schema_map name: " + schema_map_name);
// 				}
				model = repository.createSdaiModel(model_name, jsdai.SExtended_dictionary_schema.SExtended_dictionary_schema.class);
				model.startReadWriteAccess();
				sd = (jsdai.SExtended_dictionary_schema.ESchema_map_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSchema_map_definition.class);
				if (flag_oc) {
					sd.setName(null, schema_map_name);
				} else {
					sd.setName(null, schema_map_name.toUpperCase());
				}




//		createDocumentationEntity2(sd, a_token);

		} else {
			if (is_complex_schema) {
				schema_map_name = schema_map_name.substring(3);
			}
			model = findModel(schema_map_name);
			if (model == null) {
//				printError("schema_view not found: " + schema_map_name);
				printErrorMsg("" + schema_map_name + " - schema map not found", null, true);
			}
			sd = getGeneric_schema_definitionFromModel(model);

		  active_scope_extension = new ECtScope(active_scope, sd, active_scope_extension, active_scope_string, schema_map_name, schema_map_name.toLowerCase());
 			active_scope_string = "";
			active_scope = null;  // not using on schema level (yet)


			if (expression_instances) {
//				jjtThis.model = model;
//				jjtThis.schema_map_name = schema_map_name;
//				jjtThis.schema_definition = (jsdai.SExtended_dictionary_schema.ESchema_definition)sd;
			}
		}
		// createDocumentationEntity2(sd, a_token);
	if (parser_pass == 2) {

    // needed for chained use froms to work correctly
		used_vector = new Vector();
		used_vectors.addElement(used_vector);

		referenced_vector = new Vector();
		referenced_vectors.addElement(referenced_vector);
		model_vector.addElement(model); // probably not really necessary, the same order in the repository.
	}

	}
	";" ( ReferenceClause5(referenced_vector) )+ [ ConstantDecl5() ] SchemaMapBodyElementList5() <END_SCHEMA_MAP> ";"
	{
 		current_scope = (Vector)scope_stack.pop();
		active_scope = null;
		active_scope_string = active_scope_extension.getParent_scope_string();
		active_scope_extension = active_scope_extension.getParent();

		express_x = false;
	}
}

/*--------- ISO 10303-14:B.2.185  ---*/
String SchemaMapId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*-+-------- ISO 10303-14:B.2.186  ---*/
// String SchemaRef5OrRename5() throws jsdai.lang.SdaiException :
jsdai.SExtended_dictionary_schema.EGeneric_schema_definition SchemaRef5OrRename5() throws jsdai.lang.SdaiException :
{
  // String schema_name = null;
  jsdai.SExtended_dictionary_schema.EGeneric_schema_definition gsd = null;
}
{
	// ":" confirms optional prefix, lookahead 2 is OK
	[  LOOKAHEAD(2) GeneralSchemaAliasId5() ":" ] gsd = GeneralSchemaRef5()
	{
	    // if we operate not with name string here, we need to keep info about alias for further references to th schema by alias id.	
	    if (gsd == null) {
	    	printDDebug("SchemaRef5OrRename5 - NULL in pass " + parser_pass);
	    }
	    return gsd;
	    // return schema_name;
	}
}

/*-+------- ISO 10303-14:B.2.187  ---*/
void SchemaViewBodyElement5() throws jsdai.lang.SdaiException :
{}
{
	 FunctionDecl5() | ProcedureDecl5() | ViewDecl5() | RuleDecl5()
}

/*-+-------- ISO 10303-14:B.2.188  ---*/
void SchemaViewBodyElementList5() throws jsdai.lang.SdaiException :
{}
{
	( SchemaViewBodyElement5() )+
}

/*-+-------- ISO 10303-14:B.2.189  ---*/
void SchemaViewDecl5() throws jsdai.lang.SdaiException :
{
	String schema_view_name;
	String version_name = null;
	Token a_token;
	Vector used_vector = null;
	Vector referenced_vector = null;
}
{
	{
		express_x = true;
		printDebug("In SchemaViewDecl5");
		scope_stack.push(current_scope);
		current_scope = new Vector();
		function_depth = 0;
	}
	a_token = <SCHEMA_VIEW>  schema_view_name = SchemaViewId5() 
	{
		printVerbose("Starting parsing schema_view: " + schema_view_name + " in pass " + parser_pass);
		if (parser_pass == 1) {
//                      if (model == null) {
				model_name = schema_view_name.toUpperCase() + "_DICTIONARY_DATA";
// listModels();
// System.out.println("Creating model: : " + model_name);
				model = repository.findSdaiModel(model_name);
				if(model != null) {
					model.deleteSdaiModel();
					jsdai.lang.SdaiModel relatedModel = 
						repository.findSdaiModel("_EXPRESS_" + schema_view_name.toUpperCase());
					if(relatedModel != null) {
						relatedModel.deleteSdaiModel();
					}
					relatedModel = 
						repository.findSdaiModel("_DOCUMENTATION_" + schema_view_name.toUpperCase());
					if(relatedModel != null) {
						relatedModel.deleteSdaiModel();
					}
				}
// 				model = findModel(schema_view_name);
// 				if (model != null) {
// 					error_count++;
// 					printError("Duplicate schema_view name: " + schema_view_name);
// 				}
				model = repository.createSdaiModel(model_name, jsdai.SExtended_dictionary_schema.SExtended_dictionary_schema.class);
				model.startReadWriteAccess();
				sd = (jsdai.SExtended_dictionary_schema.ESchema_view_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSchema_view_definition.class);
				if (flag_oc) {
					sd.setName(null, schema_view_name);
				} else {
					sd.setName(null, schema_view_name.toUpperCase());
				}
// System.out.println("#@# Model and schema_definition created for schema_view. model: " + model + ", schema: " + sd);




//		createDocumentationEntity2(sd, a_token);

		} else {
			if (is_complex_schema) {
				schema_view_name = schema_view_name.substring(3);
			}
			model = findModel(schema_view_name);
			if (model == null) {
//				printError("schema_view not found: " + schema_view_name);
				printErrorMsg("" + schema_view_name + " - schema view not found", null, true);
			}
			sd = getGeneric_schema_definitionFromModel(model);
			if (expression_instances) {
//				jjtThis.model = model;
//				jjtThis.schema_view_name = schema_view_name;
//				jjtThis.schema_definition = (jsdai.SExtended_dictionary_schema.ESchema_definition)sd;
			}
		}
		// createDocumentationEntity2(sd, a_token);
		
		
		
		if (parser_pass == 2) {

      // needed for chained use from to work correctly		
			used_vector = new Vector();
			used_vectors.addElement(used_vector);

			referenced_vector = new Vector();
			referenced_vectors.addElement(referenced_vector);
			model_vector.addElement(model); // probably not really necessary, the same order in the repository.
		}

// System.out.println("#@# schema_view. Model: " + model + ", schema: " + sd + ", pass: " + parser_pass);	
	}
	
	";" ( ReferenceClause5(referenced_vector) )* [ ConstantDecl5() ] SchemaViewBodyElementList5() <END_SCHEMA_VIEW> ";"
	{
		express_x = false;
	}
}

/*--------- ISO 10303-14:B.2.190  ---*/
String SchemaViewId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/* ------ Our extension, in accordance with express 1.2 ------------------------------------*/
String SchemaVersionId5() :
{
	Token t;
	String image;
}
{
	t = <SIMPLE_STRING_LITERAL>
	{
		image = t.image;
		return image.substring(1, image.length()-1);
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.283------------ */
void Selector5() throws jsdai.lang.SdaiException :
{}
{
	Expression5()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.284------------ */

void SelectType5(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESelect_type st = null;
	jsdai.SExtended_dictionary_schema.ANamed_type selections = null;
	jsdai.SExtended_dictionary_schema.ENamed_type selection;
	boolean is_extensible = false;
	boolean is_entity = false;
	boolean is_extension = false;
	// selections - SET OF NAMED_TYPE
	Vector selectionz = new Vector();
	jsdai.SExtended_dictionary_schema.EDefined_type select_super = null;
}
{
	{
		printVerbose("SelectType5 starting in pass " + parser_pass + ", defined type: " + dt);		
	}	
	[<EXTENSIBLE> {is_extensible = true;}] [<GENERIC_ENTITY> {is_entity = true;}] <SELECT> 
	[ ( selectionz = SelectList5(selectionz) | select_super = SelectExtension5(dt, st, selectionz) {is_extension = true;}) ]
	{
		if (parser_pass == 3) {
			if (is_extensible) {
			  if (is_entity) {
			  	if (is_extension) {
						// entity_select_type+extended_select_type+extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_select_type$extended_select_type$extensible_select_type.class);
			  	} else {
						// entity_select_type+extensible_select_type			  	}
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_select_type$extensible_select_type.class);
			  	}
			  } else {
			  	if (is_extension) {
						// extended_select_type+extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtended_select_type$extensible_select_type.class);
			  	} else {
						// extensible_select_type			  	}
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtensible_select_type.class);
			  	}
			  }	
			} else {
			  if (is_entity) {
			  	if (is_extension) {
						// entity_select_type+extended_select_type+non_extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_select_type$extended_select_type$non_extensible_select_type.class);
			  	} else {
						// entity_select_type+non_extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_select_type$non_extensible_select_type.class);
			  	}
			  } else {
			  	if (is_extension) {
						// extended_select_type+non_extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CExtended_select_type$non_extensible_select_type.class);



			  	} else {
						// non_extensible_select_type
						st = (jsdai.SExtended_dictionary_schema.ESelect_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CNon_extensible_select_type.class);
			  	}
			  }	
			}
			st.setName(null, "_SELECT_" + dt.getName(null));
			selections = st.createLocal_selections(null);
			for (int i = 0; i < selectionz.size(); i++) {
				selections.addUnordered((jsdai.SExtended_dictionary_schema.ENamed_type)selectionz.elementAt(i));
			}
			jsdai.SExtended_dictionary_schema.ANamed_type sel2 = st.getLocal_selections(null);
			for (int k = 1; k < sel2.getMemberCount()+1; k++) {
			}
// System.out.println("O-O-10: just before setting domain in select type - defined type: " + dt + ", domain: " + st);
			dt.setDomain(null, st);
// System.out.println("O-O-11: domain set: " + dt);
			if (is_extension) {
// System.out.println("O-O-01: is extension");
				if (st instanceof jsdai.SExtended_dictionary_schema.EExtended_select_type) {
// System.out.println("O-O-03: is EExtended_select_type");
					if (select_super != null) {
// System.out.println("O-O-05: select_super NOT null");
						if (select_super.testDomain(null)) {
// System.out.println("O-O-07: select_super domain is set");
		        	jsdai.SExtended_dictionary_schema.ESelect_type select_super_sel = (jsdai.SExtended_dictionary_schema.ESelect_type)select_super.getDomain(null);
		          if (select_super_sel instanceof jsdai.SExtended_dictionary_schema.EExtensible_select_type) {        				
// System.out.println("O-O-09: select_super domain IS of EExtensible_select_type");
//								((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).setIs_based_on(null, (jsdai.SExtended_dictionary_schema.EExtensible_select_type)select_super_sel);
								((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).setIs_based_on(null, select_super);
							} else {
								printDebug("The select type: " + select_super.getName(null) + " must be EXTENSIBLE: " + select_super_sel);
							}
						} else {
// System.out.println("O-O-08: select_super domain IS unset: " + select_super);
						}
					} else {
// System.out.println("O-O-06: select_super IS null");
						
					}
				} else {
// System.out.println("O-O-04: is NOT EExtended_select_type - something wrong: " + st);
					// something wrong here - internal error
				}
			
			//	jsdai.SExtended_dictionary_schema.ESelect_type prior = ((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).getIs_based_on(null);
			//	jsdai.SExtended_dictionary_schema.ANamed_type lselections = prior.getLocal_selections(null);
			//for (int l = 1; l < lselections.getMemberCount()+1; l++) {
			//	System.out.println("extended Element5: " + ((jsdai.SExtended_dictionary_schema.ENamed_type)lselections.getByIndex(l)).getName(null));
			//}
			
			} else {
// System.out.println("O-O-02: is NOT extension");
			}
		} else 
		if (parser_pass == 5) {
			// st.setName(null, "_SELECT_" + dt.getName(null));
			st = (jsdai.SExtended_dictionary_schema.ESelect_type)dt.getDomain(null);
			if (is_extension) {

			if (is_entity) {

				if (!isEntitySelect(st)) {
					error_count++;
					printErrorMsg("" + dt.getName(null) + " - GENERIC_ENTITY select type contains non-entities", null, true);
				}
			}
/*
// System.out.println("O-O-01: is extension");
				if (st instanceof jsdai.SExtended_dictionary_schema.EExtended_select_type) {
// System.out.println("O-O-03: is EExtended_select_type");
					if (select_super != null) {
// System.out.println("O-O-05: select_super NOT null");
						if (select_super.testDomain(null)) {
// System.out.println("O-O-07: select_super domain is set");
		        	jsdai.SExtended_dictionary_schema.ESelect_type select_super_sel = (jsdai.SExtended_dictionary_schema.ESelect_type)select_super.getDomain(null);
		          if (select_super_sel instanceof jsdai.SExtended_dictionary_schema.EExtensible_select_type) {        				
// System.out.println("O-O-09: select_super domain IS of EExtensible_select_type");
								if (!(((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).testIs_based_on(null))) {
// System.out.println("O-O-13: was unset, setting now");
//									((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).setIs_based_on(null, (jsdai.SExtended_dictionary_schema.EExtensible_select_type)select_super_sel);
									((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).setIs_based_on(null, select_super);
								} else {
// System.out.println("O-O-14: was already set in pass 3: " + st);
								}
							} else {
								printDebug("The select type: " + select_super.getName(null) + " must be EXTENSIBLE: " + select_super_sel);
							}
						} else {
// System.out.println("O-O-08: select_super domain IS unset: " + select_super);
						}
					} else {
// System.out.println("O-O-06: select_super IS null");
						
					}
				} else {
// System.out.println("O-O-04: is NOT EExtended_select_type - something wrong: " + st);
					// something wrong here - internal error
				}
*/

			
			//	jsdai.SExtended_dictionary_schema.ESelect_type prior = ((jsdai.SExtended_dictionary_schema.EExtended_select_type)st).getIs_based_on(null);
			//	jsdai.SExtended_dictionary_schema.ANamed_type lselections = prior.getLocal_selections(null);
			//for (int l = 1; l < lselections.getMemberCount()+1; l++) {
			//	System.out.println("extended Element5: " + ((jsdai.SExtended_dictionary_schema.ENamed_type)lselections.getByIndex(l)).getName(null));
			//}
			
			} else {
// System.out.println("O-O-02: is NOT extension");
			}
		}		 
		printVerbose("SelectType5 ending");		
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.285------------ */

// in this version, return  is no longer really needed
Vector SelectList5(Vector selectionz) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESelect_type st = null;
	jsdai.SExtended_dictionary_schema.ENamed_type selection;
}
{
	{
		printVerbose("SelectList5 starting in pass " + parser_pass + ", vector: " + selectionz);		
	}	
	"(" selection = NamedTypes5(null)
	{
		if (parser_pass == 3) {
//			selections.addUnordered(selection);
			selectionz.addElement(selection);
		}
	}
	("," selection = NamedTypes5(null)
	{
		if (parser_pass == 3) {
//			selections.addUnordered(selection);
			selectionz.addElement(selection);
		}
	}
	)* ")"
	{
		printVerbose("SelectList5 ending in pass " + parser_pass);		
		return (selectionz);
	}
}

// Vector SelectExtension5(jsdai.SExtended_dictionary_schema.EDefined_type dt, jsdai.SExtended_dictionary_schema.ESelect_type st, Vector selectionz, jsdai.SExtended_dictionary_schema.EDefined_type select_super) throws jsdai.lang.SdaiException :
jsdai.SExtended_dictionary_schema.EDefined_type SelectExtension5(jsdai.SExtended_dictionary_schema.EDefined_type dt, jsdai.SExtended_dictionary_schema.ESelect_type st, Vector selectionz) throws jsdai.lang.SdaiException :
{
	 jsdai.SExtended_dictionary_schema.EDefined_type select_super = null;
}
{
	{
		printVerbose("SelectExtension5 starting in pass " + parser_pass + ", defined type: " + dt);		
	}	
	<BASED_ON> select_super = TypeRef5(0) [ <WITH> selectionz = SelectList5(selectionz) ]
	// further implementation depends on approach
	{
		// not really needed, Vector is updated through the Parameter5 anyway
//		return selectionz;
		printVerbose("SelectExtension5 ending in pass " + parser_pass);		
// System.out.println("select_super: " + select_super);
		return select_super;
	}

}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.285------------ */
jsdai.SExtended_dictionary_schema.ESet_type SetType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESet_type at = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	jsdai.lang.EEntity bt;
	String bound_name;
}
{
	{
		printDebug("In SetType5, starting, whose: " + whose);
	}
	<SET> [bounds = BoundSpec5()]
	{
		if (parser_pass == 5) {
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						at = (jsdai.SExtended_dictionary_schema.ESet_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}

//System.out.println(">< set type found in pass 5: " + at);

			if (at == null) {
				at = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);
//				bound_name = getBoundString(0, bounds, false, false);
//				at.setName(null, "_SET" + bound_name + _data_type_name);
//				_data_type_name = "_SET"  + bound_name + _data_type_name;
//				data_type_name = "_SET"  + bound_name;
			}
			if (bounds[0] == null) {
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, 0);
				bounds[0] = b1;
			} 
			at.setLower_bound(null, bounds[0]); 
			if (bounds[1] != null) {
				at.setUpper_bound(null, bounds[1]); 
			}	else {
				at.unsetUpper_bound(null);  // no need for that it is unset after creating
			}
		} // pas 5
	}  
	<OF> bt = BaseType5(at)
	{

//System.out.println(">< base type found in pass 5: " + bt);
		if (parser_pass > 3) {
			// set element_type
//			if (bt instanceof jsdai.SExtended_dictionary_schema.ESimple_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ESimple_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) 
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EAggregation_type)bt);
//			else if (bt instanceof jsdai.SExtended_dictionary_schema.ENamed_type)
//				at.setElement_type(null, (jsdai.SExtended_dictionary_schema.ENamed_type)bt);


			if (!(at.testElement_type(null))) {
				if(bt instanceof jsdai.SExtended_dictionary_schema.EData_type) {
					at.setElement_type(null, (jsdai.SExtended_dictionary_schema.EData_type)bt);
				} else 
				if(bt instanceof jsdai.SExtended_dictionary_schema.EParameter) {
					if (((jsdai.SExtended_dictionary_schema.EParameter)bt).testParameter_type(null)) {			
						at.setElement_type(null, ((jsdai.SExtended_dictionary_schema.EParameter)bt).getParameter_type(null));
		 			} else {
					}
				} else {
					// express amendment issue
				}
			} else {
			}
		}
		bound_name = getBoundString(0, bounds, false, false);
		_data_type_name = "_SET"  + bound_name + _data_type_name;
		if (at != null) {
			at.setName(null, _data_type_name);
		}
		printDebug("In SetType5, ending: " + at);
//System.out.println(">< returning set type in pass 5: " + at);
		return at;
	}
}


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.286------------ */
void Sign5() : // Actually moved to ISO 10303-11:A.1.2 - Character classes (as Sign5)
{}
{
	"+" | "-"
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.287------------ */
void SimpleExpression5() throws jsdai.lang.SdaiException :
{
	Object operand1 = null;
	Object operand2;
	String x_operand1 = "";
	String x_operand2 = "";
	double op1double;
	double op2double;
	int op1int;
	int op2int;
	int operation;
	Object exp_instance = null;
	String x_result = "";
	int op_nr = 0;
	int nr_of_operands = 0;
}
{
	(
	Term5()
	{
		if (parser_pass == 5) {
			nr_of_operands++;
			operand1 = argument_stack.pop();
			printStack("POP: SimpleExpression5, operand1: " + operand1);
			if (expression_instances) {
				// x_operand1 = (String)expression_stack.pop();
				// printXStack("POP: SimpleExpression5, operand1: " + x_operand1);
				// x_result = x_operand1;
			}
		}
	}
	// "+" choice conflict, probably not real but related to nested grammar, lookahead of 2 to suppress the warning
	( LOOKAHEAD(2) operation = AddLikeOp5() Term5()
	{
	 if (parser_pass == 5) {
		nr_of_operands++;
		if (expression_instances) {
//			jjtThis.operations[op_nr++] = operation;
			jjtThis.operations.add(new Integer(operation));
			op_nr++;
		}
		operand2 = argument_stack.pop();
		printStack("POP: SimpleExpression5, operand2: " + operand2);
		if (expression_instances) {
			// x_operand2 = (String)expression_stack.pop();
			// printXStack("POP: SimpleExpression5, operand2: " + x_operand2);
		}
		if (operation == 1) {       // +
			// create an instance of plus_expression
			// create attribute operands - LIST, add members pop_inst1 and pop_inst2;
			// push the plus_expression instance to expression_stack.
			if (expression_instances) {
				// x_result = "(" + x_operand1 + " + " + x_operand2 + ")";
				// x_operand1 = x_result;
//printDebug("before creating plus_expression instance");
//                              jsdai.SIso13584_expressions_schema.EPlus_expression plus_e = (jsdai.SIso13584_expressions_schema.EPlus_expression)expression_model.createEntityInstance(jsdai.SIso13584_expressions_schema.CPlus_expression.class);
//printDebug("after creating plus_expression instance");
//                              jsdai.SIso13584_generic_expressions_schema.AGeneric_expression operands = plus_e.createOperands(null);
//                              if (pop_inst1 instanceof jsdai.SIso13584_generic_expressions_schema.EGeneric_expression) {
//                                      operands.addByIndex(1, (jsdai.SIso13584_generic_expressions_schema.EGeneric_expression)pop_inst1);
//                              } else {
//                                      printError("INSTANTIATING EXPRESSIONS: in plus_expression, simple Expression5 operand 1 is not a generic_expression:" + pop_inst1);
//                              }
//                              if (pop_inst2 instanceof jsdai.SIso13584_generic_expressions_schema.EGeneric_expression) {
//                                      operands.addByIndex(2, (jsdai.SIso13584_generic_expressions_schema.EGeneric_expression)pop_inst2);
//                              } else {
//                                      printError("INSTANTIATING EXPRESSIONS: in plus_expression, simple Expression5 operand 2 is not a generic_expression:" + pop_inst2);
//                              }
//                              exp_instance = plus_e;
			}
			if ((operand1 instanceof Integer) && (operand2 instanceof Integer)) {
				op1int = ((Integer)operand1).intValue();
				op2int = ((Integer)operand2).intValue();
				op1int += op2int;
				operand1 = new Integer(op1int);
			}
			else if ((operand1 instanceof Number) && (operand2 instanceof Number)) {
				op1double = ((Number)operand1).doubleValue();
				op2double = ((Number)operand2).doubleValue();
				op1double += op2double;
				operand1 = new Double(op1double);
			}
		}
		else if (operation == 2) {  // -
			// create an instance of minus_expression
			// create attribute operands - LIST, add members pop_inst1 and pop_inst2;
			// push the plus_expression instance to expression_stack.
			if (expression_instances) {
				// x_result = "(" + x_operand1 + " - " + x_operand2 + ")";
				// x_operand1 = x_result;
//printDebug("before creating minus_expression instance");
//                              jsdai.SIso13584_expressions_schema.EMinus_expression minus_e = (jsdai.SIso13584_expressions_schema.EMinus_expression)expression_model.createEntityInstance(jsdai.SIso13584_expressions_schema.CMinus_expression.class);
//printDebug("after creating minus_expression instance");
//                              jsdai.SIso13584_generic_expressions_schema.AGeneric_expression operands = minus_e.createOperands(null);
//                              if (pop_inst1 instanceof jsdai.SIso13584_generic_expressions_schema.EGeneric_expression) {
//                                      operands.addByIndex(1, (jsdai.SIso13584_generic_expressions_schema.EGeneric_expression)pop_inst1);
//                              } else {
//                                      printError("INSTANTIATING EXPRESSIONS: in minus_expression, simple Expression5 operand 1 is not a generic_expression");
//                              }
//                              if (pop_inst2 instanceof jsdai.SIso13584_generic_expressions_schema.EGeneric_expression) {
//                                      operands.addByIndex(2, (jsdai.SIso13584_generic_expressions_schema.EGeneric_expression)pop_inst2);
//                      } else {
//                                      printError("INSTANTIATING EXPRESSIONS: in minus_expression, simple Expression5 operand 2 is not a generic_expression");
//                              }
//                              exp_instance = minus_e;
			}
			if ((operand1 instanceof Integer) && (operand2 instanceof Integer)) {
				op1int = ((Integer)operand1).intValue();
				op2int = ((Integer)operand2).intValue();
				op1int -= op2int;
				operand1 = new Integer(op1int);
			}
			else if ((operand1 instanceof Number) && (operand2 instanceof Number)) {
				op1double = ((Number)operand1).doubleValue();
				op2double = ((Number)operand2).doubleValue();
				op1double -= op2double;
				operand1 = new Double(op1double);
			}
		}
		else if (operation == 3) {  // OR
				x_result = "(" + x_operand1 + " | " + x_operand2 + ")";
				x_operand1 = x_result;
		}
		else if (operation == 4) {  // XOR
				x_result = "(" + x_operand1 + " ^ " + x_operand2 + ")";
				x_operand1 = x_result;
		}
	 }
	}
	)*

	) #AddLikeOp(nr_of_operands > 1)
	{
		if (parser_pass == 5) {
			argument_stack.push(operand1);
			printStack("PUSH: SimpleExpression5: " + operand1);
			if (expression_instances) {
				// expression_stack.push(x_result);
				// printXStack("PUSH: SimpleExpression5, result: " + x_result);
			}
		}
	}
}

/* - LOOKAHEAD 4 or > - (Columns 1-28 & 2-3, 1-50 & 2-3) ------------------------------ ISO 10303-11:A.2.288------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at 1-28 and 2-3 respectively.
		 A common prefix is <SIMPLE_ID> "(" "["
		 Lookahead of 4 or more should be used for the earlier expansion.
*/
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at 1-50 and 2-3 respectively.
		 A common prefix is <SIMPLE_ID> "." <SIMPLE_ID>
		 Lookahead of 4 or more should be used for the earlier expansion.
*/

/* ISO 1030-14.B.2.194*/
// added CaseExpr5() and ForExpr5()
void SimpleFactor5() throws jsdai.lang.SdaiException :
{
	int t = 0;
	Object operand1 = "";
	String x_operand1 = "";
	double op1double;
	int op1int;
	int chosen = 0;
	int kind = 0;
	String name = "";
}
{
	{
		printDebug("In SimpleFactor5, starting");
		if (flag_oc) {
		  global_name1_global = getToken(1).image;
		  global_name2_global = getToken(2).image;
		  global_name3_global = getToken(3).image;
		} else {
		  global_name1_global = getToken(1).image.toLowerCase();
		  global_name2_global = getToken(2).image.toLowerCase();
		  global_name3_global = getToken(3).image.toLowerCase();
		}
		global_kind1_global = getToken(1).kind;
		global_kind2_global = getToken(2).kind;
		global_kind3_global = getToken(3).kind;
//System.out.println("in SimpleFactor5, starting: "  + global_name1_global + " " + global_name2_global + " " + global_name3_global);
	}
	(
		AggregateInitializer5() {chosen = 1;} |
		LOOKAHEAD({isEntityConstructor()}) EntityConstructor5() {chosen = 8;} |
		Interval5() {chosen = 3;} |
		QueryExpression5() {chosen = 4;} |
		CaseExpr5() {chosen = 9;} |
		ForExpr5() {chosen = 10;} |
		IfExpr5() {chosen = 11;} |
		LOOKAHEAD({isEnumerationReference()}) EnumerationReference5() {chosen = 2;} |
		( 
			[t = UnaryOp5() {chosen = 5;} ] 
			( 
				"(" Expression5() {chosen = 6;} ")" 
				| 
				Primary5() {chosen = 7;}
			)
			{
				if (parser_pass == 5) {
					if (expression_instances) {
						jjtThis.operation = t;
					}
				}
			}
		) #UnaryOp(t>1)
	)


//      ([t = UnaryOp5() {chosen = 5;} ] ("(" Expression5() {chosen = 6;} ")" | Primary5() {chosen = 7;} | LOOKAHEAD(EnumerationReference5() ")") EnumerationReference5() {chosen = 2;} )
	{
		// unary stuff goes here
		//System.out.println("XX--XX chosen: " + chosen);
	 if (parser_pass == 5) {
		switch (chosen) {
			case 0:
				printDebug("In SimpleFactor5 - nothing was chosen");
				break;
			case 1:
				printDebug("In SimpleFactor5 - AggregateInitializer5");
				break;
			case 2:
				printDebug("In SimpleFactor5 - EnumeratiionReference");
				break;
			case 3:
				printDebug("In SimpleFactor5 - Interval5");
				break;
			case 4:
				printDebug("In SimpleFactor5 - QueryExpression5");
				break;
			case 5:
				printDebug("In SimpleFactor5 - UnaryOp5");
				break;
			case 6:
				printDebug("In SimpleFactor5 - Expression5");
				break;
			case 7:
				printDebug("In SimpleFactor5 - Primary5");
				break;
			case 8:
				printDebug("In SimpleFactor5 - EntityConstructor5");
				break;
			case 9:
				printDebug("In SimpleFactor - CaseExpr");
				break;
			case 10:
				printDebug("In SimpleFactor - ForExpr");
				break;
			case 11:
				printDebug("In SimpleFactor - IfExpr");
				break;
			default:
				printDebug("In SimpleFactor5 - error");
				break;
		}
		if (t == 2) {
			operand1 = argument_stack.pop();
			printStack("POP: SimpleFactor5: " + operand1);
			if (expression_instances) {
				// x_operand1 = (String)expression_stack.pop();
				// printXStack("POP: SimpleFactor5, operand1: " + x_operand1);
			}
			if (operand1 instanceof Integer) {
				op1int = ((Integer)operand1).intValue();
				op1int = -op1int;
				operand1 = new Integer(op1int);
			}
			else if (operand1 instanceof Number) {
				op1double = ((Number)operand1).doubleValue();
				op1double = -op1double;
				operand1 = new Double(op1double);
			}
			argument_stack.push(operand1);
			printStack("PUSH: SimpleFactor5: " + operand1);
			if (expression_instances) {
				// expression_stack.push(x_operand1);
				// printXStack("PUSH: SimpleFactor5, operand1: " + x_operand1);
			}
		}
	 }
// System.out.println("SimpleFactor5 - ending");	 
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.289------------ */
jsdai.SExtended_dictionary_schema.ESimple_type SimpleTypes5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESimple_type st = null;
}
{
	{
		printDebug("In simple type, starting, whose: " + whose);
	}
	(st = BinaryType5(whose) | st = BooleanType5(whose) | st = IntegerType5(whose) | st = LogicalType5(whose) |
	st = NumberType5(whose) | st = RealType5(whose) | st = StringType5(whose)) 
	{
		printDebug("In simple type, ending, st: " + st);
		if (st != null) {
			if (st.testName(null)) {
				_data_type_name = st.getName(null);
			}
		}
		return st;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.290------------ */
void SkipStmt5() throws jsdai.lang.SdaiException #SkipStmt :
{}
{
	{
		printDebug("In SkipStmt5 starting");
	}
	<KW_SKIP> ";"
	{
		printDebug("In SkipStmt5 ending");
	}
}
/* - LOOKAHEAD 2 - (Columns 1-17 & 2-16) ---------------------------------------------- ISO 10303-11:A.2.291------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at 1-17 and 2-16.
		 Common prefix <SIMPLE_ID>
		 Lookahead of 2 should be used for the earlier expansion.
*/


/*-+-------- ISO 10303-14:B.2.197  ---*/
void SourceAttributeReference5() throws jsdai.lang.SdaiException :
{
	Object par_ref = null;
	Object attr_ref = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition par_extent = null;
}
{
//      ParameterRef5() "." ( AttributeRef5(null, null, -1, null) | ViewAttributeRef5() )
// perhaps Parameter5, and handles the same AttributeRef5

//	 ParameterRef5() "." ( AttributeRef5(null, null, -1, null) )
	 par_ref = SourceParameterRef5() 
	{
// 		System.out.println("<<++ par_ref :" + par_ref);
		par_extent = (jsdai.SExtended_dictionary_schema.EEntity_definition)((jsdai.SExtended_dictionary_schema.ESource_parameter)par_ref).getExtent(null);
		
	}
	 
	 
//	 "." ( attr_ref = AttributeRef5(par_extent, par_extent, -1, null) )
	 "." ( attr_ref = AttributeRef5(par_extent, par_extent, 3, par_extent) )
	{
//		System.out.println("<<++ attr_ref :" + attr_ref);
	}
}


/*--------- ISO 10303-14:B.2.198  ---*/
void SourceEntityReference5() throws jsdai.lang.SdaiException :
{}
{
	EntityRef5erence5()
}

/*-+-------- ISO 10303-14:B.2.199  ---*/
void SourceParameter5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException :
{
	String source_parameter_name;
	jsdai.SExtended_dictionary_schema.ESource_parameter sp = null;
	jsdai.SExtended_dictionary_schema.EEntity_or_view_definition evd = null;		
}
{
	source_parameter_name = SourceParameterId5() ":" evd = ExtentReference5()
	{
		// which exactly pass needed here? to check. perhaps ExtentReference5 requires a pass after interfacing: 4?
		if (parser_pass == 1) {
// System.out.println("IN source_parameter 1");
			sp = findSource_parameter(source_parameter_name);
		  if (sp != null) {
				// error - should not be found
			}
		 	sp = (jsdai.SExtended_dictionary_schema.ESource_parameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSource_parameter.class);
		 	sp.setName(null, source_parameter_name);
//		 	sp.setOrder(null, from_order_count++);
			if (parent instanceof jsdai.SExtended_dictionary_schema.EMap_partition) {
				sp.setParent(null, (jsdai.SExtended_dictionary_schema.EMap_partition)parent);
			} else
			if (parent instanceof jsdai.SExtended_dictionary_schema.EView_partition) {
			 	sp.setParent(null, (jsdai.SExtended_dictionary_schema.EView_partition)parent);
			} else {
				// error
			} 
		} else {
// System.out.println("IN source_parameter 2");
			sp = findSource_parameter(source_parameter_name);
// System.out.println("### SourceParameter5: " + source_parameter_name + " - is it found? : " + sp);

			if (sp == null) {
				// error - should have been found
			}		
			if (parser_pass == 4) {
	 			sp.setExtent(null, evd);
			 	sp.setOrder(null, from_order_count++);
	 		}
	 	}
 }
}

/*--------- ISO 10303-14:B.2.200  ---*/
String SourceParameterId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

void Stmt5() throws jsdai.lang.SdaiException :
{}
{
	{
		printDebug("In Stmt5, starting");
	}
	// <SIMPLE_ID> conflict 
//	(AliasStmt5() | LOOKAHEAD(AssignmentStmt5()) AssignmentStmt5() | CaseStmt5() | CompoundStmt5() | EscapeStmt5() | IfStmt5() |
	(AliasStmt5() | LOOKAHEAD(GeneralRef5() ( Qualifier5(null) )* ":=") AssignmentStmt5() | CaseStmt5() | CompoundStmt5() | EscapeStmt5() | IfStmt5() |
	NullStmt5() | RepeatStmt5() | ReturnStmt5() | SkipStmt5() | ProcedureCallStmt5()  )
	{
		printDebug("In Stmt5, ending");
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.292------------ */
String StringLiteral5() throws jsdai.lang.SdaiException :
{
	Token t;
	String s = null;
}
{
	{
		printDebug("In String Literal5");
	}
	(t = <SIMPLE_STRING_LITERAL>
		{
			if (parser_pass == 5) {
				//				s = t.image;

// System.out.println("String Literal: " + t.image);
				s = handleBackslash(t.image);
				s = "\"" + s.substring(1,s.length()-1) + "\"";
				argument_stack.push(s);
				printStack("PUSH: Literal5: <SIMPLE_STRING_LITERAL>: " + s);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
		| t = <ENCODED_STRING_LITERAL>
		{
			// just for now
			if (parser_pass == 5) {
// System.out.println("Encoded String Literal: " + t.image);

//				s = t.image;
        s = "\"" + analyse_string(t) + "\"";
                
				argument_stack.push(s);
				printStack("PUSH: Literal5: <ENCODED_STRING_LITERAL>: " + s);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		})
		{

if (parser_pass == 5) {
// System.out.println("Processed String Literal: " + s);
}
			return s;
		}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.293------------ */
jsdai.SExtended_dictionary_schema.EString_type StringType5(jsdai.lang.EEntity whose) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EString_type st = null; 
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	int width_spec = 0;
	boolean is_fixed = false;
	String str_fixed;
}
{
	<STRING>  
	{
	}
	[ width_spec = WidthSpec5()]
	{
		if (width_spec == Integer.MIN_VALUE) {
			width_spec = 0;
		}
		if (width_spec < 0) {		
			width_spec = -width_spec;
			is_fixed = true;
			str_fixed = "_FIXED";
		} else {
			is_fixed = false;
			str_fixed = "";
		}
		if (parser_pass == 3) { 
			if (width_spec == 0) {
				st = _st_string;
			} else {
				st = (jsdai.SExtended_dictionary_schema.EString_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CString_type.class);
				_data_type_name = "_STRING_" + width_spec + str_fixed;
//				_data_type_name = "_STRING_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
				st.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, width_spec);
				st.setWidth(null, b1);
				if (is_fixed) {
					st.setFixed_width(null, true);
				} else {
					st.setFixed_width(null, false);
				}
			}
		} else
		if (parser_pass > 3) {
		
			if (width_spec == 0) {
				st = _st_string;
			} else {
		
		
			if (whose != null) {
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
					if (((jsdai.SExtended_dictionary_schema.EDefined_type)whose).testDomain(null)) {
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EDefined_type)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).testDomain(null)) {
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EExplicit_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).testDomain(null)) {
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EDerived_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
					if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).testDomain(null)) {
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EInverse_attribute)whose).getDomain(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EAggregation_type) {
					if (((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).testElement_type(null)) {
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EAggregation_type)whose).getElement_type(null);
					}
				} else
				if (whose instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
					if (((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).testDomain(null)) {
						st = (jsdai.SExtended_dictionary_schema.EString_type)((jsdai.SExtended_dictionary_schema.EConstant_definition)whose).getDomain(null);
					}
				}				
			}
			} //  if width_spec present
			if (st == null) {
				if (width_spec == 0) { // no longer can occur
					st = _st_string;
				} else {
					st = (jsdai.SExtended_dictionary_schema.EString_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CString_type.class);
					_data_type_name = "_STRING_" + width_spec + str_fixed;
					// _data_type_name = "_STRING_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
					st.setName(null, _data_type_name);
					b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
					b1.setBound_value(null, width_spec);
					st.setWidth(null, b1);
					if (is_fixed) {
						st.setFixed_width(null, true);
					} else {
						st.setFixed_width(null, false);
					}
				}
			}
		}     
		if ((parser_pass == 5) && (width_spec != 0)) {  // seem like may be creating a new instance again, better improve it
				st = (jsdai.SExtended_dictionary_schema.EString_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CString_type.class);
				_data_type_name = "_STRING_" + width_spec + str_fixed;
				// _data_type_name = "_STRING_" + ((width_spec > 0) ?  (width_spec) : (-width_spec)) + ((width_spec < 0) ? "_FIXED" : "");
				st.setName(null, _data_type_name);
				b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
				b1.setBound_value(null, width_spec);
				st.setWidth(null, b1);
				if (is_fixed) {
					st.setFixed_width(null, true);
				} else {
					st.setFixed_width(null, false);
				}
		}
		     
		return st;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.294 ------------ */

void SubSuper5(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{}
{
	[SupertypeConstraint5(ed)] [SubtypeDeclaration5(ed)]
}

void SubSuperNoAbstract5(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{}
{
	[SupertypeConstraintNoAbstract5(ed)] [SubtypeDeclaration5(ed)]
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.295------------ */
void SubtypeConstraint5(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESub_supertype_constraint sc;
	jsdai.lang.EEntity se;
	Object pop_inst = null;

	jsdai.SExtended_dictionary_schema.EAndor_subtype_expression andor;
// pre-X	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_or_subtype_expression generic_operands;
	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands;
}
{
	<OF> "("  SupertypeExpression5() ")"
	{

		if (parser_pass == 5) {
			se = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: SubtypeConstraint5: " + se);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}

			if (se instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) {
				sc = (jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSub_supertype_constraint.class);
				sc.setGeneric_supertype(null, ed);
				// super_type is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// sc.setSuper_type(null, (jsdai.SExtended_dictionary_schema.EEntity_definition)ed);
				// }
				sc.setConstraint(null, (jsdai.SExtended_dictionary_schema.ESubtype_expression)se);
			} else if (se instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) // SUPERTYPE OF (single_entity)
			{
				sc = (jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSub_supertype_constraint.class);
				sc.setGeneric_supertype(null, ed);
				// super_type is now derived instead of explicit 
				// if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					// sc.setSuper_type(null, (jsdai.SExtended_dictionary_schema.EEntity_definition)ed);
				// }
				andor = (jsdai.SExtended_dictionary_schema.EAndor_subtype_expression)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAndor_subtype_expression.class);
				generic_operands = andor.createGeneric_operands(null);
				// operands is now derived instead of explicit 
				// operands = andor.createOperands(null);
				generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) se);
				// operands is now derived instead of explicit 
				// if (!(se instanceof jsdai.SExtended_dictionary_schema.EView_definition)) {
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) se);
				// }
				sc.setConstraint(null, (jsdai.SExtended_dictionary_schema.ESubtype_expression)andor);
			}
			else { //
			error_count++;
			printErrorMsg5(" name not available - internal error in SubtypeConstraint5", null, true);
				printEDebug("Internal error in SubtypeConstraint5");
			}
		}
	}

}

/*-+-------- ISO 10303-14:B.2.205  ---*/
// there is no supertype for map_definition and view_definition
jsdai.lang.EEntity SubtypeBindingHeader5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException #SubtypeBindingHeader :
{
	String partition_name = "_implicit_partition_"; // partition may be implicit, let's have name "" for it (so far)
	// I would like to have partition entity, supertype of map_partition and view_partition.
	jsdai.SExtended_dictionary_schema.EMap_partition mp = null;
	jsdai.SExtended_dictionary_schema.EView_partition vp = null;
	jsdai.lang.EEntity partition = null;
	

}
{
//old	[ LOOKAHEAD(3) <PARTITION> [ PartitionId5() ] ";" ] WhereClause5(null)
	// PartitionId5() is no longer optional
//	[ LOOKAHEAD(3) <PARTITION> partition_name = PartitionId5() ";" ] 
	// lookahead not needed
	{
		printDebug("In SubtypeBindingHeader5, starting, parent: " + parent);
//		System.out.println("active_scope in map 10: " + active_scope);
	}
	[ <PARTITION> partition_name = PartitionId5() ";" ] 
	{
		if (parser_pass == 1) {
			if (parent instanceof jsdai.SExtended_dictionary_schema.EView_definition) {
				vp = (jsdai.SExtended_dictionary_schema.EView_partition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CView_partition.class);
				vp.setParent(null, (jsdai.SExtended_dictionary_schema.EView_definition)parent);
				vp.setName(null, partition_name);
				partition = (jsdai.lang.EEntity)vp;
				
			} else
			if (parent instanceof jsdai.SExtended_dictionary_schema.EMap_definition) {
				mp = (jsdai.SExtended_dictionary_schema.EMap_partition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CMap_partition.class);
				mp.setParent(null, (jsdai.SExtended_dictionary_schema.EMap_definition)parent);
				mp.setName(null, partition_name);
				partition = (jsdai.lang.EEntity)mp;
			} else {
				// error
			}
		} else 
		if (parser_pass == 5) {
		
			if (parent instanceof jsdai.SExtended_dictionary_schema.EView_definition) {
				vp = findView_partition(partition_name, (jsdai.SExtended_dictionary_schema.EView_definition)parent);
				partition = (jsdai.lang.EEntity)vp;
			} else
			if (parent instanceof jsdai.SExtended_dictionary_schema.EMap_definition) {
				mp = findMap_partition(partition_name, (jsdai.SExtended_dictionary_schema.EMap_definition)parent);
				partition = (jsdai.lang.EEntity)mp;
			} else {
				// error
System.out.println("PARSER - SubtypeBindingHeader5 - parent type not expected: " + parent);
			}
// we need a node just as for BindingHeader, to properly support multiple partitions 
			if (expression_instances) {
				jjtThis.partition = (jsdai.SExtended_dictionary_schema.EMap_or_view_partition)partition;
			}

		
		}
		
		
		
//		System.out.println("active_scope in map 11: " + active_scope);
	}
	WhereClause5(parent)
	{
		printDebug("In SubtypeBindingHeader5, ending");
		return partition;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.296 ------------ */
void SubtypeDeclaration5(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EEntity_definition super_ed;
// pre-X	jsdai.SExtended_dictionary_schema.AEntity_definition supertypes = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_definition generic_supertypes = null;
	jsdai.SExtended_dictionary_schema.AEntity_definition supertypes = null;
	int Index5 = 1;
	int index_g = 1;
	boolean is_connotational = false;
}
{
	{
		if (parser_pass == 3) {
			generic_supertypes = ed.getGeneric_supertypes(null);
			if (ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
				if (supertypes != null) {
					if (((jsdai.SExtended_dictionary_schema.EEntity_definition)ed).testSupertypes(null)) {
						supertypes = ((jsdai.SExtended_dictionary_schema.EEntity_definition)ed).getSupertypes(null);
					}
				}
			}	
		}
	}
	[<CONNOTATIONAL> {is_connotational = true;}]<SUBTYPE> <OF> "("
	super_ed = EntityRef5(null)
	{
		if (parser_pass == 3) {
			generic_supertypes.addByIndex(index_g++, super_ed);
			if (supertypes != null) {
				if (super_ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					supertypes.addByIndex(Index5++, super_ed);
				}
			}
		}
	}
	(","
	super_ed = EntityRef5(null)
	{
		if (parser_pass == 3)
		{
			generic_supertypes.addByIndex(index_g++, super_ed);
			if (supertypes != null) {
				if (super_ed instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
					supertypes.addByIndex(Index5++, super_ed);
				}
			}
		}
	}
	)* ")"
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.297------------ */
void SupertypeConstraint5(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{}
{
	AbstractSupertypEDeclaration5(ed) | SupertypeRule5(ed)
}

void SupertypeConstraintNoAbstract5(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{}
{
	SupertypeRule5(ed)
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.298------------ */
void SupertypeExpression5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAndor_subtype_expression andor = null;
// pre-X	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_or_subtype_expression generic_operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.lang.EEntity ee = null;
	Object pop_inst = null;
	boolean andor_present = false;
}
{
	SupertypeFactor5()
	{
		if (parser_pass == 5) {
			ee = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: SupertypeExpression5: " + ee);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
	}
	(<ANDOR> SupertypeFactor5()
	{
		if (parser_pass == 5) {
			if (!andor_present) {
				andor = (jsdai.SExtended_dictionary_schema.EAndor_subtype_expression)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAndor_subtype_expression.class);
				generic_operands = andor.createGeneric_operands(null);
				// operands is now derived instead of explicit 
				// operands = andor.createOperands(null);
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
					error_count++;
					printErrorMsg5(" name not available - internal error in SupertypeExpression5 1", null, true);
					printEDebug("Internal error in SupertypeExpression5 1");
				}
				ee = (jsdai.lang.EEntity)argument_stack.pop();
				printStack("POP: SupertypeExpression5: " + ee);
				if (expression_instances) {
					// pop_inst = expression_stack.pop();
				}
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
					error_count++;
					printErrorMsg5(" name not available - internal error in SupertypeExpression5 2", null, true);
					printEDebug("Internal error in SupertypeExpression5 2");
				}
				andor_present = true;
			} else {
				ee = (jsdai.lang.EEntity)argument_stack.pop();
				printStack("POP: SupertypeExpression5: " + ee);
				if (expression_instances) {
					// pop_inst = expression_stack.pop();
				}
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
				error_count++;
					printErrorMsg5(" name not available - internal error in SupertypeExpression5 3", null, true);
					printEDebug("Internal error in SupertypeExpression5 3");
				}
			}
		}
	}
	)*
	{
		if (parser_pass == 5) {
			if (andor_present) {
				argument_stack.push(andor);
				printStack("PUSH: SupertypeExpression5: " + andor);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			} else {
				argument_stack.push(ee);
				printStack("PUSH: SupertypeExpression5: " + ee);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.299------------ */
void SupertypeFactor5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAnd_subtype_expression and = null;
// pre-X 	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_view_or_subtype_expression generic_operands = null;
	jsdai.SExtended_dictionary_schema.AEntity_or_subtype_expression operands = null;
	jsdai.lang.EEntity ee = null;
	Object pop_inst = null;
	boolean and_present = false;
}
{
	SupertypeTerm5()
	{
		if (parser_pass == 5) {
			ee = (jsdai.lang.EEntity)argument_stack.pop();
			printStack("POP: SupertypeFactor5: " + ee);
			if (expression_instances) {
				// pop_inst = expression_stack.pop();
			}
		}
	}
	(<AND> SupertypeTerm5()
	{
		if (parser_pass == 5) {
			if (!and_present) {
				and = (jsdai.SExtended_dictionary_schema.EAnd_subtype_expression)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAnd_subtype_expression.class);
				generic_operands = and.createGeneric_operands(null);
				// operands is now derived instead of explicit 
				// operands = and.createOperands(null);
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
				error_count++;
					printErrorMsg5(" name not available - internal error in SupertypeFactor5 1", null, true);
					printEDebug("Internal error in SupertypeFactor5 1");
				}
				ee = (jsdai.lang.EEntity)argument_stack.pop();
				printStack("POP: SupertypeFactor5: " + ee);
				if (expression_instances) {
					// pop_inst = expression_stack.pop();
				}
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
				error_count++;
					printErrorMsg5(" name not available - internal error in SupertypeFactor5 2", null, true);
					printEDebug("Internal error in SupertypeFactor5 2");
				}
				and_present = true;
			} else {
				ee = (jsdai.lang.EEntity)argument_stack.pop();
				printStack("POP: SupertypeFactor5: " + ee);
				if (expression_instances) {
					// pop_inst = expression_stack.pop();
				}
				if (ee instanceof jsdai.SExtended_dictionary_schema.ESubtype_expression) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.ESubtype_expression) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
					// operands is now derived instead of explicit 
					// operands.addUnordered((jsdai.SExtended_dictionary_schema.EEntity_definition) ee);
				} else 
				if (ee instanceof jsdai.SExtended_dictionary_schema.EView_definition) { // better with C?
					generic_operands.addUnordered((jsdai.SExtended_dictionary_schema.EView_definition) ee);
				} else {
						error_count++;
					  printErrorMsg5(" name not available - internal error in SupertypeFactor5 3", null, true);
						printEDebug("Internal error in SupertypeFactor5 3");
				}
			}
		}
	}
	)*
	{
		if (parser_pass == 5) {
			if (and_present) {
				argument_stack.push(and);
				printStack("PUSH: SupertypeFactor5: " + and);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			} else {
				argument_stack.push(ee);
				printStack("PUSH: SupertypeFactor5: " + ee);
				if (expression_instances) {
					// expression_stack.push(null);
				}
			}
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.300------------ */
void SupertypeRule5(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition ed) throws jsdai.lang.SdaiException :
{}
{
	<SUPERTYPE> SubtypeConstraint5(ed)
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.301------------ */
void SupertypeTerm5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EEntity_definition ed;
}
{
// Express X needs here ViewRef5() instead instead of EntityRef5(), so we need something entity_or_view_ref
// because we now have in the dictionary entity_or_view_definition, so no problem.
 ed = EntityRef5(null)
	{
		if (parser_pass == 5) {
			argument_stack.push(ed);
			if (ed != null) {
				printStack("PUSH: SupertypeTerm5: entity " + ed.getName(null));
			} else {
				printStack("PUSH: SupertypeTerm5: entity_definition = null");
			}
			if (expression_instances) {
				// expression_stack.push(null);
			}
		}
	}
	| OneOf5() | "(" SupertypeExpression5() ")"
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.302 ------------ */
void Syntax5() throws jsdai.lang.SdaiException :
{}
{
	(SchemaDecl5())+
	<EOF>
}

/*-+-------- ISO 10303-14:B.210  ---*/
void SyntaxX5() throws jsdai.lang.SdaiException :
{}
{
	  SchemaMapDecl5() | SchemaViewDecl5()
}

/*-+-------- ISO 10303-14:B.2.211  ---*/
jsdai.SExtended_dictionary_schema.EEntity_definition TargetEntityReference5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed1 = null;	
	// jsdai.SExtended_dictionary_schema.AEntity_definition aed = null;
	Vector entity_definitions = new Vector();
}
{
	// This grammar is for creating complex entities on the fly. We must already have them.
	// So the grammar must be changed.
	// ALTERNATIVE: to get all the references into an aggregate, and give it to a special method that would
	// search for the complex entity difinition, i.e, input = leaves, result = complex.
	// perhaps this approach is better. because altering the grammar has to take into account schema prefix for each entity, etc.
	// I'm choosing the alternative. 
	{
		printDebug("In TargetEntityReference5, starting");
	}
	ed = EntityRef5erence5() {entity_definitions.addElement(ed);}( <COMPLEX_AND> ed1 = EntityRef5erence5() {entity_definitions.addElement(ed1);})*
	{
		if (entity_definitions.size() > 1) {
			ed = findComplexEntity(entity_definitions);
		}
		printDebug("In TargetEntityReference5, ending");
		return ed;
	}
}

/*-+-------- ISO 10303-14:B.2.212  ---*/
void TargetParameter5(jsdai.SExtended_dictionary_schema.EMap_definition parent) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.ESet_type at = null;
	String name;
	jsdai.SExtended_dictionary_schema.EEntity_definition ed = null;
	jsdai.SExtended_dictionary_schema.ETarget_parameter tp = null;
	jsdai.SExtended_dictionary_schema.EAggregate_target_parameter atp = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = null;
//	jsdai.SExtended_dictionary_schema.EInteger_bound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EBound bounds [] = new jsdai.SExtended_dictionary_schema.EInteger_bound[2];
	jsdai.SExtended_dictionary_schema.EInteger_bound b1;
	boolean is_aggregate = false;
	Vector parameter_ids = new Vector();
	String id = null;
}
{
	{
		printDebug("In TargetParameter5, starting, parent map definition: " + parent);
	}
	name = TargetParameterId5() {parameter_ids.addElement(name);} ( "," name = TargetParameterId5() {parameter_ids.addElement(name);} )* ":" [ <AGGREGATE> { is_aggregate = true; }[ bounds = BoundSpec5() ] <OF> ] ed = TargetEntityReference5()
	{
		// determine which min pass required
		if (parser_pass == 1) {

			for (int i = 0; i < parameter_ids.size(); i++) {
				id = (String)parameter_ids.elementAt(i);
				tp = findTarget_parameter(id);
				if (tp != null) {
					// error, the same name
				}
				if (is_aggregate) {
					atp = (jsdai.SExtended_dictionary_schema.EAggregate_target_parameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAggregate_target_parameter.class);
					tp = atp;
				} else {
					tp = (jsdai.SExtended_dictionary_schema.ETarget_parameter)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CTarget_parameter.class);
				}
				tp.setName(null, id);
				tp.setParent(null, parent);
//				tp.setOrder(null, target_parameter_order_count++);
			}


		} else 
		if (parser_pass == 4) {
			if (is_aggregate) {

//				at = (jsdai.SExtended_dictionary_schema.ESet_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CSet_type.class);

				// at = (jsdai.SExtended_dictionary_schema.EAggregation_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CAggregation_type.class);
			  // name may have to be corrected later
//		  	at.setName(null, "_TARGET_PARAMETER_SET");
//		  	_data_type_name = "_TARGET_PARAMETER_SET";
//		  	if (ed != null) {
//				at.setElement_type(null, ed);
//		  	} else {
//		  		System.out.println("target_parameter aggregate member entity is null");
//		  	}

//				if (bounds[0] == null) {
//					b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CInteger_bound.class);
//					b1.setBound_value(null, 0);
//					bounds[0] = b1;
//				} 

//				at.setLower_bound(null, bounds[0]); 
//				if (bounds[1] != null) {
//					at.setUpper_bound(null, bounds[1]); 
//				}	else {
//					at.unsetUpper_bound(null);  // no need for that it is unset after creating
//				}
			}
			for (int i = 0; i < parameter_ids.size(); i++) {
				id = (String)parameter_ids.elementAt(i);
				tp = findTarget_parameter(id);
			// still need to create aggregate in the case of aggregate
				// tp.setLower_bound(null,);
				// tp.setUpper_bound(null,);

/*
				if (is_aggregate) {
					tp.setExtent(null, at);
				} else {
					tp.setExtent(null, ed);
				}
*/


				tp.setExtent(null, ed);
			} // for
			tp.setOrder(null, target_parameter_order_count++);
		} else 
		if (parser_pass == 5) {

			for (int i = 0; i < parameter_ids.size(); i++) {
				id = (String)parameter_ids.elementAt(i);
				tp = findTarget_parameterStrict(id);


				if (is_aggregate) {
					if (tp instanceof jsdai.SExtended_dictionary_schema.EAggregate_target_parameter) {
						atp = (jsdai.SExtended_dictionary_schema.EAggregate_target_parameter)tp;			
						if (bounds[0] != null) {
							atp.setLower_bound(null, bounds[0]); 
						}
						if (bounds[1] != null) {
							atp.setUpper_bound(null, bounds[1]); 
						}	
					} else {
						// internal error
					}	

				} // if aggregate
			} // for
		}
		printDebug("In TargetParameter5, ending");
	}
}

/*--------- ISO 10303-14:B.2.213  ---*/
String TargetParameterId5() throws jsdai.lang.SdaiException :
{
	String result = null;
}
{
	{
		printDebug("In TargetParameterId5, starting");
	}
	result = ParameterId5()
	{
		printDebug("In TargetParameterId5, ending: " + result);
		return result;
	}
}

/*--------- ISO 10303-14:B.2.214  ---*/
jsdai.SExtended_dictionary_schema.ETarget_parameter TargetParameterRef5() throws jsdai.lang.SdaiException #TargetParameterRef:
{
	String name;
	jsdai.SExtended_dictionary_schema.ETarget_parameter result = null;
}
{
	name = TargetParameterId5()
	{
 	  printDDebug("IN target_parameter_ref");
		result = findTarget_parameter(name);
//		jjtThis.name = name;
		jjtThis.name = result.getName(null);
		if (result.testOrder(null)) {
			jjtThis.order = result.getOrder(null);
		}
		return result;
	}
}

jsdai.SExtended_dictionary_schema.ETarget_parameter TargetParameterRefStrict5() throws jsdai.lang.SdaiException #TargetParameterRef:
{
	String name;
	jsdai.SExtended_dictionary_schema.ETarget_parameter result = null;
}
{
	name = TargetParameterId5()
	{
 	  printDDebug("IN target_parameter_ref");
		result = findTarget_parameterStrict(name);
//		jjtThis.name = name;
		jjtThis.name = result.getName(null);
		if (result.testOrder(null)) {
			jjtThis.order = result.getOrder(null);
		}
		return result;
	}
}


// added by RR, not in part 14
jsdai.SExtended_dictionary_schema.ESource_parameter SourceParameterRef5() throws jsdai.lang.SdaiException #SourceParameterRef:
{
	String name;
	jsdai.SExtended_dictionary_schema.ESource_parameter result = null;
}
{
	name = SourceParameterId5()
	{
		 printDDebug("IN source_parameter_ref");
     result = findSource_parameter(name);
//     jjtThis.name = name;
     jjtThis.source_parameter = result;
		 jjtThis.partition = result.getParent(null);
     jjtThis.name = result.getName(null);
     if (result.testOrder(null)) {
     	jjtThis.order = result.getOrder(null);
		 }	
		 return result;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.303------------ */
void Term5() throws jsdai.lang.SdaiException :
{
	Object operand1 = null;
	Object operand2;
	String x_operand1 = "";
	String x_operand2 = "";
	String x_result = "";
	double op1double;
	double op2double;
	int op1int;
	int op2int;
	int operation;
	int op_nr = 0;
	int nr_of_operands = 0;

}
{
	(
	Factor5()
	{
		if (parser_pass == 5) {
			nr_of_operands++;
			operand1 = argument_stack.pop();
			printStack("POP: Term5, operand1: " + operand1);
			if (expression_instances) {
				// x_operand1 = (String)expression_stack.pop();
				// printXStack("POP: Term5, operand1: " + x_operand1);
				// x_result = x_operand1;
			}
		}
 }
 // "*" choice conflict, probably caused by nested grammar, or something, ignore? lookahead 2 to suppress the warning
 ( LOOKAHEAD(2) operation = MultiplicationLikeOp5() Factor5()
 {
	 if (parser_pass == 5) {
		nr_of_operands++;
		if (expression_instances) {
//			jjtThis.operations[op_nr++] = operation;
			jjtThis.operations.add(new Integer(operation));
			op_nr++;
		}
		operand2 = argument_stack.pop();
		printStack("POP: Term5, operand2: " + operand2);
		if (expression_instances) {
			// x_operand2 = (String)expression_stack.pop();
			// printXStack("POP: Term5, operand2: " + x_operand2);
		}
		if (operation == 1) {       // *
			if ((operand1 instanceof Integer) && (operand2 instanceof Integer)) {
				op1int = ((Integer)operand1).intValue();
				op2int = ((Integer)operand2).intValue();
				op1int *= op2int;
				operand1 = new Integer(op1int);
			}       else
			if ((operand1 instanceof Number) && (operand2 instanceof Number)) {
				op1double = ((Number)operand1).doubleValue();
				op2double = ((Number)operand2).doubleValue();
				op1double *= op2double;
				operand1 = new Double(op1double);

			}
			if (expression_instances) {
				// x_result = x_operand1 + " * " + x_operand2;
//                              x_result = "(" + x_operand1 + " * " + x_operand2 + ")";
				// x_operand1 = x_result;
		  }
		}       else
		if (operation == 2) {  // /
			if ((operand1 instanceof Integer) && (operand2 instanceof Integer)) {
				op1int = ((Integer)operand1).intValue();
				op2int = ((Integer)operand2).intValue();
				if (op2int != 0) {
					op1int /= op2int;
				} else {
//					printError("devide by zero in expression");
					printErrorMsg("" + "" + " - devide by zero in expression", null, true);
					printDebug("Expression5 - devide by zero");
				}
				operand1 = new Integer(op1int);
			} else
			if ((operand1 instanceof Number) && (operand2 instanceof Number)) {
				op1double = ((Number)operand1).doubleValue();
				op2double = ((Number)operand2).doubleValue();
				if (op2double != 0) {
					op1double /= op2double;
				} else {
					printErrorMsg("" + "" + " - devide by zero in expression", null, true);
//					printError("devide by zero in expression");
					printDebug("Expression5 - devide by zero");
				}
				operand1 = new Double(op1double);
			}
			if (expression_instances) {
				// x_result = x_operand1 + " / " + x_operand2;
//                              x_result = "(" + x_operand1 + " / " + x_operand2 + ")";
				// x_operand1 = x_result;
		  }
		} else
		if (operation == 3) {  // DIV
			if (expression_instances) {
//                              x_result = x_operand1 + " / " + x_operand2;
				// x_result = "((int)" + x_operand1 + " / (int)" + x_operand2 + ")";
				// x_operand1 = x_result;
		  }
		} else
		if (operation == 4) {  // MOD
			if (expression_instances) {
//                              x_result = x_operand1 + " % " + x_operand2;
				// x_result = "((int)" + x_operand1 + " % (int)" + x_operand2 + ")";
				// x_operand1 = x_result;
		  }
		} else
		if (operation == 5) {  // AND
			if (expression_instances) {
				// x_result = x_operand1 + " & " + x_operand2;
//                              x_result = "(" + x_operand1 + " & " + x_operand2 + ")";
				// x_operand1 = x_result;
			}
		} else
		if (operation == 6) {  // ||
		}
	}
	}
 )*
 ) #MultiplicationLikeOp(nr_of_operands > 1)
 {
	if (parser_pass == 5) {
		argument_stack.push(operand1);
		printStack("PUSH: Term5 " + operand1);
		if (expression_instances) {
			// expression_stack.push(x_result);
			// printXStack("PUSH: Term5, result: " + x_result);
		}
	}
 }
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.304------------ */
void TypeDecl5() throws jsdai.lang.SdaiException #TypeDecl:
{
	String type_name;
	jsdai.SExtended_dictionary_schema.EDefined_type dt;
//      jsdai.SExtended_dictionary_schema.ELocal_declaration$type_declaration ltd;
	jsdai.SExtended_dictionary_schema.EDeclaration ltd;
	Token a_token;
}
{
try {
(
	{
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	a_token = <TYPE> type_name = TypeId5()
	{
		printDebug("In TypeDecl5, starting. Type: " + type_name);
		if (parser_pass == 1) {
			dt = findDefined_type(type_name);
			if (dt != null) {
						error_count++;
						printDebug("duplicate defined type name \"" + type_name + "\"");
			} else
			{
				String wrong_name = findAnyName(type_name);
				if (wrong_name != null) {
						error_count++;
						printDebug("duplicate name \"" + type_name + "\". The same name used for a defined type and for " + wrong_name);
				}
			}
			dt = (jsdai.SExtended_dictionary_schema.EDefined_type)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDefined_type.class);
			active_scope = dt;
		  ltd = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$type_declaration.class);
			ltd.setParent(null, sd);
			// parent_schema is now derived instead of explicit 
			// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				// ltd.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
			// }
			ltd.setDefinition(null, dt);
			if (flag_oc) {
				dt.setName(null, type_name);
			} else {
				dt.setName(null, type_name.toLowerCase());
			}
			hm_current_type_declarations.put(type_name.toLowerCase(), ltd);
//                      dt.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
			// now it is inverse
			// dt.createWhere_rules(null);
			createDocumentationEntity2(dt, a_token);
		} else
		{
			dt = findDefined_type(type_name);
		  active_scope_extension = new ECtScope(active_scope, dt, active_scope_extension, active_scope_string, type_name, type_name.toLowerCase());
 			active_scope_string = "";
			active_scope = dt;
			if (dt == null) {
				error_count++;
				printErrorMsg5("" + type_name +  " - type not found", null, true);
				printDebug("TypeDecl5 - defined type not found: " + type_name);
			}
			if (parser_pass == 5) {
				if (expression_instances) {
					jjtThis.dt = dt;
					if (dt != null) {
						jjtThis.name = dt.getName(null);
					} else {
//System.out.println("<EC> type null: " + type_name);
printErrorMsgX("reference to unknown type: " + type_name, null, true);
						jjtThis.name = type_name;
					}
				}
			}

		}
	}
	 "=" UnderlyingType5(dt) ";" [WhereClause5(dt)] <END_TYPE>
	 {
		active_scope = null;
		active_scope_string =  active_scope_extension.getParent_scope_string();
	  active_scope_extension = active_scope_extension.getParent();


		current_scope = (Vector)scope_stack.pop();
		printDebug("In TypeDecl5, ending. Type: " + type_name);
// System.out.println("O-O-12 - defined type: " + dt);
	 } ";"
)
} catch (ParseException e) {
//	System.out.println("EXCEPTION: " + e);
	 printErrorMsg5(e.getMessage(), null, true);
	// System.out.println("ERROR RECOVERY: skipping to END_TYPE");
		error_count++;
	recoverFromParseException(END_TYPE, e);
}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.305------------ */
String TypeId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}
/* - LOOKAHEAD 2 - (Columns 3 & 19) --------------------------------------------------- ISO 10303-11:A.2.306------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict involving 2 expansions at 3 and 19.
		 Common prefix <SIMPLE_ID>
		 Lookahead of 2 should be used for the earlier expansion.
*/
String TypeLabel5() throws jsdai.lang.SdaiException :
{
	String Label5 = null;
}
{
	{
		printDebug("In TypeLabel5, starting");
	}
//      (Label5 = TypeLabelId5() | TypeLabelRef5())
	Label5 = TypeLabelId5()
	{
		printDebug("In TypeLabel5, ending");
		return Label5;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.307------------ */
String TypeLabelId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*--------- ISO 10303-14:B.2.219  ---*/
jsdai.SExtended_dictionary_schema.EDefined_type TypeReference5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
}
{
	// choice conflict - simple_id
	// this should work (or lookahead (2), if there is no "." following TypeReference5(), seems not to be
	[ LOOKAHEAD(SchemaRef5() ".") SchemaRef5() "." ] dt = TypeRef5(0) 
	{
		return dt;	
	}
}



/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.308------------ */
int UnaryOp5() throws jsdai.lang.SdaiException :
{
	int t;

}
{
	{
		printDebug("In UnaryOp5");
	}
	("+" {t = 1;}| "-" {t = 2;}
	| <NOT> {t = 3;})
	{
		return t;
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.309------------ */
void UnderlyingType5(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EAggregation_type at = null;
	jsdai.SExtended_dictionary_schema.ESimple_type st = null;
	jsdai.SExtended_dictionary_schema.EDefined_type dt2 = null;
}
{
	ConstructedTypes5(dt)
	| at = AggregationTypes5(dt)
	{
		// if (parser_pass > 3) {  // was == 2
		//	 dt.setDomain(null, at);
		// }
		if ((dt != null) && (at != null)) {
	  	if (!(dt.testDomain(null))) {
				dt.setDomain(null, at);
			}
		} 
	}
	| st = SimpleTypes5(dt)
	{
		if (parser_pass > 3) {  // was == 3
			if (st != null) {
				dt.setDomain(null, st);
			} else {
				printVerbose("ERROR: domain st unset");
			}
		}
	}
	| dt2 = TypeRef5(0) // previously - TypeRef5(4); - who knows why
	{
		if (parser_pass > 3) {  // was == 3
			dt.setDomain(null, dt2);
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.310------------ */
void UniqueClause5(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{}
{
	<UNIQUE> (UniqueRule5(ed) ";")+
}
/* - LOOKAHEAD 2 or > - (Column 3) ---------------------------------------------------- ISO 10303-11:A.2.311------------ */
/*
		 LOKAHEAD NEEDED! Choice conflict in [] construct (column 3).
		 Expansion nested within construct and expansion following construct have common prefixes,
		 one of which is <SIMPLE_ID>. Lookahead of 2 or more should be used for the nested expansion.
*/
void UniqueRule5(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException :
{
	String name = null;
	jsdai.SExtended_dictionary_schema.EUniqueness_rule ur;
	jsdai.SExtended_dictionary_schema.AAttribute aa = null;
	jsdai.SExtended_dictionary_schema.EAttribute a;
	int Index5 = 1;
}
{
	// <SIMPLE_ID> choice conflict, ":" allows to confirm the optional Label5, lookahead 2 is ok
	[LOOKAHEAD(2) name = Label5() ":"] a = ReferencedAttribute5(ed)
	{
		if (parser_pass == 5) {
			ur = (jsdai.SExtended_dictionary_schema.EUniqueness_rule)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CUniqueness_rule.class);
			if (name != null)
				ur.setLabel(null, name);
			ur.setParent_entity(null, ed);
			aa = ur.createAttributes(null);
			if (a != null)
				aa.addByIndex(Index5++, a);
			else {
				error_count++;
				printErrorMsg5(" name not available - attribute not found in uniqueness rule", null, true);
				printDebug("Uniqness rule - attribute not found");
			}
		}
	}
	("," a = ReferencedAttribute5(ed)
	{
		if (parser_pass == 5) {
			if (a != null)
				aa.addByIndex(Index5++, a);
			else {
				error_count++;
				printErrorMsg5(" name not available - attribute not found in uniqueness rule", null, true);
				printDebug("Uniqness rule - attribute not found");
			}
		}
	}
	)*
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.312------------ */
void UntilControl5() throws jsdai.lang.SdaiException #UntilControl :
{}
{
	<UNTIL> LogicalExpression5()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.313------------ */
void UseClause5(Vector used_vector) throws jsdai.lang.SdaiException :
{
  String used_schema;
	jsdai.lang.SdaiModel interfaced_model;
	boolean items_listed = false;
	jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
	Vector items_vector;
	jsdai.SExtended_dictionary_schema.EUse_from_specification ufs = null;
//	jsdai.SExtended_dictionary_schema.AUsed_declaration items = null;
	jsdai.SExtended_dictionary_schema.AInterfaced_declaration items = null;
}
{
	<USE> <FROM> used_schema = SchemaRef5()
	{
		items_vector = new Vector();
		interfaced_model = findModel(used_schema);
//              if (interfaced_model == null) {
		if ((interfaced_model == null) && (parser_pass != 1)) {
		error_count++;
			printErrorMsg5("" + used_schema + " - schema not found", null, true);
			printDebug("schema not found: " + used_schema);
		}
// 		if ((parser_pass == 2) && (interfaced_model != null)) {
 		if (interfaced_model != null) {
			if (interfaced_model.getMode() == jsdai.lang.SdaiModel.NO_ACCESS) {
				interfaced_model.startReadOnlyAccess();
      			}
    		}
	}
	["(" dc = NamedTypeOrRename5(interfaced_model) {items_listed = true; items_vector.addElement(dc);}("," dc = NamedTypeOrRename5(interfaced_model) { items_vector.addElement(dc);})* ")"] ";"
	{
		if (parser_pass == 2) {
			ufs = (jsdai.SExtended_dictionary_schema.EUse_from_specification)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CUse_from_specification.class);
			jsdai.SExtended_dictionary_schema.ESchema_definition asd = getSchema_definitionFromModel(interfaced_model);
			if (asd != null) {
				ufs.setForeign_schema(null, asd);  // generic_schema_definition;
			}

			ufs.setCurrent_schema(null, sd); // generic_schema_definition;
			if (!items_listed) {
				if (interfaced_model != null) {
					createAllUsedDeclarations(interfaced_model);
					// here the interfaced_model is stored.
					used_vector.addElement(interfaced_model);
				}
			} else {
				items = ufs.createItems(null);		
				for (int i = 0; i < items_vector.size(); i++) {
//					items.addByIndex(i, (jsdai.SExtended_dictionary_schema.EUsed_declaration)items_vector.elementAt(i));
//					items.addByIndex(i, (jsdai.SExtended_dictionary_schema.EInterfaced_declaration)items_vector.elementAt(i));
					items.addUnordered((jsdai.SExtended_dictionary_schema.EUsed_declaration)items_vector.elementAt(i));
				}
			}
		}
	}
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.314------------ */
String VariableId5() :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*-+-------- ISO 10303-14:B.2.223  ---*/
void ViewAttributeDecl5(jsdai.SExtended_dictionary_schema.EIndependent_view_definition vd, jsdai.SExtended_dictionary_schema.EView_partition partition, boolean first_partition) throws jsdai.lang.SdaiException :
{
	String attr_name;
	boolean is_optional = false;
	jsdai.SExtended_dictionary_schema.ESchema_definition ssd = null;
	jsdai.lang.EEntity bt = null;
	jsdai.SExtended_dictionary_schema.EView_attribute va = null;
	jsdai.SExtended_dictionary_schema.EView_partition_attribute vpa = null;
}
{
//      ViewAttributeId5() ":" [ <OPTIONAL> ] [ SourceSchemaRef55() "." ] BaseType5(null) ":=" Expression5() ";"
//	attr_name = ViewAttributeId5() ":" [ <OPTIONAL> {is_optional = true;}] [  LOOKAHEAD(2) ssd = (jsdai.SExtended_dictionary_schema.ESchema_definition)InterpretedRef5(PI_SOURCE_SCHEMA) "." ] bt = BaseType5(ssd) ":=" Expression5() ";"
	// <SIMPLE_ID> choice conflict, "." allows to confirm the optional part, lookahead 2 is ok.
	attr_name = ViewAttributeId5() ":" [ <OPTIONAL> {is_optional = true;}] [  LOOKAHEAD(2) ssd = SourceSchemaRef55() "." ] bt = BaseType5(ssd) ":=" Expression5() ";"
	{
		// check which parser pass better to use.
		if (parser_pass == 1) {
				va = findView_attribute(attr_name, vd);
				if (va != null) {
					// error
				}

			if (first_partition) {
				// if first partition, create both view_attribute and view_partition_attirbute
				va =  (jsdai.SExtended_dictionary_schema.EView_attribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CView_attribute.class);
//				va.setParent_entity(null, vd);
				va.setParent(null, vd);
				va.setName(null, attr_name);
//				va.setOrder(null, view_attribute_order_count++);
				va.setOptional_flag(null, is_optional);
// System.out.println("SET OPTIONAL 11, attribute: " + va);
			} else {
				// if subsequent partition, find view_attribute and create view_partition_attribute
				va = findView_attribute(attr_name, vd);
			}
			vpa = (jsdai.SExtended_dictionary_schema.EView_partition_attribute)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CView_partition_attribute.class);
			vpa.setParent_view_attribute(null, va);
			vpa.setRelated_partition(null, partition);
		} else {
			va = findView_attribute(attr_name, vd);			
			if (parser_pass == 4) {
				va.setOrder(null, view_attribute_order_count++);
			}
		}
	}
}

/*--------- ISO 10303-14:B.2.224  ---*/
String ViewAttributeId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*-+-------- ISO 10303-14:B.2.225  ---*/
void ViewAttrDeclStmtList5(jsdai.SExtended_dictionary_schema.EIndependent_view_definition vd, jsdai.SExtended_dictionary_schema.EView_partition partition, boolean first_partition) throws jsdai.lang.SdaiException :
{}
{
	{
		view_attribute_order_count = 0;
	}
	( ViewAttributeDecl5(vd, partition, first_partition) )+
}

/*-+-------- ISO 10303-14:B.2.226  ---*/
Object ViewCall5() throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
	jsdai.SExtended_dictionary_schema.EView_partition vp = null;
	jsdai.SExtended_dictionary_schema.EMap_or_view_partition partition = null;
}
{
	{
		printDebug("In ViewCall5, starting");
	}
	vd = ViewReference5() [ partition = PartitionQualification5(vd) ] "(" [ ExpressionOrWild5() ( "," ExpressionOrWild5() )* ] ")"
	{
		printDebug("In ViewCall5, ending");
	  return null;
	}
}

/*-+-------- ISO 10303-14:B.2.227  ---*/


//view_decl = VIEW view_id independent_view_decl | dependent_view_decl  END_VIEW ';'
void ViewDecl5() throws jsdai.lang.SdaiException :
{
	String view_name;
	Token a_token;
}
{
	{
		scope_stack.push(current_scope);
		current_scope = new Vector();
	}
	a_token = <VIEW> view_name = ViewId5()  ( DependentViewDecl5(a_token, view_name) | IndependentViewDecl5(a_token, view_name) ) <END_VIEW> ";"
	{
		current_scope = (Vector)scope_stack.pop();
	}
}

// independent_view_decl = root_view_decl | subtype_view_decl
void IndependentViewDecl5(Token a_token, String view_name) throws jsdai.lang.SdaiException :
{
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration vld = null;
}
{
	{
		printDebug("Current view: " + view_name);
		if (parser_pass == 1) {
			// check if a view with this name already exists in the extent.
			vd = findView_definition(view_name, null);
			if (vd != null) {
				error_count++;
//				printError("duplicate view name \"" + view_name + "\"");
			} else {
				String wrong_name = findAnyName(view_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + view_name + "\". The same name used for a view and for " + wrong_name);
				}
				vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CIndependent_view_definition.class);
				active_scope = vd;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				vld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$view_declaration.class);


//				vld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				vld.setParent(null, sd);
				vld.setDefinition(null, vd);

				vd.setName(null, view_name);
				// supertypes is non-optional attribute, although there are no supertypes in dependent_views.
//				vd.createSupertypes(null);
				vd.createGeneric_supertypes(null);
			}
		}       else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper5()
			vd = findView_definition(view_name, null);
			active_scope = vd;
			if (vd == null) {
				error_count++;
//				printError("ViewDecl5 - the view not found: " + view_name);
//				printError("" + view_name + " - view not found", null, true);
				printErrorMsg("" + view_name + " - view not found", null, true);
			}
		}
		// createDocumentationEntity2(vd, a_token);
	}
	[ SupertypeConstraint5(vd) ]
	( SubtypeViewDecl5(vd) | RootViewDecl5(vd) ) 
}

// root_view_decl = [supertype_constraint] ';' binding_header independent_view_project_clause {binding_header independent_view_project_clause}
void RootViewDecl5(jsdai.SExtended_dictionary_schema.EView_definition vd) throws jsdai.lang.SdaiException :
{
	jsdai.lang.EEntity partition_e = null;
	jsdai.SExtended_dictionary_schema.EView_partition partition = null;
}
{
	  ";"
	  partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	  IndependentViewProjectClause5(vd, partition, true) 
	  ( 
//           LOOKAHEAD(BindingHeader5(vd)) partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	    partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	    IndependentViewProjectClause5(vd, partition, false) 
	  )* 
}

// subtype_view_decl = [supertype_constraint] subtype_declaration ';' subtype_binding_header independent_view_project_clause {subtype_binding_header independent_view_project_clause}
void SubtypeViewDecl5(jsdai.SExtended_dictionary_schema.EView_definition vd) throws jsdai.lang.SdaiException :
{
	jsdai.lang.EEntity gen_partition = null;
}
{
 	  SubtypeDeclaration5(vd) ";"
	  gen_partition = SubtypeBindingHeader5(vd) 
	  IndependentViewProjectClause5(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, true) 
	  // <PARTITION> choice conflict
	  ( 
//	    LOOKAHEAD(SubtypeBindingHeader5(vd)) gen_partition = SubtypeBindingHeader5(vd) 
	    gen_partition = SubtypeBindingHeader5(vd) 
	    IndependentViewProjectClause5(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, false) 
	  )* 
}

// dependent_view_decl = ':' base_type [supertype_constraint] ';' binding_header RETURN Expression5 {binding_header RETURN Expression5}
void DependentViewDecl5(Token a_token, String view_name) throws jsdai.lang.SdaiException :
{
	jsdai.lang.EEntity bt = null;
	jsdai.lang.EEntity partition_e = null;
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration vld = null;
	jsdai.SExtended_dictionary_schema.EView_partition partition = null;
}
{
	":" bt = BaseType5(null) 
	
	{
		printDebug("Current view: " + view_name);
		if (parser_pass == 1) {
			// check if a view with this name already exists in the extent.
			vd = findView_definition(view_name, null);
			if (vd != null) {
				error_count++;
//				printError("duplicate view name \"" + view_name + "\"");
			} else {
				String wrong_name = findAnyName(view_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + view_name + "\". The same name used for a view and for " + wrong_name);
				}
				vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDependent_view_definition.class);
				((jsdai.SExtended_dictionary_schema.EDependent_view_definition)vd).setDomain(null, bt);
				active_scope = vd;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				vld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$view_declaration.class);


//				vld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				vld.setParent(null, sd);
				vld.setDefinition(null, vd);

				vd.setName(null, view_name);
				// supertypes is non-optional attribute, although there are no supertypes in dependent_views.
//				vd.createSupertypes(null);
				vd.createGeneric_supertypes(null);
			}
		} else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper5()
			vd = findView_definition(view_name, null);
			active_scope = vd;
			if (vd == null) {
				error_count++;
//				printError("ViewDecl5 - the view not found: " + view_name);
				printErrorMsg("" + view_name + " - view not found", null, true);
			}
		}
		// createDocumentationEntity2(vd, a_token);
	}
	
	
	[ SupertypeConstraint5(vd) ] 
        partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	<RETURN> Expression5()
	( 
	    // the choice problem here
	    partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	    <RETURN> Expression5()
	)* 
}

// independent_view_project_clause = SELECT view_attr_decl_stmt_list;
void IndependentViewProjectClause5(jsdai.SExtended_dictionary_schema.EView_definition vd, jsdai.SExtended_dictionary_schema.EView_partition partition, boolean first_partition) throws jsdai.lang.SdaiException :
{}
{
	<SELECT> ViewAttrDeclStmtList5((jsdai.SExtended_dictionary_schema.EIndependent_view_definition)vd, partition, first_partition)
}

void ViewDecl_previous5() throws jsdai.lang.SdaiException :
{
	String view_name;
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration vld = null;
	Token a_token;
	boolean is_dependent_view = false;
	jsdai.lang.EEntity bt = null;
	jsdai.SExtended_dictionary_schema.EView_partition partition = null;
	jsdai.lang.EEntity partition_e = null;
	jsdai.lang.EEntity gen_partition = null;
}
{
//      <VIEW> ViewId5() [ ":" BaseType5(null) ] [ SupertypeRule5() ] ";" ( ViewSubtypeOfClause() ( SubtypeBindingHeader5() ViewProjectClause5() )+ ) | ( ( BindingHeader5() ViewProjectClause5() )+ ) <END_VIEW> ";"
// not making the change from DIS
//old	<VIEW> ViewId5() [ ":" BaseType5(null) ] [ SupertypeConstraint5(null) ] ";" ( ViewSubtypeOfClause() ( LOOKAHEAD(3) SubtypeBindingHeader5() ViewProjectClause5() )+ ) | ( ( BindingHeader5() ViewProjectClause5() )+ ) <END_VIEW> ";"
	a_token = <VIEW> view_name = ViewId5() [ ":" bt = BaseType5(null) { is_dependent_view = true;}]  
	{
		printDebug("Current view: " + view_name);
		if (parser_pass == 1) {
			// check if a view with this name already exists in the extent.
			vd = findView_definition(view_name, null);
			if (vd != null) {
				error_count++;
//				printError("duplicate view name \"" + view_name + "\"");
			} else {
				String wrong_name = findAnyName(view_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + view_name + "\". The same name used for a view and for " + wrong_name);
				}
				if (is_dependent_view) {
					vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDependent_view_definition.class);
					((jsdai.SExtended_dictionary_schema.EDependent_view_definition)vd).setDomain(null, bt);
				} else {
					vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CIndependent_view_definition.class);
				}
				active_scope = vd;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				vld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$view_declaration.class);


//				vld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				vld.setParent(null, sd);
				vld.setDefinition(null, vd);

				vd.setName(null, view_name);
				// supertypes is non-optional attribute, although there are no supertypes in dependent_views.
//				vd.createSupertypes(null);
				vd.createGeneric_supertypes(null);
			}
		}       else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper5()
			vd = findView_definition(view_name, null);
			if (vd == null) {
				error_count++;
//				printError("ViewDecl5 - the view not found: " + view_name);
				printErrorMsg("" + view_name + " - view not found", null, true);
			}
		}
		// createDocumentationEntity2(vd, a_token);
	}

	SubSuper5(vd) ";" 
	( 
	  partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	  ViewProjectClause5(vd, partition, true) 
	  ( 
//           LOOKAHEAD(BindingHeader5(vd)) partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
//	    partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	    LOOKAHEAD(100) partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	    ViewProjectClause5(vd, partition, false) 
	  )* 
	) 
	|
	(  
	  gen_partition = SubtypeBindingHeader5(vd) 
	  ViewProjectClause5(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, true) 
	  // <PARTITION> choice conflict
	  ( 
//	    LOOKAHEAD(SubtypeBindingHeader5(vd)) gen_partition = SubtypeBindingHeader5(vd) 
	    gen_partition = SubtypeBindingHeader5(vd) 
	    ViewProjectClause5(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, false) 
	  )* 
	) 
	<END_VIEW> ";"
}


void ViewDecl_old5() throws jsdai.lang.SdaiException :
{
	String view_name;
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
	jsdai.SExtended_dictionary_schema.EDeclaration vld = null;
	Token a_token;
	boolean is_dependent_view = false;
	jsdai.lang.EEntity bt = null;
	jsdai.SExtended_dictionary_schema.EView_partition partition = null;
	jsdai.lang.EEntity partition_e = null;
	jsdai.lang.EEntity gen_partition = null;
}
{
//      <VIEW> ViewId5() [ ":" BaseType5(null) ] [ SupertypeRule5() ] ";" ( ViewSubtypeOfClause() ( SubtypeBindingHeader5() ViewProjectClause5() )+ ) | ( ( BindingHeader5() ViewProjectClause5() )+ ) <END_VIEW> ";"
// not making the change from DIS
//old	<VIEW> ViewId5() [ ":" BaseType5(null) ] [ SupertypeConstraint5(null) ] ";" ( ViewSubtypeOfClause() ( LOOKAHEAD(3) SubtypeBindingHeader5() ViewProjectClause5() )+ ) | ( ( BindingHeader5() ViewProjectClause5() )+ ) <END_VIEW> ";"
	a_token = <VIEW> view_name = ViewId5() [ ":" bt = BaseType5(null) { is_dependent_view = true;}]  
	{
		printDebug("Current view: " + view_name);
		if (parser_pass == 1) {
			// check if a view with this name already exists in the extent.
			vd = findView_definition(view_name, null);
			if (vd != null) {
				error_count++;
//				printError("duplicate view name \"" + view_name + "\"");
			} else {
				String wrong_name = findAnyName(view_name);
				if (wrong_name != null) {
					error_count++;
//					printError("duplicate name \"" + view_name + "\". The same name used for a view and for " + wrong_name);
				}
				if (is_dependent_view) {
					vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CDependent_view_definition.class);
					((jsdai.SExtended_dictionary_schema.EDependent_view_definition)vd).setDomain(null, bt);
				} else {
					vd = (jsdai.SExtended_dictionary_schema.EView_definition)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CIndependent_view_definition.class);
				}
				active_scope = vd;
//                              eld = (jsdai.SExtended_dictionary_schema.EEntity_declaration$local_declaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$local_declaration.class);
				vld = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CLocal_declaration$view_declaration.class);

	if (sd == null) {		
//              System.out.println("SD NULL, view_name: " + view_name + ", pass: " + parser_pass);
	} else {
	}

//				vld.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				vld.setParent(null, sd);
				vld.setDefinition(null, vd);

				vd.setName(null, view_name);
				// supertypes is non-optional attribute, although there are no supertypes in dependent_views.
//				vd.createSupertypes(null);
				vd.createGeneric_supertypes(null);
			}
		}       else { // pass 2 or 3 - find the entity in the extent before passing it to SubSuper5()
			vd = findView_definition(view_name, null);
			if (vd == null) {
				error_count++;
//				printError("ViewDecl5 - the view not found: " + view_name);
				printErrorMsg("" + view_name + " - view not found", null, true);
			}
		}
		// createDocumentationEntity2(vd, a_token);
	}

{
printDebug("In ViewDecl5, before SubSuper5");
}
	SubSuper5(vd) ";" 
{
printDebug("In ViewDecl5, after SubSuper5");
}
	(  
{
printDebug("In ViewDecl5, starting subtype branch");
}
	gen_partition = SubtypeBindingHeader5(vd) 
{
printDebug("In ViewDecl5, subtype branch, before ViewProjectClause5");
}
	ViewProjectClause5(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, true) 
{
printDebug("In ViewDecl5, subtype branch, after 1st ViewProjectClause5");
}
	// <PARTITION> choice conflict
	( LOOKAHEAD(SubtypeBindingHeader5(vd)) gen_partition = SubtypeBindingHeader5(vd) 
	ViewProjectClause5(vd, (jsdai.SExtended_dictionary_schema.EView_partition)gen_partition, false) )* ) | 
	( 
{
printDebug("In ViewDecl5, starting no-subtype branch");
}
	partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
{
printDebug("In ViewDecl5, no-subtype branch, before ViewProjectClause5");
}
	ViewProjectClause5(vd, partition, true) 
{
printDebug("In ViewDecl5, no-subtype branch, after 1st ViewProjectClause5");
}
	( partition_e = BindingHeader5(vd) {partition = (jsdai.SExtended_dictionary_schema.EView_partition)partition_e;} 
	ViewProjectClause5(vd, partition, false) )* ) <END_VIEW> ";"
}


/*--------- ISO 10303-14:B.2.228  ---*/
String ViewId5() throws jsdai.lang.SdaiException :
{
	Token t;
}
{
	t = <SIMPLE_ID>
	{
		if (flag_oc) {
			return (t.image);
		} else {
			return (t.image.toLowerCase());
		}
	}
}

/*-+-------- ISO 10303-14:B.2.229  ---*/
void ViewProjectClause5(jsdai.SExtended_dictionary_schema.EView_definition vd, jsdai.SExtended_dictionary_schema.EView_partition partition, boolean first_partition) throws jsdai.lang.SdaiException :
	{}
{
	 ( <SELECT> ViewAttrDeclStmtList5((jsdai.SExtended_dictionary_schema.EIndependent_view_definition)vd, partition, first_partition) ) | ( <RETURN> Expression5() )
}

/*--------- ISO 10303-14:B.2.230 ---*/
jsdai.SExtended_dictionary_schema.EView_definition ViewReference5() throws jsdai.lang.SdaiException :
{ 
	jsdai.SExtended_dictionary_schema.EView_definition vd = null;
}
{
//      [ (SchemaMapRef5() | SchemaViewRef55() ) "." ] ViewRef5()
//      [ SchemaRef5()  "." ] ViewRef5()
		// "." allows to confirm the presence of the optional prefix, lookahead 2 is ok
		[  LOOKAHEAD(2) InterpretedRef5(PI_SCHEMA_MAP_OR_SCHEMA_VIEW) "." ] InterpretedRef5(PI_VIEW)
	{
		return vd;
	}
}

/*-+-------- ISO 10303-14:B.2.231  ---*/
// removed -

//R void ViewSubtypeOfClause() throws jsdai.lang.SdaiException :
//R {}
//C {
//	<SUBTYPE> <OF> "(" ViewReference5() ( "," ViewReference5() )* ")" 
// my correction:
//R	<SUBTYPE> <OF> "(" ViewReference5() ( "," ViewReference5() )* ")" ";" 
//R }


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.315------------ */
void WhereClause5(jsdai.lang.EEntity parent) throws jsdai.lang.SdaiException #WhereClause:
{
	jsdai.SExtended_dictionary_schema.EWhere_rule wr = null;
	jsdai.SExtended_dictionary_schema.AWhere_rule ar = null;
  	no_label_nr = 0;
  	int Index5 = 1;
  	if (parser_pass == 5) {
	  if (parent instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
		// the second Parameter5 - domain, just adding null - the current model, for now.
	  	ar = ((jsdai.SExtended_dictionary_schema.ENamed_type)parent).getWhere_rules(null, null);
	  } else
	  if (parent instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
		// the second Parameter5 - domain, just adding null - the current model, for now.
		ar = ((jsdai.SExtended_dictionary_schema.EGlobal_rule)parent).getWhere_rules(null, null);
	  } else {
			// may be from express x - binding_header
			// printError("Internal error in WhereClause5");
			// error_count++;
		        // System.out.println("name: " + parent.getName(null));
	  }
  	}
}
{
	{
		where_rule_order_count = 0;
		active_scope = parent;
		printDebug("In WhereClause5, starting, parent: " + parent);
	}
	// choice conflict here
	// <WHERE> ( LOOKAHEAD(2) wr = DomainRule5(parent)
	// problem is for_expr in SimpleFactor5 and EntityInstantiation_loop in map_decl_body
//	<WHERE> (wr = DomainRule5(parent)

// this approach causes parse exceptions in some cases in expressions, a more subtle approach is needed.
// for now, nothing, it is ok, if express x not used



  // attempt to solve problem in maps WHERE clause + FOR instantion loop expression

  // but it causes problems for some domain rules
//	<WHERE> (LOOKAHEAD(DomainRule5(parent))wr = DomainRule5(parent)
	
	
	//<WHERE> (LOOKAHEAD({getToken(1).kind != <FOR>})wr = DomainRule5(parent)
//	<WHERE> (LOOKAHEAD({!(getToken(1).image.equalsIgnoreCase("FOR"))})wr = DomainRule5(parent)

	//<WHERE> (LOOKAHEAD({getToken(1).kind != Compiler2Constants.FOR})wr = DomainRule5(parent)
//	<WHERE> (LOOKAHEAD(DomainRule5(parent))wr = DomainRule5(parent)

	 
// works everywhere and is more optimal than DomainRule5 in lookahead, this one to be used:	 
	 <WHERE> (LOOKAHEAD({isDomainRule()}) wr = DomainRule5(parent)
	
	


	// the original which is not able to handle WHERE + FOR instantiation loop in maps
//	<WHERE> (wr = DomainRule5(parent)

	// <WHERE> (LOOKAHEAD({isDomainRule()}) wr = DomainRule5(parent)



//	<WHERE> (LOOKAHEAD((isDomainRule())) wr = DomainRule5(parent)

//	<WHERE> (wr = DomainRule5(parent)
	{
		if (parser_pass == 5) { // DomainRule5() may return where_rule with logical Expression5 in the future, so better in pass 2
			if (expression_instances) {
				jjtThis.domain_rules.addElement(wr);
				jjtThis.where_rules = ar;
			}
			if (ar != null) {
//				ar.addByIndex(Index5++, wr);
				ar.addUnordered(wr);
				Index5++;
				if (parent instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
					wr.setParent_item(null, (jsdai.SExtended_dictionary_schema.ENamed_type)parent);
				} else
				if (parent instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
					wr.setParent_item(null, (jsdai.SExtended_dictionary_schema.EGlobal_rule)parent);
				} else {
					error_count++;
					printErrorMsg5(" name not available - internal error in WhereClause5", null, true);
					printEDebug("Internal error in WhereClause5");
				}
		  	}
		}
	}
	 ";")+
}
/*-------------------------------*/
/*
void ChoiceConflict () :
{}
{
	<BASED_ON> | <BASED_ON>
}
*/
/*-------------------------------*/


/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.316------------ */
void WhileControl5() throws jsdai.lang.SdaiException #WhileControl :
{}
{
	<WHILE> LogicalExpression5()
}
/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.317------------ */
int Width5() throws jsdai.lang.SdaiException :
{
	int value;
}
{
	value = NumericExpression5()
	{
		return value;
	}
}

/* ------------------------------------------------------------------------------------ ISO 10303-11:A.2.318------------ */
int WidthSpec5() throws jsdai.lang.SdaiException :
{

	int wide;
	boolean is_fixed = false;
}
{
	"(" wide = Width5() ")" [<FIXED> {is_fixed = true;}]
	{

		if (parser_pass == 5) {
			if (wide > 0) {
				if (is_fixed) {
					wide = -wide;
				}
			}

		}
		return wide;
	}
}



/*********** 5th pass - --- end-           ***/


/*************************************************************************************************************************/
/*************************************************************************************************************************/

JAVACODE

	Object findInNestedScope(String name) {
		Object scope_object = null;
		// first search in the current scope, then go through the outer scopes.
		for (int i = 0; i < current_scope.size(); i++) {
			scope_object = current_scope.elementAt(i);
			// get it's name, after the change in the schema, it may be named_object, simple implementation.
			String current_name = null; // not finished to implement.
			if (name.equalsIgnoreCase(current_name)) {
				return scope_object;
			}
		}
		// go down through the stack of scopes and check each scope as well.
		// not needed, because we decided not to support nested declarations, do not happen in real life, there are some unclear things about them.
		return scope_object;
	}


JAVACODE

	jsdai.SExtended_dictionary_schema.EEntity_or_view_definition findEntity_or_view_definition(String entity_or_view_name, String generic_schema_name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia;
		jsdai.lang.SdaiIterator iter_inst;
		String instance_name;
		 // the generic_schema_name parameter is optional
		 // if present, the model of that schema is found and a local entity or view definition matching the name is searched for in that model
		 // if absent,  the current model is searched for local or interfaced entity or view definition matching that name.
		if (generic_schema_name != null) {
			jsdai.lang.SdaiModel  the_model = findModel(generic_schema_name);
			if (the_model == null) return null;
			if(the_model.getMode() == jsdai.lang.SdaiModel.NO_ACCESS) {
				the_model.startReadOnlyAccess();
			}
			ia = the_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EEntity_or_view_definition.class);
			iter_inst = ia.createIterator();
			while (iter_inst.next()) {
				jsdai.SExtended_dictionary_schema.EEntity_or_view_definition def = (jsdai.SExtended_dictionary_schema.EEntity_or_view_definition)ia.getCurrentMemberObject(iter_inst);
				instance_name = def.getName(null);
				if (instance_name.equalsIgnoreCase(entity_or_view_name)) { // found! return it
					return def;
				}
			}
			return null;
		} else {

			ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EData_type_declaration.class);
			iter_inst = ia.createIterator();
			while (iter_inst.next()) {
				jsdai.SExtended_dictionary_schema.EDeclaration dec = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
				if ((dec instanceof jsdai.SExtended_dictionary_schema.EEntity_declaration) || (dec instanceof jsdai.SExtended_dictionary_schema.EView_declaration)) {
					jsdai.SExtended_dictionary_schema.EEntity_or_view_definition inst = (jsdai.SExtended_dictionary_schema.EEntity_or_view_definition)dec.getDefinition(null);
					instance_name = inst.getName(null);
					if (instance_name.equalsIgnoreCase(entity_or_view_name)) { // found! return it
						return inst;
					} else
					if (dec instanceof jsdai.SExtended_dictionary_schema.EInterfaced_declaration) {
						if (((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).testAlias_name(null)) {
							instance_name = ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).getAlias_name(null);
							if (instance_name.equalsIgnoreCase(entity_or_view_name)) { // found! return it
								return (jsdai.SExtended_dictionary_schema.EEntity_or_view_definition)dec.getDefinition(null);
							}
						}
					}
				}
			}
			return null;
		}
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EEntity_definition findEntityReference(String entity_name, String schema_name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia;
		jsdai.lang.SdaiIterator iter_inst;
		String instance_name;
		if (schema_name != null) {
			jsdai.lang.SdaiModel  the_model = findModel(schema_name);
			if (the_model == null) return null;
			if(the_model.getMode() == jsdai.lang.SdaiModel.NO_ACCESS) {
				the_model.startReadOnlyAccess();
			}

			ia = the_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EEntity_definition.class);
			iter_inst = ia.createIterator();
			while (iter_inst.next()) {
				jsdai.SExtended_dictionary_schema.EEntity_definition def = (jsdai.SExtended_dictionary_schema.EEntity_definition)ia.getCurrentMemberObject(iter_inst);
				instance_name = def.getName(null);
				if (instance_name.equalsIgnoreCase(entity_name)) { // found! return it
					return def;
				}
			}
			return null;
		} else {

			ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EEntity_declaration.class);
			iter_inst = ia.createIterator();
			while (iter_inst.next()) {
				jsdai.SExtended_dictionary_schema.EEntity_declaration dec = (jsdai.SExtended_dictionary_schema.EEntity_declaration)ia.getCurrentMemberObject(iter_inst);
				if ((dec instanceof jsdai.SExtended_dictionary_schema.EEntity_declaration) || (dec instanceof jsdai.SExtended_dictionary_schema.EView_declaration)) {
					jsdai.SExtended_dictionary_schema.EEntity_definition inst = (jsdai.SExtended_dictionary_schema.EEntity_definition)dec.getDefinition(null);
					instance_name = inst.getName(null);
					if (instance_name.equalsIgnoreCase(entity_name)) { // found! return it
						return inst;
					} else
					if (dec instanceof jsdai.SExtended_dictionary_schema.EInterfaced_declaration) {
						if (((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).testAlias_name(null)) {
							instance_name = ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).getAlias_name(null);
							if (instance_name.equalsIgnoreCase(entity_name)) { // found! return it
								return (jsdai.SExtended_dictionary_schema.EEntity_definition)dec.getDefinition(null);
							}
						}
					}
				}
			}
			return null;
		}
	}



JAVACODE

	jsdai.SExtended_dictionary_schema.EView_definition findView_definition(String name, jsdai.SExtended_dictionary_schema.ESchema_definition optional_schema) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EView_declaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration dec = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
			jsdai.SExtended_dictionary_schema.EView_definition inst = (jsdai.SExtended_dictionary_schema.EView_definition)dec.getDefinition(null);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			} else
			if (dec instanceof jsdai.SExtended_dictionary_schema.EInterfaced_declaration) {
				if (((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).testAlias_name(null)) {
					instance_name = ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).getAlias_name(null);
					if (instance_name.equalsIgnoreCase(name)) { // found! return it
						return (jsdai.SExtended_dictionary_schema.EView_definition)dec.getDefinition(null);
					}
				}
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EEntity_definition findInterfacedEntity_definition(jsdai.lang.SdaiModel interfaced_model, String name) throws jsdai.lang.SdaiException {
		
		jsdai.SExtended_dictionary_schema.EEntity_definition edf = null;
		HashMap hm = (HashMap)hm_entity_declarations.get(interfaced_model);
		if (hm != null) {
			jsdai.SExtended_dictionary_schema.EEntity_declaration edc = (jsdai.SExtended_dictionary_schema.EEntity_declaration)hm.get(name.toLowerCase());
			if (edc != null) {
				edf = (jsdai.SExtended_dictionary_schema.EEntity_definition)edc.getDefinition(null);
			} 
		}	
		return edf;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EDefined_type findInterfacedDefined_type(jsdai.lang.SdaiModel interfaced_model, String name) throws jsdai.lang.SdaiException {
		jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
		HashMap hm = (HashMap)hm_type_declarations.get(interfaced_model);
		if (hm != null) {
			jsdai.SExtended_dictionary_schema.EType_declaration td = (jsdai.SExtended_dictionary_schema.EType_declaration)hm.get(name.toLowerCase());
			if (td != null) {
				dt = (jsdai.SExtended_dictionary_schema.EDefined_type)td.getDefinition(null);
			} 
			}	
		return dt;
	}


JAVACODE

	jsdai.SExtended_dictionary_schema.EEntity_definition findInterfacedEntity_definition_not_optimal(jsdai.lang.SdaiModel interfaced_model, String name) throws jsdai.lang.SdaiException {
		
// System.out.println("interfaced model: " + interfaced_model + ", name: " + name);
		
		jsdai.lang.Aggregate ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EEntity_definition.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EEntity_definition inst = (jsdai.SExtended_dictionary_schema.EEntity_definition)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
// System.out.println("current name: " + instance_name);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EDefined_type findDefined_type(String name) throws jsdai.lang.SdaiException {
// System.out.println("<findDefined_type>: " + name);
		jsdai.SExtended_dictionary_schema.EDefined_type dt = null;
		if (hm_current_type_declarations != null) {
			jsdai.SExtended_dictionary_schema.EType_declaration td = (jsdai.SExtended_dictionary_schema.EType_declaration)hm_current_type_declarations.get(name.toLowerCase());
			if (td !=	null) {
// System.out.println("<findDefined_type-2>: " + td + ", name: " + name.toLowerCase());
				dt = (jsdai.SExtended_dictionary_schema.EDefined_type)td.getDefinition(null);
// System.out.println("<findDefined_type-3>");
			} else {
// System.out.println("<findDefined_type-4>");
				dt = findDefined_type_non_optimal(name); 
// System.out.println("<findDefined_type-5>");
			}
		} else {
// System.out.println("<findDefined_type-6>");
			return findDefined_type_non_optimal(name);
		}
		return dt;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EDefined_type findDefined_type_non_optimal(String name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EType_declaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration dec = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
//                      jsdai.SExtended_dictionary_schema.EDefined_type inst = (jsdai.SExtended_dictionary_schema.EDefined_type)dec.getDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)null);
			jsdai.SExtended_dictionary_schema.EDefined_type inst = (jsdai.SExtended_dictionary_schema.EDefined_type)dec.getDefinition(null);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			} else
			if (dec instanceof jsdai.SExtended_dictionary_schema.EInterfaced_declaration) {
				if (((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).testAlias_name(null)) {
					instance_name = ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).getAlias_name(null);
					if (instance_name.equalsIgnoreCase(name)) { // found! return it
//                                              return (jsdai.SExtended_dictionary_schema.EDefined_type)dec.getDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)null);
						return (jsdai.SExtended_dictionary_schema.EDefined_type)dec.getDefinition(null);
					}
				}
			}
		}
		return null;
	}


JAVACODE

	jsdai.SExtended_dictionary_schema.EConstant_definition findConstant(String name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EConstant_declaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration dec = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
//                      jsdai.SExtended_dictionary_schema.EDefined_type inst = (jsdai.SExtended_dictionary_schema.EDefined_type)dec.getDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)null);
			jsdai.SExtended_dictionary_schema.EConstant_definition inst = (jsdai.SExtended_dictionary_schema.EConstant_definition)dec.getDefinition(null);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			} else
			if (dec instanceof jsdai.SExtended_dictionary_schema.EInterfaced_declaration) {
				if (((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).testAlias_name(null)) {
					instance_name = ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).getAlias_name(null);
					if (instance_name.equalsIgnoreCase(name)) { // found! return it
//                                              return (jsdai.SExtended_dictionary_schema.EDefined_type)dec.getDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)null);
						return (jsdai.SExtended_dictionary_schema.EConstant_definition)dec.getDefinition(null);
					}
				}
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EFunction_definition findFunction_needed_or_not(String name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EFunction_declaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration dec = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
//                      jsdai.SExtended_dictionary_schema.EDefined_type inst = (jsdai.SExtended_dictionary_schema.EDefined_type)dec.getDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)null);
			jsdai.SExtended_dictionary_schema.EFunction_definition inst = (jsdai.SExtended_dictionary_schema.EFunction_definition)dec.getDefinition(null);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			} else
			if (dec instanceof jsdai.SExtended_dictionary_schema.EInterfaced_declaration) {
				if (((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).testAlias_name(null)) {
					instance_name = ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).getAlias_name(null);
					if (instance_name.equalsIgnoreCase(name)) { // found! return it
//                                              return (jsdai.SExtended_dictionary_schema.EDefined_type)dec.getDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)null);
						return (jsdai.SExtended_dictionary_schema.EFunction_definition)dec.getDefinition(null);
					}
				}
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EProcedure_definition findProcedure(String name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EProcedure_declaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration dec = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
//                      jsdai.SExtended_dictionary_schema.EDefined_type inst = (jsdai.SExtended_dictionary_schema.EDefined_type)dec.getDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)null);
			jsdai.SExtended_dictionary_schema.EProcedure_definition inst = (jsdai.SExtended_dictionary_schema.EProcedure_definition)dec.getDefinition(null);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			} else
			if (dec instanceof jsdai.SExtended_dictionary_schema.EInterfaced_declaration) {
				if (((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).testAlias_name(null)) {
					instance_name = ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).getAlias_name(null);
					if (instance_name.equalsIgnoreCase(name)) { // found! return it
//                                              return (jsdai.SExtended_dictionary_schema.EDefined_type)dec.getDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)null);
						return (jsdai.SExtended_dictionary_schema.EProcedure_definition)dec.getDefinition(null);
					}
				}
			}
		}
		return null;
	}


JAVACODE

	jsdai.SExtended_dictionary_schema.EDefined_type findInterfacedDefined_type_non_optimal(jsdai.lang.SdaiModel interfaced_model, String name) throws jsdai.lang.SdaiException {
		if (interfaced_model == null) {
			return null;
		}
		jsdai.lang.Aggregate ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDefined_type.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDefined_type inst = (jsdai.SExtended_dictionary_schema.EDefined_type)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EConstant_definition findInterfacedConstant(jsdai.lang.SdaiModel interfaced_model, String name) throws jsdai.lang.SdaiException {
		if (interfaced_model == null) {
			return null;
		}
		jsdai.lang.Aggregate ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EConstant_definition.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EConstant_definition inst = (jsdai.SExtended_dictionary_schema.EConstant_definition)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EFunction_definition findInterfacedFunction(jsdai.lang.SdaiModel interfaced_model, String name) throws jsdai.lang.SdaiException {
		if (interfaced_model == null) {
			return null;
		}
		jsdai.lang.Aggregate ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EFunction_definition.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EFunction_definition inst = (jsdai.SExtended_dictionary_schema.EFunction_definition)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EProcedure_definition findInterfacedProcedure(jsdai.lang.SdaiModel interfaced_model, String name) throws jsdai.lang.SdaiException {
		if (interfaced_model == null) {
			return null;
		}
		jsdai.lang.Aggregate ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EProcedure_definition.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EProcedure_definition inst = (jsdai.SExtended_dictionary_schema.EProcedure_definition)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EGlobal_rule findInterfacedRule(jsdai.lang.SdaiModel interfaced_model, String name) throws jsdai.lang.SdaiException {
		if (interfaced_model == null) {
			return null;
		}
		jsdai.lang.Aggregate ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EGlobal_rule.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EGlobal_rule inst = (jsdai.SExtended_dictionary_schema.EGlobal_rule)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}


JAVACODE

	jsdai.SExtended_dictionary_schema.ENamed_type findNamed_type(String name) throws jsdai.lang.SdaiException {
		jsdai.SExtended_dictionary_schema.ENamed_type nt1, nt2;
		nt1 = findDefined_type(name);
		nt2 = findEntity_definition(name, null);
		if (nt1 != null) {
			if (nt2 != null) {
				// If this method is called in the first compiler pass, it is likely to report the same error twice, depends on the implementation.
				// It should not go into this branch if invoked in the 2nd parser pass, the error should be caught in the 1st pass by other checks.
				error_count++;
//				if (parser_pass == 1) {
//					printError("Duplicate name, both an entity and a defined type have this name: " + name);
					printErrorMsg("" + name + " - duplicate name, both an entity and a defined type have this name", null, true);
//				}
				printDebug("Duplicate name, both an entity and a defined type have this name: " + name);
			} else {
				return nt1;
			}
		}
if (nt2 == null) { 
//	printError("Named type " + name + " not found ");
//	printErrorMsg("" + name + " - named type not found", null, true);
}
		return nt2; // may be = null or not. No difference here
	}

JAVACODE

	String findAnyName(String name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia;
		jsdai.lang.SdaiIterator iter_inst;
		ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDefined_type.class);
		iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDefined_type inst = (jsdai.SExtended_dictionary_schema.EDefined_type)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return "a defined type";
			}
		}
		ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EEntity_definition.class);
		iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EEntity_definition inst = (jsdai.SExtended_dictionary_schema.EEntity_definition)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return "an entity";
			}
		}
		return null;
	}

JAVACODE

	boolean isEnumerationElementNotUnique(jsdai.lang.A_string elements, String element) throws jsdai.lang.SdaiException
	{
		jsdai.lang.SdaiIterator iter = elements.createIterator();
		while (iter.next()) {
			String current = elements.getCurrentMember(iter);
			if (current.equalsIgnoreCase(element))
				return true;
		}
		return false;
	}


JAVACODE

	jsdai.SExtended_dictionary_schema.EView_attribute findView_attribute(String attr_name, jsdai.SExtended_dictionary_schema.EIndependent_view_definition vd) throws jsdai.lang.SdaiException {
		return null;
	}


JAVACODE

	jsdai.SExtended_dictionary_schema.EAttribute findAttribute_needed_or_not(String attribute_name, jsdai.SExtended_dictionary_schema.EEntity_definition ed, int attr_type) throws jsdai.lang.SdaiException {

	String attr_key = null;
// System.out.println("XXX 01-02, in findAttribute");

		if (ed == null) {
			printDDebug("XC: In findAttribute, parameter ed = null, attribute name: " + attribute_name + ", type: " + attr_type + ", pass: " + parser_pass);
			return null;
		}
	jsdai.lang.SdaiModel mdl = ed.findEntityInstanceSdaiModel();
//              jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EAttribute.class);
		jsdai.lang.Aggregate ia = mdl.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EAttribute.class);
// printDDebug("##### in findAttribute - attribute number: " + ia.getMemberCount() + ", attribute_name: " + attribute_name + ", entity name: " + ed.getName(null) );
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EAttribute inst = (jsdai.SExtended_dictionary_schema.EAttribute)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
// printDDebug("##### in findAttribute - current name: " + instance_name);
// System.out.println("##### in findAttribute: " + attribute_name + " - current name: " + instance_name);
			if (instance_name.equalsIgnoreCase(attribute_name)) {
// pre-X 				jsdai.SExtended_dictionary_schema.EEntity_definition ed2 = inst.getParent_entity(null);
				// only Express
			jsdai.SExtended_dictionary_schema.EEntity_definition ed2 = (jsdai.SExtended_dictionary_schema.EEntity_definition)inst.getParent_entity(null);
// System.out.println("##### in findAttribute: ed: " + ed + ", ed2: " + ed2);
				if (ed2 == ed) {
					return (jsdai.SExtended_dictionary_schema.EAttribute)inst;
				}
			}
		}
// pre-X		jsdai.SExtended_dictionary_schema.AEntity_definition aed = ed.getSupertypes(null);
//		jsdai.SExtended_dictionary_schema.AEntity_or_view_definition aed = ed.getSupertypes(null);
		jsdai.SExtended_dictionary_schema.AEntity_or_view_definition aed = ed.getGeneric_supertypes(null);
// printDDebug("##### in findAttribute - supertype number: " + aed.getMemberCount() + ", attribute_name: " + attribute_name + ", entity name: " + ed.getName(null) );
		jsdai.lang.SdaiIterator iter_super = aed.createIterator();
		while (iter_super.next()) {
			jsdai.SExtended_dictionary_schema.EEntity_definition ed1 = (jsdai.SExtended_dictionary_schema.EEntity_definition)aed.getCurrentMemberObject(iter_super);
			jsdai.SExtended_dictionary_schema.EAttribute at = findAttribute(attribute_name, ed1, attr_type, ed, attr_key);
      if (at != null) return at;
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EAttribute findAttributeAnywhere(String attribute_name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EAttribute.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EAttribute inst = (jsdai.SExtended_dictionary_schema.EAttribute)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(attribute_name)) {
				return (jsdai.SExtended_dictionary_schema.EAttribute)inst;
			}
		}
		// above implementation searches the current model only, if not found I should look in all models, I suppose, to be added below
		return null;
	}


JAVACODE

  jsdai.lang.SdaiModel  findReferencedModel(jsdai.SExtended_dictionary_schema.EGeneric_schema_definition ref_schema) throws jsdai.lang.SdaiException
  {
	  // temporary implementation
	  if (ref_schema == null) return null;
	  String schema_name = ref_schema.getName(null);
	  String name_searched = schema_name.toUpperCase() + "_DICTIONARY_DATA";
	  jsdai.lang.ASdaiModel models  = repository.getModels();
		jsdai.lang.SdaiIterator iter_models = models.createIterator();
		while (iter_models.next()) {
			jsdai.lang.SdaiModel sm1 = models.getCurrentMember(iter_models);
			String model_name = sm1.getName();
// printDDebug("findModel - searching: " + name_searched + ", current: " + model_name + ", nr of models: " + models.getMemberCount());
			if (model_name.equalsIgnoreCase(name_searched)) {

// !!!!!!!!!!!!!!! not sure why it is needed (for expres x?) but it causes problems for incremental compilation
//				int smMode = sm1.getMode();
//				if(smMode == jsdai.lang.SdaiModel.NO_ACCESS) {
//					sm1.startReadWriteAccess();
//				} else if(smMode == jsdai.lang.SdaiModel.READ_ONLY) {
//					sm1.promoteSdaiModelToRW();
//				}
				return sm1;
			}
		}
		return null;
  }
JAVACODE

  jsdai.lang.SdaiModel  findModel(String schema_name) throws jsdai.lang.SdaiException
  {
  
// System.out.println("in findModel - schema name: " + schema_name);  
	  String name_searched = schema_name.toUpperCase() + "_DICTIONARY_DATA";
	  jsdai.lang.ASdaiModel models  = repository.getModels();
		jsdai.lang.SdaiIterator iter_models = models.createIterator();
		while (iter_models.next()) {
			jsdai.lang.SdaiModel sm1 = models.getCurrentMember(iter_models);
			String model_name = sm1.getName();
// System.out.println("in findModel - current: " + model_name);  

 printDDebug("findModel - searching: " + name_searched + ", current: " + model_name + ", nr of models: " + models.getMemberCount());
			if (model_name.equalsIgnoreCase(name_searched)) {
				return sm1;
			}
		}
		return null;
  }

JAVACODE

  void listModels() throws jsdai.lang.SdaiException
  {
//        String name_searched = schema_name.toUpperCase() + "_DICTIONARY_DATA";
	  jsdai.lang.ASdaiModel models  = repository.getModels();
		jsdai.lang.SdaiIterator iter_models = models.createIterator();
//  System.out.println("-------- All models:--------------");
		while (iter_models.next()) {
			jsdai.lang.SdaiModel sm1 = models.getCurrentMember(iter_models);
			String model_name = sm1.getName();
// System.out.println("Model: " + model_name + ", nr of models: " + models.getMemberCount());
		}
// System.out.println("---------------------");
  }

JAVACODE

	jsdai.SExtended_dictionary_schema.ESchema_definition findSchema_definition(String name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.ESchema_definition.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.ESchema_definition inst = (jsdai.SExtended_dictionary_schema.ESchema_definition)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EGeneric_schema_definition findGeneric_schema_definition(String name) throws jsdai.lang.SdaiException {
		
		jsdai.lang.SdaiModel  a_model = findModel(name);

		if (a_model == null) return null;
		if(a_model.getMode() == jsdai.lang.SdaiModel.NO_ACCESS) {
			a_model.startReadOnlyAccess();
		}

		jsdai.lang.Aggregate ia = a_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EGeneric_schema_definition.class);
		printDebug("findGeneric_schema_definition count: " + ia.getMemberCount() + ", name: " + name);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EGeneric_schema_definition inst = (jsdai.SExtended_dictionary_schema.EGeneric_schema_definition)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
printDDebug("findInterpretedId2 - in loop - current name: " + instance_name);

			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}

JAVACODE

	void createAllUsedDeclarations(jsdai.lang.SdaiModel interfaced_model) throws jsdai.lang.SdaiException {
		jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
//              jsdai.SExtended_dictionary_schema.EEntity_declaration$used_declaration edc = null;
//              jsdai.SExtended_dictionary_schema.EType_declaration$used_declaration tdc = null;
		jsdai.lang.Aggregate ia;
		jsdai.lang.SdaiIterator iter_inst;
		ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EEntity_definition.class);
		iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EEntity_definition ed_inst = (jsdai.SExtended_dictionary_schema.EEntity_definition)ia.getCurrentMemberObject(iter_inst);
			// create declaration and set its attributes here
//        edc = checkEntityUsedDeclaration(ed_inst);
//        if (edc == null) {
				if (neededEntityUsedDeclaration(ed_inst)) {
					dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$used_declaration.class);
					dc.setParent(null, sd);
					// parent_schema is now derived instead of explicit 
					// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
						// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
					// }
					dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)ed_inst);
					if (!(hm_current_entity_declarations.containsKey(ed_inst.getName(null).toLowerCase()))) {
						hm_current_entity_declarations.put(ed_inst.getName(null).toLowerCase(), dc);
					}
					Object t_object = ed_inst.getTemp();
					if (t_object == null) {
						ed_inst.setTemp(FLAG_USED);
					} else {
						if (t_object instanceof ECtRenamed) {
							if (((ECtRenamed)t_object).interfaced_flag == null) {
								((ECtRenamed)t_object).interfaced_flag = FLAG_USED;
							} else {
								// already set
							}
						} else 
						if (t_object instanceof Integer) {
							// already set
						} else {
							System.out.println("<ExpressCompiler> INTERNAL ERROR - createAllUsedDeclarations - temp_object: " + t_object + ", entity: " + ed_inst);
						}
					}

				}
		}
		ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDefined_type.class);
		iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDefined_type dt_inst = (jsdai.SExtended_dictionary_schema.EDefined_type)ia.getCurrentMemberObject(iter_inst);
			// create declaration and set its attributes here
//    tdc = checkTypeUsedDeclaration(dt_inst);
//    if (tdc == null) {
			if (neededTypeUsedDeclaration(dt_inst)) {
				dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CType_declaration$used_declaration.class);
				dc.setParent(null, sd);
 				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				 // dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)dt_inst);
				if (!(hm_current_type_declarations.containsKey(dt_inst.getName(null).toLowerCase()))) {
					hm_current_type_declarations.put(dt_inst.getName(null).toLowerCase(), dc);
				}
				dt_inst.setTemp(FLAG_USED);
			}
		}
	}

JAVACODE

	void createAllReferencedDeclarations(jsdai.lang.SdaiModel interfaced_model) throws jsdai.lang.SdaiException {
		jsdai.SExtended_dictionary_schema.EDeclaration dc = null;
//              jsdai.SExtended_dictionary_schema.EEntity_declaration$referenced_declaration edc = null;
//              jsdai.SExtended_dictionary_schema.EReferenced_declaration$type_declaration tdc = null;
		jsdai.lang.Aggregate ia;
		jsdai.lang.SdaiIterator iter_inst;
		ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EEntity_definition.class);
		iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EEntity_definition ed_inst = (jsdai.SExtended_dictionary_schema.EEntity_definition)ia.getCurrentMemberObject(iter_inst);
			// create declaration and set its attributes here
//                      edc = checkEntityReferencedDeclaration(ed_inst);
//                      if (edc == null) {
			if (neededEntityReferencedDeclaration(ed_inst)) {
				dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CEntity_declaration$referenced_declaration.class);
				dc.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					  // dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)ed_inst);
				if (!(hm_current_entity_declarations.containsKey(ed_inst.getName(null).toLowerCase()))) {
					hm_current_entity_declarations.put(ed_inst.getName(null).toLowerCase(), dc);
				}
				Object t_object = ed_inst.getTemp();
				if (t_object == null) {
					ed_inst.setTemp(FLAG_REFERENCED);
				} else {
					if (t_object instanceof ECtRenamed) {
						if (((ECtRenamed)t_object).interfaced_flag == null) {
							((ECtRenamed)t_object).interfaced_flag = FLAG_REFERENCED;
						} else {
							// already set
						}
					} else
					if (t_object instanceof Integer) {
						// already set					
					} else {
						System.out.println("<ExpressCompiler> INTERNAL ERROR - createAllReferencedDeclarations - temp_object: " + t_object + ", entity: " + ed_inst);
					}
				}
			}
		}
		ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDefined_type.class);
		iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDefined_type dt_inst = (jsdai.SExtended_dictionary_schema.EDefined_type)ia.getCurrentMemberObject(iter_inst);
			// create declaration and set its attributes here
//                      tdc = checkTypeReferencedDeclaration(dt_inst);
//                      if (tdc == null) {
			if (neededTypeReferencedDeclaration(dt_inst)) {
				dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReferenced_declaration$type_declaration.class);
				dc.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.ENamed_type)dt_inst);
				if (!(hm_current_type_declarations.containsKey(dt_inst.getName(null).toLowerCase()))) {
					hm_current_type_declarations.put(dt_inst.getName(null).toLowerCase(), dc);
				}
				dt_inst.setTemp(FLAG_REFERENCED);
			}
		}
		ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EConstant_definition.class);
		iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EConstant_definition cd_inst = (jsdai.SExtended_dictionary_schema.EConstant_definition)ia.getCurrentMemberObject(iter_inst);
			// create declaration and set its attributes here
//                      tdc = checkTypeReferencedDeclaration(dt_inst);
//                      if (tdc == null) {
			if (neededConstantReferencedDeclaration(cd_inst)) {
				dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CConstant_declaration$referenced_declaration.class);
				dc.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EConstant_definition)cd_inst);
				cd_inst.setTemp(FLAG_REFERENCED);
				if (!(hm_current_constant_declarations.containsKey(cd_inst.getName(null).toLowerCase()))) {
					hm_current_constant_declarations.put(cd_inst.getName(null).toLowerCase(), dc);
				}
			}
		}
		ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EFunction_definition.class);
		iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EFunction_definition fd_inst = (jsdai.SExtended_dictionary_schema.EFunction_definition)ia.getCurrentMemberObject(iter_inst);
			// create declaration and set its attributes here
//                      tdc = checkTypeReferencedDeclaration(dt_inst);
//                      if (tdc == null) {
			if (neededFunctionReferencedDeclaration(fd_inst)) {
				dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CFunction_declaration$referenced_declaration.class);
				dc.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EFunction_definition)fd_inst);
				if (!(hm_current_function_declarations.containsKey(fd_inst.getName(null).toLowerCase()))) {
					hm_current_function_declarations.put(fd_inst.getName(null).toLowerCase(), dc);
				}
				fd_inst.setTemp(FLAG_REFERENCED);
			}
		}
		ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EProcedure_definition.class);
		iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EProcedure_definition pd_inst = (jsdai.SExtended_dictionary_schema.EProcedure_definition)ia.getCurrentMemberObject(iter_inst);
			// create declaration and set its attributes here
//                      tdc = checkTypeReferencedDeclaration(dt_inst);
//                      if (tdc == null) {
			if (neededProcedureReferencedDeclaration(pd_inst)) {
				dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CProcedure_declaration$referenced_declaration.class);
				dc.setParent(null, sd);
				// parent_schema is now derived instead of explicit 
				// if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
					// dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				// }
				dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EProcedure_definition)pd_inst);
				if (!(hm_current_procedure_declarations.containsKey(pd_inst.getName(null).toLowerCase()))) {
					hm_current_procedure_declarations.put(pd_inst.getName(null).toLowerCase(), dc);
				}
				pd_inst.setTemp(FLAG_REFERENCED);
			}
		}
		/*
		ia = interfaced_model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EGlobal_rule.class);
		iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EGlobal_rule gr_inst = (jsdai.SExtended_dictionary_schema.EGlobal_rule)ia.getCurrentMemberObject(iter_inst);
			// create declaration and set its attributes here
//                      tdc = checkTypeReferencedDeclaration(dt_inst);
//                      if (tdc == null) {
			if (neededRuleReferencedDeclaration(gr_inst)) {
				dc = (jsdai.SExtended_dictionary_schema.EDeclaration)model.createEntityInstance(jsdai.SExtended_dictionary_schema.CReferenced_declaration$rule_declaration.class);
				dc.setParent_schema(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)sd);
				dc.setDefinition(null, (jsdai.SExtended_dictionary_schema.EGlobal_rule)gr_inst);
				gr_inst.setTemp(FLAG_REFERENCED);
			}
		}
	*/
	}

JAVACODE

	String getDescription(Token t, int pass) throws jsdai.lang.SdaiException {
		Token st = null;
		String str = null;
		if (t != null) {
			st = t.specialToken;
		} else {
			// should not happen?
		}
		if (parser_pass == pass) {
			if (st != null) {
				if (st.kind == DOCUMENT_COMMENT) {
					str = st.image.substring(3, st.image.length()-2);
				}
			}
		}
//              t = null;
		return str;
	}

JAVACODE

//	void createExpressEntity(jsdai.lang.EEntity target, String express_code) throws jsdai.lang.SdaiException {
	void createExpressEntity(jsdai.lang.EEntity target, String express_code, Token start_token, Token end_token) throws jsdai.lang.SdaiException {
//System.out.println("========== target: " + target);		
//System.out.println("tokenized: " + express_code);		
//System.out.println("original : " + getOriginalExpressionString(start_token, end_token));		
//		String description = express_code;

			String description = null;
			
		if (flag_original_expressions) {
			description = getOriginalExpressionString(start_token, end_token);
		} else {
			description = express_code;
		}
		
		if (description != null) {
			jsdai.lang.SdaiModel sm = getExpressModel(); // finds or creates if not yet exists (or maybe better to create together with the main model always?
      jsdai.SExtended_dictionary_schema.EExpress_code ec = (jsdai.SExtended_dictionary_schema.EExpress_code)sm.createEntityInstance(jsdai.SExtended_dictionary_schema.CExpress_code.class);
			// jsdai.SExtended_dictionary_schema.EDocumentation ec = (jsdai.SExtended_dictionary_schema.EDocumentation)sm.createEntityInstance(jsdai.SExtended_dictionary_schema.CDocumentation.class);

			// New dictionary
			jsdai.lang.A_string values = ec.createValues(null);
			values.addByIndex(1, description);

			// Old dictionary
			// doc.setDescription(null, description);

			// All this for jsdai 1.1, for jsdai 1.2 just one set method
			if (target instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				ec.setTarget(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
				ec.setTarget(null, (jsdai.SExtended_dictionary_schema.EConstant_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				ec.setTarget(null, (jsdai.SExtended_dictionary_schema.ENamed_type)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
				ec.setTarget(null, (jsdai.SExtended_dictionary_schema.EDerived_attribute)target);
// System.out.println("Derived Attribute target:" + ((jsdai.SExtended_dictionary_schema.EDerived_attribute)target).getName(null));
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EAttribute) {
				ec.setTarget(null, (jsdai.SExtended_dictionary_schema.EAttribute)target);
// System.out.println("Attribute target:" + ((jsdai.SExtended_dictionary_schema.EAttribute)target).getName(null));
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
				ec.setTarget(null, (jsdai.SExtended_dictionary_schema.EFunction_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EProcedure_definition) {
				ec.setTarget(null, (jsdai.SExtended_dictionary_schema.EProcedure_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
				ec.setTarget(null, (jsdai.SExtended_dictionary_schema.EGlobal_rule)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EWhere_rule) {
				ec.setTarget(null, (jsdai.SExtended_dictionary_schema.EWhere_rule)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound) {
				ec.setTarget(null, (jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)target);
			}
		}
	}


JAVACODE

	void createDocumentationEntity(jsdai.lang.EEntity target) throws jsdai.lang.SdaiException {
		String description = getDescription(doc_token, 1);
		if (description != null) {
			jsdai.lang.SdaiModel sm = getDocModel(); // finds or creates if not yet exists (or maybe better to create together with the main model always?
			jsdai.SExtended_dictionary_schema.EDocumentation doc = (jsdai.SExtended_dictionary_schema.EDocumentation)sm.createEntityInstance(jsdai.SExtended_dictionary_schema.CDocumentation.class);

			// New dictionary
			jsdai.lang.A_string values = doc.createValues(null);
			values.addByIndex(1, description);

			// Old dictionary
			// doc.setDescription(null, description);

			// All this for jsdai 1.1, for jsdai 1.2 just one set method
			if (target instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EConstant_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.ENamed_type)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EDerived_attribute)target);
// printDDebug("Derived Attribute target:" + ((jsdai.SExtended_dictionary_schema.EDerived_attribute)target).getName(null));
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EAttribute) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EAttribute)target);
// printDDebug("Attribute target:" + ((jsdai.SExtended_dictionary_schema.EAttribute)target).getName(null));
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EFunction_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EProcedure_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EProcedure_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EGlobal_rule)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EWhere_rule) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EWhere_rule)target);
			}
		}
	}

JAVACODE

	void createDocumentationEntity2(jsdai.lang.EEntity target, Token a_token) throws jsdai.lang.SdaiException {
		if (parser_pass != 1) return;
		String description = getDescription(a_token, 1);
		if (description != null) {
			jsdai.lang.SdaiModel sm = getDocModel(); // finds or creates if not yet exists (or maybe better to create together with the main model always?
			jsdai.SExtended_dictionary_schema.EDocumentation doc = (jsdai.SExtended_dictionary_schema.EDocumentation)sm.createEntityInstance(jsdai.SExtended_dictionary_schema.CDocumentation.class);

			// New dictionary
			jsdai.lang.A_string values = doc.createValues(null);
			values.addByIndex(1, description);

			// Old dictionary
			// doc.setDescription(null, description);

			// All this for jsdai 1.1, for jsdai 1.2 just one set method
			if (target instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EConstant_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.ENamed_type)target);
			} else
//                      if (target instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
//                              doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EDerived_attribute)target);
//printDDebug("Derived Attribute target:" + ((jsdai.SExtended_dictionary_schema.EDerived_attribute)target).getName(null));
//                      } else
			if (target instanceof jsdai.SExtended_dictionary_schema.EAttribute) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EAttribute)target);
// printDDebug("Attribute target:" + ((jsdai.SExtended_dictionary_schema.EAttribute)target).getName(null));
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EFunction_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EProcedure_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EProcedure_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EGlobal_rule)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EWhere_rule) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EWhere_rule)target);
			}
		}
	}

JAVACODE

	void createDocumentationEntity3(jsdai.lang.EEntity target, Token a_token) throws jsdai.lang.SdaiException {
		if (parser_pass != 4) return;
		String description = getDescription(a_token, 4);
// System.out.println("DOC 1");

		if (description != null) {
// System.out.println("DOC 2");
			jsdai.lang.SdaiModel sm = getDocModel(); // finds or creates if not yet exists (or maybe better to create together with the main model always?
			jsdai.SExtended_dictionary_schema.EDocumentation doc = (jsdai.SExtended_dictionary_schema.EDocumentation)sm.createEntityInstance(jsdai.SExtended_dictionary_schema.CDocumentation.class);

			// New dictionary
			jsdai.lang.A_string values = doc.createValues(null);
			values.addByIndex(1, description);

			// Old dictionary
			// doc.setDescription(null, description);

			// All this for jsdai 1.1, for jsdai 1.2 just one set method
			if (target instanceof jsdai.SExtended_dictionary_schema.ESchema_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.ESchema_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EConstant_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.ENamed_type)target);
			} else
//                      if (target instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
//                              doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EDerived_attribute)target);
//printDDebug("Derived Attribute target:" + ((jsdai.SExtended_dictionary_schema.EDerived_attribute)target).getName(null));
//                      } else
			if (target instanceof jsdai.SExtended_dictionary_schema.EAttribute) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EAttribute)target);
// printDDebug("Attribute target:" + ((jsdai.SExtended_dictionary_schema.EAttribute)target).getName(null));
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EFunction_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EProcedure_definition) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EProcedure_definition)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EGlobal_rule)target);
			} else
			if (target instanceof jsdai.SExtended_dictionary_schema.EWhere_rule) {
				doc.setTarget(null, (jsdai.SExtended_dictionary_schema.EWhere_rule)target);
			}
		}
	}



JAVACODE

  jsdai.lang.SdaiModel  getDocModel() throws jsdai.lang.SdaiException
  {
	  String name_searched = "_DOCUMENTATION_" + sd.getName(null).toUpperCase();
	  jsdai.lang.ASdaiModel models  = repository.getModels();
		jsdai.lang.SdaiIterator iter_models = models.createIterator();
		while (iter_models.next()) {
			jsdai.lang.SdaiModel sm1 = models.getCurrentMember(iter_models);
			String model_name = sm1.getName();
// printDDebug("findModel - searching: " + name_searched + ", current: " + model_name + ", nr of models: " + models.getMemberCount());
			if (model_name.equalsIgnoreCase(name_searched)) {
				return sm1;
			}
		}
		// model not found, create
// listModels();
// System.out.println("Creating model: : " + name_searched);

		model_doc = repository.createSdaiModel(name_searched, jsdai.SExtended_dictionary_schema.SExtended_dictionary_schema.class);
		model_doc.startReadWriteAccess();
		return model_doc;
  }

JAVACODE

  jsdai.lang.SdaiModel  getExpressModel() throws jsdai.lang.SdaiException
  {
	  String name_searched = "_EXPRESS_" + sd.getName(null).toUpperCase();
	  jsdai.lang.ASdaiModel models  = repository.getModels();
		jsdai.lang.SdaiIterator iter_models = models.createIterator();
		while (iter_models.next()) {
			jsdai.lang.SdaiModel sm1 = models.getCurrentMember(iter_models);
			String model_name = sm1.getName();
// System.out.println("findModel - searching: " + name_searched + ", current: " + model_name + ", nr of models: " + models.getMemberCount());
			if (model_name.equalsIgnoreCase(name_searched)) {
				return sm1;
			}
		}
		// model not found, create
// listModels();
// System.out.println("Creating model: : " + name_searched);

		model_express = repository.createSdaiModel(name_searched, jsdai.SExtended_dictionary_schema.SExtended_dictionary_schema.class);
		model_express.startReadWriteAccess();
		return model_express;
  }
JAVACODE

  jsdai.lang.SdaiModel  getJavaModel() throws jsdai.lang.SdaiException
  {
	  String name_searched = "_JAVA_" + sd.getName(null).toUpperCase();
	  jsdai.lang.ASdaiModel models  = repository.getModels();
		jsdai.lang.SdaiIterator iter_models = models.createIterator();
		while (iter_models.next()) {
			jsdai.lang.SdaiModel sm1 = models.getCurrentMember(iter_models);
			String model_name = sm1.getName();
// System.out.println("findModel - searching: " + name_searched + ", current: " + model_name + ", nr of models: " + models.getMemberCount());
			if (model_name.equalsIgnoreCase(name_searched)) {
				return sm1;
			}
		}
		// model not found, create
// listModels();
// System.out.println("Creating model: : " + name_searched);

		model_java = repository.createSdaiModel(name_searched, jsdai.SExtended_dictionary_schema.SExtended_dictionary_schema.class);
		model_java.startReadWriteAccess();
		return model_java;
  }



JAVACODE

//      jsdai.SExtended_dictionary_schema.EEntity_declaration$referenced_declaration checkEntityReferencedDeclaration(jsdai.SExtended_dictionary_schema.EEntity_definition ed) {
	jsdai.SExtended_dictionary_schema.EDeclaration checkEntityReferencedDeclaration(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException {
		return null;
	}

JAVACODE

//      jsdai.SExtended_dictionary_schema.EReferenced_declaration$type_declaration checkTypeReferencedDeclaration(jsdai.SExtended_dictionary_schema.EDefined_type dt) {
	jsdai.SExtended_dictionary_schema.EDeclaration checkTypeReferencedDeclaration(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException {
		return null;
	}

JAVACODE

//      jsdai.SExtended_dictionary_schema.EEntity_declaration$used_declaration checkEntityUsedDeclaration(jsdai.SExtended_dictionary_schema.EEntity_definition ed) {
	jsdai.SExtended_dictionary_schema.EDeclaration checkEntityUsedDeclaration(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException {
		return null;
	}

JAVACODE

//      jsdai.SExtended_dictionary_schema.EType_declaration$used_declaration checkTypeUsedDeclaration(jsdai.SExtended_dictionary_schema.EDefined_type dt) {
	jsdai.SExtended_dictionary_schema.EDeclaration checkTypeUsedDeclaration(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException {
		return null;
	}

JAVACODE

	boolean neededTypeReferencedDeclaration(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDeclaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		jsdai.lang.EEntity definition = (jsdai.lang.EEntity) dt;
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration inst = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
//              jsdai.lang.EEntity def = (jsdai.SExtended_dictionary_schema.ENamed_type)inst.getDefinition(null);
			jsdai.lang.EEntity def = (jsdai.lang.EEntity)inst.getDefinition(null);
			if (definition == def) {
				// inconsistency checks may be added here - to see what kind of declaration is already present.
				// valid ones are used and referenced type declarations.
				// invalid ones are local_declaration, used and referenced entity declarations, and other referenced declarations.
				if (inst instanceof jsdai.SExtended_dictionary_schema.ELocal_declaration) {
					if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
						error_count++;
//						printError("REFERENCE FROM - Local declaration already exists for a type that is attempted to interface, a loop interfacing not allowed: " + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null));
						printErrorMsg("" + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null) + " - REFERENCE FROM - Local declaration already exists for a type that is attempted to interface, a loop interfacing is not allowed", null, true);
					}
					else {
						error_count++;
//						printError("REFERENCE FROM - Local declaration already exists, but the definition is not even a named type: " + dt.getName(null));
						printErrorMsg("" + dt.getName(null) + " - REFERENCE FROM - Local declaration already exists, but the definition is not even a named type", null, true);
					}
				}
				if (inst instanceof jsdai.SExtended_dictionary_schema.EEntity_declaration) {
					if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
						error_count++;
//						printError("REFERENCE FROM - Attempt to interface a type when an entity declaration already exists for that definition: " + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null));
						printErrorMsg("" + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null) + " - REFERENCE FROM - Attempt to interface a type when an entity declaration already exists for that definition", null, true);
					}
					else {
						error_count++;
//						printError("REFERENCE FROM - Declaration already exists, but the definition is not even a named type: " + dt.getName(null));
						printErrorMsg("" + dt.getName(null) + " - REFERENCE FROM - Declaration already exists, but the definition is not even a named type", null, true);
					}
				}
				return false;
			
			} else {
			
				jsdai.lang.EEntity ntt = def;
				String ntt_name = null;
				String ntt_type_name = null;
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
        			ntt_type_name = "an entity";
        		} else {
        			ntt_type_name = "a type";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
        			ntt_type_name = "a function";
        		} else {
        			ntt_type_name = "a procedure";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EConstant_definition)ntt).getName(null);
        		ntt_type_name = "a constant";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EGlobal_rule)ntt).getName(null);
       			ntt_type_name = "a global rule";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ESub_supertype_constraint) {
        		if (((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).testName(null)) {
	        		ntt_name = ((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).getName(null);
        			ntt_type_name = "a subtype_constraint";
        		}
        	}
        	if (ntt_name != null) {
        		if (ntt_name.equalsIgnoreCase(dt.getName(null))) {
        			// a name conflict
							error_count++;



						jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
						jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
						jsdai.lang.SdaiModel dt_model = dt.findEntityInstanceSdaiModel();
						jsdai.SExtended_dictionary_schema.ESchema_definition dt_schema = getSchema_definitionFromModel(dt_model);
						String def_schema_name = def_schema.getName(null);
						String dt_schema_name = dt_schema.getName(null);
//		          original_source_schema_name = nt.findEntityInstanceSdaiModel().getName().toLowerCase();
//		          original_source_schema_name = original_source_schema_name.substring(0, original_source_schema_name.length()-16);
//        			printWarningMsg("" + ntt_name + " - attempting to interface " + nt_type_name + " from " + original_source_schema_name + " through " + source_schema_name + " into " + target_schema_name + " via chained USE FROMs but a local " + ntt_type_name + " already exists with this name", null, false); 
							printErrorMsg("" + ntt_name + " - attempting to interface a type with REFERENCE FROM from " + dt_schema_name + ", but " + ntt_type_name + " already is present with the same name, from schema " + def_schema_name, null, true);
        		}
        	}	

			}
			
			
			
			
			
			
/*			
			
			} else if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				String type_name = dt.getName(null);
				String current_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null);
				if (type_name.equalsIgnoreCase(current_name)) {
					error_count++;
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel dt_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition dt_schema = getSchema_definitionFromModel(dt_model);
					String def_schema_name = def_schema.getName(null);
					String dt_schema_name = dt_schema.getName(null);
//					printError("attempting to interface a type with REFERENCE FROM when a different named type already exists with the same name: " + type_name);
					if (def instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
						printErrorMsg("" + type_name + " - attempting to interface a type with REFERENCE FROM from " + dt_schema_name + " when a different defined type already exists with the same name, from schema " + def_schema_name, null, true);
					} else 
					if (def instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
						printErrorMsg("" + type_name + " - attempting to interface a type with REFERENCE FROM from " + dt_schema_name + " when an entity already exists with the same name, from schema " + def_schema_name, null, true);
					} else {
						// should not happen
						printErrorMsg("" + type_name + " - attempting to interface a type with REFERENCE FROM from " + dt_schema_name + " when a different named type already exists with the same name, from schema " + def_schema_name + " - INTERNAL ERROR", null, true);
					}
//					printErrorMsg("" + type_name + " - attempting to interface a type with REFERENCE FROM when a different named type already exists with the same name", null, true);
					return false;
				}
				
			} else 
			if (def instanceof jsdai.SExtended_dictionary_schema.EData_type) {
				// what not a named type but something else has the same name, shouldn't we print a warning or error message?
				String type_name = dt.getName(null);
				// assume that it is a data type anyway and has at least an internal name, but we are interested in constants, rules, functions, procedures
				String current_name = ((jsdai.SExtended_dictionary_schema.EData_type)def).getName(null);
				if (type_name.equalsIgnoreCase(current_name)) {
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel dt_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition dt_schema = getSchema_definitionFromModel(dt_model);
					String def_schema_name = def_schema.getName(null);
					String dt_schema_name = dt_schema.getName(null);
//					printErrorMsg("" + entity_name + " - attempting to interface an entity with USE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
					printWarningMsg("" + type_name + " - attempting to interface a type with REFERENCE FROM from " + dt_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
				}
			}
*/

		}
		return true;
	}



JAVACODE

	boolean neededConstantReferencedDeclaration(jsdai.SExtended_dictionary_schema.EConstant_definition dt) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDeclaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		jsdai.lang.EEntity definition = (jsdai.lang.EEntity) dt;
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration inst = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
			jsdai.lang.EEntity def = (jsdai.lang.EEntity)inst.getDefinition(null);
			if (definition == def) {
				// inconsistency checks may be added here - to see what kind of declaration is already present.
				// valid ones are used and referenced type declarations.
				// invalid ones are local_declaration, used and referenced entity declarations, and other referenced declarations.
				if (inst instanceof jsdai.SExtended_dictionary_schema.ELocal_declaration) {
//					printError("Local declaration already exists for an express type that is attempted to interface, a loop interfacing not allowed: " + dt.getName(null));
					printErrorMsg("" + dt.getName(null) + " - local declaration already exists for an express type that is attempted to interface, a loop interfacing not allowed", null, true);
				} else {
//					printError("Interfaced declaration already exists for an express type that is attempted to interface: " + dt.getName(null));
					printErrorMsg("" + dt.getName(null) + " - interfaced declaration already exists for an express type that is attempted to interface", null, true);
				}
				return false;
			
      } else {

				jsdai.lang.EEntity ntt = def;
				String ntt_name = null;
				String ntt_type_name = null;
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
        			ntt_type_name = "an entity";
        		} else {
        			ntt_type_name = "a type";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
        			ntt_type_name = "a function";
        		} else {
        			ntt_type_name = "a procedure";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EConstant_definition)ntt).getName(null);
        		ntt_type_name = "a constant";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EGlobal_rule)ntt).getName(null);
       			ntt_type_name = "a global rule";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ESub_supertype_constraint) {
        		if (((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).testName(null)) {
	        		ntt_name = ((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).getName(null);
        			ntt_type_name = "a subtype_constraint";
        		}
        	}
        	if (ntt_name != null) {
        		if (ntt_name.equalsIgnoreCase(dt.getName(null))) {
        			// a name conflict
							error_count++;


					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel cd_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition cd_schema = getSchema_definitionFromModel(cd_model);
					String def_schema_name = def_schema.getName(null);
					String cd_schema_name = cd_schema.getName(null);
//		          original_source_schema_name = nt.findEntityInstanceSdaiModel().getName().toLowerCase();
//		          original_source_schema_name = original_source_schema_name.substring(0, original_source_schema_name.length()-16);
//        			printWarningMsg("" + ntt_name + " - attempting to interface " + nt_type_name + " from " + original_source_schema_name + " through " + source_schema_name + " into " + target_schema_name + " via chained USE FROMs but a local " + ntt_type_name + " already exists with this name", null, false); 
							printErrorMsg("" + ntt_name + " - attempting to interface a constant from " + cd_schema_name + ", but " + ntt_type_name + " already is present with the same name, from schema " + def_schema_name, null, true);
        		}
        	}	
			}
//      }			
			
/*			
			
			} else
			if (def instanceof jsdai.SExtended_dictionary_schema.EData_type) {
				String constant_name = dt.getName(null);
				// assume that it is a data type anyway and has at least an internal name, but we are interested in constants, rules, functions, procedures
				String current_name = ((jsdai.SExtended_dictionary_schema.EData_type)def).getName(null);
				if (constant_name.equalsIgnoreCase(current_name)) {
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel cd_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition cd_schema = getSchema_definitionFromModel(cd_model);
					String def_schema_name = def_schema.getName(null);
					String cd_schema_name = cd_schema.getName(null);
//					printErrorMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
					printWarningMsg("" + constant_name + " - attempting to interface a constant from " + cd_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
				}
			}
*/

		}
		return true;
	}

JAVACODE

	boolean neededFunctionReferencedDeclaration(jsdai.SExtended_dictionary_schema.EFunction_definition dt) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDeclaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		jsdai.lang.EEntity definition = (jsdai.lang.EEntity) dt;
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration inst = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
			jsdai.lang.EEntity def = (jsdai.lang.EEntity)inst.getDefinition(null);
			if (definition == def) {
				// inconsistency checks may be added here - to see what kind of declaration is already present.
				// valid ones are used and referenced type declarations.
				// invalid ones are local_declaration, used and referenced entity declarations, and other referenced declarations.
				if (inst instanceof jsdai.SExtended_dictionary_schema.ELocal_declaration) {
//					printError("Local declaration already exists for an express type that is attempted to interface, a loop interfacing not allowed: " + dt.getName(null));
					printErrorMsg("" + dt.getName(null) + " - local declaration already exists for an express type that is attempted to interface, a loop interfacing not allowed", null, true);
				} else {
// 					printError("Interfaced declaration already exists for an express type that is attempted to interface: " + dt.getName(null));
					printErrorMsg("" + dt.getName(null) + " - interfaced declaration already exists for an express type that is attempted to interface", null, true);
				}
				return false;
			
			} else {

				jsdai.lang.EEntity ntt = def;
				String ntt_name = null;
				String ntt_type_name = null;
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
        			ntt_type_name = "an entity";
        		} else {
        			ntt_type_name = "a type";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
        			ntt_type_name = "a function";
        		} else {
        			ntt_type_name = "a procedure";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EConstant_definition)ntt).getName(null);
        		ntt_type_name = "a constant";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EGlobal_rule)ntt).getName(null);
       			ntt_type_name = "a global rule";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ESub_supertype_constraint) {
        		if (((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).testName(null)) {
	        		ntt_name = ((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).getName(null);
        			ntt_type_name = "a subtype_constraint";
        		}
        	}
        	if (ntt_name != null) {
        		if (ntt_name.equalsIgnoreCase(dt.getName(null))) {
        			// a name conflict
							error_count++;


					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel fd_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition fd_schema = getSchema_definitionFromModel(fd_model);
					String def_schema_name = def_schema.getName(null);
					String fd_schema_name = fd_schema.getName(null);
//		          original_source_schema_name = nt.findEntityInstanceSdaiModel().getName().toLowerCase();
//		          original_source_schema_name = original_source_schema_name.substring(0, original_source_schema_name.length()-16);
//        			printWarningMsg("" + ntt_name + " - attempting to interface " + nt_type_name + " from " + original_source_schema_name + " through " + source_schema_name + " into " + target_schema_name + " via chained USE FROMs but a local " + ntt_type_name + " already exists with this name", null, false); 
							printErrorMsg("" + ntt_name + " - attempting to interface a function from " + fd_schema_name + ", but " + ntt_type_name + " already is present with the same name, from schema " + def_schema_name, null, true);
        		}
        	}	
			}


//			}
			
			
/*			
			
			} else
			if (def instanceof jsdai.SExtended_dictionary_schema.EData_type) {
				String function_name = dt.getName(null);
				// assume that it is a data type anyway and has at least an internal name, but we are interested in constants, rules, functions, procedures
				String current_name = ((jsdai.SExtended_dictionary_schema.EData_type)def).getName(null);
				if (function_name.equalsIgnoreCase(current_name)) {
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel fd_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition fd_schema = getSchema_definitionFromModel(fd_model);
					String def_schema_name = def_schema.getName(null);
					String fd_schema_name = fd_schema.getName(null);
//					printErrorMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
					printWarningMsg("" + function_name + " - attempting to interface a function from " + fd_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
				}
			}
*/

		}
		return true;
	}


JAVACODE

	boolean neededSubtype_constraintReferencedDeclaration(jsdai.SExtended_dictionary_schema.ESub_supertype_constraint dt) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDeclaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		jsdai.lang.EEntity definition = (jsdai.lang.EEntity) dt;
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration inst = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
			jsdai.lang.EEntity def = (jsdai.lang.EEntity)inst.getDefinition(null);
			if (definition == def) {
				// inconsistency checks may be added here - to see what kind of declaration is already present.
				// valid ones are used and referenced type declarations.
				// invalid ones are local_declaration, used and referenced entity declarations, and other referenced declarations.
				if (inst instanceof jsdai.SExtended_dictionary_schema.ELocal_declaration) {
//					printError("Local declaration already exists for an express type that is attempted to interface, a loop interfacing not allowed: " + dt.getName(null));
					printErrorMsg("" + dt.getName(null) + " - local declaration already exists for an express type that is attempted to interface, a loop interfacing not allowed", null, true);
				} else {
// 					printError("Interfaced declaration already exists for an express type that is attempted to interface: " + dt.getName(null));
					printErrorMsg("" + dt.getName(null) + " - interfaced declaration already exists for an express type that is attempted to interface", null, true);
				}
				return false;
			
			} else {

				jsdai.lang.EEntity ntt = def;
				String ntt_name = null;
				String ntt_type_name = null;
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
        			ntt_type_name = "an entity";
        		} else {
        			ntt_type_name = "a type";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
        			ntt_type_name = "a function";
        		} else {
        			ntt_type_name = "a procedure";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EConstant_definition)ntt).getName(null);
        		ntt_type_name = "a constant";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EGlobal_rule)ntt).getName(null);
       			ntt_type_name = "a global rule";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ESub_supertype_constraint) {
        		if (((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).testName(null)) {
	        		ntt_name = ((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).getName(null);
        			ntt_type_name = "a subtype_constraint";
        		}
        	}
        	if (ntt_name != null) {
        		if (ntt_name.equalsIgnoreCase(dt.getName(null))) {
        			// a name conflict
							error_count++;


					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel fd_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition fd_schema = getSchema_definitionFromModel(fd_model);
					String def_schema_name = def_schema.getName(null);
					String fd_schema_name = fd_schema.getName(null);
//		          original_source_schema_name = nt.findEntityInstanceSdaiModel().getName().toLowerCase();
//		          original_source_schema_name = original_source_schema_name.substring(0, original_source_schema_name.length()-16);
//        			printWarningMsg("" + ntt_name + " - attempting to interface " + nt_type_name + " from " + original_source_schema_name + " through " + source_schema_name + " into " + target_schema_name + " via chained USE FROMs but a local " + ntt_type_name + " already exists with this name", null, false); 
							printErrorMsg("" + ntt_name + " - attempting to interface a subtype_constraint from " + fd_schema_name + ", but " + ntt_type_name + " already is present with the same name, from schema " + def_schema_name, null, true);
        		}
        	}	
			}


//			}
			
			
/*			
			
			} else
			if (def instanceof jsdai.SExtended_dictionary_schema.EData_type) {
				String function_name = dt.getName(null);
				// assume that it is a data type anyway and has at least an internal name, but we are interested in constants, rules, functions, procedures
				String current_name = ((jsdai.SExtended_dictionary_schema.EData_type)def).getName(null);
				if (function_name.equalsIgnoreCase(current_name)) {
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel fd_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition fd_schema = getSchema_definitionFromModel(fd_model);
					String def_schema_name = def_schema.getName(null);
					String fd_schema_name = fd_schema.getName(null);
//					printErrorMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
					printWarningMsg("" + function_name + " - attempting to interface a function from " + fd_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
				}
			}
*/

		}
		return true;
	}



JAVACODE

	boolean neededProcedureReferencedDeclaration(jsdai.SExtended_dictionary_schema.EProcedure_definition dt) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDeclaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		jsdai.lang.EEntity definition = (jsdai.lang.EEntity) dt;
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration inst = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
			jsdai.lang.EEntity def = (jsdai.lang.EEntity)inst.getDefinition(null);
			if (definition == def) {
				// inconsistency checks may be added here - to see what kind of declaration is already present.
				// valid ones are used and referenced type declarations.
				// invalid ones are local_declaration, used and referenced entity declarations, and other referenced declarations.
				if (inst instanceof jsdai.SExtended_dictionary_schema.ELocal_declaration) {
//					printError("Local declaration already exists for an express type that is attempted to interface, a loop interfacing not allowed: " + dt.getName(null));
					printErrorMsg("" + dt.getName(null) + " - local declaration already exists for an express type that is attempted to interface, a loop interfacing not allowed", null, true);
				} else {
//					printError("Interfaced declaration already exists for an express type that is attempted to interface: " + dt.getName(null));
					printErrorMsg("" + dt.getName(null) + " - interfaced declaration already exists for an express type that is attempted to interface", null, true);
				}
				return false;
			
			} else {

				jsdai.lang.EEntity ntt = def;
				String ntt_name = null;
				String ntt_type_name = null;
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
        			ntt_type_name = "an entity";
        		} else {
        			ntt_type_name = "a type";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
        			ntt_type_name = "a function";
        		} else {
        			ntt_type_name = "a procedure";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EConstant_definition)ntt).getName(null);
        		ntt_type_name = "a constant";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EGlobal_rule)ntt).getName(null);
       			ntt_type_name = "a global rule";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ESub_supertype_constraint) {
        		if (((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).testName(null)) {
	        		ntt_name = ((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).getName(null);
        			ntt_type_name = "a subtype_constraint";
        		}
        	}
        	if (ntt_name != null) {
        		if (ntt_name.equalsIgnoreCase(dt.getName(null))) {
        			// a name conflict
							error_count++;


					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel pd_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition pd_schema = getSchema_definitionFromModel(pd_model);
					String def_schema_name = def_schema.getName(null);
					String pd_schema_name = pd_schema.getName(null);
//		          original_source_schema_name = nt.findEntityInstanceSdaiModel().getName().toLowerCase();
//		          original_source_schema_name = original_source_schema_name.substring(0, original_source_schema_name.length()-16);
//        			printWarningMsg("" + ntt_name + " - attempting to interface " + nt_type_name + " from " + original_source_schema_name + " through " + source_schema_name + " into " + target_schema_name + " via chained USE FROMs but a local " + ntt_type_name + " already exists with this name", null, false); 
							printErrorMsg("" + ntt_name + " - attempting to interface a procedure from " + pd_schema_name + ", but " + ntt_type_name + " already is present with the same name, from schema " + def_schema_name, null, true);
        		}
        	}	

			}			
			
			
			
			
/*			
			
			} else  
			if (def instanceof jsdai.SExtended_dictionary_schema.EData_type) {
				String procedure_name = dt.getName(null);
				// assume that it is a data type anyway and has at least an internal name, but we are interested in constants, rules, functions, procedures
				String current_name = ((jsdai.SExtended_dictionary_schema.EData_type)def).getName(null);
				if (procedure_name.equalsIgnoreCase(current_name)) {
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel pd_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition pd_schema = getSchema_definitionFromModel(pd_model);
					String def_schema_name = def_schema.getName(null);
					String pd_schema_name = pd_schema.getName(null);
//					printErrorMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
					printWarningMsg("" + procedure_name + " - attempting to interface a procedure from " + pd_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
				}
			}
*/

		}
		return true;
	}

JAVACODE

	boolean neededRuleReferencedDeclaration(jsdai.SExtended_dictionary_schema.EGlobal_rule dt) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDeclaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		jsdai.lang.EEntity definition = (jsdai.lang.EEntity) dt;
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration inst = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
			jsdai.lang.EEntity def = (jsdai.lang.EEntity)inst.getDefinition(null);
			if (definition == def) {
				// inconsistency checks may be added here - to see what kind of declaration is already present.
				// valid ones are used and referenced type declarations.
				// invalid ones are local_declaration, used and referenced entity declarations, and other referenced declarations.
				if (inst instanceof jsdai.SExtended_dictionary_schema.ELocal_declaration) {
					error_count++;
//					printError("Local declaration already exists for an express type that is attempted to interface, a loop interfacing not allowed: " + dt.getName(null));
					printErrorMsg("" + dt.getName(null) + " - local declaration already exists for an express type that is attempted to interface, a loop interfacing not allowed", null, true);
				} else {
					error_count++;
//					printError("Interfaced declaration already exists for an express type that is attempted to interface: " + dt.getName(null));
					printErrorMsg("" + dt.getName(null) + " - interfaced declaration already exists for an express type that is attempted to interface", null, true);
				}
				return false;
			
			} else {


				jsdai.lang.EEntity ntt = def;
				String ntt_name = null;
				String ntt_type_name = null;
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
        			ntt_type_name = "an entity";
        		} else {
        			ntt_type_name = "a type";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
        			ntt_type_name = "a function";
        		} else {
        			ntt_type_name = "a procedure";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EConstant_definition)ntt).getName(null);
        		ntt_type_name = "a constant";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EGlobal_rule)ntt).getName(null);
       			ntt_type_name = "a global rule";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ESub_supertype_constraint) {
        		if (((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).testName(null)) {
	        		ntt_name = ((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).getName(null);
        			ntt_type_name = "a subtype_constraint";
        		}
        	}
        	if (ntt_name != null) {
        		if (ntt_name.equalsIgnoreCase(dt.getName(null))) {
        			// a name conflict
							error_count++;


					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel gr_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition gr_schema = getSchema_definitionFromModel(gr_model);
					String def_schema_name = def_schema.getName(null);
					String gr_schema_name = gr_schema.getName(null);
//		          original_source_schema_name = nt.findEntityInstanceSdaiModel().getName().toLowerCase();
//		          original_source_schema_name = original_source_schema_name.substring(0, original_source_schema_name.length()-16);
//        			printWarningMsg("" + ntt_name + " - attempting to interface " + nt_type_name + " from " + original_source_schema_name + " through " + source_schema_name + " into " + target_schema_name + " via chained USE FROMs but a local " + ntt_type_name + " already exists with this name", null, false); 
							printErrorMsg("" + ntt_name + " - attempting to interface a global rule from " + gr_schema_name + ", but " + ntt_type_name + " already is present with the same name, from schema " + def_schema_name, null, true);
        		}
        	}	

			}			


		
/*			
			
			} else if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				String rule_name = dt.getName(null);
				String current_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null);
				if (rule_name.equalsIgnoreCase(current_name)) {
					error_count++;
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel gr_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition gr_schema = getSchema_definitionFromModel(gr_model);
					String def_schema_name = def_schema.getName(null);
					String gr_schema_name = gr_schema.getName(null);
//					printError("attempting to interface a global rule with REFERENCE FROM when a named type already exists with the same name: " + rule_name);
					if (def instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
						printErrorMsg("" + rule_name + " - attempting to interface a global rule with REFERENCE FROM from " + gr_schema_name + " when a defined type already exists with the same name, from schema " + def_schema_name, null, true);
					} else 
					if (def instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
						printErrorMsg("" + rule_name + " - attempting to interface a global rule with REFERENCE FROM from " + gr_schema_name + " when an entity already exists with the same name, from schema " + def_schema_name, null, true);
					} else {
						// should not happen
						printErrorMsg("" + rule_name + " - attempting to interface a global rule with REFERENCE FROM from " + gr_schema_name + " when a named type already exists with the same name, from schema " + def_schema_name + " - INTERNAL ERROR", null, true);
					}
//					printErrorMsg("" + rule_name + " - attempting to interface a global rule with REFERENCE FROM when a named type already exists with the same name", null, true);
					return false;
				}

*/
// have to take care of nested stuff
/*	
			} else if (def instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
				String rule_name = dt.getName(null);
				String current_name = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)def).getName(null);
				// what if it is an inner function or procedure? They might be in dictionary, as it is now
				// also inner constants or something else
				if (rule_name.equalsIgnoreCase(current_name)) {
					error_count++;
					printError("attempting to interface a global rule with REFERENCE FROM when a function or procedure already exists with the same name: " + rule_name);
					return false;
				}
*/				

/*
			} else  
			if (def instanceof jsdai.SExtended_dictionary_schema.EData_type) {
				// at least for now, an error message without stopping the compiler
				String rule_name = dt.getName(null);
				// assume that it is a data type anyway and has at least an internal name, but we are interested in constants, rules, functions, procedures
				String current_name = ((jsdai.SExtended_dictionary_schema.EData_type)def).getName(null);
				if (rule_name.equalsIgnoreCase(current_name)) {
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel gr_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition gr_schema = getSchema_definitionFromModel(gr_model);
					String def_schema_name = def_schema.getName(null);
					String gr_schema_name = gr_schema.getName(null);
//					printErrorMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
					printWarningMsg("" + rule_name + " - attempting to interface a global rule with REFERENCE FROM from " + gr_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
				}
			}

*/

		}
		return true;
	}



JAVACODE

	boolean neededEntityReferencedDeclaration(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException {
		
		boolean is_schema_map = false;

		// I would like to know if it is a normal schema or schema_map
		if (sd instanceof jsdai.SExtended_dictionary_schema.ESchema_map_definition) {
			is_schema_map = true;
		}

// System.out.println("X__X in needed, entity: " + ed.getName(null));
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDeclaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		jsdai.lang.EEntity definition = (jsdai.lang.EEntity) ed;
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration inst = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
//                      jsdai.lang.EEntity def = (jsdai.SExtended_dictionary_schema.ENamed_type)inst.getDefinition(null);
			jsdai.lang.EEntity def = (jsdai.lang.EEntity)inst.getDefinition(null);
			if (definition == def) {
// System.out.println("X__X in needed, declaration already exists: " + inst);
				// inconsistency checks may be added here - to see what kind of declaration is already present.
				// valid ones are used and referenced entity declarations.
				// invalid ones are local_declaration, used and referenced type declarations, and other referenced declarations.
				if (inst instanceof jsdai.SExtended_dictionary_schema.ELocal_declaration) {
					if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
//						printError("Local declaration already exists for an entity that is attempted to interface, a loop interfacing not allowed: " + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null));
						printErrorMsg("" + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null) + " - local declaration already exists for an entity that is attempted to interface, a loop interfacing not allowed", null, true);
printDDebug("#@# neededEntityReferencedDeclaration, local exists. model: " + model);
					}
					else {
						error_count++;
//						printError("REFERENCE FROM - Local declaration already exists, but the definition is not even a named type: " + ed.getName(null));
						printErrorMsg("" + ed.getName(null) + " - REFERENCE FROM - Local declaration already exists, but the definition is not even a named type", null, true);
					}
				}
				if (inst instanceof jsdai.SExtended_dictionary_schema.EType_declaration) {
					if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
						error_count++;
//						printError("Attempt to interface an entity with REFERENCE FROM when a type declaration already exists for that definition: " + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null));
						printErrorMsg("" + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null) + " - attempt to interface an entity with REFERENCE FROM when a type declaration already exists for that definition", null, true);
					}
					else {
						error_count++;
//						printError("REFERENCE FROM - Declaration already exists, but the definition is not even a named type: " + ed.getName(null));
						printErrorMsg("" + ed.getName(null) + " - REFERENCE FROM - Declaration already exists, but the definition is not even a named type", null, true);
					}
				}
// System.out.println("X__X in needed, returning FALSE");
				return false;
			
			} else {

				jsdai.lang.EEntity ntt = def;
				String ntt_name = null;
				String ntt_type_name = null;
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
        			ntt_type_name = "an entity";
        		} else {
        			ntt_type_name = "a type";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
        			ntt_type_name = "a function";
        		} else {
        			ntt_type_name = "a procedure";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EConstant_definition)ntt).getName(null);
        		ntt_type_name = "a constant";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EGlobal_rule)ntt).getName(null);
       			ntt_type_name = "a global rule";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ESub_supertype_constraint) {
        		if (((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).testName(null)) {
	        		ntt_name = ((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).getName(null);
        			ntt_type_name = "a subtype_constraint";
        		}
        	}
        	if (ntt_name != null) {
        		if (ntt_name.equalsIgnoreCase(ed.getName(null))) {
        			if (!is_schema_map) {
        			// a name conflict
								error_count++;


							jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
							jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
							jsdai.lang.SdaiModel ed_model = ed.findEntityInstanceSdaiModel();
							jsdai.SExtended_dictionary_schema.ESchema_definition ed_schema = getSchema_definitionFromModel(ed_model);
							String def_schema_name = def_schema.getName(null);
							String ed_schema_name = ed_schema.getName(null);
//		          original_source_schema_name = nt.findEntityInstanceSdaiModel().getName().toLowerCase();
//		          original_source_schema_name = original_source_schema_name.substring(0, original_source_schema_name.length()-16);
//        			printWarningMsg("" + ntt_name + " - attempting to interface " + nt_type_name + " from " + original_source_schema_name + " through " + source_schema_name + " into " + target_schema_name + " via chained USE FROMs but a local " + ntt_type_name + " already exists with this name", null, false); 
								printErrorMsg("" + ntt_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + ", but " + ntt_type_name + " already is present with the same name, from schema " + def_schema_name, null, true);
        			}
        		}
        	}	


			}
			
			
			
			
			
/*			
			
			
			} else if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				String entity_name = ed.getName(null);
				String current_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null);
				if (entity_name.equalsIgnoreCase(current_name)) {
					error_count++;
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel ed_model = ed.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition ed_schema = getSchema_definitionFromModel(ed_model);
					String def_schema_name = def_schema.getName(null);
					String ed_schema_name = ed_schema.getName(null);
//					printError("attempting to interface an entity with REFERENCE FROM when a different named type already exists with the same name: " + entity_name);
					if (def instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
						printErrorMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + " when a defined type already exists with the same name, from schema " + def_schema_name, null, true);
					} else 
					if (def instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
						printErrorMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + " when a different entity already exists with the same name, from schema " + def_schema_name, null, true);
					} else {
						// should not happen
						printErrorMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + " when a different named type already exists with the same name, from schema " + def_schema_name + " - INTERNAL ERROR", null, true);
					}
//					printErrorMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM when a different named type already exists with the same name", null, true);
					return false;
				}
				
			} else 
			if (def instanceof jsdai.SExtended_dictionary_schema.EData_type) {
				// what not a named type but something else has the same name, shouldn't we print a warning or error message?
				String entity_name = ed.getName(null);
				// assume that it is a data type anyway and has at least an internal name, but we are interested in constants, rules, functions, procedures
				String current_name = ((jsdai.SExtended_dictionary_schema.EData_type)def).getName(null);
				if (entity_name.equalsIgnoreCase(current_name)) {
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel ed_model = ed.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition ed_schema = getSchema_definitionFromModel(ed_model);
					String def_schema_name = def_schema.getName(null);
					String ed_schema_name = ed_schema.getName(null);
//					printErrorMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
					printWarningMsg("" + entity_name + " - attempting to interface an entity with REFERENCE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
				}
			}

*/

		}
// System.out.println("X__X in needed, returning TRUE");
		return true;
	}



JAVACODE

	boolean neededEntityUsedDeclaration(jsdai.SExtended_dictionary_schema.EEntity_definition ed) throws jsdai.lang.SdaiException {
//System.out.println("<1>: " + ed);
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDeclaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		jsdai.lang.EEntity definition = (jsdai.lang.EEntity) ed;
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration inst = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
//                      jsdai.lang.EEntity def = (jsdai.SExtended_dictionary_schema.ENamed_type)inst.getDefinition(null);
			jsdai.lang.EEntity def = (jsdai.lang.EEntity)inst.getDefinition(null);
//if (ed.getName(null).equalsIgnoreCase("draughting_specification_reference")) {
//	System.out.println("<2>: " + def);
//}
			if (definition == def) {
//System.out.println("<3>: " + def);
				// check if it is a referenced entity declaration, if so, remove it and return true;
				if (inst instanceof jsdai.SExtended_dictionary_schema.EReferenced_declaration) {
					if (hm_current_entity_declarations.containsValue(inst)) {
// System.out.println("__XX__ 01 removing from hm_current_entity_declarations: " +  ed.getName(null).toLowerCase());
						Object o = hm_current_entity_declarations.remove(ed.getName(null).toLowerCase());
						if (o != inst) {
							// internal error, more than one declaration
							hm_current_entity_declarations.put(ed.getName(null).toLowerCase(),o);
							printDebug("In neededEntityUsedDeclaration - more than one declaration in hash map found");
						}
					}
					
					inst.deleteApplicationInstance();
					return true;
				}
				// inconsistency checks may be added here - to see what kind of declaration is already present.
				// valid one is used entity declaration.
				// invalid ones are local_declaration, used and referenced type declarations, and other referenced declarations.
				if (inst instanceof jsdai.SExtended_dictionary_schema.ELocal_declaration) {
					if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
						error_count++;
//						printError("USE FROM - Local declaration already exists for an entity that is attempted to interface, a loop interfacing not allowed: " + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null));
						printErrorMsg("" + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null) + " - USE FROM - Local declaration already exists for an entity that is attempted to interface, a loop interfacing not allowed", null, true);
					}
					else {
						error_count++;
//					printError("USE FROM - Local declaration already exists, but the definition is not even a named type: " + ed.getName(null));
 						printErrorMsg("" + ed.getName(null) + " - USE FROM - Local declaration already exists, but the definition is not even a named type", null, true);
					}
				}
				if (inst instanceof jsdai.SExtended_dictionary_schema.EType_declaration) {
					if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
					error_count++;
//					printError("Attempt to interface an entity with USE FROM when a type declaration already exists for that definition: " + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null));
					printErrorMsg("" + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null) + " - attempt to interface an entity with USE FROM when a type declaration already exists for that definition", null, true);
					}
					else {
						error_count++;
//						printError("USE FROM - Declaration already exists, but the definition is not even a named type: " + ed.getName(null));
						printErrorMsg("" + ed.getName(null) + " - USE FROM - Declaration already exists, but the definition is not even a named type", null, true);
					}
				}
				return false;
			} else {
        	
				jsdai.lang.EEntity ntt = def;
				String ntt_name = null;
				String ntt_type_name = null;
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
        			ntt_type_name = "an entity";
        		} else {
        			ntt_type_name = "a type";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
        			ntt_type_name = "a function";
        		} else {
        			ntt_type_name = "a procedure";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EConstant_definition)ntt).getName(null);
        		ntt_type_name = "a constant";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EGlobal_rule)ntt).getName(null);
       			ntt_type_name = "a global rule";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ESub_supertype_constraint) {
        		if (((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).testName(null)) {
	        		ntt_name = ((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).getName(null);
        			ntt_type_name = "a subtype_constraint";
        		}
        	}
        	if (ntt_name != null) {
        		if (ntt_name.equalsIgnoreCase(ed.getName(null))) {
        			// a name conflict
							error_count++;
							jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
							jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
							jsdai.lang.SdaiModel ed_model = ed.findEntityInstanceSdaiModel();
							jsdai.SExtended_dictionary_schema.ESchema_definition ed_schema = getSchema_definitionFromModel(ed_model);
							String def_schema_name = def_schema.getName(null);
							String ed_schema_name = ed_schema.getName(null);
//		          original_source_schema_name = nt.findEntityInstanceSdaiModel().getName().toLowerCase();
//		          original_source_schema_name = original_source_schema_name.substring(0, original_source_schema_name.length()-16);
//        			printWarningMsg("" + ntt_name + " - attempting to interface " + nt_type_name + " from " + original_source_schema_name + " through " + source_schema_name + " into " + target_schema_name + " via chained USE FROMs but a local " + ntt_type_name + " already exists with this name", null, false); 
							printErrorMsg("" + ntt_name + " - attempting to interface an entity with USE FROM from " + ed_schema_name + ", but " + ntt_type_name + " already is present with the same name, from schema " + def_schema_name, null, true);
        		}
        	}	
			
			
			
			}
			
/*			
			} else if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				String entity_name = ed.getName(null);
				String current_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null);
				if (entity_name.equalsIgnoreCase(current_name)) {
					error_count++;
//					printError("attempting to interface an entity with USE FROM when a different named type already exists with the same name: " + entity_name);
					// let's print exactly if it is defined type of entity, and the schema where it is defined:
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel ed_model = ed.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition ed_schema = getSchema_definitionFromModel(ed_model);
					String def_schema_name = def_schema.getName(null);
					String ed_schema_name = ed_schema.getName(null);
					if (def instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
						printErrorMsg("" + entity_name + " - attempting to interface an entity with USE FROM from " + ed_schema_name + " when a defined type already exists with the same name, from schema " + def_schema_name, null, true);
					} else 
					if (def instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
						printErrorMsg("" + entity_name + " - attempting to interface an entity with USE FROM from " + ed_schema_name + " when a different entity already exists with the same name, from schema " + def_schema_name, null, true);
					} else {
						// should not happen
						printErrorMsg("" + entity_name + " - attempting to interface an entity with USE FROM from " + ed_schema_name + " when a different named type already exists with the same name, from schema " + def_schema_name + " - INTERNAL ERROR", null, true);
					}
					return false;
				}
				
			} else 
			if (def instanceof jsdai.SExtended_dictionary_schema.EData_type) {
				// what not a named type but something else has the same name, shouldn't we print a warning or error message?
				// at least for now, an error message without stopping the compiler
				String entity_name = ed.getName(null);
				// assume that it is a data type anyway and has at least an internal name, but we are interested in constants, rules, functions, procedures
				String current_name = ((jsdai.SExtended_dictionary_schema.EData_type)def).getName(null);
				if (entity_name.equalsIgnoreCase(current_name)) {
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel ed_model = ed.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition ed_schema = getSchema_definitionFromModel(ed_model);
					String def_schema_name = def_schema.getName(null);
					String ed_schema_name = ed_schema.getName(null);
//					printErrorMsg("" + entity_name + " - attempting to interface an entity with USE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
					printWarningMsg("" + entity_name + " - attempting to interface an entity with USE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
				}
			}
*/

		}
		return true;
	}

JAVACODE

	boolean neededTypeUsedDeclaration(jsdai.SExtended_dictionary_schema.EDefined_type dt) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDeclaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		jsdai.lang.EEntity definition = (jsdai.lang.EEntity) dt;
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration inst = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
//              jsdai.lang.EEntity def = (jsdai.SExtended_dictionary_schema.ENamed_type)inst.getDefinition(null);
			jsdai.lang.EEntity def = (jsdai.lang.EEntity)inst.getDefinition(null);
			if (definition == def) {
				// check if it is a referenced type declaration, if so, remove it and return true;
				if (inst instanceof jsdai.SExtended_dictionary_schema.EReferenced_declaration) {
					if (hm_current_type_declarations.containsValue(inst)) {
						Object o = hm_current_type_declarations.remove(dt.getName(null).toLowerCase());
						if (o != inst) {
							// internal error, more than one declaration
							hm_current_type_declarations.put(dt.getName(null).toLowerCase(),o);
							printDebug("In neededEntityUsedDeclaration - more than one declaration in hash map found");
						}
					}
					
					inst.deleteApplicationInstance();
					return true;
				}
				// inconsistency checks may be added here - to see what kind of declaration is already present.
				// valid one is used type declaration.
				// invalid ones are local_declaration, used and referenced entity declarations, and other referenced declarations.
				if (inst instanceof jsdai.SExtended_dictionary_schema.ELocal_declaration) {
					if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
						error_count++;
//						printError("USE FROM - Local declaration already exists for a type that is attempted to interface, a loop interfacing not allowed: " + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null));
						printErrorMsg("" + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null) + " - USE FROM - Local declaration already exists for a type that is attempted to interface, a loop interfacing not allowed", null, true);
					}
					else {
						error_count++;
//						printError("USE FROM - Local declaration already exists, but the definition is not even a named type: " + dt.getName(null));
						printErrorMsg("" + dt.getName(null) + " - USE FROM - Local declaration already exists, but the definition is not even a named type", null, true);
					}
				}
				if (inst instanceof jsdai.SExtended_dictionary_schema.EEntity_declaration) {
					if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
						error_count++;
//						printError("Attempt to interface a type with USE FROM when a declaration already exists for that definition: " + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null));
						printErrorMsg("" + ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null) + " - attempt to interface a type with USE FROM when a declaration already exists for that definition", null, true);
					}
					else {
						error_count++;
//						printError("USE FROM - Declaration already exists, but the definition is not even a named type: " + dt.getName(null));
						printErrorMsg("" + dt.getName(null) + " - USE FROM - Declaration already exists, but the definition is not even a named type:", null, true);
					}
				}
				return false;
			
			} else {

				jsdai.lang.EEntity ntt = def;
				String ntt_name = null;
				String ntt_type_name = null;
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
        			ntt_type_name = "an entity";
        		} else {
        			ntt_type_name = "a type";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)ntt).getName(null);
        		if (ntt instanceof jsdai.SExtended_dictionary_schema.EFunction_definition) {
        			ntt_type_name = "a function";
        		} else {
        			ntt_type_name = "a procedure";
        		}
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EConstant_definition) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EConstant_definition)ntt).getName(null);
        		ntt_type_name = "a constant";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.EGlobal_rule) {
        		ntt_name = ((jsdai.SExtended_dictionary_schema.EGlobal_rule)ntt).getName(null);
       			ntt_type_name = "a global rule";
        	} else
        	if (ntt instanceof jsdai.SExtended_dictionary_schema.ESub_supertype_constraint) {
        		if (((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).testName(null)) {
	        		ntt_name = ((jsdai.SExtended_dictionary_schema.ESub_supertype_constraint)ntt).getName(null);
        			ntt_type_name = "a subtype_constraint";
        		}
        	}
        	if (ntt_name != null) {
        		if (ntt_name.equalsIgnoreCase(dt.getName(null))) {
        			// a name conflict
							error_count++;


						jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
						jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
						jsdai.lang.SdaiModel dt_model = dt.findEntityInstanceSdaiModel();
						jsdai.SExtended_dictionary_schema.ESchema_definition dt_schema = getSchema_definitionFromModel(dt_model);
						String def_schema_name = def_schema.getName(null);
						String dt_schema_name = dt_schema.getName(null);
//		          original_source_schema_name = nt.findEntityInstanceSdaiModel().getName().toLowerCase();
//		          original_source_schema_name = original_source_schema_name.substring(0, original_source_schema_name.length()-16);
//        			printWarningMsg("" + ntt_name + " - attempting to interface " + nt_type_name + " from " + original_source_schema_name + " through " + source_schema_name + " into " + target_schema_name + " via chained USE FROMs but a local " + ntt_type_name + " already exists with this name", null, false); 
							printErrorMsg("" + ntt_name + " - attempting to interface a type with USE FROM from " + dt_schema_name + ", but " + ntt_type_name + " already is present with the same name, from schema " + def_schema_name, null, true);
        		}
        	}	
			


			}

/*

			} else if (def instanceof jsdai.SExtended_dictionary_schema.ENamed_type) {
				String type_name = dt.getName(null);
				String current_name = ((jsdai.SExtended_dictionary_schema.ENamed_type)def).getName(null);
				if (type_name.equalsIgnoreCase(current_name)) {
					error_count++;
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel dt_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition dt_schema = getSchema_definitionFromModel(dt_model);
					String def_schema_name = def_schema.getName(null);
					String dt_schema_name = dt_schema.getName(null);
//					printError("attempting to interface a type with USE FROM when a different named type already exists with the same name: " + type_name);
					if (def instanceof jsdai.SExtended_dictionary_schema.EDefined_type) {
						printErrorMsg("" + type_name + " - attempting to interface a type with USE FROM from " + dt_schema_name + " when a different defined type already exists with the same name, from schema " + def_schema_name, null, true);
					} else 
					if (def instanceof jsdai.SExtended_dictionary_schema.EEntity_definition) {
						printErrorMsg("" + type_name + " - attempting to interface a type with USE FROM from " + dt_schema_name + " when an entity already exists with the same name, from schema " + def_schema_name, null, true);
					} else {
						// should not happen
						printErrorMsg("" + type_name + " - attempting to interface a type with USE FROM from " + dt_schema_name + " when a different named type already exists with the same name, from schema " + def_schema_name + " - INTERNAL ERROR", null, true);
					}
//					printErrorMsg("" + type_name + " - attempting to interface a type with USE FROM when a different named type already exists with the same name", null, true);
					return false;
				}
				
			} else 
			if (def instanceof jsdai.SExtended_dictionary_schema.EData_type) {
				// what not a named type but something else has the same name, shouldn't we print a warning or error message?
				String type_name = dt.getName(null);
				// assume that it is a data type anyway and has at least an internal name, but we are interested in constants, rules, functions, procedures
				String current_name = ((jsdai.SExtended_dictionary_schema.EData_type)def).getName(null);
				if (type_name.equalsIgnoreCase(current_name)) {
					jsdai.lang.SdaiModel def_model = def.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition def_schema = getSchema_definitionFromModel(def_model);
					jsdai.lang.SdaiModel dt_model = dt.findEntityInstanceSdaiModel();
					jsdai.SExtended_dictionary_schema.ESchema_definition dt_schema = getSchema_definitionFromModel(dt_model);
					String def_schema_name = def_schema.getName(null);
					String dt_schema_name = dt_schema.getName(null);
//					printErrorMsg("" + entity_name + " - attempting to interface an entity with USE FROM from " + ed_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
					printWarningMsg("" + type_name + " - attempting to interface a type with USE FROM from " + dt_schema_name + " when a different object already exists with the same name, from schema " + def_schema_name, null, true);
				}
			}
*/

		}
		return true;
	}



JAVACODE

    void jjtreeOpenNodeScope(Node n)
    {
      ((SimpleNode)n).first_token = getToken(1);
    }

JAVACODE

    void jjtreeCloseNodeScope(Node n) throws jsdai.lang.SdaiException
    {
      ((SimpleNode)n).last_token = getToken(0);
    }

JAVACODE

	Object findInterpretedId_ALT(String name) throws jsdai.lang.SdaiException {
		Object result = null;
		String its_name = null;

// printDDebug("#_# In findInterpretedId, before findParameter: " + name);
		result = findParameter(name);
		if (result != null) {
			return result;
		}
		// only partially implemented so far, other types must be supported, and also not only current_scope, but also from the scope stack.
		for (int i = 0; i < current_scope.size(); i++) {
			Object something = current_scope.elementAt(i);
			if (something instanceof ECtVariable) {
				its_name = ((ECtVariable)something).getName();
// printDDebug("#_# Variable - current name: " + its_name + ", name: " + name);
				if (its_name.equalsIgnoreCase(name)) {
					return something;
				}
			} else
			if (something instanceof jsdai.SExtended_dictionary_schema.EParameter) {
//                              its_name = ((jsdai.SExtended_dictionary_schema.EParameter)something).getName(null);
//printDDebug("#_# Parameter - current name: " + its_name + ", name: " + name);
//                              if (its_name.equalsIgnoreCase(name)) {
//                                      return something;
//                              }
			}
		}
// printDDebug("#_# Scope stack size: " + scope_stack.size());
		for (int j = scope_stack.size()-1; j >= 0; j--) {
//		for (int  j= 0; j < scope_stack.size(); j++) {
			Vector the_scope = (Vector)scope_stack.elementAt(j);
// printDDebug("#_# Scope stack index: " + j);
			for (int i = 0; i < the_scope.size(); i++) {
					Object something = the_scope.elementAt(i);
				if (something instanceof ECtVariable) {
					its_name = ((ECtVariable)something).getName();
// printDDebug("#_# current name: " + its_name + ", name: " + name);
					if (its_name.equalsIgnoreCase(name)) {
						result = (ECtVariable)something;
						return result;
						// break;
					}
				}       else
				if (something instanceof jsdai.SExtended_dictionary_schema.EParameter) {
//                                      its_name = ((jsdai.SExtended_dictionary_schema.EParameter)something).getName(null);
//printDDebug("#_# Parameter - current name: " + its_name + ", name: " + name);
//                                      if (its_name.equalsIgnoreCase(name)) {
//                                              return something;
//                                      }
				}
			}
		}
		return null;
	}


JAVACODE

	Object findInterpretedId2(String name, int possible_interpretations) throws jsdai.lang.SdaiException {
		Object result = null;
		String its_name = null;
			
		switch(possible_interpretations) {
			case PI_SCHEMA_OR_SCHEMA_MAP_OR_SCHEMA_VIEW:			
				printDDebug("findInterpretedId2 - in schema or schema_map or schema_view");
				result = findGeneric_schema_definition(name);
				if (result == null) printDDebug("findInterpretedId2 - in schema or schema_map or schema_view - NULL");
				return result;
				// break;
			case PI_SOURCE_ENTITY_OR_VIEW: // entity reference or view reference
				result = findEntity_definition(name, null);
				if (result == null) {
					result = findView_definition(name, null);
				}
				return result;
				// break;
			case PI_SOURCE_SCHEMA_OR_TARGET_SCHEMA_OR_SCHEMA:
				break;
			case PI_SCHEMA_MAP_OR_SCHEMA_VIEW:
			case PI_MAP:
				result = findMap_definition(name, null);
// System.out.println("Returning from findInterpretedId2: " + result);

				return result;
			case PI_SOURCE_SCHEMA:
			case PI_SCHEMA_MAP:
			case PI_VIEW:
			case PI_PARTITION:
			case PI_CONSTANT:
		} // case		
				
				
//System.out.println("<about to find var, 05, name: " + name); 
		Object some = findVariableX(name);
		
		if (some != null) {
			return some;
		}		
		
		// only partially implemented so far, other types must be supported, and also not only current_scope, but also from the scope stack.
		for (int i = 0; i < current_scope.size(); i++) {
			Object something = current_scope.elementAt(i);
// System.out.println("#_#_# Current scope: " + something + ", name to search: " + name);
			if (something instanceof ECtVariable) {
				its_name = ((ECtVariable)something).getName();
// System.out.println("#_# Variable - current name: " + its_name + ", name: " + name);
				if (its_name.equalsIgnoreCase(name)) {
					return something;
				}
			} else
			if (something instanceof jsdai.SExtended_dictionary_schema.EParameter) {
				its_name = ((jsdai.SExtended_dictionary_schema.EParameter)something).getName(null);
// System.out.println("#_# Parameter - current name: " + its_name + ", name: " + name);
				if (its_name.equalsIgnoreCase(name)) {
					return something;
				}
			}
		}
// System.out.println("#_# Scope stack size: " + scope_stack.size());
		for (int j = scope_stack.size()-1; j >= 0; j--) {
//		for (int  j = 0; j < scope_stack.size(); j++) {
			Vector the_scope = (Vector)scope_stack.elementAt(j);
// System.out.println("#_# Scope stack index: " + j);
			for (int i = 0; i < the_scope.size(); i++) {
				Object something = the_scope.elementAt(i);
// System.out.println("#_#_# Current scope nr: " + j + ", scope element: " + something + ", name to search: " + name);
				if (something instanceof ECtVariable) {
					its_name = ((ECtVariable)something).getName();
// System.out.println("#_# current name: " + its_name + ", name: " + name);
					if (its_name.equalsIgnoreCase(name)) {
						result = (ECtVariable)something;
						return result;
						// break;
					}
				}       else
				if (something instanceof jsdai.SExtended_dictionary_schema.EParameter) {
					its_name = ((jsdai.SExtended_dictionary_schema.EParameter)something).getName(null);
// System.out.println("#_# Parameter - current name: " + its_name + ", name: " + name);
					if (its_name.equalsIgnoreCase(name)) {
						return something;
					}
				}
			}
		}
		printDebug("referenced item not found:" + name);
		return null;
	}

JAVACODE

	Object findInterpretedId_needed_or_not(String name) throws jsdai.lang.SdaiException {
		Object result = null;
		String its_name = null;
		// only partially implemented so far, other types must be supported, and also not only current_scope, but also from the scope stack.
		for (int i = 0; i < current_scope.size(); i++) {
			Object something = current_scope.elementAt(i);
// System.out.println("#_#_# Current scope: " + something + ", name to search: " + name);
			if (something instanceof ECtVariable) {
				its_name = ((ECtVariable)something).getName();
// System.out.println("#_# Variable - current name: " + its_name + ", name: " + name);
				if (its_name.equalsIgnoreCase(name)) {
					return something;
				}
			} else
			if (something instanceof jsdai.SExtended_dictionary_schema.EParameter) {
				its_name = ((jsdai.SExtended_dictionary_schema.EParameter)something).getName(null);
// System.out.println("#_# Parameter - current name: " + its_name + ", name: " + name);
				if (its_name.equalsIgnoreCase(name)) {
					return something;
				}
			}
		}
// System.out.println("#_# Scope stack size: " + scope_stack.size());
		for (int j = scope_stack.size()-1; j >= 0; j--) {
//		for (int  j = 0; j < scope_stack.size(); j++) {
			Vector the_scope = (Vector)scope_stack.elementAt(j);
// System.out.println("#_# Scope stack index: " + j);
			for (int i = 0; i < the_scope.size(); i++) {
				Object something = the_scope.elementAt(i);
// System.out.println("#_#_# Current scope nr: " + j + ", scope element: " + something + ", name to search: " + name);
				if (something instanceof ECtVariable) {
					its_name = ((ECtVariable)something).getName();
// System.out.println("#_# current name: " + its_name + ", name: " + name);
					if (its_name.equalsIgnoreCase(name)) {
						result = (ECtVariable)something;
						return result;
						// break;
					}
				}       else
				if (something instanceof jsdai.SExtended_dictionary_schema.EParameter) {
					its_name = ((jsdai.SExtended_dictionary_schema.EParameter)something).getName(null);
// System.out.println("#_# Parameter - current name: " + its_name + ", name: " + name);
					if (its_name.equalsIgnoreCase(name)) {
						return something;
					}
				}
			}
		}
		return null;
	}





JAVACODE

	ECtVariable findVariable(String name) throws jsdai.lang.SdaiException {
		ECtVariable result = null;
		String its_name = null;
		// only partially implemented so far, other types must be supported, and also not only current_scope, but also from the scope stack.
// System.out.println("#_# Current Scope size: " + current_scope.size() + ", scope instance: " + current_scope);
		for (int i = 0; i < current_scope.size(); i++) {
			Object something = current_scope.elementAt(i);
			if (something instanceof ECtVariable) {
				its_name = ((ECtVariable)something).getName();
// System.out.println("#_# current name: " + its_name + ", name: " + name);
				if (its_name.equalsIgnoreCase(name)) {
					result = (ECtVariable)something;
					return result;
					// break;
				}
			}
			else {
// System.out.println("#_# not variable: " + something);
			}
		}
		// get super-scopes
// System.out.println("#_# Scope stack size: " + scope_stack.size() + ", scope stack: " + scope_stack);
//		for (int  j= 0; j < scope_stack.size(); j++) {
		for (int j = scope_stack.size()-1; j >= 0; j--) {
			Vector the_scope = (Vector)scope_stack.elementAt(j);
// System.out.println("#_# Scope stack index: " + j + ", size: " + the_scope.size() + ",  scope instance: " + scope_stack.elementAt(j));
			for (int i = 0; i < the_scope.size(); i++) {
				Object something = the_scope.elementAt(i);
				if (something instanceof ECtVariable) {
					its_name = ((ECtVariable)something).getName();
// System.out.println("#_# current name: " + its_name + ", name: " + name);
					if (its_name.equalsIgnoreCase(name)) {
						result = (ECtVariable)something;
						return result;
						// break;
					}
				}
				else {
// System.out.println("#_# not variable: " + something);
				}
			}
		}

		return result;
	}

JAVACODE



	jsdai.SExtended_dictionary_schema.EParameter findParameter(String name) throws jsdai.lang.SdaiException {

		jsdai.SExtended_dictionary_schema.AParameter parameters = null;
		if (active_scope instanceof jsdai.SExtended_dictionary_schema.EAlgorithm_definition) {
			parameters = ((jsdai.SExtended_dictionary_schema.EAlgorithm_definition)active_scope).getParameters(null);
		} else 
		if (active_scope instanceof jsdai.SExtended_dictionary_schema.EMap_definition) {
			// target_parameters - INVERSE - actually, have to resolve source parameter
			// parameters = ((jsdai.SExtended_dictionary_schema.EMap_definition)active_scope).getParameters(null);
			return null;
		} else {
			printVerbose("ERROR! wrong active_scope: " + active_scope);
			return null;
		}
		
		jsdai.lang.SdaiIterator iter = parameters.createIterator();
		while (iter.next()) {
			jsdai.SExtended_dictionary_schema.EParameter inst = (jsdai.SExtended_dictionary_schema.EParameter)parameters.getCurrentMemberObject(iter);
			String its_name = inst.getName(null);
			if (its_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
//		System.out.println("@#NULL find parameter null, name: " + name + ", active_scope: " + active_scope + ", pass: " + parser_pass);
		return null;
	}


JAVACODE

	jsdai.SExtended_dictionary_schema.ETarget_parameter findTarget_parameter_not_needed_anylonger_perhaps(String name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.ETarget_parameter.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.ETarget_parameter inst = (jsdai.SExtended_dictionary_schema.ETarget_parameter)ia.getCurrentMemberObject(iter_inst);
			String its_name = inst.getName(null);
			if (its_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EView_partition findView_partition(String name, jsdai.SExtended_dictionary_schema.EView_definition parent) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EView_partition.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EView_partition inst = (jsdai.SExtended_dictionary_schema.EView_partition)ia.getCurrentMemberObject(iter_inst);
			String its_name = inst.getName(null);
			if (its_name.equalsIgnoreCase(name)) { // found! return it
				jsdai.SExtended_dictionary_schema.EView_definition its_parent = (jsdai.SExtended_dictionary_schema.EView_definition)inst.getParent(null);
				if (its_parent == parent) {
					return inst;
				}
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EMap_partition findMap_partition(String name, jsdai.SExtended_dictionary_schema.EMap_definition parent) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EMap_partition.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EMap_partition inst = (jsdai.SExtended_dictionary_schema.EMap_partition)ia.getCurrentMemberObject(iter_inst);
			String its_name = inst.getName(null);
			if (its_name.equalsIgnoreCase(name)) { // found! return it
				jsdai.SExtended_dictionary_schema.EMap_definition its_parent = (jsdai.SExtended_dictionary_schema.EMap_definition)inst.getParent(null);
				if (its_parent == parent) {
					return inst;
				}
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EDependent_map_partition findDependent_map_partition(String name, jsdai.SExtended_dictionary_schema.EDependent_map_definition parent) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDependent_map_partition.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDependent_map_partition inst = (jsdai.SExtended_dictionary_schema.EDependent_map_partition)ia.getCurrentMemberObject(iter_inst);
			String its_name = inst.getName(null);
			if (its_name.equalsIgnoreCase(name)) { // found! return it
				jsdai.SExtended_dictionary_schema.EDependent_map_definition its_parent = (jsdai.SExtended_dictionary_schema.EDependent_map_definition)inst.getParent(null);
				if (its_parent == parent) {
					return inst;
				}
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EMap_definition findMap_definition_not_needed_perhaps(String name, jsdai.SExtended_dictionary_schema.ESchema_map_definition optional_schema) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EMap_declaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration dec = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
			jsdai.SExtended_dictionary_schema.EMap_definition inst = (jsdai.SExtended_dictionary_schema.EMap_definition)dec.getDefinition(null);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			} else
			if (dec instanceof jsdai.SExtended_dictionary_schema.EInterfaced_declaration) {
				if (((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).testAlias_name(null)) {
					instance_name = ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).getAlias_name(null);
					if (instance_name.equalsIgnoreCase(name)) { // found! return it
						return (jsdai.SExtended_dictionary_schema.EMap_definition)dec.getDefinition(null);
					}
				}
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EDependent_map_definition findDependent_map_definition(String name, jsdai.SExtended_dictionary_schema.ESchema_definition optional_schema) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDependent_map_definition.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDependent_map_definition inst = (jsdai.SExtended_dictionary_schema.EDependent_map_definition)ia.getCurrentMemberObject(iter_inst);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EDependent_map_definition findDependent_map_definition_dec(String name, jsdai.SExtended_dictionary_schema.ESchema_definition optional_schema) throws jsdai.lang.SdaiException {
//		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDependent_map_declaration.class);
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EDeclaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration dec = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
			jsdai.SExtended_dictionary_schema.EDependent_map_definition inst = (jsdai.SExtended_dictionary_schema.EDependent_map_definition)dec.getDefinition(null);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			} else
			if (dec instanceof jsdai.SExtended_dictionary_schema.EInterfaced_declaration) {
				if (((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).testAlias_name(null)) {
					instance_name = ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).getAlias_name(null);
					if (instance_name.equalsIgnoreCase(name)) { // found! return it
						return (jsdai.SExtended_dictionary_schema.EDependent_map_definition)dec.getDefinition(null);
					}
				}
			}
		}
		return null;
	}


JAVACODE

// this method should return the entity definition of a complex entity which is specified by the entity definitions
// of the leaf entities 
// supertypes should not be included into the input, but perhaps better to check.
// leaves may be from different schemas
// 
// PROBLEM: we may not have the complex entity in advance. Complex entities are created later.
// and we do not currently support incremental compilation, so all the related schemas, schema_views and schema_maps have to be
// compiled together. 
// What to do? 
// 1) to create the complex entity here in this method and to return it
// 2) to move the complex generator forward between the compiler passes. I need to investigate if it is possible, what it needs.
//   that approch is perhaps not possible, because I allow implicitly interfaced leafs for creating declarations.

jsdai.SExtended_dictionary_schema.EEntity_definition findComplexEntity(Vector entity_definitions)  throws jsdai.lang.SdaiException {
	jsdai.SExtended_dictionary_schema.EEntity_definition result = null;
	// perhaps
	return result;
}

JAVACODE

	jsdai.SExtended_dictionary_schema.EConstant_definition findConstant_definition_needed_or_not(String name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EConstant_declaration.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EDeclaration dec = (jsdai.SExtended_dictionary_schema.EDeclaration)ia.getCurrentMemberObject(iter_inst);
			jsdai.SExtended_dictionary_schema.EConstant_definition inst = (jsdai.SExtended_dictionary_schema.EConstant_definition)dec.getDefinition(null);
			String instance_name = inst.getName(null);
			if (instance_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			} else 
			if (dec instanceof jsdai.SExtended_dictionary_schema.EInterfaced_declaration) {
				if (((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).testAlias_name(null)) {
					instance_name = ((jsdai.SExtended_dictionary_schema.EInterfaced_declaration)dec).getAlias_name(null);
					if (instance_name.equalsIgnoreCase(name)) { // found! return it
						return (jsdai.SExtended_dictionary_schema.EConstant_definition)dec.getDefinition(null);
					}
				}
			}
		}
		return null;
	}

JAVACODE

	boolean isDataTypePresent(String name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EData_type.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EData_type dt = (jsdai.SExtended_dictionary_schema.EData_type)ia.getCurrentMemberObject(iter_inst);
			String data_type_name = null;
			if(dt.testName(null)){
					 data_type_name = dt.getName(null);
					 if (data_type_name.equalsIgnoreCase(name)) { // found! return it
							 return true;
					 } 
			}else{
				  System.out.println("WARNING: data type without name: " + dt);
			}
		}
		return false;
	}

JAVACODE

	jsdai.SExtended_dictionary_schema.EFunction_definition findFunction_in_this_model(String name) throws jsdai.lang.SdaiException {
		jsdai.lang.Aggregate ia = model.getEntityExtentInstances(jsdai.SExtended_dictionary_schema.EFunction_definition.class);
		jsdai.lang.SdaiIterator iter_inst = ia.createIterator();
		while (iter_inst.next()) {
			jsdai.SExtended_dictionary_schema.EFunction_definition inst = (jsdai.SExtended_dictionary_schema.EFunction_definition)ia.getCurrentMemberObject(iter_inst);
// System.out.println("#_# in findParameter: " + inst + ", searched: " + name);
			String its_name = inst.getName(null);
// System.out.println("#_# in findParameter - name " + its_name + ", searched: " + name);
			if (its_name.equalsIgnoreCase(name)) { // found! return it
				return inst;
			}
		}
		return null;
	}


JAVACODE

String getBoundString(int aggregate_bound_type, jsdai.SExtended_dictionary_schema.EBound bounds [], boolean optional, boolean unique)  throws jsdai.lang.SdaiException {
	String result = "";
	if (bounds.length > 0) {
		if (bounds[0] == null) {
			result = "_0";
		} else {
			if (bounds[0] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
				jsdai.SExtended_dictionary_schema.EInteger_bound i_b1 = (jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[0];		  		
		  	boolean integer_bound_set = i_b1.testBound_value(null);
		  	if (integer_bound_set) {
		  		int b1_value = i_b1.getBound_value(null);
					if (b1_value < 0) {
						b1_value = -b1_value;
						result = "_MINUS" + b1_value;
		  		} else {
						result = "_" + b1_value;
		  		}
		  	} else {
					result = "_0";
		  	}
		  } else {
		  	jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound pdb1 = (jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)bounds[0];
		  	// population-dependent. Let's put 0 for now:
//				result = "_1PDB";		  		
//				result = "_1PDB" + unique_pdb_name2++;
				 // attept to extract from the instance
		  
				if (pdb1.testMethod_name(null)) {
					result = "_1PDB" + pdb1.getMethod_name(null).substring(12);
				} else {
					result = "_1PDB";		  		
				}
	  
		  }				
		}
	}	
	if (bounds.length > 1) {
		if (bounds[1] != null) {
			if (bounds[1] instanceof jsdai.SExtended_dictionary_schema.EInteger_bound) {
				jsdai.SExtended_dictionary_schema.EInteger_bound i_b2 = (jsdai.SExtended_dictionary_schema.EInteger_bound)bounds[1];		  		
		  	boolean integer_bound2_set = i_b2.testBound_value(null);
		  	if (integer_bound2_set) {
		  		int b2_value = i_b2.getBound_value(null);
					if (b2_value < 0) {
						b2_value = -b2_value;
						result += "_MINUS" + b2_value;
		  		} else {
						result += "_" + b2_value;
		  		}
		  	} else {
					// do nothing
		  	}
		  } else {
		  	// population-dependent. Let's do nothing for now:
//		 		result += "_2PDB";
//				result += "_2PDB" + unique_pdb_name2++;

		  	jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound pdb2 = (jsdai.SExtended_dictionary_schema.EPopulation_dependent_bound)bounds[1];
				if (pdb2.testMethod_name(null)) {
					result += "_2PDB" + pdb2.getMethod_name(null).substring(12);
				} else {
			 		result += "_2PDB";
				}
		  }				
		}
	}
	if (optional) {
		result += "_OPTIONAL";
	}
	if (unique) {
		result += "_UNIQUE";
	}
	return result;
}

JAVACODE

String handleBackslash(String original) {
  StringBuffer sb = new StringBuffer(original);
  StringBuffer sb2 = new StringBuffer();
  
  for (int i = 0; i < sb.length(); i++) {
  	char ch = sb.charAt(i);
  	sb2.append(ch);
  	if (ch == '\\') {
  		sb2.append(ch);
  	}
  }
  return sb2.toString();

}

JAVACODE

String getPDBname() {
	return ("calculatePDB" + unique_pdb_name++);
}

JAVACODE

void recoverFromParseException(int kind, ParseException e) throws jsdai.lang.SdaiException {

// the thing is, if there is only TYPE and no END_TYPE, then skipping till the END_TYPE
// should also end when END_SCHEMA is encountered, however, it should return BEFORE END_SCHEMA,
// if END_SCHEMA is consumed, then SchemaDecl is not handled correctly

	//	ParseException e = generateParseException(); // generate the exception object.
//	System.out.println(e.toString()); // print the error message
	Token t;

	 Token ttt = getToken(0);
	 if (ttt.kind == EOF) {
//			printError("EOF, no further error recovery");
			printErrorMsg("" + "" + "EOF, no further error recovery", null, true);
	 		return;
	 } else if (ttt.kind == kind) {
	 	// already skipped
			getNextToken();
			return;
	 		
	 } else if (ttt.kind == END_SCHEMA) {
//			if (error_count > 1) error_count--;
			// a risky busines - assuming that the END_SCHEMA token is already consumed and that will cause a secondary exception in SchemaDecl
			// and error_count will be set then
//			error_count--;
			System.out.println("END_SCHEMA encountered, proceeding with (possible) next schema");
			return;
	 }
	 t = ttt;

	do {
		if (t.kind == END_SCHEMA) {
//			if (error_count > 1) error_count--;
			System.out.println("END_SCHEMA encountered - proceeding with (possible) next schema");
			return;
		} else {
			// ok, this thing solves the problem with the secondary exception in SchemaDecl, so, END_SCHEMA token was not yet consumed
			Token tt = getToken(1);
			if (tt.kind == END_SCHEMA) {
				System.out.println("END_SCHEMA encountered - proceeding with (possible) next schema");
				return;
			}
		}
 		t = getNextToken();
		if (t.kind == END_SCHEMA) {
//			if (error_count > 1) error_count--;
			System.out.println("END_SCHEMA encountered: proceeding with (possible) next schema");
			// isn't it too late?
			return;
		}
	} while (t.kind != kind && t.kind != EOF);
		// I expect semicolon here
		t = getNextToken();
		if (t.kind != SEMICOLON) {
			if (parser_pass == 1) {
				System.out.println("ERROR: no semicolon"); // print the error message	
			}
	}
	// The above loop consumes tokens all the way upto a token of
	// "kind". We use a do-while loop rather than a while because the
	// current token is the one immediately before the erroneous token
	// (in our case the token immediately before what should have been
	// "if"/"while".
}

JAVACODE

void Garbage5() {
}

JAVACODE

void recoverToNextSchema(ParseException e) throws jsdai.lang.SdaiException {
//	ParseException e = generateParseException(); // generate the exception object.
	if (parser_pass == 1) {
		System.out.println("ERROR: garbage between schemas"); // print the error message
//		System.out.println(e.toString()); // print the error message
//		printError(e.getMessage()); // print the error message
		printErrorMsg("" + "" + e.getMessage(), null, true); // print the error message
	}
	Token t;
	Token t0;
	for (;;) {
//	while (getToken(1).kind != EOF) {
		t0 = getToken(1);
		if ((t0.kind == SCHEMA) || (t0.kind == SCHEMA_VIEW) || (t0.kind == SCHEMA_MAP)) {
			// return immediately so that the parsing can continue from this schema
			break;
		} else
		if ((t0.kind == END_SCHEMA) || (t0.kind == END_SCHEMA_VIEW) || (t0.kind == END_SCHEMA_MAP)) {
			// consume this token and the following semicolon so that the parsing can continue from the next schema
			t = getNextToken();
			t = getNextToken();
			if (t.kind != SEMICOLON) {
				if (parser_pass == 1) {
					System.out.println("ERROR: no semicolon"); // print the error message	
				}
				break;
			}
		} else {
			 // just consume the token
			t = getNextToken();
		}
	} // for
}


JAVACODE 

int recoverToTheNextSchema(ParseException e) throws jsdai.lang.SdaiException {
	Token t;
	Token t0;
	
	 Token ttt = getToken(0);
		error_count++;

// System.out.println("<><> in recoverToTheNextSchema");

	 if (ttt.kind == EOF) {
//			printError("EOF, no further error recovery");
			printErrorMsg("" + "" + " - EOF, no further error recovery", null, true);
	 		return -2;
	 } else if (ttt.kind == END_SCHEMA) {
	 	// already skipped
// System.out.println("<><2> in recoverToTheNextSchema");
			getNextToken();
			if (schema_depth == 0) {
// System.out.println("<><3> in recoverToTheNextSchema");
				// END_SCHEMA itself may have been a garbage
				printErrorMsg("" + "" + " - END_SCHEMA found without corresponding SCHEMA", null, true);
				return 0;
			} else {
// System.out.println("<><4> in recoverToTheNextSchema");
				return -3;
	 		}
	 }

// System.out.println("<><5> in recoverToTheNextSchema");

	
	if (e != null) {
//		System.out.println("EXCEPTION: " + e);
		// System.out.println("EXCEPTION: +++++++++++ Available info: ");

//		System.out.println("ERROR:" + e.getMessage());
		if (parser_pass == 1) {
//			printError(e.getMessage());
			printErrorMsg("" + "" + e.getMessage(), null, true);
		}
	} else {
		if (parser_pass == 1) {
			// System.out.println("ERROR: garbage between schemas found");
//			printError("garbage between schemas found");
			printErrorMsg("" + "" + " - garbage between schemas found", null, true);
		}
	}
	if (schema_depth == 1) { // inside a schema, skip until and including <END_SCHEMA>; 
		if (parser_pass == 1) {
			System.out.println("ERROR RECOVERY: a problem inside the schema, skipping to END_SCHEMA");
		}
		do {
			t = getNextToken();
			if (t.kind == EOF) {
//				printErrorMsg("" + "" + " - EOF, no further error recovery", null, true);
				System.out.println("EOF, no further error recovery");
				return -2;
			}
		} while (t.kind != END_SCHEMA);
		// I expect semicolon here
		schema_depth--;
		t = getNextToken();
		if (t.kind != SEMICOLON) {
			if (parser_pass == 1) {
				System.out.println("ERROR: no semicolon"); // print the error message	
			}
		}
		
	  return 0;
	
	} else { // outside a schema, skip until just before <SCHEMA>
		if (parser_pass == 1) {
			System.out.println("ERROR RECOVERY: a problem outside the schema, skipping to next SCHEMA");
		}
		
		// in multi-file mode, better get the next file
		// while (getToken(1).kind != SCHEMA) {
			// t = getNextToken();
		// }
	
	  return -1;
	
	
	}





}


JAVACODE

	String getOriginalAttributeName(jsdai.SExtended_dictionary_schema.EAttribute attr) throws jsdai.lang.SdaiException {	
		
		jsdai.SExtended_dictionary_schema.EAttribute attr2 = attr;
		jsdai.SExtended_dictionary_schema.EAttribute attr3 = attr;
		

		for (;;) {
	
			if (attr2 instanceof jsdai.SExtended_dictionary_schema.EExplicit_attribute) {
				if (((jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2).testRedeclaring(null)) {
					attr2 = ((jsdai.SExtended_dictionary_schema.EExplicit_attribute)attr2).getRedeclaring(null);
				} else {
					return attr2.getName(null);
				}			
			} else
			if (attr2 instanceof jsdai.SExtended_dictionary_schema.EDerived_attribute) {
				if (((jsdai.SExtended_dictionary_schema.EDerived_attribute)attr2).testRedeclaring(null)) {
					attr2 = (jsdai.SExtended_dictionary_schema.EAttribute)((jsdai.SExtended_dictionary_schema.EDerived_attribute)attr2).getRedeclaring(null);
				} else {
					return attr2.getName(null);
				}			
			} else
			if (attr2 instanceof jsdai.SExtended_dictionary_schema.EInverse_attribute) {
				if (((jsdai.SExtended_dictionary_schema.EInverse_attribute)attr2).testRedeclaring(null)) {
					attr2 = ((jsdai.SExtended_dictionary_schema.EInverse_attribute)attr2).getRedeclaring(null);
				} else {
					return attr2.getName(null);
				}			
			} else {
			// internal error 
				return "_WRONG_ATTRIBUTE_";
			}
			if (attr3 == attr2) {
				// no further progress, get out from this loop
// error moved to attribute redeclaring
//				printErrorMsg(""  + attr.getName(null) + " - attribute is redeclaring itself, entity:  " + attr.getParent(null).getName(null), null, true );
//				error_count++;
 				return attr.getName(null);
			} else {
				attr3 = attr2;
			}
		}
	}


/*

JAVACODE

  boolean isDomainRule() {
    int token_kind;
    String token_image;
      token_kind = Compiler2.getToken(1).kind;
      token_image = Compiler2.getToken(1).image;
      System.out.println("<isDomainRule> token kind: " + token_kind + ", image: " + token_image);
			if (token_kind == 106) { // FOR
				return true;
			}
		return false;
	}

*/





















