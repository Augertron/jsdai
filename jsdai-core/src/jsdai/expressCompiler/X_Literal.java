/*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 */

// %modified: 1016210367537 %

/* Generated By:JJTree: Do not edit this line. X_Literal.java */
package jsdai.expressCompiler;

public class X_Literal
  extends ExpressionNode {

  // public class X_Literal extends SimpleNode {
  int type;
  int int_value;
  int logical_value;
  double double_value;
  String string_value;
	String original_schema_name = null;

  jsdai.lang.Binary binary_value;

  public X_Literal(int id) {
    super(id);
  }

  public X_Literal(Compiler2 p, int id) {
    super(p, id);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(Compiler2Visitor visitor, Object data)
                   throws jsdai.lang.SdaiException {
    return visitor.visit(this, data);
  }

  public void process()
               throws jsdai.lang.SdaiException {
		//    printDDebug(" ###########__ jjtClose In Literal, type: " + type + ", int_value: " + int_value, jc);
  }


  public void dump(String prefix) {
		

		switch (type) {
			case JavaClass.T_STRING:
    	System.out.println(toString(prefix) + " - " + string_value);
				break;
			default:
    	System.out.println(toString(prefix));
				break;	
		}


    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode) children[i];

        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }


}
