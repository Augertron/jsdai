/*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 */

// %modified: 1016210358258 %

/* Generated By:JJTree: Do not edit this line. X_SchemaDecl.java */
package jsdai.expressCompiler;

public class X_SchemaDecl
  extends SimpleNode {
  String schema_name;
  jsdai.SExtended_dictionary_schema.ESchema_definition schema_definition;
  jsdai.lang.SdaiModel model;

  public X_SchemaDecl(int id) {
    super(id);
  }

  public X_SchemaDecl(Compiler2 p, int id) {
    super(p, id);
  }

  /** Accept the visitor. **/
  public Object jjtAccept(Compiler2Visitor visitor, Object data)
                   throws jsdai.lang.SdaiException {
    return visitor.visit(this, data);
  }

  public void dump(String prefix) {
		
		// could use schema_name, but just double-checking
		String name = "";
		try {
			name = schema_definition.getName(null);
		} catch (jsdai.lang.SdaiException sx) {
			System.out.println("SdaiException while reading schema name: " + schema_definition);
		}	catch (java.lang.NullPointerException sy) {
			System.out.println("Null pointer exception while reading schema name: " + schema_name);
		} 

    System.out.println(toString(prefix) + " - " + name);

    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode) children[i];

        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }


}