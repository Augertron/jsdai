/*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 */

// %modified: 1016210367750 %

/* Generated By:JJTree: Do not edit this line. X_IndexQualifier.java */
package jsdai.expressCompiler;

import java.util.*;

public class X_IndexQualifier
    extends SimpleNode {
  int index1;
  int index2;
  String[] index;
  boolean left_side = false;
  boolean last = false;
  String index_chain;

  public X_IndexQualifier(int id) {
    super(id);
    left_side = false;
  }

  public X_IndexQualifier(Compiler2 p, int id) {
    super(p, id);
    left_side = false;
  }

  /**
   * Accept the visitor.
   **/
  public Object jjtAccept(Compiler2Visitor visitor, Object data)
      throws jsdai.lang.SdaiException {
    return visitor.visit(this, data);
  }

  public Object childrenAccept(Compiler2Visitor visitor, Object data)
      throws jsdai.lang.SdaiException {
    JavaClass jc = (JavaClass) data;

    if (children != null) {

      // for contained statements
      variable_names = new Vector();
      variable_declarations = new Vector();
      statements = new Vector();
      initializing_code = new Vector();
      index = new String[2]; // how much should be here?

      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);

        if (jc != null) {
          if (jc.active) {
            if (((SimpleNode) children[i]).java_contains_statements) {
              java_contains_statements = true;

              // variable_declaration += "\n" + ((SimpleNode)children[i]).variable_declaration;
              for (int j = 0; j < ((SimpleNode) children[i]).variable_names.size(); j++) {
                variable_names.add(((SimpleNode) children[i]).variable_names.elementAt(j));
              }

              for (int j = 0; j < ((SimpleNode) children[i]).variable_declarations.size(); j++) {
                variable_declarations.add(((SimpleNode) children[i]).variable_declarations.elementAt(j));
              }

              for (int j = 0; j < ((SimpleNode) children[i]).statements.size(); j++) {
                statements.add(((SimpleNode) children[i]).statements.elementAt(j));
              }

              // initializing_code += "\n" + ((SimpleNode)children[i]).initializing_code;
              for (int j = 0; j < ((SimpleNode) children[i]).initializing_code.size(); j++) {
                initializing_code.add(((SimpleNode) children[i]).initializing_code.elementAt(j));
              }
            } // if contains statements

            //                     actual_parameters.addElement(jc.generated_java);

            if (i > 1) {
              printDDebug("Children of IndexQualifier " + (i - 2) + " : " + children[i - 2], jc);
              printDDebug("Children of IndexQualifier " + (i - 1) + " : " + children[i - 1], jc);
              printDDebug("Children of IndexQualifier " + i + " : " + children[i], jc);
            }

            if (jc.print_string.length() == 0) {
              index[i] = jc.generated_java;
            }
            else {
              index[i] = jc.print_string;
            }
          }
        }
      } // for children

      if (children.length == 1) {

        // index[1] = "Integer.MIN_VALUE";
        index[1] = "null";
      }

      if (jc != null) {
        if (jc.active) {
          index_chain = jc.generated_java;
          // jc.generated_java = jc.generated_java + ".indexing(" + index[0] + ", " +index[1] + ")";
        } // jc.active

      } // jc != null

    }

    return data;
  }
}
