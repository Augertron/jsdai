/*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 */

/* Generated By:JJTree&JavaCC: Do not edit this line. Compiler2TokenManager.java */
package jsdai.expressCompiler;

import java.io.*;
import java.util.regex.*;
import java.util.*;

import jsdai.tools.RepositoryChanges;

public class Compiler2TokenManager implements Compiler2Constants {
  // the problem - when java 1.4 then need to be careful, lexical states are generated as int, not Integer, so handle appropriately
  // in Integer.valueOf(int), stack.push(int), Integer = int situations. with java 1.6 (1.5) - no problems.

  static int comment_nesting_depth;

  //static String comment_tag;
  static jsdai.lang.EEntity tagged_object;
  //static jsdai.SExtended_dictionary_schema.EEntity_definition tagged_object;
  static String current_comment;

  static Stack tag_stack;
  static Stack image_stack; // no longer used? try to remove
  static Stack state_stack;
  static Stack object_stack;
  static Stack index_stack; // new: replaces image_stack, current_image, prev_image, also:  MORE replaces SKIP everywhere

  static String current_tag;
  static String current_image; // no longer used? try to remove
  static String previous_image; // no longer used? try to remove
  static Integer current_state;
  static int open_index;
  public static java.io.PrintStream debugStream = System.out;

  public static void setDebugStream(java.io.PrintStream ds) {
    debugStream = ds;
  }

  static private final int jjStopAtPos(int pos, int kind) {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    return pos + 1;
  }

  static private final int jjMoveStringLiteralDfa0_8() {
    switch (curChar) {
      case 40:
        return jjMoveStringLiteralDfa1_8(0x3800000000L);
      case 42:
        return jjMoveStringLiteralDfa1_8(0x4000000000L);
      default:
        return 1;
    }
  }

  static private final int jjMoveStringLiteralDfa1_8(long active0) {
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      return 1;
    }
    switch (curChar) {
      case 41:
        if ((active0 & 0x4000000000L) != 0L) {
          return jjStopAtPos(1, 38);
        }
        break;
      case 42:
        if ((active0 & 0x2000000000L) != 0L) {
          jjmatchedKind = 37;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_8(active0, 0x1800000000L);
      default:
        return 2;
    }
    return 2;
  }

  static private final int jjMoveStringLiteralDfa2_8(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return 2;
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      return 2;
    }
    switch (curChar) {
      case 34:
        if ((active0 & 0x1000000000L) != 0L) {
          return jjStopAtPos(2, 36);
        }
        break;
      case 42:
        if ((active0 & 0x800000000L) != 0L) {
          return jjStopAtPos(2, 35);
        }
        break;
      default:
        return 3;
    }
    return 3;
  }

  static private final int jjMoveStringLiteralDfa0_6() {
    switch (curChar) {
      case 34:
        return jjStopAtPos(0, 28);
      default:
        return 1;
    }
  }

  static private final int jjMoveStringLiteralDfa0_7() {
    switch (curChar) {
      case 40:
        return jjMoveStringLiteralDfa1_7(0x1c0000000L);
      case 42:
        return jjMoveStringLiteralDfa1_7(0x200000000L);
      default:
        return 1;
    }
  }

  static private final int jjMoveStringLiteralDfa1_7(long active0) {
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      return 1;
    }
    switch (curChar) {
      case 41:
        if ((active0 & 0x200000000L) != 0L) {
          return jjStopAtPos(1, 33);
        }
        break;
      case 42:
        if ((active0 & 0x100000000L) != 0L) {
          jjmatchedKind = 32;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_7(active0, 0xc0000000L);
      default:
        return 2;
    }
    return 2;
  }

  static private final int jjMoveStringLiteralDfa2_7(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return 2;
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      return 2;
    }
    switch (curChar) {
      case 34:
        if ((active0 & 0x80000000L) != 0L) {
          return jjStopAtPos(2, 31);
        }
        break;
      case 42:
        if ((active0 & 0x40000000L) != 0L) {
          return jjStopAtPos(2, 30);
        }
        break;
      default:
        return 3;
    }
    return 3;
  }

  static private final int jjMoveStringLiteralDfa0_3() {
    return jjMoveNfa_3(0, 0);
  }

  static private final void jjCheckNAdd(int state) {
    if (jjrounds[state] != jjround) {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
    }
  }

  static private final void jjAddStates(int start, int end) {
    do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
    } while (start++ != end);
  }

  static private final void jjCheckNAddTwoStates(int state1, int state2) {
    jjCheckNAdd(state1);
    jjCheckNAdd(state2);
  }

  static private final void jjCheckNAddStates(int start, int end) {
    do {
      jjCheckNAdd(jjnextStates[start]);
    } while (start++ != end);
  }

  static private final void jjCheckNAddStates(int start) {
    jjCheckNAdd(jjnextStates[start]);
    jjCheckNAdd(jjnextStates[start + 1]);
  }

  static private final int jjMoveNfa_3(int startState, int curPos) {
    int[] nextStates;
    int startsAt = 0;
    jjnewStateCnt = 8;
    int i = 1;
    jjstateSet[0] = startState;
    int j, kind = 0x7fffffff;
    for (; ; ) {
      if (++jjround == 0x7fffffff) {
        ReInitRounds();
      }
      if (curChar < 64) {
        long l = 1L << curChar;
        MatchLoop:
        do {
          switch (jjstateSet[--i]) {
            case 0:
              if ((0x2400L & l) != 0L) {
                if (kind > 17) {
                  kind = 17;
                }
              }
              else if (curChar == 60) {
                jjstateSet[jjnewStateCnt++] = 6;
              }
              if (curChar == 13) {
                jjstateSet[jjnewStateCnt++] = 1;
              }
              break;
            case 1:
              if (curChar == 10 && kind > 17) {
                kind = 17;
              }
              break;
            case 2:
              if (curChar == 13) {
                jjstateSet[jjnewStateCnt++] = 1;
              }
              break;
            case 3:
              if (curChar == 62) {
                kind = 17;
              }
              break;
            case 7:
              if (curChar == 60) {
                jjstateSet[jjnewStateCnt++] = 6;
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      }
      else if (curChar < 128) {
        long l = 1L << (curChar & 077);
        MatchLoop:
        do {
          switch (jjstateSet[--i]) {
            case 4:
              if ((0x4000000040L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 3;
              }
              break;
            case 5:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 4;
              }
              break;
            case 6:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 5;
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      }
      else {
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        MatchLoop:
        do {
          switch (jjstateSet[--i]) {
            default:
              break;
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt))) {
        return curPos;
      }
      try {
        curChar = input_stream.readChar();
      }
      catch (java.io.IOException e) {
        return curPos;
      }
    }
  }

  private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2, long active3) {
    switch (pos) {
      case 0:
        if ((active2 & 0xfffffffffffffc00L) != 0L || (active3 & 0x1fffffffL) != 0L) {
          jjmatchedKind = 225;
          return 29;
        }
        if ((active1 & 0xffffffffffffff00L) != 0L || (active2 & 0x3ffL) != 0L) {
          jjmatchedKind = 225;
          return 31;
        }
        return -1;
      case 1:
        if ((active1 & 0x1604380700L) != 0L || (active2 & 0x10L) != 0L) {
          if (jjmatchedPos != 1) {
            jjmatchedKind = 225;
            jjmatchedPos = 1;
          }
          return 32;
        }
        if ((active1 & 0x2030000L) != 0L || (active2 & 0x2640001f8000L) != 0L || (active3 & 0xc00L) != 0L) {
          return 29;
        }
        if ((active1 & 0xffffffe9f9c4f800L) != 0L || (active2 & 0xffffd9bfffe07fefL) != 0L || (active3 & 0x1ffff3ffL) != 0L) {
          if (jjmatchedPos != 1) {
            jjmatchedKind = 225;
            jjmatchedPos = 1;
          }
          return 29;
        }
        return -1;
      case 2:
        if ((active1 & 0xe00000677df69c00L) != 0L || (active2 & 0x9fffdd8843fe7f3dL) != 0L || (active3 & 0xf73fb7fL) != 0L) {
          if (jjmatchedPos != 2) {
            jjmatchedKind = 225;
            jjmatchedPos = 2;
          }
          return 29;
        }
        if ((active1 & 0x1000000000L) != 0L) {
          if (jjmatchedPos != 2) {
            jjmatchedKind = 225;
            jjmatchedPos = 2;
          }
          return 33;
        }
        if ((active1 & 0x1fffff8880086300L) != 0L || (active2 & 0x60000037bc0000c2L) != 0L || (active3 & 0x108c0080L) != 0L) {
          return 29;
        }
        return -1;
      case 3:
        if ((active1 & 0xffffff4779f0da00L) != 0L || (active2 & 0x8f7edd8a6b3e7ebdL) != 0L || (active3 & 0xc7b8973L) != 0L) {
          if (jjmatchedPos != 3) {
            jjmatchedKind = 225;
            jjmatchedPos = 3;
          }
          return 29;
        }
        if ((active1 & 0x3004060400L) != 0L || (active2 & 0x1081000010c00100L) != 0L || (active3 & 0x300720cL) != 0L) {
          return 29;
        }
        return -1;
      case 4:
        if ((active1 & 0xffffff0779d00a00L) != 0L || (active2 & 0x8f7e5d08613e7e8dL) != 0L || (active3 & 0x9c973L) != 0L) {
          if (jjmatchedPos != 4) {
            jjmatchedKind = 225;
            jjmatchedPos = 4;
          }
          return 29;
        }
        if ((active1 & 0x400020d000L) != 0L || (active2 & 0x80820a000030L) != 0L || (active3 & 0xc720000L) != 0L) {
          return 29;
        }
        return -1;
      case 5:
        if ((active1 & 0x5ffeff0279900a00L) != 0L || (active2 & 0x4a5d00611a7e04L) != 0L || (active3 & 0x610862L) != 0L) {
          if (jjmatchedPos != 5) {
            jjmatchedKind = 225;
            jjmatchedPos = 5;
          }
          return 29;
        }
        if ((active1 & 0xa001000500400000L) != 0L || (active2 & 0x8f34000800240089L) != 0L || (active3 & 0x8c111L) != 0L) {
          return 29;
        }
        return -1;
      case 6:
        if ((active1 & 0x5ffaff0218100a00L) != 0L || (active2 & 0x6025d0000024204L) != 0L || (active3 & 0x600840L) != 0L) {
          if (jjmatchedPos != 6) {
            jjmatchedKind = 225;
            jjmatchedPos = 6;
          }
          return 29;
        }
        if ((active1 & 0x4000061800000L) != 0L || (active2 & 0x48000061183c00L) != 0L || (active3 & 0x10022L) != 0L) {
          return 29;
        }
        return -1;
      case 7:
        if ((active1 & 0x47bafd0208000800L) != 0L || (active2 & 0x6025c0000004404L) != 0L || (active3 & 0x400842L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 7;
          return 29;
        }
        if ((active1 & 0x1840020010100200L) != 0L || (active2 & 0x10000020200L) != 0L || (active3 & 0x200000L) != 0L) {
          return 29;
        }
        return -1;
      case 8:
        if ((active1 & 0x47b0fc0208000000L) != 0L || (active2 & 0x600040000004404L) != 0L || (active3 & 0x400802L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 8;
          return 29;
        }
        if ((active1 & 0xa010000000800L) != 0L || (active2 & 0x2580000000000L) != 0L || (active3 & 0x40L) != 0L) {
          return 29;
        }
        return -1;
      case 9:
        if ((active1 & 0x4410ac0208000000L) != 0L || (active2 & 0x400000000004400L) != 0L || (active3 & 0x400002L) != 0L) {
          if (jjmatchedPos != 9) {
            jjmatchedKind = 225;
            jjmatchedPos = 9;
          }
          return 29;
        }
        if ((active1 & 0x3a0500000000000L) != 0L || (active2 & 0x200040000000004L) != 0L || (active3 & 0x800L) != 0L) {
          return 29;
        }
        return -1;
      case 10:
        if ((active1 & 0x710a40208000000L) != 0L || (active2 & 0x4400L) != 0L || (active3 & 0x400002L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 10;
          return 29;
        }
        if ((active1 & 0x4000080000000000L) != 0L || (active2 & 0x400000000000000L) != 0L) {
          return 29;
        }
        return -1;
      case 11:
        if ((active1 & 0x710200208000000L) != 0L || (active2 & 0x4400L) != 0L || (active3 & 0x2L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 11;
          return 29;
        }
        if ((active1 & 0x840000000000L) != 0L || (active3 & 0x400000L) != 0L) {
          return 29;
        }
        return -1;
      case 12:
        if ((active1 & 0x700200000000000L) != 0L || (active2 & 0x400L) != 0L || (active3 & 0x2L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 12;
          return 29;
        }
        if ((active1 & 0x10000208000000L) != 0L || (active2 & 0x4000L) != 0L) {
          return 29;
        }
        return -1;
      case 13:
        if ((active1 & 0x600200000000000L) != 0L || (active3 & 0x2L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 13;
          return 29;
        }
        if ((active1 & 0x100000000000000L) != 0L || (active2 & 0x400L) != 0L) {
          return 29;
        }
        return -1;
      case 14:
        if ((active1 & 0x400200000000000L) != 0L || (active3 & 0x2L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 14;
          return 29;
        }
        if ((active1 & 0x200000000000000L) != 0L) {
          return 29;
        }
        return -1;
      case 15:
        if ((active1 & 0x400200000000000L) != 0L || (active3 & 0x2L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 15;
          return 29;
        }
        return -1;
      case 16:
        if ((active1 & 0x200000000000L) != 0L) {
          return 29;
        }
        if ((active1 & 0x400000000000000L) != 0L || (active3 & 0x2L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 16;
          return 29;
        }
        return -1;
      case 17:
        if ((active1 & 0x400000000000000L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 17;
          return 29;
        }
        if ((active3 & 0x2L) != 0L) {
          return 29;
        }
        return -1;
      case 18:
        if ((active1 & 0x400000000000000L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 18;
          return 29;
        }
        return -1;
      case 19:
        if ((active1 & 0x400000000000000L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 19;
          return 29;
        }
        return -1;
      case 20:
        if ((active1 & 0x400000000000000L) != 0L) {
          jjmatchedKind = 225;
          jjmatchedPos = 20;
          return 29;
        }
        return -1;
      default:
        return -1;
    }
  }

  private static final int jjStartNfa_0(int pos, long active0, long active1, long active2, long active3) {
    return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2, active3), pos + 1);
  }

  static private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
    jjmatchedKind = kind;
    jjmatchedPos = pos;
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      return pos + 1;
    }
    return jjMoveNfa_0(state, pos + 1);
  }

  static private final int jjMoveStringLiteralDfa0_0() {
    switch (curChar) {
      case 38:
        return jjStopAtPos(0, 70);
      case 40:
        jjmatchedKind = 42;
        return jjMoveStringLiteralDfa1_0(0x3900L, 0x0L, 0x0L, 0x0L);
      case 41:
        return jjStopAtPos(0, 43);
      case 42:
        jjmatchedKind = 64;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x2L, 0x0L, 0x0L);
      case 43:
        return jjStopAtPos(0, 62);
      case 44:
        return jjStopAtPos(0, 49);
      case 45:
        jjmatchedKind = 63;
        return jjMoveStringLiteralDfa1_0(0x600L, 0x0L, 0x0L, 0x0L);
      case 46:
        return jjStopAtPos(0, 50);
      case 47:
        return jjStopAtPos(0, 66);
      case 58:
        jjmatchedKind = 51;
        return jjMoveStringLiteralDfa1_0(0x120000000000000L, 0x0L, 0x0L, 0x3000000000000L);
      case 59:
        return jjStopAtPos(0, 48);
      case 60:
        jjmatchedKind = 57;
        return jjMoveStringLiteralDfa1_0(0x2880000000000000L, 0x0L, 0x0L, 0x800000000000L);
      case 61:
        return jjStopAtPos(0, 52);
      case 62:
        jjmatchedKind = 54;
        return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L, 0x0L);
      case 63:
        return jjStopAtPos(0, 58);
      case 64:
        return jjStopAtPos(0, 69);
      case 91:
        return jjStopAtPos(0, 46);
      case 92:
        return jjStopAtPos(0, 67);
      case 93:
        return jjStopAtPos(0, 47);
      case 95:
        return jjStopAtPos(0, 71);
      case 65:
      case 97:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x7ff00L, 0x0L, 0x0L);
      case 66:
      case 98:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x3f80000L, 0x0L, 0x0L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x1fc000000L, 0x0L, 0x0L);
      case 68:
      case 100:
        return jjMoveStringLiteralDfa1_0(0x0L, 0xe00000000L, 0x0L, 0x0L);
      case 69:
      case 101:
        return jjMoveStringLiteralDfa1_0(0x0L, 0xfffffff000000000L, 0xfL, 0x0L);
      case 70:
      case 102:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3f0L, 0x0L);
      case 71:
      case 103:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc00L, 0x0L);
      case 72:
      case 104:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3000L, 0x0L);
      case 73:
      case 105:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1fc000L, 0x0L);
      case 76:
      case 108:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7fe00000L, 0x0L);
      case 77:
      case 109:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x380000000L, 0x0L);
      case 78:
      case 110:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1c00000000L, 0x0L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xfe000000000L, 0x0L);
      case 80:
      case 112:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x700000000000L, 0x0L);
      case 81:
      case 113:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000000000L, 0x0L);
      case 82:
      case 114:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xff000000000000L, 0x0L);
      case 83:
      case 115:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xff00000000000000L, 0x7fL);
      case 84:
      case 116:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x7f80L);
      case 85:
      case 117:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xf8000L);
      case 86:
      case 118:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x1f00000L);
      case 87:
      case 119:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0xe000000L);
      case 88:
      case 120:
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x10000000L);
      case 123:
        return jjStopAtPos(0, 44);
      case 124:
        jjmatchedKind = 68;
        return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x0L, 0x400000000000L);
      case 125:
        return jjStopAtPos(0, 45);
      case 160:
        return jjStopAtPos(0, 7);
      default:
        return jjMoveNfa_0(0, 0);
    }
  }

  static private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2, long active3) {
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2, active3);
      return 1;
    }
    switch (curChar) {
      case 42:
        if ((active0 & 0x2000L) != 0L) {
          jjmatchedKind = 13;
          jjmatchedPos = 1;
        }
        else if ((active1 & 0x2L) != 0L) {
          return jjStopAtPos(1, 65);
        }
        else if ((active3 & 0x800000000000L) != 0L) {
          return jjStopAtPos(1, 239);
        }
        return jjMoveStringLiteralDfa2_0(active0, 0x1900L, active1, 0L, active2, 0L, active3, 0L);
      case 45:
        if ((active0 & 0x400L) != 0L) {
          jjmatchedKind = 10;
          jjmatchedPos = 1;
        }
        else if ((active0 & 0x80000000000000L) != 0L) {
          return jjStopAtPos(1, 55);
        }
        return jjMoveStringLiteralDfa2_0(active0, 0x200L, active1, 0L, active2, 0L, active3, 0L);
      case 58:
        if ((active0 & 0x100000000000000L) != 0L) {
          return jjStopAtPos(1, 56);
        }
        break;
      case 60:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000L);
      case 61:
        if ((active0 & 0x20000000000000L) != 0L) {
          jjmatchedKind = 53;
          jjmatchedPos = 1;
        }
        else if ((active0 & 0x800000000000000L) != 0L) {
          return jjStopAtPos(1, 59);
        }
        else if ((active0 & 0x1000000000000000L) != 0L) {
          return jjStopAtPos(1, 60);
        }
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2000000000000L);
      case 62:
        if ((active0 & 0x2000000000000000L) != 0L) {
          return jjStopAtPos(1, 61);
        }
        break;
      case 65:
      case 97:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1004180000L, active2, 0x100080000010L, active3, 0xf00180L);
      case 66:
      case 98:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x300L, active2, 0L, active3, 0L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L, active2, 0x700000000000000L, active3, 0L);
      case 68:
      case 100:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2000004000L, active3, 0L);
      case 69:
      case 101:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x600200000L, active2, 0x383f000000200c00L, active3, 0L);
      case 70:
      case 102:
        if ((active2 & 0x8000L) != 0L) {
          return jjStartNfaWithStates_0(1, 143, 29);
        }
        else if ((active2 & 0x4000000000L) != 0L) {
          return jjStartNfaWithStates_0(1, 166, 29);
        }
        break;
      case 71:
      case 103:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 72:
      case 104:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0xc000200L);
      case 73:
      case 105:
        if ((active2 & 0x200000000000L) != 0L) {
          return jjStartNfaWithStates_0(1, 173, 29);
        }
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800400000L, active2, 0xc000000000c03020L, active3, 0x3000000L);
      case 75:
      case 107:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x4L);
      case 76:
      case 108:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6000801000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
        if ((active2 & 0x10000L) != 0L) {
          jjmatchedKind = 144;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x7fffff8000006000L, active2, 0x80001e0000L, active3, 0x38000L);
      case 79:
      case 111:
        if ((active3 & 0x400L) != 0L) {
          jjmatchedKind = 202;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xf9000000L, active2, 0x4000077f0000c0L, active3, 0x10000801L);
      case 80:
      case 112:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000000000L, active3, 0L);
      case 81:
      case 113:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8L);
      case 82:
      case 114:
        if ((active2 & 0x20000000000L) != 0L) {
          jjmatchedKind = 169;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100008000L, active2, 0x440000000100L, active3, 0x1000L);
      case 83:
      case 115:
        if ((active1 & 0x10000L) != 0L) {
          jjmatchedKind = 80;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000020000L, active2, 0L, active3, 0xc0000L);
      case 84:
      case 116:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L, active2, 0x80000000000L, active3, 0x10L);
      case 85:
      case 117:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80800800000200L, active3, 0x62L);
      case 86:
      case 118:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x1000000000L, active3, 0L);
      case 88:
      case 120:
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0xfL, active3, 0L);
      case 89:
      case 121:
        if ((active1 & 0x2000000L) != 0L) {
          return jjStartNfaWithStates_0(1, 89, 29);
        }
        return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x6000L);
      case 124:
        if ((active3 & 0x400000000000L) != 0L) {
          return jjStopAtPos(1, 238);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(0, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(0, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2, active3);
      return 2;
    }
    switch (curChar) {
      case 34:
        if ((active0 & 0x200L) != 0L) {
          return jjStopAtPos(2, 9);
        }
        else if ((active0 & 0x1000L) != 0L) {
          return jjStopAtPos(2, 12);
        }
        break;
      case 42:
        if ((active0 & 0x800L) != 0L) {
          return jjStopAtPos(2, 11);
        }
        break;
      case 58:
        if ((active3 & 0x2000000000000L) != 0L) {
          return jjStopAtPos(2, 241);
        }
        break;
      case 62:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x1000000000000L);
      case 65:
      case 97:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000L, active2, 0x1000000000000L, active3, 0L);
      case 66:
      case 98:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x1001000L, active3, 0x22L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000001000000000L, active2, 0x2000000L, active3, 0L);
      case 68:
      case 100:
        if ((active1 & 0x2000L) != 0L) {
          jjmatchedKind = 77;
          jjmatchedPos = 2;
        }
        else if ((active1 & 0x8000000000L) != 0L) {
          jjmatchedKind = 103;
          jjmatchedPos = 2;
        }
        else if ((active2 & 0x100000000L) != 0L) {
          jjmatchedKind = 160;
          jjmatchedPos = 2;
        }
        else if ((active2 & 0x2000000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 165, 29);
        }
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1fffff0000004000L, active2, 0x40200020000L, active3, 0L);
      case 69:
      case 101:
        if ((active3 & 0x40000L) != 0L) {
          jjmatchedKind = 210;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100800000L, active2, 0x808000004000L, active3, 0x5080200L);
      case 70:
      case 102:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2000000000000L, active3, 0L);
      case 71:
      case 103:
        if ((active1 & 0x80000L) != 0L) {
          return jjStartNfaWithStates_0(2, 83, 29);
        }
        else if ((active2 & 0x4000000L) != 0L) {
          jjmatchedKind = 154;
          jjmatchedPos = 2;
        }
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200800L, active2, 0x38000000L, active3, 0L);
      case 72:
      case 104:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x700080000000000L, active3, 0L);
      case 73:
      case 105:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x21000L, active2, 0x40002001L, active3, 0x8008004L);
      case 75:
      case 107:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x400000L, active3, 0x10000L);
      case 76:
      case 108:
        if ((active2 & 0x1000000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 164, 29);
        }
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x18c0000000000010L, active3, 0x700000L);
      case 77:
      case 109:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x4000800000000L, active3, 0L);
      case 78:
      case 110:
        if ((active2 & 0x4000000000000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 190, 29);
        }
        else if ((active3 & 0x80L) != 0L) {
          return jjStartNfaWithStates_0(2, 199, 29);
        }
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x78400000L, active2, 0x8000000200e00L, active3, 0L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000400L, active2, 0x400000000100L, active3, 0L);
      case 80:
      case 112:
        if ((active2 & 0x2L) != 0L) {
          return jjStartNfaWithStates_0(2, 129, 29);
        }
        else if ((active2 & 0x80000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 159, 29);
        }
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L, active2, 0x10000000000000L, active3, 0x6040L);
      case 82:
      case 114:
        if ((active2 & 0x40L) != 0L) {
          jjmatchedKind = 134;
          jjmatchedPos = 2;
        }
        else if ((active3 & 0x800000L) != 0L) {
          return jjStartNfaWithStates_0(2, 215, 29);
        }
        else if ((active3 & 0x10000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 220, 29);
        }
        return jjMoveStringLiteralDfa3_0(active0, 0x100L, active1, 0x400008000L, active2, 0x100000000080L, active3, 0x118L);
      case 83:
      case 115:
        if ((active1 & 0x100L) != 0L) {
          jjmatchedKind = 72;
          jjmatchedPos = 2;
        }
        else if ((active1 & 0x80000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 95, 29);
        }
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6004100200L, active2, 0x840000L, active3, 0L);
      case 84:
      case 116:
        if ((active2 & 0x400000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 162, 29);
        }
        else if ((active2 & 0x2000000000000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 189, 29);
        }
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0x2001000008000cL, active3, 0x2020800L);
      case 85:
      case 117:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L, active3, 0x1001L);
      case 86:
      case 118:
        if ((active1 & 0x800000000L) != 0L) {
          return jjStartNfaWithStates_0(2, 99, 29);
        }
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x100000L, active3, 0L);
      case 88:
      case 120:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20L, active3, 0L);
      case 90:
      case 122:
        return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x8000000000000000L, active3, 0L);
      default:
        break;
    }
    return jjStartNfa_0(1, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(1, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2, active3);
      return 3;
    }
    switch (curChar) {
      case 49:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8000000L, active3, 0L);
      case 50:
        if ((active2 & 0x10000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 156, 29);
        }
        break;
      case 58:
        if ((active3 & 0x1000000000000L) != 0L) {
          return jjStopAtPos(3, 240);
        }
        break;
      case 95:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1fffff0000000000L, active2, 0L, active3, 0L);
      case 65:
      case 97:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000100409000L, active2, 0x8000002000000L, active3, 0x800L);
      case 66:
      case 98:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x800000000L, active3, 0L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x400000000200L, active3, 0L);
      case 68:
      case 100:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x80000L);
      case 69:
      case 101:
        if ((active1 & 0x4000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 90, 29);
        }
        else if ((active1 & 0x2000000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 101, 29);
        }
        else if ((active2 & 0x400000L) != 0L) {
          return jjStartNfaWithStates_0(3, 150, 29);
        }
        else if ((active2 & 0x80000000000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 183, 29);
        }
        else if ((active3 & 0x1000L) != 0L) {
          return jjStartNfaWithStates_0(3, 204, 29);
        }
        else if ((active3 & 0x2000L) != 0L) {
          jjmatchedKind = 205;
          jjmatchedPos = 3;
        }
        return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0x200100000L, active2, 0x8f520c02001e0c2cL, active3, 0x4040L);
      case 70:
      case 102:
        if ((active2 & 0x1000000000000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 188, 29);
        }
        break;
      case 71:
      case 103:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x200000L, active3, 0x100L);
      case 72:
      case 104:
        if ((active1 & 0x1000000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 100, 29);
        }
        else if ((active3 & 0x2000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 217, 29);
        }
        break;
      case 73:
      case 105:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000004400200000L, active2, 0x10020000000L, active3, 0x20010L);
      case 76:
      case 108:
        if ((active2 & 0x1000000000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 176, 29);
        }
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000L, active2, 0L, active3, 0x8000000L);
      case 77:
      case 109:
        if ((active2 & 0x100L) != 0L) {
          return jjStartNfaWithStates_0(3, 136, 29);
        }
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000000000000000L, active2, 0x80L, active3, 0L);
      case 78:
      case 110:
        if ((active1 & 0x20000L) != 0L) {
          return jjStartNfaWithStates_0(3, 81, 29);
        }
        else if ((active1 & 0x40000L) != 0L) {
          return jjStartNfaWithStates_0(3, 82, 29);
        }
        else if ((active3 & 0x200L) != 0L) {
          return jjStartNfaWithStates_0(3, 201, 29);
        }
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8800000L, active2, 0x40006000L, active3, 0x10000L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L, active2, 0x4008001001000L, active3, 0L);
      case 80:
      case 112:
        if ((active3 & 0x4L) != 0L) {
          return jjStartNfaWithStates_0(3, 194, 29);
        }
        break;
      case 81:
      case 113:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x8000L);
      case 82:
      case 114:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800L, active2, 0x800000000000L, active3, 0x4000001L);
      case 83:
      case 115:
        if ((active1 & 0x400L) != 0L) {
          return jjStartNfaWithStates_0(3, 74, 29);
        }
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30000000L, active2, 0x11L, active3, 0L);
      case 84:
      case 116:
        if ((active2 & 0x800000L) != 0L) {
          return jjStartNfaWithStates_0(3, 151, 29);
        }
        else if ((active3 & 0x8L) != 0L) {
          return jjStartNfaWithStates_0(3, 195, 29);
        }
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000200L, active2, 0x100000000000L, active3, 0x22L);
      case 85:
      case 117:
        return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000000000000L, active3, 0x700000L);
      case 87:
      case 119:
        if ((active3 & 0x1000000L) != 0L) {
          return jjStartNfaWithStates_0(3, 216, 29);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(2, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(2, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2, active3);
      return 4;
    }
    switch (curChar) {
      case 48:
        if ((active2 & 0x8000000L) != 0L) {
          return jjStartNfaWithStates_0(4, 155, 29);
        }
        break;
      case 65:
      case 97:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0x10000000000080L, active3, 0L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1e0000000000L, active2, 0x800000020000000L, active3, 0x1L);
      case 68:
      case 100:
        if ((active2 & 0x20L) != 0L) {
          return jjStartNfaWithStates_0(4, 133, 29);
        }
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000100000L, active2, 0x40002000L, active3, 0L);
      case 69:
      case 101:
        if ((active2 & 0x10L) != 0L) {
          return jjStartNfaWithStates_0(4, 132, 29);
        }
        else if ((active3 & 0x100000L) != 0L) {
          jjmatchedKind = 212;
          jjmatchedPos = 4;
        }
        else if ((active3 & 0x4000000L) != 0L) {
          return jjStartNfaWithStates_0(4, 218, 29);
        }
        else if ((active3 & 0x8000000L) != 0L) {
          return jjStartNfaWithStates_0(4, 219, 29);
        }
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000400041000800L, active2, 0x400800000000L, active3, 0x600100L);
      case 70:
      case 102:
        if ((active1 & 0x4000000000L) != 0L) {
          return jjStartNfaWithStates_0(4, 102, 29);
        }
        else if ((active2 & 0x8000000000L) != 0L) {
          return jjStartNfaWithStates_0(4, 167, 29);
        }
        return jjMoveStringLiteralDfa5_0(active0, 0x100L, active1, 0x800000000000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000L, active2, 0x80000L, active3, 0L);
      case 73:
      case 105:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000L, active2, 0x100000000000L, active3, 0x80000L);
      case 76:
      case 108:
        if ((active2 & 0x2000000L) != 0L) {
          return jjStartNfaWithStates_0(4, 153, 29);
        }
        else if ((active2 & 0x200000000L) != 0L) {
          return jjStartNfaWithStates_0(4, 161, 29);
        }
        else if ((active3 & 0x20000L) != 0L) {
          return jjStartNfaWithStates_0(4, 209, 29);
        }
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000L, active2, 0L, active3, 0x800L);
      case 77:
      case 109:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc000000000000L, active2, 0x708000000000000L, active3, 0L);
      case 78:
      case 110:
        if ((active1 & 0x200000L) != 0L) {
          return jjStartNfaWithStates_0(4, 85, 29);
        }
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000L, active2, 0xcL, active3, 0x10L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000000L, active2, 0x8000010000000000L, active3, 0x14000L);
      case 80:
      case 112:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8010000000000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
        if ((active1 & 0x4000L) != 0L) {
          return jjStartNfaWithStates_0(4, 78, 29);
        }
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x60000000400200L, active2, 0x220c0000140c00L, active3, 0x40L);
      case 83:
      case 115:
        if ((active1 & 0x1000L) != 0L) {
          return jjStartNfaWithStates_0(4, 76, 29);
        }
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x780000000000000L, active2, 0x40000000000000L, active3, 0L);
      case 84:
      case 116:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2800000130000000L, active2, 0x204201L, active3, 0L);
      case 85:
      case 117:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1001000L, active3, 0x8000L);
      case 86:
      case 118:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000400000000L, active2, 0x4000000000000L, active3, 0L);
      case 88:
      case 120:
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x20000L, active3, 0L);
      case 89:
      case 121:
        if ((active1 & 0x8000L) != 0L) {
          return jjStartNfaWithStates_0(4, 79, 29);
        }
        else if ((active2 & 0x800000000000L) != 0L) {
          return jjStartNfaWithStates_0(4, 175, 29);
        }
        return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x22L);
      default:
        break;
    }
    return jjStartNfa_0(3, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(3, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2, active3);
      return 5;
    }
    switch (curChar) {
      case 95:
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20100000L, active2, 0L, active3, 0x600800L);
      case 65:
      case 97:
        if ((active2 & 0x100000000000000L) != 0L) {
          jjmatchedKind = 184;
          jjmatchedPos = 5;
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4020011000200L, active2, 0x600000020000000L, active3, 0L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x380000000000000L, active2, 0L, active3, 0L);
      case 68:
      case 100:
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000L, active2, 0x400000000000L, active3, 0L);
      case 69:
      case 101:
        if ((active1 & 0x100000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 96, 29);
        }
        else if ((active1 & 0x400000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 98, 29);
        }
        else if ((active1 & 0x8000000000000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 127, 29);
        }
        else if ((active2 & 0x4000000000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 178, 29);
        }
        else if ((active3 & 0x1L) != 0L) {
          return jjStartNfaWithStates_0(5, 192, 29);
        }
        else if ((active3 & 0x8000L) != 0L) {
          return jjStartNfaWithStates_0(5, 207, 29);
        }
        return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0x20200000000000L, active2, 0xa040040082000L, active3, 0L);
      case 70:
      case 102:
        if ((active1 & 0x1000000000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 112, 29);
        }
        else if ((active2 & 0x8000000000000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 191, 29);
        }
        else if ((active3 & 0x4000L) != 0L) {
          return jjStartNfaWithStates_0(5, 206, 29);
        }
        break;
      case 71:
      case 103:
        if ((active3 & 0x10L) != 0L) {
          return jjStartNfaWithStates_0(5, 196, 29);
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L, active2, 0L, active3, 0L);
      case 72:
      case 104:
        if ((active2 & 0x200000L) != 0L) {
          return jjStartNfaWithStates_0(5, 149, 29);
        }
        break;
      case 73:
      case 105:
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000000000000L, active2, 0x24e00L, active3, 0L);
      case 76:
      case 108:
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
        if ((active2 & 0x20000000000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 181, 29);
        }
        else if ((active3 & 0x80000L) != 0L) {
          return jjStartNfaWithStates_0(5, 211, 29);
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0x10001001000L, active3, 0L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xa0c0000000000L, active2, 0x40000000000000L, active3, 0L);
      case 80:
      case 112:
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x22L);
      case 82:
      case 114:
        if ((active2 & 0x800000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 163, 29);
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4010100000000000L, active2, 0L, active3, 0L);
      case 83:
      case 115:
        if ((active2 & 0x1L) != 0L) {
          return jjStartNfaWithStates_0(5, 128, 29);
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x100004L, active3, 0L);
      case 84:
      case 116:
        if ((active2 & 0x8L) != 0L) {
          return jjStartNfaWithStates_0(5, 131, 29);
        }
        else if ((active2 & 0x80L) != 0L) {
          return jjStartNfaWithStates_0(5, 135, 29);
        }
        else if ((active2 & 0x40000L) != 0L) {
          return jjStartNfaWithStates_0(5, 146, 29);
        }
        else if ((active2 & 0x10000000000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 180, 29);
        }
        else if ((active2 & 0x800000000000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 187, 29);
        }
        else if ((active3 & 0x100L) != 0L) {
          return jjStartNfaWithStates_0(5, 200, 29);
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8800000L, active2, 0x100000000000L, active3, 0x40L);
      case 85:
      case 117:
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x440800000000000L, active2, 0L, active3, 0L);
      case 87:
      case 119:
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x80000000000L, active3, 0x10000L);
      case 88:
      case 120:
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
        if ((active1 & 0x400000L) != 0L) {
          return jjStartNfaWithStates_0(5, 86, 29);
        }
        else if ((active1 & 0x2000000000000000L) != 0L) {
          return jjStartNfaWithStates_0(5, 125, 29);
        }
        return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800000000000000L, active2, 0L, active3, 0L);
      default:
        break;
    }
    return jjStartNfa_0(4, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(4, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2, active3);
      return 6;
    }
    switch (curChar) {
      case 95:
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x600000000000000L, active3, 0L);
      case 65:
      case 97:
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000008000800L, active2, 0x10000000000L, active3, 0L);
      case 66:
      case 98:
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
        if ((active2 & 0x800L) != 0L) {
          jjmatchedKind = 139;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000000200L, active2, 0x400L, active3, 0L);
      case 68:
      case 100:
        if ((active2 & 0x1000L) != 0L) {
          return jjStartNfaWithStates_0(6, 140, 29);
        }
        else if ((active2 & 0x1000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 152, 29);
        }
        else if ((active2 & 0x8000000000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 179, 29);
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000L, active2, 0x40000000000L, active3, 0L);
      case 69:
      case 101:
        if ((active1 & 0x20000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 93, 29);
        }
        else if ((active2 & 0x100000L) != 0L) {
          return jjStartNfaWithStates_0(6, 148, 29);
        }
        else if ((active3 & 0x20L) != 0L) {
          jjmatchedKind = 197;
          jjmatchedPos = 6;
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000100200000000L, active2, 0L, active3, 0x2L);
      case 70:
      case 102:
        if ((active2 & 0x40000000000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 182, 29);
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L);
      case 72:
      case 104:
        if ((active1 & 0x800000L) != 0L) {
          return jjStartNfaWithStates_0(6, 87, 29);
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x380000000000000L, active2, 0L, active3, 0L);
      case 73:
      case 105:
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000000L, active2, 0x180000000004L, active3, 0x200000L);
      case 76:
      case 108:
        if ((active2 & 0x20000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 157, 29);
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
        if ((active1 & 0x1000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 88, 29);
        }
        else if ((active3 & 0x10000L) != 0L) {
          return jjStartNfaWithStates_0(6, 208, 29);
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8c0010000000L, active2, 0x2000000020000L, active3, 0L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000100000L, active2, 0x200L, active3, 0x800L);
      case 80:
      case 112:
        if ((active1 & 0x4000000000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 114, 29);
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x820200000000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
        if ((active2 & 0x80000L) != 0L) {
          return jjStartNfaWithStates_0(6, 147, 29);
        }
        return jjMoveStringLiteralDfa7_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L);
      case 83:
      case 115:
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
        if ((active1 & 0x40000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 94, 29);
        }
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000L, active2, 0L, active3, 0L);
      case 85:
      case 117:
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0x400000L);
      case 88:
      case 120:
        if ((active2 & 0x2000L) != 0L) {
          return jjStartNfaWithStates_0(6, 141, 29);
        }
        else if ((active2 & 0x40000000L) != 0L) {
          return jjStartNfaWithStates_0(6, 158, 29);
        }
        break;
      case 89:
      case 121:
        return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L);
      default:
        break;
    }
    return jjStartNfa_0(5, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(5, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2, active3);
      return 7;
    }
    switch (curChar) {
      case 95:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x40000000400L, active3, 0x2L);
      case 65:
      case 97:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2110000000000L, active2, 0L, active3, 0L);
      case 66:
      case 98:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10800000000000L, active2, 0x2000000000000L, active3, 0L);
      case 69:
      case 101:
        if ((active1 & 0x20000000000L) != 0L) {
          return jjStartNfaWithStates_0(7, 105, 29);
        }
        else if ((active1 & 0x40000000000000L) != 0L) {
          return jjStartNfaWithStates_0(7, 118, 29);
        }
        else if ((active1 & 0x800000000000000L) != 0L) {
          return jjStartNfaWithStates_0(7, 123, 29);
        }
        return jjMoveStringLiteralDfa8_0(active0, 0x100L, active1, 0x3a8200000000000L, active2, 0L, active3, 0L);
      case 71:
      case 103:
        if ((active2 & 0x20000L) != 0L) {
          return jjStartNfaWithStates_0(7, 145, 29);
        }
        break;
      case 73:
      case 105:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L, active2, 0x4000L, active3, 0L);
      case 76:
      case 108:
        if ((active2 & 0x10000000000L) != 0L) {
          return jjStartNfaWithStates_0(7, 168, 29);
        }
        break;
      case 77:
      case 109:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x200000000000000L, active3, 0L);
      case 78:
      case 110:
        if ((active1 & 0x100000L) != 0L) {
          return jjStartNfaWithStates_0(7, 84, 29);
        }
        else if ((active2 & 0x200L) != 0L) {
          return jjStartNfaWithStates_0(7, 137, 29);
        }
        else if ((active3 & 0x200000L) != 0L) {
          return jjStartNfaWithStates_0(7, 213, 29);
        }
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0x400000L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x100000000000L, active3, 0L);
      case 80:
      case 112:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x40L);
      case 82:
      case 114:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000000000L, active3, 0L);
      case 83:
      case 115:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000L, active2, 0x80000000000L, active3, 0L);
      case 84:
      case 116:
        if ((active1 & 0x200L) != 0L) {
          return jjStartNfaWithStates_0(7, 73, 29);
        }
        else if ((active1 & 0x10000000L) != 0L) {
          return jjStartNfaWithStates_0(7, 92, 29);
        }
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4400080008000800L, active2, 0L, active3, 0L);
      case 86:
      case 118:
        return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0x800L);
      case 87:
      case 119:
        if ((active1 & 0x1000000000000000L) != 0L) {
          return jjStartNfaWithStates_0(7, 124, 29);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(6, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(6, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2, active3);
      return 8;
    }
    switch (curChar) {
      case 65:
      case 97:
        return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x20000000000000L, active2, 0x200000000000000L, active3, 0L);
      case 66:
      case 98:
        return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x40000000000L, active3, 0L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L);
      case 69:
      case 101:
        if ((active1 & 0x800L) != 0L) {
          return jjStartNfaWithStates_0(8, 75, 29);
        }
        else if ((active2 & 0x80000000000L) != 0L) {
          return jjStartNfaWithStates_0(8, 171, 29);
        }
        else if ((active2 & 0x400000000000L) != 0L) {
          return jjStartNfaWithStates_0(8, 174, 29);
        }
        else if ((active2 & 0x2000000000000L) != 0L) {
          return jjStartNfaWithStates_0(8, 177, 29);
        }
        else if ((active3 & 0x40L) != 0L) {
          return jjStartNfaWithStates_0(8, 198, 29);
        }
        return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10080000000000L, active2, 0x4400L, active3, 0x800L);
      case 73:
      case 105:
        return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x4000000008000000L, active2, 0x400000000000000L, active3, 0x400000L);
      case 76:
      case 108:
        if ((active1 & 0x2000000000000L) != 0L) {
          return jjStartNfaWithStates_0(8, 113, 29);
        }
        else if ((active1 & 0x8000000000000L) != 0L) {
          return jjStartNfaWithStates_0(8, 115, 29);
        }
        return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x4L, active3, 0L);
      case 77:
      case 109:
        return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x380000000000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
        if ((active2 & 0x100000000000L) != 0L) {
          return jjStartNfaWithStates_0(8, 172, 29);
        }
        return jjMoveStringLiteralDfa9_0(active0, 0x100L, active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 83:
      case 115:
        if ((active1 & 0x10000000000L) != 0L) {
          return jjStartNfaWithStates_0(8, 104, 29);
        }
        break;
      case 84:
      case 116:
        return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0xd40200000000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
        return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      default:
        break;
    }
    return jjStartNfa_0(7, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(7, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2, active3);
      return 9;
    }
    switch (curChar) {
      case 95:
        return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L);
      case 65:
      case 97:
        if ((active1 & 0x80000000000000L) != 0L) {
          jjmatchedKind = 119;
          jjmatchedPos = 9;
        }
        return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x300040000000000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa10_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L);
      case 68:
      case 100:
        return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10200000000000L, active2, 0x4000L, active3, 0L);
      case 69:
      case 101:
        if ((active1 & 0x100000000000L) != 0L) {
          return jjStartNfaWithStates_0(9, 108, 29);
        }
        else if ((active2 & 0x4L) != 0L) {
          return jjStartNfaWithStates_0(9, 130, 29);
        }
        return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400000000000000L, active3, 0L);
      case 73:
      case 105:
        return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
        return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000008000000L, active2, 0L, active3, 0x2L);
      case 80:
      case 112:
        if ((active2 & 0x200000000000000L) != 0L) {
          return jjStartNfaWithStates_0(9, 185, 29);
        }
        return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 81:
      case 113:
        return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x400000L);
      case 82:
      case 114:
        if ((active3 & 0x800L) != 0L) {
          return jjStartNfaWithStates_0(9, 203, 29);
        }
        break;
      case 84:
      case 116:
        if ((active1 & 0x20000000000000L) != 0L) {
          return jjStartNfaWithStates_0(9, 117, 29);
        }
        break;
      case 88:
      case 120:
        return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x80000000000L, active2, 0L, active3, 0L);
      case 89:
      case 121:
        if ((active1 & 0x400000000000L) != 0L) {
          return jjStartNfaWithStates_0(9, 110, 29);
        }
        else if ((active2 & 0x40000000000L) != 0L) {
          return jjStartNfaWithStates_0(9, 170, 29);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(8, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(8, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2, active3);
      return 10;
    }
    switch (curChar) {
      case 95:
        return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x300000000000000L, active2, 0x4000L, active3, 0L);
      case 69:
      case 101:
        return jjMoveStringLiteralDfa11_0(active0, 0x100L, active1, 0x400200000000000L, active2, 0L, active3, 0L);
      case 77:
      case 109:
        return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
        if ((active1 & 0x4000000000000000L) != 0L) {
          return jjStartNfaWithStates_0(10, 126, 29);
        }
        return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x40008000000L, active2, 0L, active3, 0x2L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000000000L, active2, 0L, active3, 0L);
      case 84:
      case 116:
        if ((active1 & 0x80000000000L) != 0L) {
          return jjStartNfaWithStates_0(10, 107, 29);
        }
        return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
      case 85:
      case 117:
        return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0x400000L);
      case 87:
      case 119:
        if ((active2 & 0x400000000000000L) != 0L) {
          return jjStartNfaWithStates_0(10, 186, 29);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(9, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(9, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2, active3);
      return 11;
    }
    switch (curChar) {
      case 32:
        return jjMoveStringLiteralDfa12_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L);
      case 95:
        return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 65:
      case 97:
        return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x208000000L, active2, 0L, active3, 0L);
      case 66:
      case 98:
        return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x4000L, active3, 0L);
      case 69:
      case 101:
        if ((active3 & 0x400000L) != 0L) {
          return jjStartNfaWithStates_0(11, 214, 29);
        }
        break;
      case 73:
      case 105:
        return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0x400L, active3, 0L);
      case 77:
      case 109:
        return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 78:
      case 110:
        if ((active1 & 0x800000000000L) != 0L) {
          return jjStartNfaWithStates_0(11, 111, 29);
        }
        return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 82:
      case 114:
        return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000000000000L, active2, 0L, active3, 0L);
      case 83:
      case 115:
        return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0L, active2, 0L, active3, 0x2L);
      case 84:
      case 116:
        if ((active1 & 0x40000000000L) != 0L) {
          return jjStartNfaWithStates_0(11, 106, 29);
        }
        break;
      case 86:
      case 118:
        return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000000000000L, active2, 0L, active3, 0L);
      default:
        break;
    }
    return jjStartNfa_0(10, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(10, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, active2, active3);
      return 12;
    }
    switch (curChar) {
      case 65:
      case 97:
        return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000000000000L, active2, 0L, active3, 0L);
      case 67:
      case 99:
        return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
        if ((active1 & 0x10000000000000L) != 0L) {
          return jjStartNfaWithStates_0(12, 116, 29);
        }
        break;
      case 70:
      case 102:
        return jjMoveStringLiteralDfa13_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0L);
      case 73:
      case 105:
        return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000000000L, active2, 0L, active3, 0L);
      case 76:
      case 108:
        if ((active1 & 0x8000000L) != 0L) {
          return jjStartNfaWithStates_0(12, 91, 29);
        }
        break;
      case 80:
      case 112:
        if ((active1 & 0x200000000L) != 0L) {
          return jjStartNfaWithStates_0(12, 97, 29);
        }
        break;
      case 84:
      case 116:
        return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000000000L, active2, 0x400L, active3, 0x2L);
      case 89:
      case 121:
        if ((active2 & 0x4000L) != 0L) {
          return jjStartNfaWithStates_0(12, 142, 29);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(11, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(11, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, active2, active3);
      return 13;
    }
    switch (curChar) {
      case 95:
        return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000000000L, active2, 0L, active3, 0L);
      case 69:
      case 101:
        return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000000000000L, active2, 0L, active3, 0L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000000000000L, active2, 0L, active3, 0L);
      case 80:
      case 112:
        if ((active1 & 0x100000000000000L) != 0L) {
          return jjStartNfaWithStates_0(13, 120, 29);
        }
        break;
      case 82:
      case 114:
        return jjMoveStringLiteralDfa14_0(active0, 0x100L, active1, 0L, active2, 0L, active3, 0x2L);
      case 89:
      case 121:
        if ((active2 & 0x400L) != 0L) {
          return jjStartNfaWithStates_0(13, 138, 29);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(12, active0, active1, active2, active3);
  }

  static private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1, long old2, long active2, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(12, old0, old1, old2, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1, 0L, active3);
      return 14;
    }
    switch (curChar) {
      case 65:
      case 97:
        return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0L, active3, 0x2L);
      case 77:
      case 109:
        return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200000000000L, active3, 0L);
      case 78:
      case 110:
        return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400000000000000L, active3, 0L);
      case 79:
      case 111:
        return jjMoveStringLiteralDfa15_0(active0, 0x100L, active1, 0L, active3, 0L);
      case 87:
      case 119:
        if ((active1 & 0x200000000000000L) != 0L) {
          return jjStartNfaWithStates_0(14, 121, 29);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(13, active0, active1, 0L, active3);
  }

  static private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(13, old0, old1, 0L, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1, 0L, active3);
      return 15;
    }
    switch (curChar) {
      case 65:
      case 97:
        return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x200000000000L, active3, 0L);
      case 73:
      case 105:
        return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0L, active3, 0x2L);
      case 77:
      case 109:
        return jjMoveStringLiteralDfa16_0(active0, 0x100L, active1, 0L, active3, 0L);
      case 83:
      case 115:
        return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x400000000000000L, active3, 0L);
      default:
        break;
    }
    return jjStartNfa_0(14, active0, active1, 0L, active3);
  }

  static private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(14, old0, old1, 0L, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1, 0L, active3);
      return 16;
    }
    switch (curChar) {
      case 42:
        return jjMoveStringLiteralDfa17_0(active0, 0x100L, active1, 0L, active3, 0L);
      case 78:
      case 110:
        return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0L, active3, 0x2L);
      case 80:
      case 112:
        if ((active1 & 0x200000000000L) != 0L) {
          return jjStartNfaWithStates_0(16, 109, 29);
        }
        break;
      case 84:
      case 116:
        return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x400000000000000L, active3, 0L);
      default:
        break;
    }
    return jjStartNfa_0(15, active0, active1, 0L, active3);
  }

  static private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(15, old0, old1, 0L, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, active1, 0L, active3);
      return 17;
    }
    switch (curChar) {
      case 41:
        return jjMoveStringLiteralDfa18_0(active0, 0x100L, active1, 0L, active3, 0L);
      case 82:
      case 114:
        return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x400000000000000L, active3, 0L);
      case 84:
      case 116:
        if ((active3 & 0x2L) != 0L) {
          return jjStartNfaWithStates_0(17, 193, 29);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(16, active0, active1, 0L, active3);
  }

  static private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1, long old3, long active3) {
    if (((active0 &= old0) | (active1 &= old1) | (active3 &= old3)) == 0L) {
      return jjStartNfa_0(16, old0, old1, 0L, old3);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, active1, 0L, 0L);
      return 18;
    }
    switch (curChar) {
      case 32:
        return jjMoveStringLiteralDfa19_0(active0, 0x100L, active1, 0L);
      case 65:
      case 97:
        return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x400000000000000L);
      default:
        break;
    }
    return jjStartNfa_0(17, active0, active1, 0L, 0L);
  }

  static private final int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1) {
    if (((active0 &= old0) | (active1 &= old1)) == 0L) {
      return jjStartNfa_0(17, old0, old1, 0L, 0L);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, active1, 0L, 0L);
      return 19;
    }
    switch (curChar) {
      case 73:
      case 105:
        return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x400000000000000L);
      case 85:
      case 117:
        return jjMoveStringLiteralDfa20_0(active0, 0x100L, active1, 0L);
      default:
        break;
    }
    return jjStartNfa_0(18, active0, active1, 0L, 0L);
  }

  static private final int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1) {
    if (((active0 &= old0) | (active1 &= old1)) == 0L) {
      return jjStartNfa_0(18, old0, old1, 0L, 0L);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, active1, 0L, 0L);
      return 20;
    }
    switch (curChar) {
      case 78:
      case 110:
        return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x400000000000000L);
      case 83:
      case 115:
        return jjMoveStringLiteralDfa21_0(active0, 0x100L, active1, 0L);
      default:
        break;
    }
    return jjStartNfa_0(19, active0, active1, 0L, 0L);
  }

  static private final int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1) {
    if (((active0 &= old0) | (active1 &= old1)) == 0L) {
      return jjStartNfa_0(19, old0, old1, 0L, 0L);
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, active1, 0L, 0L);
      return 21;
    }
    switch (curChar) {
      case 69:
      case 101:
        if ((active0 & 0x100L) != 0L) {
          return jjStopAtPos(21, 8);
        }
        break;
      case 84:
      case 116:
        if ((active1 & 0x400000000000000L) != 0L) {
          return jjStartNfaWithStates_0(21, 122, 29);
        }
        break;
      default:
        break;
    }
    return jjStartNfa_0(20, active0, active1, 0L, 0L);
  }

  static private final int jjMoveNfa_0(int startState, int curPos) {
    int[] nextStates;
    int startsAt = 0;
    jjnewStateCnt = 39;
    int i = 1;
    jjstateSet[0] = startState;
    int j, kind = 0x7fffffff;
    for (; ; ) {
      if (++jjround == 0x7fffffff) {
        ReInitRounds();
      }
      if (curChar < 64) {
        long l = 1L << curChar;
        MatchLoop:
        do {
          switch (jjstateSet[--i]) {
            case 31:
              if ((0x3ff001000000000L & l) != 0L) {
                if (kind > 225) {
                  kind = 225;
                }
                jjCheckNAdd(29);
              }
              if ((0x3ff000000000000L & l) != 0L) {
                if (kind > 235) {
                  kind = 235;
                }
              }
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 32;
              }
              break;
            case 0:
              if ((0xffffff7e00000000L & l) != 0L) {
                if (kind > 234) {
                  kind = 234;
                }
              }
              else if (curChar == 39) {
                jjCheckNAddTwoStates(13, 14);
              }
              if ((0xfc00f87e00000000L & l) != 0L) {
                if (kind > 233) {
                  kind = 233;
                }
              }
              else if ((0x3ff000000000000L & l) != 0L) {
                if (kind > 231) {
                  kind = 231;
                }
                jjAddStates(0, 1);
              }
              if ((0x3ff000000000000L & l) != 0L) {
                if (kind > 223) {
                  kind = 223;
                }
                jjCheckNAddStates(2, 5);
              }
              else if ((0x280000000000L & l) != 0L) {
                if (kind > 236) {
                  kind = 236;
                }
              }
              else if (curChar == 34) {
                jjCheckNAdd(3);
              }
              else if (curChar == 37) {
                jjCheckNAdd(1);
              }
              if ((0x3000000000000L & l) != 0L) {
                if (kind > 227) {
                  kind = 227;
                }
              }
              break;
            case 33:
              if ((0x3ff001000000000L & l) != 0L) {
                if (kind > 225) {
                  kind = 225;
                }
                jjCheckNAdd(29);
              }
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 34;
              }
              break;
            case 32:
              if ((0x3ff001000000000L & l) != 0L) {
                if (kind > 225) {
                  kind = 225;
                }
                jjCheckNAdd(29);
              }
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 33;
              }
              break;
            case 1:
              if ((0x3000000000000L & l) == 0L) {
                break;
              }
              if (kind > 221) {
                kind = 221;
              }
              jjCheckNAdd(1);
              break;
            case 2:
              if (curChar == 34) {
                jjCheckNAdd(3);
              }
              break;
            case 3:
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 4;
              }
              break;
            case 4:
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 5;
              }
              break;
            case 5:
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 6;
              }
              break;
            case 6:
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 7;
              }
              break;
            case 7:
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 8;
              }
              break;
            case 8:
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 9;
              }
              break;
            case 9:
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 10;
              }
              break;
            case 10:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(3, 11);
              }
              break;
            case 11:
              if (curChar == 34 && kind > 222) {
                kind = 222;
              }
              break;
            case 12:
              if (curChar == 39) {
                jjCheckNAddTwoStates(13, 14);
              }
              break;
            case 13:
              if ((0xffffff7f00000000L & l) != 0L) {
                jjCheckNAddTwoStates(13, 14);
              }
              break;
            case 14:
              if (curChar != 39) {
                break;
              }
              if (kind > 226) {
                kind = 226;
              }
              jjstateSet[jjnewStateCnt++] = 12;
              break;
            case 15:
              if ((0x3000000000000L & l) != 0L && kind > 227) {
                kind = 227;
              }
              break;
            case 16:
              if ((0xfc00f87e00000000L & l) != 0L && kind > 233) {
                kind = 233;
              }
              break;
            case 17:
              if ((0xffffff7e00000000L & l) != 0L && kind > 234) {
                kind = 234;
              }
              break;
            case 18:
              if ((0x280000000000L & l) != 0L && kind > 236) {
                kind = 236;
              }
              break;
            case 19:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 223) {
                kind = 223;
              }
              jjCheckNAddStates(2, 5);
              break;
            case 20:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 223) {
                kind = 223;
              }
              jjCheckNAdd(20);
              break;
            case 21:
              if ((0x3ff000000000000L & l) != 0L) {
                jjCheckNAddTwoStates(21, 22);
              }
              break;
            case 22:
              if (curChar != 46) {
                break;
              }
              if (kind > 224) {
                kind = 224;
              }
              jjCheckNAddTwoStates(23, 24);
              break;
            case 23:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 224) {
                kind = 224;
              }
              jjCheckNAddTwoStates(23, 24);
              break;
            case 25:
              if ((0x280000000000L & l) != 0L) {
                jjCheckNAdd(26);
              }
              break;
            case 26:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 224) {
                kind = 224;
              }
              jjCheckNAdd(26);
              break;
            case 27:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 229) {
                kind = 229;
              }
              jjCheckNAdd(27);
              break;
            case 29:
              if ((0x3ff001000000000L & l) == 0L) {
                break;
              }
              if (kind > 225) {
                kind = 225;
              }
              jjCheckNAdd(29);
              break;
            case 30:
              if ((0x3ff000000000000L & l) == 0L) {
                break;
              }
              if (kind > 231) {
                kind = 231;
              }
              jjAddStates(0, 1);
              break;
            case 34:
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 35;
              }
              break;
            case 35:
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 36;
              }
              break;
            case 36:
              if ((0x3ff000000000000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 37;
              }
              break;
            case 37:
              if ((0x3ff000000000000L & l) != 0L && kind > 230) {
                kind = 230;
              }
              break;
            case 38:
              if ((0x3ff000000000000L & l) != 0L && kind > 235) {
                kind = 235;
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      }
      else if (curChar < 128) {
        long l = 1L << (curChar & 077);
        MatchLoop:
        do {
          switch (jjstateSet[--i]) {
            case 31:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 225) {
                  kind = 225;
                }
                jjCheckNAdd(29);
              }
              if ((0x7e0000007eL & l) != 0L) {
                if (kind > 235) {
                  kind = 235;
                }
              }
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 32;
              }
              break;
            case 0:
              if ((0x7fffffffffffffffL & l) != 0L) {
                if (kind > 234) {
                  kind = 234;
                }
              }
              if ((0x7fffffe07fffffeL & l) != 0L) {
                if (kind > 225) {
                  kind = 225;
                }
                jjCheckNAdd(29);
              }
              else if ((0x78000001f8000001L & l) != 0L) {
                if (kind > 233) {
                  kind = 233;
                }
              }
              if ((0x7e0000007eL & l) != 0L) {
                if (kind > 231) {
                  kind = 231;
                }
                jjAddStates(0, 1);
              }
              break;
            case 33:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 225) {
                  kind = 225;
                }
                jjCheckNAdd(29);
              }
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 34;
              }
              break;
            case 32:
              if ((0x7fffffe87fffffeL & l) != 0L) {
                if (kind > 225) {
                  kind = 225;
                }
                jjCheckNAdd(29);
              }
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 33;
              }
              break;
            case 3:
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 4;
              }
              break;
            case 4:
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 5;
              }
              break;
            case 5:
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 6;
              }
              break;
            case 6:
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 7;
              }
              break;
            case 7:
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 8;
              }
              break;
            case 8:
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 9;
              }
              break;
            case 9:
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 10;
              }
              break;
            case 10:
              if ((0x7e0000007eL & l) != 0L) {
                jjAddStates(6, 7);
              }
              break;
            case 13:
              if ((0x7fffffffffffffffL & l) != 0L) {
                jjAddStates(8, 9);
              }
              break;
            case 16:
              if ((0x78000001f8000001L & l) != 0L && kind > 233) {
                kind = 233;
              }
              break;
            case 17:
              if ((0x7fffffffffffffffL & l) != 0L && kind > 234) {
                kind = 234;
              }
              break;
            case 24:
              if ((0x2000000020L & l) != 0L) {
                jjAddStates(10, 11);
              }
              break;
            case 28:
              if ((0x7fffffe07fffffeL & l) == 0L) {
                break;
              }
              if (kind > 225) {
                kind = 225;
              }
              jjCheckNAdd(29);
              break;
            case 29:
              if ((0x7fffffe87fffffeL & l) == 0L) {
                break;
              }
              if (kind > 225) {
                kind = 225;
              }
              jjCheckNAdd(29);
              break;
            case 30:
              if ((0x7e0000007eL & l) == 0L) {
                break;
              }
              if (kind > 231) {
                kind = 231;
              }
              jjAddStates(0, 1);
              break;
            case 34:
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 35;
              }
              break;
            case 35:
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 36;
              }
              break;
            case 36:
              if ((0x7e0000007eL & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 37;
              }
              break;
            case 37:
              if ((0x7e0000007eL & l) != 0L && kind > 230) {
                kind = 230;
              }
              break;
            case 38:
              if ((0x7e0000007eL & l) != 0L && kind > 235) {
                kind = 235;
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      }
      else {
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        MatchLoop:
        do {
          switch (jjstateSet[--i]) {
            default:
              break;
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 39 - (jjnewStateCnt = startsAt))) {
        return curPos;
      }
      try {
        curChar = input_stream.readChar();
      }
      catch (java.io.IOException e) {
        return curPos;
      }
    }
  }

  static private final int jjMoveStringLiteralDfa0_5() {
    switch (curChar) {
      case 40:
        return jjMoveStringLiteralDfa1_5(0x3800000L);
      case 42:
        return jjMoveStringLiteralDfa1_5(0x8000000L);
      default:
        return 1;
    }
  }

  static private final int jjMoveStringLiteralDfa1_5(long active0) {
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      return 1;
    }
    switch (curChar) {
      case 41:
        if ((active0 & 0x8000000L) != 0L) {
          return jjStopAtPos(1, 27);
        }
        break;
      case 42:
        if ((active0 & 0x2000000L) != 0L) {
          jjmatchedKind = 25;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_5(active0, 0x1800000L);
      default:
        return 2;
    }
    return 2;
  }

  static private final int jjMoveStringLiteralDfa2_5(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return 2;
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      return 2;
    }
    switch (curChar) {
      case 34:
        if ((active0 & 0x1000000L) != 0L) {
          return jjStopAtPos(2, 24);
        }
        break;
      case 42:
        if ((active0 & 0x800000L) != 0L) {
          return jjStopAtPos(2, 23);
        }
        break;
      default:
        return 3;
    }
    return 3;
  }

  static private final int jjMoveStringLiteralDfa0_1() {
    return jjMoveNfa_1(0, 0);
  }

  static private final int jjMoveNfa_1(int startState, int curPos) {
    int[] nextStates;
    int startsAt = 0;
    jjnewStateCnt = 8;
    int i = 1;
    jjstateSet[0] = startState;
    int j, kind = 0x7fffffff;
    for (; ; ) {
      if (++jjround == 0x7fffffff) {
        ReInitRounds();
      }
      if (curChar < 64) {
        long l = 1L << curChar;
        MatchLoop:
        do {
          switch (jjstateSet[--i]) {
            case 0:
              if ((0x2400L & l) != 0L) {
                if (kind > 14) {
                  kind = 14;
                }
              }
              else if (curChar == 60) {
                jjstateSet[jjnewStateCnt++] = 6;
              }
              if (curChar == 13) {
                jjstateSet[jjnewStateCnt++] = 1;
              }
              break;
            case 1:
              if (curChar == 10 && kind > 14) {
                kind = 14;
              }
              break;
            case 2:
              if (curChar == 13) {
                jjstateSet[jjnewStateCnt++] = 1;
              }
              break;
            case 3:
              if (curChar == 62) {
                kind = 14;
              }
              break;
            case 7:
              if (curChar == 60) {
                jjstateSet[jjnewStateCnt++] = 6;
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      }
      else if (curChar < 128) {
        long l = 1L << (curChar & 077);
        MatchLoop:
        do {
          switch (jjstateSet[--i]) {
            case 4:
              if ((0x4000000040L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 3;
              }
              break;
            case 5:
              if ((0x800000008000L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 4;
              }
              break;
            case 6:
              if ((0x2000000020L & l) != 0L) {
                jjstateSet[jjnewStateCnt++] = 5;
              }
              break;
            default:
              break;
          }
        } while (i != startsAt);
      }
      else {
        int i2 = (curChar & 0xff) >> 6;
        long l2 = 1L << (curChar & 077);
        MatchLoop:
        do {
          switch (jjstateSet[--i]) {
            default:
              break;
          }
        } while (i != startsAt);
      }
      if (kind != 0x7fffffff) {
        jjmatchedKind = kind;
        jjmatchedPos = curPos;
        kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt))) {
        return curPos;
      }
      try {
        curChar = input_stream.readChar();
      }
      catch (java.io.IOException e) {
        return curPos;
      }
    }
  }

  static private final int jjMoveStringLiteralDfa0_4() {
    switch (curChar) {
      case 40:
        return jjMoveStringLiteralDfa1_4(0x700000L);
      case 42:
        return jjMoveStringLiteralDfa1_4(0x4000000L);
      default:
        return 1;
    }
  }

  static private final int jjMoveStringLiteralDfa1_4(long active0) {
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      return 1;
    }
    switch (curChar) {
      case 41:
        if ((active0 & 0x4000000L) != 0L) {
          return jjStopAtPos(1, 26);
        }
        break;
      case 42:
        if ((active0 & 0x400000L) != 0L) {
          jjmatchedKind = 22;
          jjmatchedPos = 1;
        }
        return jjMoveStringLiteralDfa2_4(active0, 0x300000L);
      default:
        return 2;
    }
    return 2;
  }

  static private final int jjMoveStringLiteralDfa2_4(long old0, long active0) {
    if (((active0 &= old0)) == 0L) {
      return 2;
    }
    try {
      curChar = input_stream.readChar();
    }
    catch (java.io.IOException e) {
      return 2;
    }
    switch (curChar) {
      case 34:
        if ((active0 & 0x200000L) != 0L) {
          return jjStopAtPos(2, 21);
        }
        break;
      case 42:
        if ((active0 & 0x100000L) != 0L) {
          return jjStopAtPos(2, 20);
        }
        break;
      default:
        return 3;
    }
    return 3;
  }

  static private final int jjMoveStringLiteralDfa0_2() {
    switch (curChar) {
      case 34:
        return jjStopAtPos(0, 15);
      default:
        return 1;
    }
  }

  static final int[] jjnextStates = {
      31, 38, 20, 21, 22, 27, 3, 11, 13, 14, 25, 26,
  };
  public static final String[] jjstrLiteralImages = {
      null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, null, null, null, null, null, null, null, null, null,
      null, null, null, null, null, };
  public static final String[] lexStateNames = {
      "DEFAULT",
      "IN_SINGLE_LINE_COMMENT",
      "IN_SINGLE_LINE_COMMENT_TAG",
      "IN_SINGLE_LINE_TAGGED_COMMENT",
      "IN_DOCUMENT_COMMENT",
      "IN_DOCUMENT_COMMENT_5",
      "IN_MULTI_LINE_COMMENT_TAG",
      "IN_MULTI_LINE_TAGGED_COMMENT",
      "IN_MULTI_LINE_COMMENT",
  };
  public static final int[] jjnewLexState = {
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, 8, 0, -1, -1, 0, -1, -1, -1, -1, 8, -1, -1,
      8, -1, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  };
  static final long[] jjtoToken = {
      0xfffffc0000000101L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0x3ffffffffffffL,
  };
  static final long[] jjtoSkip = {
      0x40240feL, 0x0L, 0x0L, 0x0L,
  };
  static final long[] jjtoSpecial = {
      0x4024000L, 0x0L, 0x0L, 0x0L,
  };
  static final long[] jjtoMore = {
      0x3fffbfdbe00L, 0x0L, 0x0L, 0x0L,
  };
  static protected SimpleCharStream input_stream;
  static private final int[] jjrounds = new int[39];
  static private final int[] jjstateSet = new int[78];
  static StringBuffer image;
  static int jjimageLen;
  static int lengthOfMatch;
  static protected char curChar;

  public Compiler2TokenManager(SimpleCharStream stream) {
    if (input_stream != null) {
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
          TokenMgrError.STATIC_LEXER_ERROR);
    }
    input_stream = stream;
  }

  public Compiler2TokenManager(SimpleCharStream stream, int lexState) {
    this(stream);
    SwitchTo(lexState);
  }

  static public void ReInit(SimpleCharStream stream) {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private final void ReInitRounds() {
    int i;
    jjround = 0x80000001;
    for (i = 39; i-- > 0; )
      jjrounds[i] = 0x80000000;
  }

  static public void ReInit(SimpleCharStream stream, int lexState) {
    ReInit(stream);
    SwitchTo(lexState);
  }

  static public void SwitchTo(int lexState) {
    if (lexState >= 9 || lexState < 0) {
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    }
    else {
      curLexState = lexState;
    }
  }

  static protected Token jjFillToken() {
    Token t = Token.newToken(jjmatchedKind);
    t.kind = jjmatchedKind;
    String im = jjstrLiteralImages[jjmatchedKind];
    t.image = (im == null) ? input_stream.GetImage() : im;
    t.beginLine = input_stream.getBeginLine();
    t.beginColumn = input_stream.getBeginColumn();
    t.endLine = input_stream.getEndLine();
    t.endColumn = input_stream.getEndColumn();
    return t;
  }

  static int curLexState = 0;
  static int defaultLexState = 0;
  static int jjnewStateCnt;
  static int jjround;
  static int jjmatchedPos;
  static int jjmatchedKind;

  public static Token getNextToken() {
    int kind;
    Token specialToken = null;
    Token matchedToken;
    int curPos = 0;

    EOFLoop:
    for (; ; ) {
      try {
        curChar = input_stream.BeginToken();
      }
      catch (java.io.IOException e) {
        jjmatchedKind = 0;
        matchedToken = jjFillToken();
        matchedToken.specialToken = specialToken;
        return matchedToken;
      }
      image = null;
      jjimageLen = 0;

      for (; ; ) {
        switch (curLexState) {
          case 0:
            try {
              input_stream.backup(0);
              while (curChar <= 32 && (0x100003601L & (1L << curChar)) != 0L)
                curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e1) {
              continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedPos == 0 && jjmatchedKind > 237) {
              jjmatchedKind = 237;
            }
            break;
          case 1:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_1();
            if (jjmatchedPos == 0 && jjmatchedKind > 19) {
              jjmatchedKind = 19;
            }
            break;
          case 2:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_2();
            if (jjmatchedPos == 0 && jjmatchedKind > 16) {
              jjmatchedKind = 16;
            }
            break;
          case 3:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_3();
            if (jjmatchedPos == 0 && jjmatchedKind > 18) {
              jjmatchedKind = 18;
            }
            break;
          case 4:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_4();
            if (jjmatchedPos == 0 && jjmatchedKind > 39) {
              jjmatchedKind = 39;
            }
            break;
          case 5:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_5();
            if (jjmatchedPos == 0 && jjmatchedKind > 40) {
              jjmatchedKind = 40;
            }
            break;
          case 6:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_6();
            if (jjmatchedPos == 0 && jjmatchedKind > 29) {
              jjmatchedKind = 29;
            }
            break;
          case 7:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_7();
            if (jjmatchedPos == 0 && jjmatchedKind > 34) {
              jjmatchedKind = 34;
            }
            break;
          case 8:
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_8();
            if (jjmatchedPos == 0 && jjmatchedKind > 41) {
              jjmatchedKind = 41;
            }
            break;
        }
        if (jjmatchedKind != 0x7fffffff) {
          if (jjmatchedPos + 1 < curPos) {
            input_stream.backup(curPos - jjmatchedPos - 1);
          }
          if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
            matchedToken = jjFillToken();
            matchedToken.specialToken = specialToken;
            TokenLexicalActions(matchedToken);
            if (jjnewLexState[jjmatchedKind] != -1) {
              curLexState = jjnewLexState[jjmatchedKind];
            }
            return matchedToken;
          }
          else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
            if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
              matchedToken = jjFillToken();
              if (specialToken == null) {
                specialToken = matchedToken;
              }
              else {
                matchedToken.specialToken = specialToken;
                specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
            }
            else {
              SkipLexicalActions(null);
            }
            if (jjnewLexState[jjmatchedKind] != -1) {
              curLexState = jjnewLexState[jjmatchedKind];
            }
            continue EOFLoop;
          }
          MoreLexicalActions();
          if (jjnewLexState[jjmatchedKind] != -1) {
            curLexState = jjnewLexState[jjmatchedKind];
          }
          curPos = 0;
          jjmatchedKind = 0x7fffffff;
          try {
            curChar = input_stream.readChar();
            continue;
          }
          catch (java.io.IOException e1) {
          }
        }
        int error_line = input_stream.getEndLine();
        int error_column = input_stream.getEndColumn();
        String error_after = null;
        boolean EOFSeen = false;
        try {
          input_stream.readChar();
          input_stream.backup(1);
        }
        catch (java.io.IOException e1) {
          EOFSeen = true;
          error_after = curPos <= 1 ? "" : input_stream.GetImage();
          if (curChar == '\n' || curChar == '\r') {
            error_line++;
            error_column = 0;
          }
          else {
            error_column++;
          }
        }
        if (!EOFSeen) {
          input_stream.backup(1);
          error_after = curPos <= 1 ? "" : input_stream.GetImage();
        }
        throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
      }
    }
  }

  static void SkipLexicalActions(Token matchedToken) {
    switch (jjmatchedKind) {
      case 17:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        // extract the whole comment and create the instance here
        //TODO
//System.out.println("<C-SLTC1>: single-line-tagged-comment ended - tag: " +  current_tag + ", tagged object: " + tagged_object + ", image: " + image.toString() + " -> DEFAULT");
        current_comment = image.toString().substring(current_tag.length() + 4, image.length() - 2);
        try {
          Support.createTagDocumentationEntity(tagged_object, current_comment);
        }
        catch (jsdai.lang.SdaiException ex) {
          System.out.println("EXCEPTION while creating documentation entity: " + current_tag);
        }
        break;
      case 26:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        comment_nesting_depth -= 1;
        if (Support.parser_pass == 5) {
//System.out.println("<DOCUMENT *)> entering, state stack: " + state_stack);
//System.out.println("<DOCUMENT>: *) encountered, image: " + image.toString());
//System.out.println("<C-D0>: document comment ended - before POP - depth: " + comment_nesting_depth + " tag: " + current_tag + ", tagged_object: " + tagged_object + ", image: " + image.toString() + ", state: " + current_state.intValue());
          if (comment_nesting_depth > 0) {
            current_tag = (String) tag_stack.pop();
            tagged_object = (jsdai.lang.EEntity) object_stack.pop();
            current_image = (String) image_stack.pop();
            //current_state = (Integer)state_stack.pop();
            state_stack.pop();
            current_state = (Integer) state_stack.peek();
            index_stack.pop();
//System.out.println("<C-D2>: document comment ended - after POP - tag: " + current_tag + ", tagged_object: " + tagged_object + ", image: " + current_image + " -> " + current_state.intValue());
          }
          else {
//System.out.println("<C-DC>: Our special multi-line comment ended - NO POP  -> DEFAULT");
          }

          previous_image = image.toString();

//System.out.println("<DOCUMENT *)> exiting, state stack: " + state_stack + ", current state: " + current_state);
//System.out.println("<DOCUMENT>: *) image: " + image.toString());

        }
        else {
          if (comment_nesting_depth > 0) {
            current_state = (Integer) state_stack.pop();
          }
        }

        if (comment_nesting_depth == 0) {
          image.delete(0, image.length());
        }

        SwitchTo(comment_nesting_depth == 0 ? DEFAULT : current_state.intValue());
        break;
      default:
        break;
    }
  }

  static void MoreLexicalActions() {
    jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
    switch (jjmatchedKind) {
      case 9:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        //            image.delete(0,image.length());
//System.out.println("<DEFAULT>: tagged single-line comment encountered -> IN_SINGLE_LINE_COMMENT_TAG, pass: " + Support.parser_pass);
        if (Support.parser_pass == 5) {

//System.out.println("<DEFAULT>: tagged single-line comment encountered -> IN_SINGLE_LINE_COMMENT_TAG, image: " + image.toString());

        }

        SwitchTo(Support.parser_pass == 5 ? IN_SINGLE_LINE_COMMENT_TAG : IN_SINGLE_LINE_COMMENT);
        break;
      case 11:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth = 1;
//	            image.delete(0,image.length());
        if (Support.parser_pass == 5) {
//System.out.println("<DEFAULT>: (** encountered, image: " + image.toString());
          current_tag = "";
          previous_image = image.toString();
          //current_image = image.toString();
          current_image = "";
          current_state = new Integer(IN_DOCUMENT_COMMENT_5);
          tag_stack = new Stack();
          object_stack = new Stack();
          image_stack = new Stack();
          state_stack = new Stack();
          state_stack.push(new Integer(DEFAULT));
          index_stack = new Stack();
          tag_stack.push(current_tag);
          object_stack.push(null);
          image_stack.push(current_image);
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));
//System.out.println("<C-DEFAULT>: documment comment encountered, depth: " + comment_nesting_depth + " -> IN_DOCUMENT_COMMENT");
//System.out.println("<DEFAULT (**> exiting, state stack: " + state_stack + ", current state: " + current_state);
          SwitchTo(IN_DOCUMENT_COMMENT_5);
        }
        else {
          current_state = new Integer(IN_DOCUMENT_COMMENT);
          state_stack = new Stack();
          SwitchTo(IN_DOCUMENT_COMMENT);
        }
        break;
      case 12:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
//            image.delete(0,image.length());
        comment_nesting_depth = 1;
        if (Support.parser_pass == 5) {
//System.out.println("<DEFAULT>: (*\" encountered, image: " + image.toString());
          // this is the 1st time, so nothing to push, but perhaps need to initialize stuff here
          current_tag = "";
          previous_image = image.toString();
          //current_image = image.toString();
          current_image = "";
          current_state = new Integer(IN_MULTI_LINE_COMMENT_TAG);
          tag_stack = new Stack();
          tag_stack.push(current_tag);
          object_stack = new Stack();
          index_stack = new Stack();
          object_stack.push(null);
          image_stack = new Stack();
          //current_image = image.toString();
          image_stack.push(current_image);
          state_stack = new Stack();
          state_stack.push(new Integer(DEFAULT));
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));
//System.out.println("<C-DEFAULT>: tagged multi-line comment encountered, depth: " + comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT_TAG");
// System.out.println("<DEFAULT (*\"> exiting, state stack: " + state_stack + ", current state: " + current_state);
          SwitchTo(IN_MULTI_LINE_COMMENT_TAG);
        }
        else {
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          state_stack = new Stack();
          SwitchTo(IN_MULTI_LINE_COMMENT);
        }
        break;
      case 13:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
//	            image.delete(0,image.length());
        comment_nesting_depth = 1;
        if (Support.parser_pass == 5) {
//System.out.println("<DEFAULT>: (* encountered, image: " + image.toString());
          current_tag = "";
          previous_image = image.toString();
          //current_image = image.toString();
          current_image = "";
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          tag_stack = new Stack();
          object_stack = new Stack();
          image_stack = new Stack();
          state_stack = new Stack();
          state_stack.push(new Integer(DEFAULT));
          index_stack = new Stack();
          tag_stack.push(current_tag);
          object_stack.push(null);
          image_stack.push(current_image);
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));
//System.out.println("<C-DEFAULT>: multi-line comment encountered, depth: " + comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT");
// System.out.println("<DEFAULT (*> exiting, state stack: " + state_stack + ", current state: " + current_state);
        }
        else {
//System.out.println("<C-DEFAULT>: multi-line comment encountered, pass: " + Support.parser_pass + ", depth: " + comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT");
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          state_stack = new Stack();
        }
        break;
      case 15:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        // TAG complete

        current_tag = image.toString().substring(3, image.length() - 1);
//		System.out.println("<C-SLCT1>:single-line COMMENT TAG: " + current_tag);
        try {
//			tagged_object = Support.findEntity_definition(current_tag.toLowerCase(), (jsdai.SExtended_dictionary_schema.ESchema_definition)null);
          tagged_object = Support.resolveTag(current_tag.toLowerCase());
        }
        catch (jsdai.lang.SdaiException ex) {
          System.out.println("EXCEPTION while resolving the single-line-comment tag: " + current_tag);
        }
        if (tagged_object == null) {
//System.out.println("<C-SLCT>: single-line-comment COMMENT TAG ended: " + current_tag + ", tagged object: " + tagged_object + " -> IN_SINGLE_LINE_COMMENT,");
        }
        else {
//System.out.println("<C-SLCT2>: single-line-comment COMMENT TAG ended: " + current_tag + ", tagged object: " + tagged_object + " -> IN_SINGLE_LINE_TAGGED_COMMENT,");
        }
        SwitchTo(tagged_object == null ? IN_SINGLE_LINE_COMMENT : IN_SINGLE_LINE_TAGGED_COMMENT);
        break;
      case 20:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<DOCUMENT (**> entering, state stack: " + state_stack);
//System.out.println("<DOCUMENT>: (** encountered, image: " + image.toString());
          tag_stack.push(current_tag);
          object_stack.push(tagged_object);
          image_stack.push(current_image);
          current_state = new Integer(IN_DOCUMENT_COMMENT);
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));
//System.out.println("<C-DC>: in document comment document comment encountered, depth: " + comment_nesting_depth + " -> IN_DOCUMENT_COMMENT");
          previous_image = image.toString();
//System.out.println("<DOCUMENT (**> exiting, state stack: " + state_stack + ", current state: " + current_state);

        }
        else {
          current_state = new Integer(IN_DOCUMENT_COMMENT);
          state_stack.push(current_state);
        }
        break;
      case 21:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<DOCUMENT (*\"> entering, state stack: " + state_stack);
//System.out.println("<DOCUMENT>: (*\" encountered, image: " + image.toString());

          tag_stack.push(current_tag);
          object_stack.push(tagged_object);
          image_stack.push(current_image);
          current_state = new Integer(IN_MULTI_LINE_COMMENT_TAG);
//						  current_state = new Integer(IN_DOCUMENT_COMMENT);
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));
          SwitchTo(IN_MULTI_LINE_COMMENT_TAG);
//System.out.println("<C-DC>: in document comment tagged multi-line comment encountered, depth: " + comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT_TAG");
          previous_image = image.toString();

//System.out.println("<DOCUMENT (*\"> exiting, state stack: " + state_stack + ", current state: " + current_state);

        }
        else {
          //current_state = new Integer(IN_MULTI_LINE_COMMENT);
          current_state = new Integer(IN_DOCUMENT_COMMENT);
          state_stack.push(current_state);
          SwitchTo(IN_MULTI_LINE_COMMENT); // or IN_DOCUMENT_COMMENT?
        }
        break;
      case 22:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<DOCUMENT (*> entering, state stack: " + state_stack);
//System.out.println("<DOCUMENT>: (* encountered, image: " + image.toString());
          tag_stack.push("");
          object_stack.push(tagged_object);
          image_stack.push(image.toString());
          index_stack.push(new Integer(image.length()));
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          //current_state = new Integer(IN_DOCUMENT_COMMENT);
          state_stack.push(current_state);
//System.out.println("<C-DC>: in document comment multi-line comment encountered, depth: " +  comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT");
          previous_image = image.toString();

//System.out.println("<DOCUMENT (*> exiting, state stack: " + state_stack + ", current state: " + current_state);

        }
        else {
          //current_state = new Integer(IN_MULTI_LINE_COMMENT);
          current_state = new Integer(IN_DOCUMENT_COMMENT);
          state_stack.push(current_state);
        }
        break;
      case 23:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<DOCUMENT (**> entering, state stack: " + state_stack);
//System.out.println("<DOCUMENT>: (** encountered, image: " + image.toString());
          tag_stack.push(current_tag);
          object_stack.push(tagged_object);
          image_stack.push(current_image);
          current_state = new Integer(IN_DOCUMENT_COMMENT_5);
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));
//System.out.println("<C-DC>: in document comment document comment encountered, depth: " + comment_nesting_depth + " -> IN_DOCUMENT_COMMENT_5");
          previous_image = image.toString();
//System.out.println("<DOCUMENT (**> exiting, state stack: " + state_stack + ", current state: " + current_state);

        }
        else {
          current_state = new Integer(IN_DOCUMENT_COMMENT_5);
          state_stack.push(current_state);
        }
        break;
      case 24:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<DOCUMENT (*\"> entering, state stack: " + state_stack);
//System.out.println("<DOCUMENT>: (*\" encountered, image: " + image.toString());

          tag_stack.push(current_tag);
          object_stack.push(tagged_object);
          image_stack.push(current_image);
          current_state = new Integer(IN_MULTI_LINE_COMMENT_TAG);
//						  current_state = new Integer(IN_DOCUMENT_COMMENT_5);
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));
          SwitchTo(IN_MULTI_LINE_COMMENT_TAG);
//System.out.println("<C-DC>: in document comment tagged multi-line comment encountered, depth: " + comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT_TAG");
          previous_image = image.toString();

//System.out.println("<DOCUMENT (*\"> exiting, state stack: " + state_stack + ", current state: " + current_state);

        }
        else {
          //current_state = new Integer(IN_MULTI_LINE_COMMENT);
          current_state = new Integer(IN_DOCUMENT_COMMENT_5);
          state_stack.push(current_state);
          SwitchTo(IN_MULTI_LINE_COMMENT); // or IN_DOCUMENT_COMMENT_5?
        }
        break;
      case 25:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<DOCUMENT (*> entering, state stack: " + state_stack);
//System.out.println("<DOCUMENT>: (* encountered, image: " + image.toString());
          tag_stack.push("");
          object_stack.push(tagged_object);
          image_stack.push(image.toString());
          index_stack.push(new Integer(image.length()));
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          //current_state = new Integer(IN_DOCUMENT_COMMENT_5);
          state_stack.push(current_state);
//System.out.println("<C-DC>: in document comment multi-line comment encountered, depth: " +  comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT");
          previous_image = image.toString();

//System.out.println("<DOCUMENT (*> exiting, state stack: " + state_stack + ", current state: " + current_state);

        }
        else {
          //current_state = new Integer(IN_MULTI_LINE_COMMENT);
          current_state = new Integer(IN_DOCUMENT_COMMENT_5);
          state_stack.push(current_state);
        }
        break;
      case 27:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth -= 1;
        if (Support.parser_pass == 5) {
//System.out.println("<DOCUMENT *)> entering, state stack: " + state_stack);
//System.out.println("<DOCUMENT>: *) encountered, image: " + image.toString());
//System.out.println("<C-D0>: document comment ended - before POP - depth: " + comment_nesting_depth + " tag: " + current_tag + ", tagged_object: " + tagged_object + ", image: " + image.toString() + ", state: " + current_state.intValue());
          if (comment_nesting_depth > 0) {
            current_tag = (String) tag_stack.pop();
            tagged_object = (jsdai.lang.EEntity) object_stack.pop();
            current_image = (String) image_stack.pop();
            //current_state = (Integer)state_stack.pop();
            state_stack.pop();
            current_state = (Integer) state_stack.peek();
            index_stack.pop();
//System.out.println("<C-D2>: document comment ended - after POP - tag: " + current_tag + ", tagged_object: " + tagged_object + ", image: " + current_image + " -> " + current_state.intValue());
          }
          else {
//System.out.println("<C-DC>: Our special multi-line comment ended - NO POP  -> DEFAULT");
          }

          previous_image = image.toString();

//System.out.println("<DOCUMENT *)> exiting, state stack: " + state_stack + ", current state: " + current_state);
//System.out.println("<DOCUMENT>: *) image: " + image.toString());

        }
        else {
          if (comment_nesting_depth > 0) {
            current_state = (Integer) state_stack.pop();
          }
        }

        if (comment_nesting_depth == 0) {
          image.delete(0, image.length());
        }
        SwitchTo(comment_nesting_depth == 0 ? DEFAULT : current_state.intValue());
        break;
      case 28:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
// System.out.println("<TAG> entering, state stack: " + state_stack);
//System.out.println("<TAG>: \" encountered");
//System.out.println("<TAG>\timage: " + image.toString());
//System.out.println("<TAG>\tcurrent_image: " + current_image);
//System.out.println("<TAG>\tprevious_image: " + previous_image);
        //current_tag = image.toString().substring(3,image.length()-1);
        //current_tag = image.toString().substring(0,image.length()-1);
        current_tag = image.toString().substring(previous_image.length(), image.length() - 1);

//System.out.println("<TAG> - TAG: " + current_tag);
        try {
//System.out.println("CREATING - sd: " + Support.sd + ", model: " + Support.model + ", pass: " + Support.parser_pass);
//			tagged_object = Support.findEntity_definition(current_tag.toLowerCase(), (jsdai.SExtended_dictionary_schema.ESchema_definition)null);
          tagged_object = Support.resolveTag(current_tag.toLowerCase());
        }
        catch (jsdai.lang.SdaiException ex) {
          tagged_object = null;
          ex.printStackTrace();
          System.out.println("EXCEPTION while resolving the tag: " + current_tag);
        }
//System.out.println("<TAG> - tagged object: " + tagged_object);
//if (tagged_object == null)
//System.out.println("<C-MLCT>: multi-line COMMENT TAG ended: " + current_tag + ", tagged object: " + tagged_object + " -> IN_MULTI_LINE_COMMENT");
//else
//System.out.println("<C-MLCT>: multi-line COMMENT TAG ended: " + current_tag + ", tagged object: " + tagged_object + " -> IN_MULTI_LINE_TAGGED_COMMENT");

        previous_image = image.toString();
        //current_image = image.toString();
        state_stack.pop();
        if (tagged_object == null) {
//			current_state = IN_MULTI_LINE_COMMENT;
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
        }
        else {
//			current_state = IN_MULTI_LINE_TAGGED_COMMENT;
          current_state = new Integer(IN_MULTI_LINE_TAGGED_COMMENT);
        }
        state_stack.push(current_state);

//    System.out.println("<TAG> exiting, state stack: " + state_stack);

        SwitchTo(tagged_object == null ? IN_MULTI_LINE_COMMENT : IN_MULTI_LINE_TAGGED_COMMENT);
        break;
      case 30:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<TAGGED (**> entering, state stack: " + state_stack);

//System.out.println("<TAGGED>: (** encountered, image: " + image.toString());
          tag_stack.push(current_tag);
          object_stack.push(tagged_object);
          image_stack.push(current_image);
          current_state = new Integer(IN_DOCUMENT_COMMENT_5);
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));

          //previous_image = current_image();
          previous_image = image.toString();
          //current_image = image.toString();
//System.out.println("<TAGGED (**> exiting, state stack: " + state_stack + ", current state: " + current_state);

//System.out.println("<C-MLTC>: in multi-line-tagged-comment a document coment encountered, depth: " + comment_nesting_depth + " -> IN_DOCUMENT_COMMENT_5");
        }
        else {
          // can never occur
          current_state = new Integer(IN_DOCUMENT_COMMENT_5);
          state_stack.push(current_state);
        }
        break;
      case 31:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<TAGGED (*\"> entering, state stack: " + state_stack);
//System.out.println("<TAGGED>: (*\" encountered, image: " + image.toString());

          tag_stack.push(current_tag);
          object_stack.push(tagged_object);
          //image_stack.push(current_image);
          image_stack.push(image.toString());
          current_state = new Integer(IN_MULTI_LINE_COMMENT_TAG);
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));

          // depending on implemnetation, may have to go up before push()
          //previous_image = current_image();
          //current_image = image.toString();
          previous_image = image.toString();

//System.out.println("<TAGGED (*\"> exiting, state stack: " + state_stack + ", current state: " + current_state);

//System.out.println("<C-MLTC>: in multi-line-tagged-comment a multi-line-coment-TAG encountered, depth: " + comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT_TAG");
          SwitchTo(IN_MULTI_LINE_COMMENT_TAG);
        }
        else {
          // can never occur
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          state_stack.push(current_state);
          SwitchTo(IN_MULTI_LINE_COMMENT);
        }
        break;
      case 32:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<TAGGED (*> entering, state stack: " + state_stack);
//System.out.println("<TAGGED>: (* encountered, image: " + image.toString());
          tag_stack.push(current_tag);
          object_stack.push(tagged_object);
          image_stack.push(current_image);
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));

          // depending on implemnetation, may have to go up before push()
          //previous_image = current_image();
          //current_image = image.toString();
          previous_image = image.toString();

//System.out.println("<TAGGED (*> exiting, state stack: " + state_stack + ", current state: " + current_state);

//System.out.println("<C-MLTC>: in multi-line-tagged-comment a multi-line-coment encountered, depth: " + comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT");
        }
        else {
          // can never occur
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          state_stack.push(current_state);
        }
        break;
      case 33:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
//System.out.println("<TAGGED>: *) encountered, image: " + image.toString());

        comment_nesting_depth -= 1;
        // create document instance with current TAG  and image/message,  pop previous TAG, pop previous imagem, add current comment to the previous image, pop state
//		current_comment = image.toString().substring(current_tag.length()+4,image.length()-2);
//		current_comment = image.toString();
        if (comment_nesting_depth >= 0) {

//			System.out.println("<TAGGED *)> entering, state stack: " + state_stack);
          // add other possible states, not sure if it will be enough though, for multi-line-comment, for example, as there is no state for it indicating (* or *)
          open_index = ((Integer) index_stack.pop()).intValue();
//	System.out.println("<TAGGED *)> index: " + open_index + ", image: " + image.toString());
          current_comment = image.toString().substring(open_index + current_tag.length() + 1, image.length() - 2);
          //System.out.println("<TAGGED *)> tag: " + current_tag + ", comment: " + current_comment);
//	System.out.println("<TAGGED *)> tagged object: " + tagged_object + ", comment: " + current_comment);
          try {
            Support.createTagDocumentationEntity(tagged_object, current_comment);
          }
          catch (jsdai.lang.SdaiException ex) {
            System.out.println("EXCEPTION while creating documentation entity: " + current_tag);
          }
          current_tag = (String) tag_stack.pop();
          tagged_object = (jsdai.lang.EEntity) object_stack.pop();
          current_image = (String) image_stack.pop() + current_tag + image.toString();
//			current_state = (Integer)state_stack.pop();
          state_stack.pop();
          current_state = (Integer) state_stack.peek();

//System.out.println("<C-MLTC0-1>: constructed  immage: " + current_image);
          // current_state = new Integer(IN_MULTI_LINE_TAGGED_COMMENT);  --------------------  NOT NEEDED HERE !!!?

          previous_image = image.toString();
        }
        else {
          // it should never happen
          System.out.println("INTERNAL ERROR in token manager, IN_MULTI_LINE_TAGGED_COMMENT *)");
        }

//System.out.println("<C-MLTC1>: Tagged multi-line comment ended - depth: " + comment_nesting_depth + ", tag: " + current_tag + ", tagged_object: " + tagged_object + ", image: " + image.toString() + ", comment: " + current_comment);

//		if (comment_nesting_depth >= 0) {
//System.out.println("<C-MLTC0>: Tagged multi-line comment ended - before POP");
//			current_tag = (String)tag_stack.pop();
//			tagged_object = (jsdai.lang.EEntity)object_stack.pop();
//			current_image = (String)image_stack.pop();
//System.out.println("<C-MLTC2>: Tagged multi-line comment ended - POPPED - tag: " + current_tag + ", tagged_object: " + tagged_object + ", image: " + current_image + ", comment: " + current_comment + " -> " +current_state.intValue());
//		} else {
//System.out.println("<C-MLTC3>: ENDED - NO POP - depth: " + comment_nesting_depth + " -> DEFAULT");
//		}

//	  System.out.println("<TAGGED *)> exiting, state stack: " + state_stack + ", current state: " + current_state);

        if (comment_nesting_depth == 0) {
          image.delete(0, image.length());
        }
        SwitchTo(comment_nesting_depth == 0 ? DEFAULT : current_state.intValue());
        break;
      case 35:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<MULTI (**> entering, state stack: " + state_stack);
//System.out.println("<MULTI>: (** encountered, image: " + image.toString());
          tag_stack.push(current_tag);
          object_stack.push(tagged_object);
          image_stack.push(current_image);
          current_state = new Integer(IN_DOCUMENT_COMMENT_5);
          state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));

//System.out.println("<C-MLC>: in multi-line comment, document comment encountered, depth: " + comment_nesting_depth + " -> IN_DOCUMENT_COMMENT_5");
          previous_image = image.toString();
//System.out.println("<MULTI (**> exiting, state stack: " + state_stack + ", current state: " + current_state);
          SwitchTo(IN_DOCUMENT_COMMENT_5);
        }
        else {
//System.out.println("<C-MLC>: in multi-line comment, pass: " + Support.parser_pass + ", document comment encountered, depth: " + comment_nesting_depth + " -> IN_DOCUMENT_COMMENT");
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          state_stack.push(current_state);
          SwitchTo(IN_DOCUMENT_COMMENT);
        }
        break;
      case 36:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<MULTI (*\"> entering, state stack: " + state_stack);
//System.out.println("<MULTI>: (*\" encountered, image: " + image.toString());

          tag_stack.push(current_tag);
          object_stack.push(tagged_object);
          image_stack.push(current_image);
          current_state = new Integer(IN_MULTI_LINE_COMMENT_TAG);
          state_stack.push(current_state);

//						  current_state = new Integer(IN_MULTI_LINE_COMMENT);
//						  state_stack.push(current_state);
          index_stack.push(new Integer(image.length()));
//System.out.println("<C-MLC>: in multi-line comment, multi-line comment TAG encountered, depth: " + comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT_TAG");
          previous_image = image.toString();

//System.out.println("<MULTI (*\"> exiting, state stack: " + state_stack + ", current state: " + current_state);

          SwitchTo(IN_MULTI_LINE_COMMENT_TAG);
        }
        else {
//System.out.println("<C-MLC>: in multi-line comment, pass: " + Support.parser_pass + ", multi-line comment TAG encountered, depth: " + comment_nesting_depth + " -> IN_MULTI_LINE_COMMENT_TAG");
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          state_stack.push(current_state);
          SwitchTo(IN_MULTI_LINE_COMMENT); // not really needed
        }
        break;
      case 37:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        comment_nesting_depth += 1;
        if (Support.parser_pass == 5) {
//System.out.println("<MULTI (*> entering, state stack: " + state_stack);
//System.out.println("<MULTI>: (* encountered, image: " + image.toString());
          tag_stack.push("");
          object_stack.push(tagged_object);
          image_stack.push(image.toString());
          index_stack.push(new Integer(image.length()));
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          state_stack.push(new Integer(IN_MULTI_LINE_COMMENT));

          previous_image = image.toString();

//System.out.println("<MULTI (*> exiting, state stack: " + state_stack + ", current state: " + current_state);

//System.out.println("<C-MLC>: in multi-line comment, a multi-line comment encountered, depth: " + comment_nesting_depth + " -> remains IN_MULTI_LINE_COMMENT");
        }
        else {
//System.out.println("<C-MLC>: in multi-line comment, pass: " + Support.parser_pass + ", a multi-line comment encountered, depth: " + comment_nesting_depth + " -> remains IN_MULTI_LINE_COMMENT");
          current_state = new Integer(IN_MULTI_LINE_COMMENT);
          state_stack.push(current_state);
        }
        break;
      case 38:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen));
        jjimageLen = 0;
        // here we don't know if there is an outer tagged comment, therefore  we cannot just to stay in IN_MULTI_LINE_COMMENT blindly
        // therefore it seems we need to use stack even for non-tagged multi-line comments (in pass 5)
        comment_nesting_depth -= 1;
        if (Support.parser_pass == 5) {
//System.out.println("<MULTI *)> entering, state stack: " + state_stack);
//System.out.println("<MULTI>: *) encountered, image: " + image.toString());
//System.out.println("<C-MLC1>: multi-line comment ended - tag(not used): " + current_tag + ", tagged_object(not used): " + tagged_object + ", image: " + image.toString());
          if (comment_nesting_depth == 0) {
//System.out.println("<C-MLC0>: multi-line comment ended - NO POP - current_tag: " + current_tag + ", tagged_object: " + tagged_object + ", image: " + image.toString() + ", state: " + current_state.intValue() );
            if (comment_nesting_depth == 0) {
              image.delete(0, image.length());
            }
            SwitchTo(DEFAULT);
          }
          else {
//System.out.println("<C-MLC0>: multi-line comment ended - before POP - depth: " + comment_nesting_depth + ", current_tag: " + current_tag + ", tagged_object: " + tagged_object + ", image: " + image.toString() + ", state: " + current_state.intValue() );
//				current_state = (Integer)state_stack.pop();
            state_stack.pop();
            current_state = (Integer) state_stack.peek();
            current_tag = (String) tag_stack.pop();
            tagged_object = (jsdai.lang.EEntity) object_stack.pop();
            current_image = (String) image_stack.pop();
            index_stack.pop();
//System.out.println("<C-MLC2>: multi-line comment ended - popped: tag: " + current_tag + ", tagged_object: " + tagged_object + ", image: " + current_image + " -> " + current_state.intValue());
            SwitchTo(current_state.intValue());
          }
          previous_image = image.toString();

//System.out.println("<MULTI *)> exiting, state stack: " + state_stack + ", current state: " + current_state);
        }
        else {
//System.out.println("<C-MLC0>: multi-line comment ended, pass: " + Support.parser_pass + " - tag(not used): " + current_tag + ", tagged_object(not used): " + tagged_object + ", image: " + image.toString());
//System.out.println("comment_nesting_depth: " + comment_nesting_depth);
          if (comment_nesting_depth > 0) {
            current_state = (Integer) state_stack.pop();
          }
          if (comment_nesting_depth == 0) {
            image.delete(0, image.length());
//System.out.println("image: " + image.toString());
          }
          SwitchTo(comment_nesting_depth == 0 ? DEFAULT : IN_MULTI_LINE_COMMENT);
        }
        break;
      default:
        break;
    }
  }

  static void TokenLexicalActions(Token matchedToken) {
    switch (jjmatchedKind) {
      case 8:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (Support.flag_no_special_reference_from) {
          matchedToken.kind = USE;
        }
        else {
          matchedToken.kind = REFERENCE;
        }
        break;
      case 84:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (Support.no_express_amendment) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 96:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 97:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 100:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 102:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 108:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 109:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 114:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 120:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 121:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 122:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (Support.no_express_amendment) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 124:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 130:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (Support.no_express_amendment) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 131:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 138:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (Support.no_express_amendment) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 142:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 145:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 159:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 170:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 172:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 179:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (Support.no_express_amendment) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 192:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 193:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (Support.no_express_amendment) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 200:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 203:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (Support.no_express_amendment) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 216:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (!Support.express_x) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 217:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        if (Support.no_express_amendment) {
          matchedToken.kind = SIMPLE_ID;
        }
        break;
      case 221:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        matchedToken.image = image.toString();
        break;
      case 222:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        matchedToken.image = image.toString();
        break;
      case 223:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        matchedToken.image = image.toString();
        break;
      case 224:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        matchedToken.image = image.toString();
        break;
      case 225:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        matchedToken.image = image.toString();
        break;
      case 226:
        if (image == null) {
          image = new StringBuffer();
        }
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        matchedToken.image = image.toString();
        break;
      default:
        break;
    }
  }
}
