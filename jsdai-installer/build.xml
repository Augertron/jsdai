<?xml version="1.0"?>
<!--
/*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 */
-->

<project name="jsdai-installer" default="build" basedir=".">

    <!-- properties provided from the master and local properties files -->
    <property environment="env"/>
    <property file="local.properties"/>
    <property file="${user.home}/.ant-global.properties"/>

    <!-- Directory for CVS checkout -->
    <property name="cvs.dir" location="." />
    <property name="standalone.cvs.modules" value="" />
    <property name="cvs.rsh" value="ssh" />

    <target name="-base.environment">
        <!-- Directory tree definition -->
        <!-- Directories in which the build is done -->
        <property name="build.dir" location="build"/>
        <property name="main.dir" location="${build.dir}/main"/>
        <property name="build.doc.dir" location="${build.dir}/doc"/>
        <property name="build.doc.jsdai_doc.dir" location="${build.doc.dir}/jsdai_doc"/>

        <!-- Directory in which the created jars are placed -->
        <property name="out.dir" location="out"/>

        <!-- Directory in which instaler resource archives are placed -->
        <property name="resources.out.dir" location="${java.io.tmpdir}/jsdai-installer"/>

        <!-- Directories in which source files are placed -->
        <property name="src.dir" location="src"/>

        <!-- Directory in which instaler resource sources are placed -->
        <property name="resource.src.dir" location="resources"/>

        <!-- Some directories used by installer -->
        <property name="files.dir" location="files"/>
        <property name="themes.dir" location="files/themes"/>
        <property name="images.dir" location="images"/>

        <!-- Directory in which source files are placed -->
        <property name="ia.dir" location="${user.home}/InstallAnywhere"/>

        <property name="top.dir" location=".."/>
        <property name="jsdai.dir" location="${top.dir}/jsdai-core"/>
        <property name="jsdai.lib.dir" location="${jsdai.dir}/lib"/>
        <property name="jsdai.out.dir" location="${jsdai.dir}/out"/>
        <property name="xim.dir" location="${top.dir}/xim-library"/>
        <property name="xim.out.dir" location="${xim.dir}/out"/>

        <!-- Common Java VM parameters -->
        <property name="javac.optimize.flag" value="yes"/>
        <property name="javac.debug.flag" value="yes"/>
        <property name="javac.code.version" value="1.4"/>
    </target>

    <target name="-environment" depends="-base.environment">
        <!-- Try to load previous build time properties and save them for the next build -->
        <mkdir dir="${build.dir}"/>
        <property file="${build.dir}/tstamp.properties"/>
        <tstamp>
            <format property="build.time" pattern="yyyy-MM-dd'T'HH:mm:ss"/>
            <format property="touch.time" pattern="MM/dd/yyyy hh:mm aa"/>
            <format property="buildId" pattern="yy-DDD-HHmm"/>
            <format property="env.BUILD_ID" pattern="yyyyMMdd-hhmm"/>
        </tstamp>
        <echo file="${build.dir}/tstamp.properties"
>DSTAMP=${DSTAMP}
TSTAMP=${TSTAMP}
TODAY=${TODAY}
env.BUILD_ID=${env.BUILD_ID}
build.time=${build.time}
touch.time=${touch.time}
buildId=${buildId}
</echo>
    </target>

    <target name="clean" depends="-base.environment" description="Clean all the data from previous builds">
        <delete dir="${build.dir}"/>
        <delete dir="${out.dir}"/>
        <delete dir="${resources.out.dir}"/>
    </target>

    <target name="-get.cvs.status" unless="standalone.version.available">
        <loadfile property="cvs.root" srcfile="CVS/Root">
            <filterchain>
                <striplinebreaks />
            </filterchain>
        </loadfile>
        <cvs quiet="true" command="-Q status ${standalone.cvs.modules}"
             output="${main.dir}/standalone.version" dest="${cvs.dir}" cvsrsh="${cvs.rsh}" cvsroot="${cvs.root}"/>
    </target>

    <target name="prepare.dirs" depends="-environment"
            description="Set properties and other initial environment">
        <mkdir dir="${out.dir}"/>
        <mkdir dir="${resources.out.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${main.dir}"/>
        <condition property="standalone.version.available">
            <or>
                <available file="${main.dir}/standalone.version"/>
                <not>
                    <available file="CVS/Root"/>
                </not>
            </or>
        </condition>
        <antcall target="-get.cvs.status" inheritall="true"/>
        <copy todir="${main.dir}">
            <fileset dir="${src.dir}">
                <include name="**/*.dll"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.ia" depends="prepare.dirs">
        <javac destdir="${main.dir}" optimize="${javac.optimize.flag}" 
               debug="${javac.debug.flag}" srcdir="${src.dir}"
               source="${javac.code.version}" target="${javac.code.version}">
            <classpath >
                <fileset dir="${ia.dir}">
                    <include name="IAClasses.zip"/>
                </fileset>
            </classpath>
            <include name="com/lksoft/ia/**/*.java"/>
        </javac>
    </target>

    <target name="jar.ia" depends="compile.ia"
            description="Creates jsdai_ia.jar">
        <!--
        <delete file="${build.dir}/jsdai_ia.jar"/>
-->
        <jar jarfile="${build.dir}/jsdai_ia.jar" update="true">
            <metainf dir="${main.dir}">
                <include name="standalone.version"/>
            </metainf>
            <manifest>
                <attribute name="Specification-Title" value="JSDAI InstallAnywhere Custom"/>
                <attribute name="Specification-Version" 
                           value="${runtime.version.major}.${runtime.version.middle}.${runtime.version.minor}"/>
                <attribute name="Specification-Vendor" value="${jsdai.vendor}"/>
                <attribute name="Implementation-Title" value="${runtime.implementation}"/>
                <attribute name="Implementation-Version" value="${env.BUILD_ID}"/>
                <attribute name="Implementation-Vendor" value="${jsdai.vendor}"/>
            </manifest>
            <fileset dir="${main.dir}"/>
        </jar>
    </target>

    <target name="extract.archives.choose" depends="prepare.dirs">
        <condition property="extract.archives.use.ant.unzip">
            <not>
                <available file="unzip" filepath="${env.PATH}"/>
            </not>
        </condition>
    </target>

    <target name="extract.archives.unzip" depends="extract.archives.choose" if="extract.archives.use.ant.unzip">
        <unzip src="${xim.out.dir}/jsdai_xim_full.jar.src.zip" dest="${build.dir}">
            <patternset>
                <include name="runtimespecific/REPOSITORIES/ExpressCompilerRepo.sdai"/>
            </patternset>
            <flattenmapper/>
        </unzip>
        <unzip src="${jsdai.out.dir}/jsdai_doc.zip" dest="${build.doc.dir}"/>
        <unzip src="${xim.out.dir}/jsdai_xim_full_api_ref.zip" dest="${build.doc.dir}/jsdai_doc/api_ref" overwrite="true"/>
    </target>

    <target name="extract.archives.exec" depends="extract.archives.choose" unless="extract.archives.use.ant.unzip">
        <exec executable="unzip" searchpath="true">
            <arg value="-q"/>
            <arg value="-o"/>
            <arg value="-j"/>
            <arg file="${xim.out.dir}/jsdai_xim_full.jar.src.zip"/>
            <arg value="runtimespecific/REPOSITORIES/ExpressCompilerRepo.sdai"/>
            <arg value="-d"/>
            <arg file="${build.dir}"/>
        </exec>
        <exec executable="unzip" searchpath="true">
            <arg value="-q"/>
            <arg value="-o"/>
            <arg file="${jsdai.out.dir}/jsdai_doc.zip"/>
            <arg value="-d"/>
            <arg file="${build.doc.dir}"/>
        </exec>
        <exec executable="unzip" searchpath="true">
            <arg value="-q"/>
            <arg value="-o"/>
            <arg file="${xim.out.dir}/jsdai_xim_full_api_ref.zip"/>
            <arg value="-d"/>
            <arg file="${build.doc.dir}/jsdai_doc/api_ref"/>
        </exec>
    </target>

    <target name="extract.archives" depends="extract.archives.unzip, extract.archives.exec"/>

    <target name="zip.resources" depends="prepare.dirs"
            description="Creates jsdai_ia_resources.zip">
        <zip destfile="${resources.out.dir}/jsdai_ia_resources.zip">
          <fileset dir="${resource.src.dir}"/>  
        </zip>
    </target>

    <target name="-create.installers">
        <copy file="jsdai.iap_xml" tofile="${build.dir}/jsdai.iap_xml" overwrite="true">
            <filterchain>
                <tokenfilter>
                    <replacestring from="@JSDAI.LIB.DIR@" to="${jsdai.lib.dir}${file.separator}"/>
                    <replacestring from="@JSDAI.OUT.DIR@" to="${jsdai.out.dir}${file.separator}"/>
                    <replacestring from="@XIM.OUT.DIR@" to="${xim.out.dir}${file.separator}"/>
                    <replacestring from="@BUILD.DOC.JSDAI_DOC.DIR@" to="${build.doc.jsdai_doc.dir}"/>
                    <replacestring from="@BUILD.DIR@" to="${build.dir}${file.separator}"/>
                    <replacestring from="@THEMES.DIR@" to="${themes.dir}"/>
                    <replacestring from="@FILES.DIR@" to="${files.dir}${file.separator}"/>
                    <replacestring from="@IMAGES.DIR@" to="${images.dir}${file.separator}"/>
                    <replacestring from="@RESOURCES.OUT.DIR@" to="${resources.out.dir}${file.separator}"/>
                </tokenfilter>
            </filterchain>
        </copy>
        <exec executable="${ia.dir}/build">
            <arg value="-b"/>
            <arg file="${build.dir}/jsdai.iap_xml"/>
        </exec>
        <move todir="${out.dir}">
            <fileset dir="${build.dir}/jsdai_Build_Output/Web_Installers/InstData">
                <include name="**/JSDAI_*"/>
            </fileset>
            <flattenmapper/>
        </move>
    </target>

    <target name="unparse.installer" depends="prepare.dirs">
        <mkdir dir="${build.dir}/unparse"/>
        <copy file="${build.dir}/jsdai.iap_xml" tofile="${build.dir}/unparse/jsdai.iap_xml">
            <filterchain>
                <tokenfilter>
                    <replacestring from="${jsdai.lib.dir}${file.separator}" to="@JSDAI.LIB.DIR@"/>
                    <replacestring from="${jsdai.out.dir}${file.separator}" to="@JSDAI.OUT.DIR@"/>
                    <replacestring from="${xim.out.dir}${file.separator}" to="@XIM.OUT.DIR@"/>
                    <replacestring from="${build.doc.jsdai_doc.dir}" to="@BUILD.DOC.JSDAI_DOC.DIR@"/>
                    <replacestring from="${build.dir}${file.separator}" to="@BUILD.DIR@"/>
                    <replacestring from="${themes.dir}" to="@THEMES.DIR@"/>
                    <replacestring from="${files.dir}${file.separator}" to="@FILES.DIR@"/>
                    <replacestring from="${images.dir}${file.separator}" to="@IMAGES.DIR@"/>
                    <replacestring from="${resources.out.dir}${file.separator}" to="@RESOURCES.OUT.DIR@"/>
                </tokenfilter>
            </filterchain>
        </copy>
    </target>

    <target name="pack.zips" depends="prepare.dirs">
    	<property file="${jsdai.dir}/properties"/>
    	<property file="${xim.dir}/properties"/>
    	<property name="jsdai.version" 
    		value="${runtime.version.major}_${runtime.version.middle}_${runtime.version.minor}"/>
    	<property name="xim.library.version" 
    		value="${stepmod.version.major}_${stepmod.version.middle}_${stepmod.version.minor}"/>
    	<zip destfile="${out.dir}/jsdai-core_v${jsdai.version}.zip">
    		<fileset dir="${top.dir}">
    			<include name="jsdai-core/lib/**"/>
    			<include name="jsdai-core/out/**"/>
	    		<exclude name="**/CVS/**"/>
    		</fileset>
    	</zip>
    	<zip destfile="${out.dir}/jsdai-core-src_v${jsdai.version}.zip">
    		<fileset dir="${top.dir}">
    			<include name="jsdai-core/**"/>
    			<exclude name="jsdai-core/build/**"/>
    			<exclude name="jsdai-core/out/**"/>
	    		<exclude name="**/CVS/**"/>
    		</fileset>
    	</zip>
    	<zip destfile="${out.dir}/xim-library_v${xim.library.version}_part1.zip">
    		<fileset dir="${top.dir}">
    			<include name="xim-library/out/**"/>
    			<exclude name="xim-library/out/jsdai_xim_full_api_ref.zip"/>
	    		<exclude name="**/CVS/**"/>
    		</fileset>
    	</zip>
    	<zip destfile="${out.dir}/xim-library_v${xim.library.version}_part2.zip">
    		<fileset dir="${top.dir}">
    			<include name="xim-library/out/jsdai_xim_full_api_ref.zip"/>
	    		<exclude name="**/CVS/**"/>
    		</fileset>
    	</zip>
    	<zip destfile="${out.dir}/xim-library-src_v${xim.library.version}.zip">
    		<fileset dir="${top.dir}">
    			<include name="xim-library/**"/>
    			<exclude name="xim-library/build/**"/>
    			<exclude name="xim-library/out/**"/>
	    		<exclude name="**/CVS/**"/>
    		</fileset>
    	</zip>
    	<zip destfile="${out.dir}/jsdai-installer-src_v${jsdai.version}.zip">
    		<fileset dir="${top.dir}">
    			<include name="jsdai-installer/**"/>
    			<exclude name="jsdai-installer/build/**"/>
    			<exclude name="jsdai-installer/out/**"/>
	    		<exclude name="**/CVS/**"/>
    		</fileset>
    	</zip>
    	<zip destfile="${out.dir}/jsdai-eclipse-src_v${jsdai.version}.zip">
    		<fileset dir="${top.dir}">
    			<include name="jsdai-eclipse/**"/>
	    		<exclude name="**/CVS/**"/>
    		</fileset>
    	</zip>
    </target>

    <target name="build.all" depends="clean, build"
            description="Makes clean build (equivalent to clean+build)"/>

    <target name="build" depends="jar.ia, zip.resources, extract.archives, -create.installers"
            description="Generates, compiles and builds"/>
</project>
