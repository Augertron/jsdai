(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*
   Derived from N - ISO/CD-TS - 10303-1646 footprint_definition - EXPRESS ARM
   by LKSoftWare GmbH for implementation purpose within IDA-STEP(TM)
*)

SCHEMA Footprint_definition_xim;

    USE FROM Layered_interconnect_complex_template_xim; -- ISO/TS 10303-1716
	USE FROM Package_xim;	-- ISO/TS 10303-1707
	USE FROM Footprint_definition_mim;	-- ISO/TS 10303-1646	
	
REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set);

  SUBTYPE_CONSTRAINT structured_template_planar_shape_model_subtypes FOR Structured_template_planar_shape_model;   
 	(ONEOF (Breakout_footprint_definition_shape_model, Footprint_definition_shape_model));
  END_SUBTYPE_CONSTRAINT;  

  SUBTYPE_CONSTRAINT multi_stratum_structured_template_subtypes FOR Multi_stratum_structured_template_armx;   
 	(ONEOF (Padstack_definition_armx, Generic_footprint_definition_armx, Multi_stratum_special_symbol_template_armx));
  END_SUBTYPE_CONSTRAINT;  

  ENTITY Breakout_footprint_definition_armx
    SUBTYPE OF (Generic_footprint_definition_armx, breakout_footprint_definition);
      reference_footprint : Footprint_definition_armx;
    INVERSE
        breakout_traces : SET[1:?] OF stratum_feature_template_location_in_breakout_footprint_definition FOR assembly;
    WHERE
      WR1: SELF\Multi_stratum_structured_template_armx.location = reference_footprint\Multi_stratum_structured_template_armx.location;
  --IP1: The domain of the geometry of the Breakout_footprint_definition shall be the same domain as that of
  -- the reference_footprint.
  --IP2: Each member of breakout_traces shall have a domain that overlaps with a Land in the reference_footprint;
  --IP3: Each member of breakout_traces shall have a domain that overlaps with a Land in the padstack inherited from
  -- Generic_footprint_definition
  END_ENTITY;

  ENTITY Breakout_footprint_definition_shape_model
    SUBTYPE OF (Structured_template_planar_shape_model);
      SELF\Structured_template_planar_shape_model.shape_characterized_definition : SET[1:1] OF Breakout_footprint_definition_armx;
      reference_shape : Footprint_definition_shape_model;
    WHERE
      WR1 : reference_shape.shape_characterized_definition[1] :=: shape_characterized_definition[1].reference_footprint;
  END_ENTITY;

  ENTITY Generic_footprint_definition_armx
    ABSTRACT SUPERTYPE OF (ONEOF (Footprint_definition_armx, Breakout_footprint_definition_armx))
     SUBTYPE OF (generic_footprint_definition, Multi_stratum_structured_template_armx);
    DERIVE
      padstack_based_location : template_arrangement := get_template_arrangement(padstacks);
      padstacks : SET[1:?] OF Template_location_in_structured_template := bag_to_set(QUERY(tlict <* SELF\Structured_template_armx.templates |
         ('LAYERED_INTERCONNECT_COMPLEX_TEMPLATE_XIM.PADSTACK_DEFINITION_ARMX' IN TYPEOF(tlict.template))));
      single_stratum_components : SET[0:?] OF Single_stratum_template_armx := bag_to_set(QUERY(tlict <* SELF\Structured_template_armx.templates |
         ('LAYERED_INTERCONNECT_SIMPLE_TEMPLATE_XIM.SINGLE_STRATUM_TEMPLATE_ARMX' IN TYPEOF(tlict.template))));   
    WHERE
      WR1 : SIZEOF(QUERY(ps <* templates | (ps.template\Multi_stratum_structured_template_armx.location <> SELF\Multi_stratum_structured_template_armx.location)
              AND (ps.template\Multi_stratum_structured_template_armx.location <> template_arrangement.symmetrical))) = 0;
      WR2 : ((SELF\Multi_stratum_structured_template_armx.location = template_arrangement.top) AND (SELF\Product_view_definition.initial_context\product_definition_context.description = 'top')) OR 
            (NOT (SELF\Multi_stratum_structured_template_armx.location = template_arrangement.top) AND NOT (SELF\Product_view_definition.initial_context\product_definition_context.description = 'top'));
      WR3 : ((SELF\Multi_stratum_structured_template_armx.location = template_arrangement.bottom) AND (SELF\Product_view_definition.initial_context\product_definition_context.description = 'bottom')) OR 
            (NOT (SELF\Multi_stratum_structured_template_armx.location = template_arrangement.bottom) AND NOT (SELF\Product_view_definition.initial_context\product_definition_context.description = 'bottom'));
      WR4 : ((SELF\Multi_stratum_structured_template_armx.location = template_arrangement.symmetrical) AND (SELF\Product_view_definition.initial_context\product_definition_context.description = 'symmetrical')) OR 
            (NOT (SELF\Multi_stratum_structured_template_armx.location = template_arrangement.symmetrical) AND NOT (SELF\Product_view_definition.initial_context\product_definition_context.description = 'symmetrical'));
      WR5 : ((SELF\Multi_stratum_structured_template_armx.location = template_arrangement.swappable) AND (SELF\Product_view_definition.initial_context\product_definition_context.description = 'swappable')) OR 
            (NOT (SELF\Multi_stratum_structured_template_armx.location = template_arrangement.swappable) AND NOT (SELF\Product_view_definition.initial_context\product_definition_context.description = 'swappable'));
      WR6 : NOT (SIZEOF(single_stratum_components) = 0) OR (SELF\Multi_stratum_structured_template_armx.location = padstack_based_location);      
  END_ENTITY;

  ENTITY Footprint_definition_armx
    SUBTYPE OF (Generic_footprint_definition_armx, footprint_definition);
      reference_package : OPTIONAL Part_usage_view;
    WHERE
      WR1 : SIZEOF (QUERY(shape <* SELF\Structured_template_armx.shapes |
               NOT ('LAYERED_INTERCONNECT_COMPLEX_TEMPLATE_XIM.FOOTPRINT_DEFINITION_SHAPE_MODEL' IN TYPEOF(shape))
              )) = 0;
      WR2 : SIZEOF (QUERY(tlist <* SELF\Structured_template_armx.templates |
               ('FOOTPRINT_DEFINITION_XIM.FOOTPRINT_DEFINITION_ARMX' IN TYPEOF(tlist.template))
              )) = 0;
  END_ENTITY;

 ENTITY Footprint_definition_shape_model
    SUBTYPE OF (Structured_template_planar_shape_model);
      SELF\Structured_template_planar_shape_model.shape_characterized_definition : SET[1:1] OF Footprint_definition_armx;
      reference_shape : OPTIONAL physical_unit_shape_model_select;
      reference_seating_plane_placement : OPTIONAL Usage_concept_usage_relationship_armx;      
    DERIVE
      SELF\Representation.description : STRING := ?;
    WHERE
      WR1 : NOT (SIZEOF(['PHYSICAL_UNIT_3D_SHAPE_XIM.PHYSICAL_UNIT_3D_SHAPE_MODEL',
                         'PHYSICAL_UNIT_2D_SHAPE_XIM.PHYSICAL_UNIT_PLANAR_SHAPE_MODEL'] * TYPEOF(reference_shape)) = 1) OR 
			NOT ('PHYSICAL_UNIT_USAGE_VIEW_XIM.PART_USAGE_VIEW' IN TYPEOF(reference_shape\Physical_unit_shape_model.shape_characterized_definition)) OR            
            NOT ('LAYERED_INTERCONNECT_COMPLEX_TEMPLATE_XIM.FOOTPRINT_DEFINITION_ARMX' IN TYPEOF(shape_characterized_definition[1])) OR      
                 (shape_characterized_definition[1]\Footprint_definition_armx.reference_package :=: 
                  reference_shape\Physical_unit_shape_model.shape_characterized_definition);
      WR2 : NOT (SIZEOF(['PHYSICAL_UNIT_3D_SHAPE_XIM.PHYSICAL_UNIT_3D_SHAPE_MODEL',
                         'PHYSICAL_UNIT_2D_SHAPE_XIM.PHYSICAL_UNIT_PLANAR_SHAPE_MODEL'] * TYPEOF(reference_shape)) = 1) OR 
                ('PHYSICAL_UNIT_USAGE_VIEW_XIM.PART_USAGE_VIEW' IN TYPEOF(reference_shape\Physical_unit_shape_model.shape_characterized_definition));                
      WR4 : NOT EXISTS(reference_shape) OR EXISTS(shape_characterized_definition[1]\Footprint_definition_armx.reference_package);
      WR5 : NOT EXISTS(reference_seating_plane_placement) OR EXISTS(reference_shape);
      WR6 : NOT EXISTS(reference_seating_plane_placement) OR ('PACKAGE_XIM.PACKAGE_ARMX' IN TYPEOF(shape_characterized_definition[1]\Footprint_definition_armx.reference_package));
      WR7 : NOT EXISTS(reference_seating_plane_placement) OR ('NON_FEATURE_SHAPE_ELEMENT_XIM.SEATING_PLANE' IN 
                TYPEOF(reference_seating_plane_placement\Usage_concept_usage_relationship_armx.associated_usage));
      WR8 : NOT EXISTS(reference_seating_plane_placement) OR 
                ((reference_seating_plane_placement\Usage_concept_usage_relationship_armx.associating_usage_shape\Usage_view_level_non_feature_shape_model.model_shape) =
                reference_shape);
      WR9 : NOT EXISTS(reference_seating_plane_placement) OR 
                ((reference_seating_plane_placement\Usage_concept_usage_relationship_armx.associated_usage\Non_feature_shape_element.scope) =
                SELF\Footprint_definition_armx.reference_package);
     WR10 : NOT EXISTS(reference_seating_plane_placement) OR ('PHYSICAL_UNIT_3D_SHAPE_XIM.PHYSICAL_UNIT_3D_SHAPE_MODEL' IN 
                TYPEOF(reference_seating_plane_placement\Usage_concept_usage_relationship_armx.associating_usage_shape\Usage_view_level_non_feature_shape_model.model_shape));
     WR11 : NOT (EXISTS(reference_seating_plane_placement) AND ('PHYSICAL_UNIT_2D_SHAPE_XIM.PHYSICAL_UNIT_2D_SHAPE_MODEL' IN TYPEOF(reference_shape)));
     WR12 : NOT ('PHYSICAL_UNIT_2D_SHAPE_ARM.PHYSICAL_UNIT_2D_SHAPE_MODEL' IN TYPEOF(reference_shape)) OR
                 (SELF\shape_representation.context_of_items = reference_shape\shape_representation.context_of_items);                           
  END_ENTITY;

  ENTITY Package_footprint_relationship_definition_armx
    SUBTYPE OF (Product_view_definition, package_footprint_relationship_definition);
    DERIVE
      associated_model : SET [1:1] OF shape_representation := fd_get_amodel(SELF);
      related_models : SET [2:2] OF shape_representation := fd_get_rmodels(related_elements);
      related_transforms : SET [2:2] OF representation_relationship_with_transformation := 
                           fd_get_transforms(associated_model, related_models);      
    INVERSE
      related_elements : SET [2:2] OF product_definition_relationship for related_product_definition;
    WHERE
      WR1: 'PACKAGE_XIM.PACKAGE_ARMX' IN fd_get_components(related_elements);
      WR2: 'FOOTPRINT_DEFINITION_XIM.FOOTPRINT_DEFINITION_ARMX' in fd_get_components(related_elements);
      WR3: SIZEOF(related_models) = 2;
      WR4: SIZEOF(associated_model) = 1;
      WR5: SIZEOF(QUERY(rm <* related_models |
                  ('PHYSICAL_UNIT_2D_SHAPE_XIM.PHYSICAL_UNIT_PLANAR_SHAPE_MODEL' IN TYPEOF(rm))
              )) = 1;
      WR6: SIZEOF(QUERY(rm <* related_models |
                  ('FOOTPRINT_DEFINITION_XIM.FOOTPRINT_DEFINITION_SHAPE_MODEL' IN TYPEOF(rm))
              )) = 1;
      WR7: 'LAYERED_2D_SHAPE_XIM.PLANAR_SHAPE_MODEL' IN TYPEOF(associated_model[1]);
  END_ENTITY;

  ENTITY Part_feature_based_template_location
    SUBTYPE OF (Template_location_in_structured_template);
      reference_feature : Part_feature;
    DERIVE
      all_reference_feature : SET [1:?] OF Part_feature := bag_to_set(USEDIN
      (SELF\Template_location_in_structured_template.assembly,
      'LAYERED_INTERCONNECT_COMPLEX_TEMPLATE_XIM.TEMPLATE_LOCATION_IN_STRUCTURED_TEMPLATE.ASSEMBLY')); 
      SELF\Template_location_in_structured_template.reference_designation :
        STRING := reference_feature\Shape_element.element_name;      
    WHERE
      WR1: SIZEOF(QUERY( arf <* all_reference_feature | NOT(reference_feature.associated_definition :=: arf.associated_definition))) = 0;
  END_ENTITY;

  ENTITY Stratum_feature_template_location_in_breakout_footprint_definition
    SUBTYPE OF (Stratum_specific_template_location_armx);
      SELF\Template_location_in_structured_template.assembly : Breakout_footprint_definition_armx;
      SELF\Template_location_in_structured_template.template : Stratum_feature_template_armx;
      original_padstack : Part_feature_based_template_location;
      breakout_padstack : Template_location_in_structured_template;
    WHERE
    -- original_padstack must belong to Footprint_definition
      WR1: original_padstack.assembly :=: assembly.reference_footprint;
    -- breakout_padstack must belong to Breakout_footprint_definition
      WR2: breakout_padstack.assembly :=: assembly;
  END_ENTITY;

  FUNCTION get_template_arrangement(
    input : SET OF Template_location_in_structured_template
  ) : template_arrangement;

    LOCAL
      tlist          : SET OF Template_location_in_structured_template := 
        (QUERY(inx <* input | ('LAYERED_INTERCONNECT_COMPLEX_TEMPLATE_XIM.MULTI_STRATUM_STRUCTURED_TEMPLATE_ARMX' IN TYPEOF(inx.template))));
      pabt           : BAG OF STRING := [];
      pabb           : BAG OF STRING := [];
      pabsymmetrical : BAG OF STRING := [];
      pabswappable   : BAG OF STRING := [];
    END_LOCAL;

    REPEAT i := 1 TO SIZEOF(tlist) BY 1;
      IF (tlist[i].template\Multi_stratum_structured_template_armx.location = template_arrangement.top) THEN
        pabt := pabt + 'top';
      END_IF;
      IF (tlist[i].template\Multi_stratum_structured_template_armx.location = template_arrangement.bottom) THEN
        pabb := pabb + 'bottom';
      END_IF;
      IF (tlist[i].template\Multi_stratum_structured_template_armx.location = template_arrangement.symmetrical) THEN
        pabsymmetrical := pabsymmetrical + 'symmetrical';
      END_IF;
      IF (tlist[i].template\Multi_stratum_structured_template_armx.location = template_arrangement.swappable) THEN
        pabswappable := pabswappable + 'swappable';

      END_IF;
    END_REPEAT;
    IF ((SIZEOF(pabt) > 0) AND (SIZEOF(pabb) = 0)) THEN
      RETURN(template_arrangement.top);
    END_IF;
    IF ((SIZEOF(pabb) > 0) AND (SIZEOF(pabt) = 0)) THEN
      RETURN(template_arrangement.bottom);
    END_IF;
    IF ((SIZEOF(pabb) = 0) AND (SIZEOF(pabt) = 0) AND (SIZEOF(pabsymmetrical) > 0)) THEN    
      RETURN(template_arrangement.symmetrical);
    END_IF;
    IF ((SIZEOF(pabb) = 0) AND (SIZEOF(pabt) = 0) AND (SIZEOF(pabsymmetrical) = 0) AND (SIZEOF(pabswappable) > 0)) THEN
      RETURN(template_arrangement.swappable);
    END_IF;
    RETURN(?);
  END_FUNCTION;

  FUNCTION fd_get_components(input : SET[2:2] OF product_definition_relationship) : SET OF Product_view_definition;
    LOCAL
      pvd : SET OF Product_view_definition := [];
    END_LOCAL;
    REPEAT i := 1 TO HIINDEX(input);
      pvd := pvd + input[i]\product_definition_relationship.relating_product_definition;
    END_REPEAT;
    RETURN (pvd);
  END_FUNCTION; 

  FUNCTION fd_get_amodel (input : Product_view_definition) : SET OF shape_representation;
    LOCAL
      gm : SET OF shape_representation := [];
      is : SET OF Item_shape := [];
      sda : SET OF Shape_description_association := [];      
    END_LOCAL;
    
    is := bag_to_set(USEDIN(input,'SHAPE_PROPERTY_ASSIGNMENT_XIM.ITEM_SHAPE.DESCRIBED_ELEMENT'));

    IF (SIZEOF(is) >= 0) THEN
      REPEAT i := 1 TO HIINDEX(is);
      sda := sda + bag_to_set(USEDIN(input,'SHAPE_PROPERTY_ASSIGNMENT_XIM.SHAPE_DESCRIPTION_ASSOCIATION.REPRESENTED_CHARACTERISTIC'));
      END_REPEAT;
     IF (SIZEOF(sda) >= 0) THEN
       REPEAT i := 1 TO HIINDEX(sda);
       gm := gm + sda[i]\Shape_description_association.representation;
       END_REPEAT;    
       RETURN (gm);
     END_IF;
    END_IF;
    RETURN(?);  
  END_FUNCTION; 

  FUNCTION fd_get_rmodels (input : SET[2:2] OF product_definition_relationship) : SET OF shape_representation;
    LOCAL
      gm : SET OF shape_representation := [];
      pvd : SET OF Product_view_definition := [];
    END_LOCAL;
      pvd := fd_get_components(input);
    IF (SIZEOF(pvd) >= 0) THEN      
      REPEAT i := 1 TO HIINDEX(pvd);
        gm := gm + fd_get_amodel(pvd[i]);
      END_REPEAT;
      RETURN (gm);
    END_IF;
    RETURN(?);
  END_FUNCTION; 

  FUNCTION fd_get_transforms(input1 : SET[1:1] OF shape_representation;
                             input2 : SET[2:2] OF shape_representation) 
                             : SET OF representation_relationship_with_transformation;
    LOCAL
      gmrwt : SET OF representation_relationship_with_transformation := [];
    END_LOCAL;
    gmrwt := bag_to_set(USEDIN(input1[1],'EXTENDED_BASIC_GEOMETRY_XIM.SHAPE_REPRESENTATION_RELATIONSHIP.REP_1'));
    REPEAT i := 1 TO HIINDEX(gmrwt);
      IF NOT
      ((gmrwt[i]\shape_representation_relationship.rep_2 IN input2)
        AND
        ('EXTENDED_BASIC_GEOMETRY_XIM.REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION' IN 
                                        TYPEOF(gmrwt[i]\Shape_representation_relationship.rep_2)))
       THEN
       RETURN(?);
      END_IF;
      RETURN(gmrwt);
      END_REPEAT;
    RETURN (?);
  END_FUNCTION; 


END_SCHEMA;
