(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*
   Derived from ISO TC184/SC4/WG12 N - ISO/CD-TS 10303-xxxx Functional assignment to part - EXPRESS ARM
   by LKSoftWare GmbH for implementation purpose within IDA-STEP(TM)
*)

SCHEMA Functional_assignment_to_part_xim;

USE FROM Physical_unit_usage_view_xim;

USE FROM Functional_usage_view_xim;

USE FROM Physical_connectivity_definition_xim;	-- ISO/TS 10303-1755

USE FROM Functional_assignment_to_part_mim;

	TYPE fatp_requirement_assignment_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assignment_item WITH 
	 (Part_connected_terminals_element_armx,
   	  Part_connected_terminals_definition_armx);
    END_TYPE; 

	TYPE fatp_termination_or_junction = EXTENSIBLE GENERIC_ENTITY SELECT
	(Part_terminal,
	 Part_connected_terminals_topological_junction);
  END_TYPE;
  

  TYPE fatp_part_connected_terminals_definition_domain_enumeration = EXTENSIBLE ENUMERATION OF
    (electrical,
	 thermal,
	 optical,
	 magnetic);
  END_TYPE;
  
  ENTITY Functional_usage_view_to_part_terminal_assignment
  	(* CONNOTATIONAL *) SUBTYPE OF (shape_aspect_relationship);
      SELF\shape_aspect_relationship.related_shape_aspect RENAMED physical_usage_view_terminal		: Part_terminal;
      SELF\shape_aspect_relationship.relating_shape_aspect RENAMED functional_usage_view_terminal : Scalar_terminal_definition;
    DERIVE
      SELF\shape_aspect_relationship.description : text := ?;
      SELF\shape_aspect_relationship.name : label := ?;
    UNIQUE
      UR1 : functional_usage_view_terminal,
 physical_usage_view_terminal;
  END_ENTITY;

  ENTITY Part_connected_terminals_definition_armx
  	(* CONNOTATIONAL *) SUBTYPE OF (part_connected_terminals_definition);
      SELF\shape_aspect.of_shape RENAMED associated_definition : Part_usage_view;
      connected_terminals   : SET[2:?] OF Part_terminal;
    DERIVE
      SELF\shape_aspect.description : text := ?;
      SELF\shape_aspect.product_definitional : LOGICAL := ?;
    INVERSE
      domain : SET [0:1] OF Part_connected_terminals_definition_domain_armx for associated_definition;
    UNIQUE
      UR1 : name,
 associated_definition;
    WHERE
      WR1 : SIZEOF(QUERY(ct <* connected_terminals | NOT (associated_definition = ct\Shape_element.containing_shape))) = 0;
  END_ENTITY;

  ENTITY Part_connected_terminals_definition_domain_armx
    SUBTYPE OF(part_connected_terminals_definition_domain);
      domain_type : fatp_part_connected_terminals_definition_domain_enumeration;
      associated_definition : Part_connected_terminals_definition;
    DERIVE
      -- Overlaps with domain_type
      SELF\shape_aspect.name : label := ?;
      SELF\shape_aspect.of_shape : product_definition_shape := associated_definition.of_shape;
      SELF\shape_aspect.product_definitional : LOGICAL := ?;
  END_ENTITY;

  ENTITY Part_connected_terminals_layout_topology_requirement_assignment_armx
    SUBTYPE OF(Requirement_assignment_armx, part_connected_terminals_layout_topology_requirement_assignment);
      SELF\Requirement_assignment_armx.assigned_requirement : Physical_connectivity_layout_topology_requirement_armx;
      SELF\Requirement_assignment_armx.assigned_to          : Part_connected_terminals_definition_armx;
  END_ENTITY;

  ENTITY Part_connected_terminals_element_armx
  	(* CONNOTATIONAL *) SUBTYPE OF (part_connected_terminals_element);
      SELF\shape_aspect_relationship.relating_shape_aspect RENAMED start_terminus : fatp_termination_or_junction;
      SELF\shape_aspect_relationship.related_shape_aspect RENAMED end_terminus    : fatp_termination_or_junction;
      connectivity_context                                                        : Part_connected_terminals_definition_armx;
    DERIVE
      SELF\shape_aspect.of_shape : product_definition_shape := ?;
      SELF\shape_aspect_relationship.description : text := ?;
      SELF\shape_aspect.product_definitional : LOGICAL := ?;
    UNIQUE
      UR1 : name, connectivity_context;
    WHERE
      WR1 : start_terminus <> end_terminus;
  END_ENTITY;

 ENTITY Part_connected_terminals_structure_definition_armx
 SUBTYPE OF (Part_connected_terminals_definition_armx, part_connected_terminals_structure_definition);
 DERIVE
   structural_terminal_nodes : SET OF Part_terminal := fatp_get_pt(structural_element);
   structural_junction_nodes : SET OF Part_connected_terminals_topological_junction := fatp_get_tj(structural_element);
   tree_structure : LOGICAL := ((SIZEOF(structural_terminal_nodes) + SIZEOF(structural_junction_nodes)) = (SIZEOF(structural_element) + 1));
 INVERSE
   structural_element : SET[1:?] OF Part_connected_terminals_element_armx FOR connectivity_context;
 WHERE
   WR1 : SIZEOF(QUERY(stn <* structural_terminal_nodes |
				NOT(stn IN SELF\Part_connected_terminals_definition.connected_terminals)
				)) = 0;
   WR2 : SIZEOF(structural_terminal_nodes) = SIZEOF(SELF\Part_connected_terminals_definition.connected_terminals);
END_ENTITY;

  ENTITY Part_connected_terminals_topological_junction
  	(* CONNOTATIONAL *) SUBTYPE OF (shape_aspect);
      scope : Physical_connectivity_structure_definition;
    DERIVE
      SELF\shape_aspect.of_shape : product_definition_shape := ?;
      SELF\shape_aspect.product_definitional : LOGICAL := ?;
      SELF\shape_aspect.description : text := ?;
    UNIQUE
      UR1 : name, scope;
  END_ENTITY; 

  ENTITY Part_terminal
    ABSTRACT SUPERTYPE (* CONNOTATIONAL *) SUBTYPE OF (Part_feature);
      SELF\shape_element.description RENAMED terminal_type : OPTIONAL STRING;    
    INVERSE
      connection_requirement         : SET[0:1] OF part_connected_terminals_definition_armx FOR connected_terminals;
      functional_usage_view_terminal : SET[0:1] OF functional_usage_view_to_part_terminal_assignment FOR physical_usage_view_terminal;
  END_ENTITY;

  FUNCTION fatp_get_pt(input : SET OF Part_connected_terminals_element_armx) : SET OF Part_terminal;
  LOCAL
   pct : SET OF Part_terminal := [];
	i : INTEGER := 0;
  END_LOCAL;
  REPEAT  i := 1 TO SIZEOF(input) BY 1;
   IF ('FUNCTIONAL_ASSIGNMENT_TO_PART_XIM.PART_TERMINAL' IN TYPEOF(input[i].start_terminus)) THEN
   pct := pct + input[i].start_terminus;
   END_IF;
   IF ('FUNCTIONAL_ASSIGNMENT_TO_PART_XIM.PART_TERMINAL' IN TYPEOF(input[i].end_terminus)) THEN
   pct := pct + input[i].end_terminus;
   END_IF;
  END_REPEAT;
  RETURN(pct);
  END_FUNCTION;

  FUNCTION fatp_get_tj(input : SET OF Part_connected_terminals_element_armx) : SET OF Part_connected_terminals_topological_junction;
  LOCAL
   tj : SET OF Part_connected_terminals_topological_junction := [];
	i : INTEGER := 0;
  END_LOCAL;
  REPEAT  i := 1 TO SIZEOF(input) BY 1;
   IF ('FUNCTIONAL_ASSIGNMENT_TO_PART_XIM.PART_CONNECTED_TERMINALS_TOPOLOGICAL_JUNCTION' IN TYPEOF(input[i].start_terminus)) THEN
   tj := tj + input[i].start_terminus;
   END_IF;
   IF ('FUNCTIONAL_ASSIGNMENT_TO_PART_XIM.PART_CONNECTED_TERMINALS_TOPOLOGICAL_JUNCTION' IN TYPEOF(input[i].end_terminus)) THEN
   tj := tj + input[i].end_terminus;
   END_IF;
  END_REPEAT;
  RETURN(tj);
  END_FUNCTION;
  
END_SCHEMA;

