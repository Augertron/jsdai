(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*
   Derived from ISO TC184/SC4/WG12 N4357 - ISO/TS 10303-1032 Shape property assignment - EXPRESS ARM
   by LKSoftWare GmbH for implementation purpose within IDA-STEP(TM)
*)

(* Based on mixture of ARM and AIM *)


SCHEMA Shape_property_assignment_xim; 

USE FROM Assembly_structure_xim; -- ISO/TS 10303-1026

USE FROM Characterizable_object_xim;  -- ISO/TS 10303-1765

USE FROM External_model_xim; -- ISO/TS 10303-1033

USE FROM Product_view_definition_relationship_xim; -- ISO/TS 10303-1041

USE FROM Shape_property_assignment_mim;

TYPE described_element_select = SELECT (
  product_definition_usage,
  Product_occurrence_definition_relationship_armx);
END_TYPE;

TYPE shape_dependent_select = SELECT
   (product_definition_shape, 
    shape_aspect);
END_TYPE; 

TYPE shape_model_armx = SELECT
   (External_geometric_model, 
    Shape_representation
    );
END_TYPE; 

TYPE shape_select = SELECT
   (product_definition_shape, 
    shape_aspect, 
    shape_aspect_relationship);
END_TYPE; 

TYPE shapeable_item = SELECT
   (Characterized_object, 
    product_definition, 
    product_definition_relationship,
    product_definition_usage,
    Next_assembly_usage_occurrence_relationship_armx);
END_TYPE; 

ENTITY Contextual_item_shape
  SUBTYPE OF (product_definition_shape);
  SELF\property_definition.definition : described_element_select;
DERIVE
  SELF\property_definition.name : label := ?;
  shaped_product : Product_view_definition := spa_get_definition(SELF);
END_ENTITY;

ENTITY Shape_dependent_property_representation
	(* CONNOTATIONAL *) SUBTYPE OF (Representation);
  SELF\Representation.name RENAMED characteristic_type : STRING;
  description_x : OPTIONAL STRING;
  described_element : shape_dependent_select;
  DERIVE
  	property_representation : representation := SELF; -- Identical mapping
  	SELF\Representation.description : text := description_x;
    SELF\representation.context_of_items : representation_context := ?;
END_ENTITY;

ENTITY Shape_description_association
(** Can't make it Abstract in XIMs only in order to avoid wrong hits during mapping operations  - need to solve other way **)
	SUBTYPE OF (shape_definition_representation);
 	  role                                                                                  : STRING;
    SELF\property_definition_representation.definition RENAMED represented_characteristic : shape_select;
    SELF\property_definition_representation.used_representation RENAMED representation    : shape_model_armx;
  DERIVE
    SELF\property_definition_representation.name : label := role;
END_ENTITY;

  FUNCTION spa_get_definition ( input : Contextual_item_shape ): Product_view_definition;
    IF ('PRODUCT_VIEW_DEFINITION_RELATIONSHIP_XIM.PRODUCT_DEFINITION_USAGE'
      IN TYPEOF(input\property_definition.definition))
      THEN
        RETURN(input\property_definition.definition\product_definition_relationship.related_product_definition);
    END_IF;
    IF ('ASSEMBLY_STRUCTURE_XIM.PRODUCT_OCCURRENCE_DEFINITION_RELATIONSHIP_ARMX' IN
        TYPEOF(input\property_definition.definition))
      THEN
        RETURN(input\property_definition.definition\Product_occurrence_definition_relationship_armx.related_view);
    END_IF;    
    RETURN(?);
  END_FUNCTION;


END_SCHEMA;  -- Shape_property_assignment_xim

