(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*
   Derived from ISO TC184/SC4/WG12 N - ISO/CD-TS 10303-xxxx Land - EXPRESS ARM
   by LKSoftWare GmbH for implementation purpose within IDA-STEP(TM)
*)

SCHEMA Land_xim;

USE FROM Layered_interconnect_module_design_xim;

USE FROM Land_mim;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set);
	
	SUBTYPE_CONSTRAINT l_laminate_component_interface_terminal_armx_subtypes FOR Laminate_component_interface_terminal_armx; 
		 (ONEOF (Component_termination_passage_interface_terminal,
		 Land_interface_terminal));
	END_SUBTYPE_CONSTRAINT;

	SUBTYPE_CONSTRAINT l_laminate_component_join_terminal_armx_subtypes FOR Laminate_component_join_terminal_armx; 
		 (ONEOF (Component_termination_passage_join_terminal,
		 Land_join_terminal,
		 Embedded_physical_component_terminal));
	END_SUBTYPE_CONSTRAINT;

	SUBTYPE_CONSTRAINT stratum_feature_template_component_subtypes FOR Stratum_feature_template_component_armx;   
		(ONEOF (Area_component_armx,
		Land_armx));
	END_SUBTYPE_CONSTRAINT;

  ENTITY Contact_size_dependent_land_armx
    (* CONNOTATIONAL *) SUBTYPE OF (Land_armx, contact_size_dependent_land);
      SELF\Definition_based_product_occurrence.derived_from : Default_attachment_size_based_land_physical_template_armx;
    INVERSE
      external_access_mechanism : SET[1:2] OF land_interface_terminal FOR associated_component;
  END_ENTITY;

  ENTITY Dependent_thermal_isolation_removal_component_armx
    SUBTYPE OF (Thermal_isolation_removal_component_armx, dependent_thermal_isolation_removal_component);
      SELF\Thermal_isolation_removal_component_armx.derived_from : Dependent_thermal_isolation_removal_template_armx;
    DERIVE
      associated_land : Land_armx := land_get_associated_land_for_thermal_removal(SELF);
    WHERE
      WR1 : associated_land\Definition_based_product_occurrence.derived_from :=:
            SELF\Thermal_isolation_removal_component_armx.derived_from\Dependent_thermal_isolation_removal_template_armx.associated_item;            
      WR2 : associated_land\Land.functional = TRUE;
  END_ENTITY;

  ENTITY Thermal_isolation_removal_component_armx
    SUBTYPE OF (Material_removal_structured_component_armx, thermal_isolation_removal_component);
      SELF\Definition_based_product_occurrence.derived_from : Thermal_isolation_removal_template_armx;
    WHERE
      WR1 : NOT('LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.MULTI_LAYER_MATERIAL_REMOVAL_LAMINATE_COMPONENT_ARMX' IN TYPEOF(SELF));
  END_ENTITY;
  
  ENTITY Dependent_electrical_isolation_removal_component_armx
    SUBTYPE OF (Electrical_isolation_laminate_component_armx, dependent_electrical_isolation_removal_component);
      SELF\Electrical_isolation_laminate_component_armx.derived_from : Dependent_electrical_isolation_removal_template_armx;
    DERIVE
      SELF\Material_removal_laminate_component_armx.causal_item RENAMED associated_land : Land_armx := land_get_associated_land_for_electrical_removal(SELF);
    WHERE
      WR1 : associated_land\Definition_based_product_occurrence.derived_from :=:
            SELF\Definition_based_product_occurrence.derived_from\Dependent_electrical_isolation_removal_template_armx.associated_item;
      WR2 : NOT('LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.MULTI_LAYER_MATERIAL_REMOVAL_LAMINATE_COMPONENT_ARMX' IN TYPEOF(SELF));
      WR3 : associated_land\Land_armx.functional = FALSE;      
  END_ENTITY;

  ENTITY Inter_stratum_feature_dependent_land_armx
    ABSTRACT SUPERTYPE OF (ONEOF (Plated_passage_dependent_land_armx,
      Unsupported_passage_dependent_land_armx))
    SUBTYPE OF (Land_armx, inter_stratum_feature_dependent_land);
    SELF\Definition_based_product_occurrence.derived_from : Default_passage_based_land_physical_template_armx;
  END_ENTITY;

  ENTITY Land_armx
    SUPERTYPE OF (ONEOF (Contact_size_dependent_land_armx,
 Inter_stratum_feature_dependent_land_armx))
    (* CONNOTATIONAL *) SUBTYPE OF (Stratum_feature_template_component_armx, land);
      alternate_land_definition                							: OPTIONAL Land_physical_template_armx;
      SELF\Definition_based_product_occurrence.derived_from : OPTIONAL Land_physical_template_armx;
    DERIVE  
       functional: BOOLEAN :=
         (SIZEOF(['LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.CONDUCTOR',
           'LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.CONNECTED_FILLED_AREA'] *
           TYPEOF(SELF\Stratum_feature_template_component_armx.implementation_or_resident_stratum)) = 1);
    INVERSE
      access_mechanism : SET[1:?] OF land_join_terminal FOR of_shape(* TEMP-AC! *);
    WHERE
      WR1 : functional OR
         (SIZEOF(['LAND_XIM.LAND_WITH_JOIN_TERMINAL_ARMX',
                 'LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.STRATUM_FEATURE_TEMPLATE_COMPONENT_WITH_STRATUM_FEATURE_ARMX'] * TYPEOF(SELF)) = 2);
  END_ENTITY;

  ENTITY Land_interface_terminal
    (* CONNOTATIONAL *) SUBTYPE OF (Laminate_component_interface_terminal_armx);
      SELF\Component_feature_armx.definition           : Land_template_interface_terminal;
      SELF\Component_feature_armx.associated_component(* TEMP-CF *) : Contact_size_dependent_land_armx;
    DERIVE
      SELF\shape_aspect.description : text := 'land interface terminal';
  END_ENTITY;

  ENTITY Land_join_terminal
    (* CONNOTATIONAL *) SUBTYPE OF (Laminate_component_join_terminal_armx);
      SELF\Component_feature_armx.definition           : Land_template_join_terminal;
      SELF\Component_feature_armx.associated_component(* TEMP-CF *) : Land_armx;
    DERIVE
      SELF\shape_aspect.description : text := 'land join terminal';
  END_ENTITY;

ENTITY Plated_passage_dependent_land_armx
  (* CONNOTATIONAL *) SUBTYPE OF (Inter_stratum_feature_dependent_land_armx, plated_passage_dependent_land);
    reference_plated_passage							: Plated_passage_armx;
    SELF\Assembly_component_armx.derived_from	: Default_plated_passage_based_land_physical_template_armx;
END_ENTITY;

  ENTITY Unsupported_passage_dependent_land_armx
    (* CONNOTATIONAL *) SUBTYPE OF (Inter_stratum_feature_dependent_land_armx, unsupported_passage_dependent_land);
      reference_passage                        : Unsupported_passage_armx;
      SELF\Definition_based_product_occurrence.derived_from : Default_unsupported_passage_based_land_physical_template_armx;
  END_ENTITY;

  FUNCTION land_get_associated_land_for_electrical_removal (
               input : Dependent_electrical_isolation_removal_component) : Land;
  ---no component mrlc, no structured component
  LOCAL
   assembly_relationships_for_associated_structure : SET OF Structured_layout_component_sub_assembly_relationship := [];
   assembly_relationship : SET OF Structured_layout_component_sub_assembly_relationship :=
           bag_to_set(USEDIN(input, 'LAYERED_INTERCONNECT_MODULE_DESIGN_ARM.STRUCTURED_LAYOUT_COMPONENT_SUB_ASSEMBLY_RELATIONSHIP.RELATED_VIEW'));
   associated_structure : Structured_layout_component;
   first_location : Template_location_in_structured_template := assembly_relationship[1]\Structured_layout_component_sub_assembly_relationship.first_location;
   resident_stratum : stratum;
   resident_sftc : Stratum_feature_template_component;
  END_LOCAL;
  --determine resident_stratum;
  --critical to just use resident stratum as the individual design intents might be against different stratum features (different power areas).
  --address the multiple design intents here
  --use the last stratum found
   REPEAT i := 1 TO SIZEOF(input\Material_removal_laminate_component.design_intent) BY 1;
  CASE TRUE OF
    ('LAYERED_INTERCONNECT_MODULE_DESIGN_ARM.STRATUM' IN TYPEOF(input\Material_removal_laminate_component.design_intent[i])) : 
     resident_stratum := input\Material_removal_laminate_component.design_intent[i];
  
    ('LAYERED_INTERCONNECT_MODULE_DESIGN_ARM.STRATUM_FEATURE_TEMPLATE_COMPONENT' IN TYPEOF(input\Material_removal_laminate_component.design_intent[i])) :
    BEGIN
     resident_sftc := input\Material_removal_laminate_component.design_intent[i];
     CASE TRUE OF
       ('LAYERED_INTERCONNECT_MODULE_DESIGN_ARM.STRATUM_FEATURE' IN TYPEOF(resident_sftc\Stratum_feature_template_component.implementation_or_resident_stratum)) :
       resident_stratum := resident_sftc\Stratum_feature_template_component.implementation_or_resident_stratum\Stratum_feature.resident_stratum;
       ('LAYERED_INTERCONNECT_MODULE_DESIGN_ARM.STRATUM' IN TYPEOF(resident_sftc\Stratum_feature_template_component.implementation_or_resident_stratum)) :
       resident_stratum := resident_sftc\Stratum_feature_template_component.implementation_or_resident_stratum;
       OTHERWISE :
        RETURN(?);
     END_CASE;
    END;
    OTHERWISE :
     RETURN(?);
  END_CASE;
   END_REPEAT;
  --determine first_location;
  --if there is more than one assembly_relationship return UNKNOWN;
   IF SIZEOF(assembly_relationship) <> 1 THEN RETURN(?);
   END_IF;
   
  --determine associated_land;
  --associated land is on same stratum;
  
     associated_structure := assembly_relationship[1]\Structured_layout_component_sub_assembly_relationship.relating_view;
     assembly_relationships_for_associated_structure := 
                     bag_to_set(USEDIN(associated_structure, 'LAYERED_INTERCONNECT_MODULE_DESIGN_ARM.STRUCTURED_LAYOUT_COMPONENT_SUB_ASSEMBLY_RELATIONSHIP.RELATING_VIEW')) - assembly_relationship;
  --this assembly relationship is excluded since we are querying for other relationships
  
  CASE TRUE OF
    ('LAYERED_INTERCONNECT_MODULE_DESIGN_ARM.FOOTPRINT_OCCURRENCE' IN TYPEOF(associated_structure)) :
  --if part of footprint then associated_land has same first_location;
    BEGIN   
     REPEAT i := 1 TO SIZEOF(assembly_relationships_for_associated_structure) BY 1;
      IF ((first_location :=: assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship.first_location) AND
         ('LAND_ARM.LAND' IN TYPEOF(assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship.related_view)) AND
         (assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship.related_view\Stratum_feature_template_component.resident_stratum
              :=: resident_stratum))
      THEN
          RETURN(assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship.related_view);
      END_IF;
     END_REPEAT;
    --if no land is found return UNKNOWN.
     RETURN(?);
    END;
    
       ('LAYERED_INTERCONNECT_MODULE_DESIGN_ARM.PADSTACK_OCCURRENCE' IN TYPEOF(associated_structure)) :
    BEGIN
     REPEAT i := 1 TO SIZEOF(assembly_relationships_for_associated_structure) BY 1;
      IF (('LAND_ARM.LAND' IN TYPEOF(assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship.related_view)) AND
          (assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship.related_view\Stratum_feature_template_component.resident_stratum
               :=: resident_stratum))
      THEN
          RETURN(assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship.related_view);
       END_IF;
     END_REPEAT;
    --if no land is found return UNKNOWN.
     RETURN(?);
    END;
    
    OTHERWISE :
    --if no land is found return UNKNOWN.
     RETURN(?);
  END_CASE;
  END_FUNCTION;


  FUNCTION land_get_associated_land_for_thermal_removal (
               input : Dependent_thermal_isolation_removal_component_armx) : Land_armx;
  --limitation of component_mrlc is that only first member is checked to see what stratum it is for.
  --should not be a problem as related mrlc shall be for only one stratum.
  LOCAL
   assembly_relationships_for_associated_structure : SET OF Structured_layout_component_sub_assembly_relationship_armx := [];
   assembly_relationship : SET OF Structured_layout_component_sub_assembly_relationship_armx :=
           bag_to_set(USEDIN(input, 'LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.STRUCTURED_LAYOUT_COMPONENT_SUB_ASSEMBLY_RELATIONSHIP_ARMX.RELATED_VIEW'));
   associated_structure : Structured_layout_component_armx;
   component_mrlc : SET OF Material_removal_laminate_component_armx := [];
   component_relationship : SET OF Structured_layout_component_sub_assembly_relationship_armx :=
           bag_to_set(USEDIN(input, 'LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.STRUCTURED_LAYOUT_COMPONENT_SUB_ASSEMBLY_RELATIONSHIP_ARMX.RELATING_VIEW'));
   first_location : Template_location_in_structured_template := assembly_relationship[1]\Structured_layout_component_sub_assembly_relationship_armx.first_location;
   resident_stratum : stratum_armx;
   resident_sftc : Stratum_feature_template_component_armx;
  END_LOCAL;
  --determine resident_stratum;
  --critical to just use resident stratum as the individual isolation features might be against different stratum features (different power areas).
   REPEAT i := 1 TO SIZEOF(component_relationship) BY 1;
     component_mrlc := component_mrlc + component_relationship[i]\Structured_layout_component_sub_assembly_relationship_armx.related_view;
   END_REPEAT;
  CASE TRUE OF
    ('LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.STRATUM_ARMX' IN TYPEOF(component_mrlc[1]\Material_removal_laminate_component_armx.design_intent[1])) : 
     resident_stratum := component_mrlc[1]\Material_removal_laminate_component_armx.design_intent[1];
  
    ('LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.STRATUM_FEATURE_TEMPLATE_COMPONENT_ARMX' IN TYPEOF(component_mrlc[1]\Material_removal_laminate_component_armx.design_intent[1])) :
    BEGIN
     resident_sftc := component_mrlc[1]\Material_removal_laminate_component_armx.design_intent[1];
     CASE TRUE OF
       ('LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.STRATUM_FEATURE_ARMX' IN TYPEOF(resident_sftc\Stratum_feature_template_component_armx.implementation_or_resident_stratum)) :
       resident_stratum := resident_sftc\Stratum_feature_template_component_armx.implementation_or_resident_stratum\Stratum_feature_armx.resident_stratum;
       ('LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.STRATUM_ARMX' IN TYPEOF(resident_sftc\Stratum_feature_template_component_armx.implementation_or_resident_stratum)) :
       resident_stratum := resident_sftc\Stratum_feature_template_component_armx.implementation_or_resident_stratum;
       OTHERWISE :
        RETURN(?);
     END_CASE;
    END;
    OTHERWISE :
     RETURN(?);
  END_CASE;
  --determine first_location;
  --if there is more than one assembly_relationship return UNKNOWN;
   IF SIZEOF(assembly_relationship) <> 1 THEN RETURN(?);
   END_IF;
   
  --determine associated_land;
  --associated land is on same stratum;
  
     associated_structure := assembly_relationship[1]\Structured_layout_component_sub_assembly_relationship_armx.relating_view;
     assembly_relationships_for_associated_structure := 
                     bag_to_set(USEDIN(associated_structure, 'LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.STRUCTURED_LAYOUT_COMPONENT_SUB_ASSEMBLY_RELATIONSHIP_ARMX.RELATING_VIEW')) - assembly_relationship;
  --this assembly relationship is excluded since we are querying for other relationships
  
  CASE TRUE OF
    ('LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.FOOTPRINT_OCCURRENCE_ARMX' IN TYPEOF(associated_structure)) :
  --if part of footprint then associated_land has same first_location;
    BEGIN   
     REPEAT i := 1 TO SIZEOF(assembly_relationships_for_associated_structure) BY 1;
      IF ((first_location :=: assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship_armx.first_location) AND
         ('LAND_XIM.LAND_ARMX' IN TYPEOF(assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship.related_view)) AND
         (assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship_armx.related_view\Stratum_feature_template_component_armx.resident_stratum
              :=: resident_stratum))
      THEN
          RETURN(assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship_armx.related_view);
      END_IF;
     END_REPEAT;
    --if no land is found return UNKNOWN.
     RETURN(?);
    END;
    
       ('LAYERED_INTERCONNECT_MODULE_DESIGN_XIM.PADSTACK_OCCURRENCE_ARMX' IN TYPEOF(associated_structure)) :
    BEGIN
     REPEAT i := 1 TO SIZEOF(assembly_relationships_for_associated_structure) BY 1;
      IF (('LAND_XIM.LAND_ARMX' IN TYPEOF(assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship_armx.related_view)) AND
          (assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship_armx.related_view\Stratum_feature_template_component_armx.resident_stratum
               :=: resident_stratum))
      THEN
          RETURN(assembly_relationships_for_associated_structure[i]\Structured_layout_component_sub_assembly_relationship_armx.related_view);
       END_IF;
     END_REPEAT;
    --if no land is found return UNKNOWN.
     RETURN(?);
    END;
    
    OTHERWISE :
    --if no land is found return UNKNOWN.
     RETURN(?);
  END_CASE;
  END_FUNCTION;
  
END_SCHEMA;




