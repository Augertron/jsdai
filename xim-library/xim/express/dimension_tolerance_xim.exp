(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*
Derived from ISO TC184/SC4/WG12 N2873 - ISO/TS 10303-1050 Dimension tolerance - EXPRESS ARM
by LKSoftWare GmbH for implementation purpose within IDA-STEP(TM)
*) 

(* Based on ARM *) 
(* Reviewed on 2010-04-14 *)

SCHEMA Dimension_tolerance_xim;

(** Removed as Lothar suggested
ENTITY Plus_minus_bounds
  SUBTYPE OF (tolerance_value);
  significant_digits : OPTIONAL INTEGER;
  value_determination : OPTIONAL STRING;
END_ENTITY;
*)

USE FROM Basic_curve_xim;    

USE FROM Derived_shape_element_xim;    -- ISO/TS 10303-1130

USE FROM Document_assignment_xim;    -- ISO/TS 10303-1122

USE FROM Elemental_geometric_shape_xim;    -- ISO/TS 10303-1004

USE FROM Extended_measure_representation_xim;    -- ISO/TS 10303-1106

USE FROM Measure_representation_xim;    -- ISO/TS 10303-1118

USE FROM Shape_property_assignment_xim;    -- ISO/TS 10303-1032

USE FROM Value_with_unit_xim;    -- ISO/TS 10303-1054

USE FROM Dimension_tolerance_mim;

USE FROM shape_tolerance_schema(
	limits_and_fits,
	plus_minus_tolerance,
	tolerance_value);

USE FROM shape_dimension_schema(
	angle_relator,
	angular_location,
	angular_size,
	dimensional_location,
	dimensional_location_with_path,
	dimensional_size,
	shape_dimension_representation);

TYPE dimension_tolerance_document_element_select = EXTENSIBLE SELECT BASED_ON documented_element_select WITH 
   (Externally_defined_size_dimension);
END_TYPE; 

TYPE geometric_dimension = EXTENSIBLE SELECT 
	(Location_dimension,
    Size_dimension);
END_TYPE; 

TYPE radius_type = ENUMERATION OF
  (centred,
   adjoining);
END_TYPE;

ENTITY Associated_shape_element
  SUBTYPE OF (geometric_item_specific_usage, shape_aspect);
  DERIVE
    SELF\geometric_item_specific_usage.definition : shape_aspect := SELF;
END_ENTITY;

ENTITY Angular_location_dimension
  (* CONNOTATIONAL *) SUBTYPE OF (angular_location, Location_dimension);
    SELF\Location_dimension.orientation : axis2_placement;
END_ENTITY;

ENTITY Angular_size_dimension
  (* CONNOTATIONAL *) SUBTYPE OF (angular_size, Size_dimension);
  full : BOOLEAN;
  (** Removed as MIM attribute angular_size.angle_selection is semantically richer than
  major_angle : BOOLEAN; *)
END_ENTITY;

ENTITY Curved_distance_dimension
  (* CONNOTATIONAL *) SUBTYPE OF (dimensional_location_with_path, Location_dimension);
  WHERE
    WR1: NOT EXISTS(orientation);	
END_ENTITY;

(** Removed as Lothar suggessted
ENTITY Dimension_value_with_limitation
  SUBTYPE OF (plus_minus_tolerance);
  SELF\plus_minus_tolerance.range RENAMED defined_by : limitation_definition_select;
  limited_value : measure_representation_item;
  -- Overlaps with limited_value 
  DERIVE
    SELF\plus_minus_tolerance.toleranced_dimension : dimensional_characteristic :=?;
END_ENTITY;
*)

ENTITY Externally_defined_size_dimension
  (* CONNOTATIONAL *) SUBTYPE OF (externally_defined_dimension_definition, dimensional_size_with_path, Size_dimension);
  	used_path : OPTIONAL shape_aspect;
  DERIVE
	SELF\externally_defined_item.item_id : source_item := 'external size dimension'; 
	SELF\externally_defined_item.source : external_source := ?;
  	SELF\dimensional_size_with_path.path : shape_aspect :=?; 
END_ENTITY;

ENTITY Linear_distance_dimension
  (* CONNOTATIONAL *) SUBTYPE OF (Location_dimension);
  DERIVE
  	SELF\shape_aspect_relationship.name : label := 'linear distance';
END_ENTITY;

ENTITY Location_dimension
  ABSTRACT SUPERTYPE OF (ONEOF (Angular_location_dimension,
                                Curved_distance_dimension,
                                Linear_distance_dimension))
  (* CONNOTATIONAL *) SUBTYPE OF (directed_dimensional_location);
  (* attribute is accessable from supertype
  description	: OPTIONAL STRING; *)
  (* From supertype in the ARM - Geometric_dimension *)
  single_value : OPTIONAL measure_representation_item;
  lower_range : OPTIONAL measure_representation_item;
  upper_range : OPTIONAL measure_representation_item;  
  notes : OPTIONAL SET[1:?] OF STRING; (** Originally it is mandatory SET[0:?] **)
  (* Its own attributes *)	  
  	directed 	: BOOLEAN;
  (* Added as spinout of notes *)
	theoretical_exact : BOOLEAN;
	auxiliary         : BOOLEAN;
	orientation : OPTIONAL axis2_placement;
  WHERE
    WR1: EXISTS(single_value) XOR (EXISTS(lower_range) AND EXISTS(upper_range));
    WR2: NOT EXISTS(theoretical_exact) OR (theoretical_exact = FALSE) OR ('MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT' IN TYPEOF(single_value));
END_ENTITY;

ENTITY Radial_size_dimension
  (* CONNOTATIONAL *) SUBTYPE OF (Size_dimension);
  radius_type : radius_type;
  DERIVE
  	SELF\dimensional_size.name : label := 'radius';  
END_ENTITY;

ENTITY Size_dimension
  SUPERTYPE OF (ONEOF (Angular_size_dimension,
                                Externally_defined_size_dimension,
                                Radial_size_dimension))
  (* CONNOTATIONAL *)SUBTYPE OF (dimensional_size);
  (* From supertype in the ARM - Geometric_dimension *)
  id : OPTIONAL STRING;
  single_value : OPTIONAL measure_representation_item;
  lower_range : OPTIONAL measure_representation_item;
  upper_range : OPTIONAL measure_representation_item;
  notes : OPTIONAL SET[1:?] OF STRING; (** Originally it is mandatory SET[0:?] **)
  (* Its own attributes *)	  
  envelope_principle : BOOLEAN;
  theoretical_exact : BOOLEAN;
  auxiliary         : BOOLEAN;
  WHERE
    WR1: EXISTS(single_value) XOR (EXISTS(lower_range) AND EXISTS(upper_range));
	WR2: NOT EXISTS(theoretical_exact) OR (theoretical_exact = FALSE) OR ('MEASURE_SCHEMA.LENGTH_MEASURE_WITH_UNIT' IN TYPEOF(single_value));    
END_ENTITY;

END_SCHEMA;  -- Dimension_tolerance_xim

