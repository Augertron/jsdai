(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*
   Derived from ISO TC184/SC4/WG12 N - ISO/CD-TS 10303-xxxx Network functional design view - EXPRESS ARM
   by LKSoftWare GmbH for implementation purpose within IDA-STEP(TM)
*)

SCHEMA Network_functional_design_view_xim;

USE FROM Functional_usage_view_xim;

USE FROM Requirement_assignment_xim;

USE FROM Generic_product_occurrence_xim;	-- ISO/CD-TS 10303-1762	

USE FROM Assembly_structure_xim;	-- ISO/TS 10303-xxxx

USE FROM material_property_definition_schema(property_definition_relationship);

USE FROM Network_functional_design_view_mim;

	SUBTYPE_CONSTRAINT functional_unit_definition_subtypes FOR Functional_unit_definition;     
		(ONEOF (Functional_unit_network_definition,
		Functional_unit_usage_view));
	END_SUBTYPE_CONSTRAINT; 

  TYPE bus_structural_definition_or_node = SELECT
    (Functional_unit_network_node_definition,
     Bus_structural_definition_armx);
  END_TYPE;

TYPE nfdw_requirement_assignment_item = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON requirement_assignment_item WITH 
    (Functional_unit_armx);
END_TYPE; 

  ENTITY Bus_element_link_armx
  	(* CONNOTATIONAL *) SUBTYPE OF (bus_element_link);
      SELF\product_definition_relationship.relating_product_definition RENAMED precedent_element  : bus_structural_definition_or_node;
      SELF\product_definition_relationship.related_product_definition RENAMED subsequent_element	: bus_structural_definition_or_node;
    DERIVE
      SELF\product_definition.frame_of_reference : product_definition_context := ?;
      SELF\product_definition.description : text := ?;
      SELF\product_definition.formation : product_definition_formation := ?;
      SELF\product_definition.id : identifier := ?;
    UNIQUE
      UR1 : precedent_element,
 subsequent_element;
    WHERE
      WR1 : precedent_element <> subsequent_element;
  END_ENTITY;

  ENTITY Bus_structural_definition_armx
  	(* CONNOTATIONAL *) SUBTYPE OF (bus_structural_definition);
      composition : SET[1:?] OF Bus_element_link_armx;
    DERIVE  
     	bus_name    : STRING := product_definition.formation.of_product.name;  
     	SELF\product_definition.frame_of_reference : product_definition_context := ?;
     	SELF\product_definition.description : text := ?;
     	SELF\product_definition.formation : product_definition_formation := ?;
     	SELF\product_definition.id : identifier := ?;
    INVERSE
      external_bus_access : SET[0:1] OF functional_unit_network_terminal_definition_bus_assignment FOR connected_bus;
    UNIQUE
      UR1 : bus_name;
    WHERE
      WR1 : consistent_bus_structural_definition(composition);
  END_ENTITY;

  ENTITY Functional_unit_armx
  	(* CONNOTATIONAL *) SUBTYPE OF(Definition_based_product_occurrence, component_functional_unit);
      SELF\Definition_based_product_occurrence.derived_from RENAMED definition   : Functional_unit_definition;
      SELF\Product_definition.id RENAMED reference_designation : STRING; 
      functional_property   : OPTIONAL SET[1:?] OF Parameter_assignment_override_armx;
    DERIVE  
		composed_network    : Functional_unit_network_definition := SELF\Definition_based_product_occurrence.occurrence_contexts[1].relating_product_definition;    
-- This is already done in supertype		
--		SELF\Product_view_definition.defined_version : product_definition_formation := SELF\Definition_based_product_occurrence.derived_from.defined_version;
    INVERSE
      access_mechanisms : SET[1:?] OF functional_unit_terminal FOR accessed_functional_unit;
    UNIQUE
      UR1 : reference_designation, composed_network;
  WHERE
      WR1 : SIZEOF(SELF\Definition_based_product_occurrence.occurrence_contexts) = 1;
      WR2 : EXISTS(composed_network);      
  END_ENTITY;

  ENTITY Functional_unit_network_definition
    (* CONNOTATIONAL *) SUBTYPE OF (Functional_unit_definition);
      usage_view : Functional_unit_usage_view;
  END_ENTITY;

  ENTITY Functional_unit_network_node_definition
  	(* CONNOTATIONAL *) SUBTYPE OF (Product_view_definition, network_node_definition);
      associated_functional_unit_definition : Functional_unit_network_definition;
      SELF\Product_view_definition.additional_characterization RENAMED functional_unit_network_node_name     : STRING; --ee_name;
    DERIVE
      SELF\Product_view_definition.defined_version : Functional_version := associated_functional_unit_definition.defined_version;
      valid_conservative_node : LOGICAL := ( ( SIZEOF (USEDIN ( SELF ,
        'NETWORK_FUNCTIONAL_DESIGN_VIEW_ARM.BUS_ELEMENT_LINK.PRECEDENT_ELEMENT' ) )
        + SIZEOF ( USEDIN ( SELF ,
        'NETWORK_FUNCTIONAL_DESIGN_VIEW_ARM.BUS_ELEMENT_LINK.SUBSEQUENT_ELEMENT' )
        ) + SIZEOF (USEDIN ( SELF ,
        'NETWORK_FUNCTIONAL_DESIGN_VIEW_ARM.FUNCTIONAL_UNIT_TERMINAL_NODE_ASSIGNMENT.COMPOSED_NODE'
        )) + SIZEOF ( external_node_access ) ) > 1 );
      SELF\product_definition.frame_of_reference : product_definition_context := ?;
      SELF\product_definition.description : text := ?;
      SELF\product_definition.id : identifier := ?;
    INVERSE
      external_node_access : SET[0:1] OF functional_unit_network_terminal_definition_node_assignment FOR composed_node;
    UNIQUE
      UR1 : functional_unit_network_node_name,
 associated_functional_unit_definition;
    WHERE
      WR1 : EXISTS(valid_conservative_node);
  END_ENTITY;

  ENTITY Functional_unit_network_terminal_definition_bus_assignment
  	(* CONNOTATIONAL *) SUBTYPE OF (property_definition_relationship);
      connected_bus      : Bus_structural_definition_armx;
      connected_terminal : Functional_unit_usage_view_terminal_definition;
    DERIVE
      SELF\property_definition_relationship.related_property_definition : property_definition := ?;
      SELF\property_definition_relationship.relating_property_definition : property_definition := ?;
      SELF\property_definition_relationship.description : text := ?;
      SELF\property_definition_relationship.name : label := ?;
  END_ENTITY;

  ENTITY Functional_unit_network_terminal_definition_node_assignment
  	(* CONNOTATIONAL *) SUBTYPE OF (property_definition_relationship);
      composed_node      : Functional_unit_network_node_definition;
      connected_terminal : Functional_unit_usage_view_terminal_definition;
    DERIVE
      SELF\property_definition_relationship.related_property_definition : property_definition := ?;
      SELF\property_definition_relationship.relating_property_definition : property_definition := ?;
      SELF\property_definition_relationship.description : text := ?;
      SELF\property_definition_relationship.name : label := ?;
  END_ENTITY;

  ENTITY Functional_unit_terminal
  	(* CONNOTATIONAL *) SUBTYPE OF (component_functional_terminal);
      accessed_functional_unit : Functional_unit_armx;
      definition               : Functional_unit_usage_view_terminal_definition;
    DERIVE
      SELF\shape_aspect.of_shape : product_definition_shape := ?;
      SELF\shape_aspect.description : text := ?;
      SELF\shape_aspect.product_definitional : LOGICAL := ?;
      SELF\shape_aspect.name : label := ?;
    INVERSE
      bus_assignment  : SET[0:1] OF functional_unit_terminal_bus_assignment FOR connected_terminal;
      node_assignment : SET[0:1] OF functional_unit_terminal_node_assignment FOR connected_terminal;
  END_ENTITY;

  ENTITY Functional_unit_terminal_bus_assignment
  	(* CONNOTATIONAL *) SUBTYPE OF (property_definition_relationship);
      connected_bus      : Bus_structural_definition_armx;
      connected_terminal : Functional_unit_terminal;
    DERIVE
      SELF\property_definition_relationship.related_property_definition : property_definition := ?;
      SELF\property_definition_relationship.relating_property_definition : property_definition := ?;
      SELF\property_definition_relationship.description : text := ?;
      SELF\property_definition_relationship.name : label := ?;
  END_ENTITY;

  ENTITY Functional_unit_terminal_node_assignment
  	(* CONNOTATIONAL *) SUBTYPE OF (property_definition_relationship);
      composed_node      : Functional_unit_network_node_definition;
      connected_terminal : Functional_unit_terminal;
    DERIVE
      SELF\property_definition_relationship.related_property_definition : property_definition := ?;
      SELF\property_definition_relationship.relating_property_definition : property_definition := ?;
      SELF\property_definition_relationship.description : text := ?;
      SELF\property_definition_relationship.name : label := ?;
  END_ENTITY;

  FUNCTION consistent_bus_structural_definition(
    input : SET OF Bus_element_link_armx
  ) : BOOLEAN;

    LOCAL
      vertex        : SET OF bus_structural_definition_or_node := [];
      edge          : INTEGER := SIZEOF(input);
      vc            : INTEGER := 0;
      vertex_degree : INTEGER := 0;
    END_LOCAL;

    REPEAT i := 1 TO SIZEOF(input) BY 1;
      vertex := vertex + input[i].precedent_element;
      vertex := vertex + input[i].subsequent_element;
    END_REPEAT;
    vc := SIZEOF(vertex);
    IF (vc <> (edge + 1)) THEN
      RETURN(FALSE);
    END_IF;
    REPEAT i := 1 TO vc BY 1;
      vertex_degree := 0;
      REPEAT j := 1 TO SIZEOF(input) BY 1;
        IF input[j].precedent_element = vertex[i] THEN
          vertex_degree := vertex_degree + 1;
        END_IF;
        IF input[j].subsequent_element = vertex[i] THEN
          vertex_degree := vertex_degree + 1;
        END_IF;
      END_REPEAT;
      IF (vertex_degree > 2) THEN
        RETURN(FALSE);
      END_IF;
    END_REPEAT;
    RETURN(TRUE);
  END_FUNCTION;


END_SCHEMA;

