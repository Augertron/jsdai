(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*
 Derived from ISO TC184/SC4/WG12 N3043 - ISO/TS 10303-1243 Experience - EXPRESS ARM
 by LKSoftWare GmbH for implementation purpose within IDA-STEP(TM)
*) 


SCHEMA Experience_xim;

USE FROM Activity_xim;    -- ISO/TS 10303-1047

USE FROM Activity_as_realized_xim;    -- ISO/TS 10303-1259

USE FROM Activity_method_xim;    -- ISO/TS 10303-1049

USE FROM Classification_assignment_xim;    -- ISO/TS 10303-1114

USE FROM Date_time_assignment_xim;    -- ISO/TS 10303-1014

USE FROM Person_organization_xim;    -- ISO/TS 10303-1011

USE FROM Property_assignment_xim;    -- ISO/TS 10303-1030

USE FROM Required_resource_xim;    -- ISO/TS 10303-1267

USE FROM Resource_as_realized_xim;    -- ISO/TS 10303-1269

USE FROM Experience_mim;

USE FROM management_resources_schema(experience_role);

TYPE defined_activities = EXTENSIBLE GENERIC_ENTITY SELECT
   (Activity_actual, 
    Resource_as_realized);
END_TYPE; 

TYPE defined_methods = EXTENSIBLE GENERIC_ENTITY SELECT
   (Activity, 
    Action_method, 
    Required_resource);
END_TYPE; 

TYPE experience_classified_select = EXTENSIBLE GENERIC_ENTITY SELECT BASED_ON classification_item WITH 
   (Experience_type_armx);
END_TYPE; 

TYPE experience_instance_property_assignment_select = SELECT BASED_ON property_assignment_select WITH 
   (Experience_instance);
END_TYPE; 

TYPE person_or_organization_or_person_in_organization_select = EXTENSIBLE GENERIC_ENTITY SELECT
   (Organization, 
    Person, 
    person_and_organization);
END_TYPE; 

ENTITY Experience_gained
	(* CONNOTATIONAL *) SUBTYPE OF (applied_experience_assignment);
  SELF\experience_assignment.assigned_experience RENAMED experience_of : Experience_instance;
  gained_by      : person_or_organization_or_person_in_organization_select;
  role_x : OPTIONAL STRING;
 DERIVE
  (* Overlaps with role *)
  SELF\experience_assignment.role : experience_role :=?;
  (* Overlaps with gained_by *) -- SEDS
  -- SELF\applied_experience_type_assignment.items : SET [1:?] OF experience_type_item :=?;
END_ENTITY;

ENTITY Experience_instance
	(* CONNOTATIONAL *) SUBTYPE OF (experience);
	(* attribute is accessable from supertype
  description : OPTIONAL STRING; *)
  is_defined_by : Experience_type_armx;
  consists_of : OPTIONAL defined_activities;
END_ENTITY;

ENTITY Experience_type_armx
	(* CONNOTATIONAL *) SUBTYPE OF (experience_type);
	(* attributes are accessable from supertype
  name : STRING;
  description : OPTIONAL STRING; *)
  consists_of : OPTIONAL defined_methods;
END_ENTITY;

END_SCHEMA;  -- Experience_xim
