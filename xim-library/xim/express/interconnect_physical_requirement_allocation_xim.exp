(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*
   Derived from ISO TC184/SC4/WG12 N - ISO/CD-TS 10303-xxxx Interconnect physical requirement allocation - EXPRESS ARM
   by LKSoftWare GmbH for implementation purpose within IDA-STEP(TM)
*)

 SCHEMA Interconnect_physical_requirement_allocation_xim;

USE FROM Requirement_view_definition_relationship_xim; -- ISO/TS 10303-1142

USE FROM Interconnect_physical_requirement_allocation_mim;

USE FROM Integral_shield_xim;

REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set);

  ENTITY Electrical_isolation_requirement
    SUBTYPE OF (Requirement_view_definition);
      effective_voltage_withstand_capacity_requirement : OPTIONAL Value_limit;
    DERIVE
      electrical_isolation_spacing_requirement         : SET[1:1] OF Predefined_requirement_view_definition_armx := 
        get_specific_requirement_type_for_primary_rvd_relationship(SELF, 'derived from', 
              'INTERCONNECT_PLACEMENT_REQUIREMENTS_XIM.LAYOUT_SPACING_REQUIREMENT_ARMX');
      SELF\Product_view_definition.additional_characterization: STRING := 'electrical isolation requirement';        
    WHERE
      WR1 : NOT EXISTS(effective_voltage_withstand_capacity_requirement) OR
             ((effective_voltage_withstand_capacity_requirement\Qualified_representation_item.qualifiers[1]\Type_qualifier.name in ['minimum'])
              AND
             ('VALUE_WITH_UNIT_EXTENSION_XIM.ELECTRIC_POTENTIAL_MEASURE_WITH_UNIT' IN TYPEOF(effective_voltage_withstand_capacity_requirement)));
      WR2 : 'INTERCONNECT_PLACEMENT_REQUIREMENTS_XIM.LAYOUT_SPACING_REQUIREMENT_ARMX' IN TYPEOF(electrical_isolation_spacing_requirement[1]);
      WR3 : NOT EXISTS(SELF\Product_view_definition.additional_characterization);
  END_ENTITY;

ENTITY Interconnect_shield_allocation_armx
    SUBTYPE OF (Requirement_assignment_armx, interconnect_shield_allocation);
      SELF\Requirement_assignment_armx.assigned_to : Integral_shield_armx;
      SELF\Requirement_assignment_armx.assigned_requirement RENAMED assigned_requirement_property  : Predefined_requirement_view_definition_armx;
    WHERE
     WR1 : assigned_requirement_property\Product_view_definition.initial_context\product_definition_context.frame_of_reference.application = 'electrical';      
  END_ENTITY;
		
  ENTITY Thermal_isolation_requirement
  	SUBTYPE OF (Requirement_view_definition);
    thermal_bar_width                        : OPTIONAL Length_tolerance_characteristic;
    number_of_bars                           : OPTIONAL INTEGER;
    effective_current_capacity_requirement   : OPTIONAL Value_limit;
    angular_orientation_requirement          : OPTIONAL Value_range_armx;
    effective_thermal_resistance_requirement : OPTIONAL Value_limit;
   DERIVE
    thermal_isolation_spacing_requirement    : SET[1:1] OF Predefined_requirement_view_definition_armx := 
            get_specific_requirement_type_for_primary_rvd_relationship(SELF, 'derived from', 'INTERCONNECT_PLACEMENT_REQUIREMENTS_XIM.LAYOUT_SPACING_REQUIREMENT_ARMX');
    SELF\Product_view_definition.additional_characterization: STRING := 'thermal isolation requirement';            
   WHERE
      WR1 : NOT EXISTS(SELF\Product_view_definition.additional_characterization);
      WR2 : NOT(EXISTS(thermal_bar_width) XOR EXISTS(number_of_bars));
      WR3 : 'INTERCONNECT_PLACEMENT_REQUIREMENTS_XIM.LAYOUT_SPACING_REQUIREMENT_ARMX' IN TYPEOF(thermal_isolation_spacing_requirement[1]);
      WR4 : NOT EXISTS(effective_current_capacity_requirement) OR
              ((effective_current_capacity_requirement\Qualified_representation_item.qualifiers[1]\Type_qualifier.name in ['minimum'])
              AND
              ('VALUE_WITH_UNIT_EXTENSION_XIM.ELECTRIC_CURRENT_MEASURE_WITH_UNIT' IN TYPEOF(effective_current_capacity_requirement)));
      WR5 : NOT EXISTS(angular_orientation_requirement) OR
              ('VALUE_WITH_UNIT_EXTENSION_XIM.ANGLE_MEASURE_WITH_UNIT' IN TYPEOF(angular_orientation_requirement));
      WR6 : NOT EXISTS(effective_thermal_resistance_requirement) OR
              ((effective_thermal_resistance_requirement\Qualified_representation_item.qualifiers[1]\Type_qualifier.name in ['minimum'])
              AND
              ('VALUE_WITH_UNIT_EXTENSION_XIM.THERMAL_RESISTANCE_MEASURE_WITH_UNIT' IN TYPEOF(effective_thermal_resistance_requirement)));
  END_ENTITY;

FUNCTION get_specific_requirement_type_for_primary_rvd_relationship(
	input : Requirement_view_definition;
	id : STRING;
    reqType : STRING
) : SET OF Predefined_requirement_view_definition_armx; 

LOCAL
    rvdr : SET[0:?] OF Requirement_view_definition_relationship_armx := [];
    rdp : SET[0:?] OF Predefined_requirement_view_definition_armx := [];  --this gives us access to the information base
END_LOCAL;
	rvdr := bag_to_set(QUERY(rvdre <* USEDIN (input, 'REQUIREMENT_DECOMPOSITION_XIM.'+ 'REQUIREMENT_VIEW_DEFINITION_RELATIONSHIP_ARMX.PRIMARY')|
	                           ((rvdre.relation_type = id) AND (reqType IN TYPEOF(rvdre.secondary)))
                       ));
	-- iterate over rvdr
	REPEAT i := 1 to SIZEOF(rvdr) by 1;
		rdp := rdp + rvdr[i].secondary;
	END_REPEAT;

	RETURN(rdp);
END_FUNCTION;

 END_SCHEMA;

