(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping part_feature_grouping(Part_feature_grouping_arm, Part_feature_grouping_mim);*)


entity_mapping Part_array_feature(Part_array_feature, composite_array_shape_aspect);

mapping_constraints;
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect

end_mapping_constraints;

end_entity_mapping;

entity_mapping Part_feature(Part_feature, 
			(/SUBTYPE(Part_group_feature)/)
		)
extended;

end_entity_mapping;

entity_mapping Part_feature_placement_link(Part_feature_placement_link, composite_array_shape_aspect_link);

mapping_constraints;
{[composite_array_shape_aspect_link <=
shape_aspect]
[composite_array_shape_aspect_link <=
shape_aspect_relationship]}

end_mapping_constraints;

attribute_mapping precedent_element(precedent_element, $PATH, Part_feature);
composite_array_shape_aspect_link <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect

end_attribute_mapping;

attribute_mapping subsequent_element(subsequent_element, $PATH, Part_feature);
composite_array_shape_aspect_link <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect

end_attribute_mapping;

end_entity_mapping;

entity_mapping Part_group_feature(Part_group_feature, composite_shape_aspect);

mapping_constraints;
{composite_shape_aspect <=
shape_aspect
shape_aspect.description = 'part group feature'}

end_mapping_constraints;

end_entity_mapping;

entity_mapping Part_linear_array_feature(Part_linear_array_feature, linear_composite_array_shape_aspect);

mapping_constraints;
linear_composite_array_shape_aspect <=
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect

end_mapping_constraints;

attribute_mapping element(element, $PATH, Part_feature_placement_link);
linear_composite_array_shape_aspect <=
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect <-
shape_aspect_relationship.relating_shape_aspect
shape_aspect_relationship
{shape_aspect_relationship
shape_aspect_relationship.name = 'element'}
shape_aspect_relationship.related_shape_aspect ->
shape_aspect =>
composite_array_shape_aspect_link

end_attribute_mapping;

attribute_mapping initial_node_positive_x_displacement(initial_node_positive_x_displacement, $PATH, length_measure_with_unit);
linear_composite_array_shape_aspect <=
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect
shape_definition = shape_aspect
characterized_definition = shape_definition
characterized_definition <-
property_definition.definition
property_definition
{property_definition
property_definition.name = 'linear array composite properties'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation
{[representation
representation.name = 'linear array properties']
[representation
representation.context_of_items ->
representation_context
[representation_context
representation_context =>
global_unit_assigned_context]
[representation_context
representation_context =>
global_uncertainty_assigned_context]
[representation_context
representation_context =>
parametric_representation_context]]
[representation
representation.context_of_items ->
representation_context
representation_context.context_type
representation_context.context_type = 'array parametric context']}
representation.items[i] ->
representation_item
{representation_item.name = 'initial element positive x displacement'}
representation_item =>
measure_representation_item <=
measure_with_unit
{measure_with_unit =>
length_measure_with_unit}
measure_with_unit.value_component

end_attribute_mapping;

attribute_mapping location_uncertainty(location_uncertainty, $PATH, length_measure_with_unit);
linear_composite_array_shape_aspect <=
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect
shape_definition = shape_aspect
characterized_definition = shape_definition
characterized_definition <-
property_definition.definition
property_definition
{property_definition
property_definition.name = 'linear array composite properties'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation
{representation
representation.name = 'linear array properties'}
representation.context_of_items ->
representation_context
representation_context =>
global_uncertainty_assigned_context
global_uncertainty_assigned_context.uncertainty[i] ->
uncertainty_measure_with_unit <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

attribute_mapping terminus_node_positive_x_displacement(terminus_node_positive_x_displacement, $PATH, length_measure_with_unit);
linear_composite_array_shape_aspect <=
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect
shape_definition = shape_aspect
characterized_definition = shape_definition
characterized_definition <-
property_definition.definition
property_definition
{property_definition
property_definition.name = 'linear array composite properties'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation
{[representation
representation.name = 'linear array properties']
[representation
representation.context_of_items ->
representation_context
[representation_context
representation_context =>
global_unit_assigned_context]
[representation_context
representation_context =>
global_uncertainty_assigned_context]
[representation_context
representation_context =>
parametric_representation_context]]
[representation
representation.context_of_items ->
representation_context
representation_context.context_type
representation_context.context_type = 'array parametric context']}
representation.items[i] ->
representation_item
{representation_item.name = 'terminus element positive x displacement'}
representation_item =>
measure_representation_item <=
measure_with_unit
{measure_with_unit =>
length_measure_with_unit}
measure_with_unit.value_component

end_attribute_mapping;

end_entity_mapping;

entity_mapping Part_linear_array_feature_link(Part_linear_array_feature_link, linear_composite_array_shape_aspect_link);

mapping_constraints;
{[linear_composite_array_shape_aspect_link <=
shape_aspect]
[linear_composite_array_shape_aspect_link <=
shape_aspect_relationship]}

end_mapping_constraints;

attribute_mapping precedent_element(precedent_element, $PATH, Part_linear_array_feature);
linear_composite_array_shape_aspect_link <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
composite_shape_aspect =>
composite_array_shape_aspect =>
linear_composite_array_shape_aspect

end_attribute_mapping;

attribute_mapping subsequent_element(subsequent_element, $PATH, Part_linear_array_feature);
linear_composite_array_shape_aspect_link <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect =>
composite_shape_aspect =>
composite_array_shape_aspect =>
linear_composite_array_shape_aspect

end_attribute_mapping;

end_entity_mapping;

entity_mapping Part_rectangular_array_feature(Part_rectangular_array_feature, rectangular_composite_array_shape_aspect);

mapping_constraints;
rectangular_composite_array_shape_aspect <=
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect

end_mapping_constraints;

attribute_mapping element(element, $PATH, Part_linear_array_feature_link);
rectangular_composite_array_shape_aspect <=
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect <-
shape_aspect_relationship.relating_shape_aspect
shape_aspect_relationship
{shape_aspect_relationship
shape_aspect_relationship.name = 'element'}
shape_aspect_relationship.related_shape_aspect ->
shape_aspect =>
linear_composite_array_shape_aspect_link

end_attribute_mapping;

attribute_mapping initial_row_positive_y_displacement(initial_row_positive_y_displacement, $PATH, length_measure_with_unit);
rectangular_composite_array_shape_aspect <=
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect
shape_definition = shape_aspect
characterized_definition = shape_definition
characterized_definition <-
property_definition.definition
property_definition
{property_definition
property_definition.name = 'rectangular array composite properties'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation
{[representation
representation.name = 'rectangular array properties']
[representation
representation.context_of_items ->
representation_context
[representation_context
representation_context =>
global_unit_assigned_context]
[representation_context
representation_context =>
global_uncertainty_assigned_context]
[representation_context
representation_context =>
parametric_representation_context]]
[representation
representation.context_of_items ->
representation_context
representation_context.context_type
representation_context.context_type = 'array parametric context']}
representation.items[i] ->
representation_item
{representation_item
representation_item.name = 'initial row positive y displacement'}
representation_item =>
measure_representation_item <=
measure_with_unit
{measure_with_unit =>
length_measure_with_unit}
measure_with_unit.value_component

end_attribute_mapping;

attribute_mapping location_uncertainty(location_uncertainty, $PATH, length_measure_with_unit);
rectangular_composite_array_shape_aspect <=
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect
shape_definition = shape_aspect
characterized_definition = shape_definition
characterized_definition <-
property_definition.definition
property_definition
{property_definition
property_definition.name = 'rectangular array composite properties'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation
{representation
representation.name = 'rectangular array properties'}
representation.context_of_items ->
representation_context
representation_context =>
global_uncertainty_assigned_context
global_uncertainty_assigned_context.uncertainty[i] ->
uncertainty_measure_with_unit <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

attribute_mapping terminus_row_positive_y_displacement(terminus_row_positive_y_displacement, $PATH, length_measure_with_unit);
rectangular_composite_array_shape_aspect <=
composite_array_shape_aspect <=
composite_shape_aspect <=
shape_aspect
shape_definition = shape_aspect
characterized_definition = shape_definition
characterized_definition <-
property_definition.definition
property_definition
{property_definition
property_definition.name = 'rectangular array composite properties'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation
{[representation
representation.name = 'rectangular array properties']
[representation
representation.context_of_items ->
representation_context
[representation_context
representation_context =>
global_unit_assigned_context]
[representation_context
representation_context =>
global_uncertainty_assigned_context]
[representation_context
representation_context =>
parametric_representation_context]]
[representation
representation.context_of_items ->
representation_context
representation_context.context_type
representation_context.context_type = 'array parametric context']}
representation.items[i] ->
representation_item
{representation_item
representation_item.name = 'terminus row positive y displacement'}
representation_item =>
measure_representation_item <=
measure_with_unit
{measure_with_unit =>
length_measure_with_unit}
measure_with_unit.value_component

end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
