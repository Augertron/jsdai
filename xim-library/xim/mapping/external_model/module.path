(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping external_model(External_model_arm, External_model_mim);*)

uof_mapping External_model(External_model);

entity_mapping External_geometric_model(External_geometric_model, shape_representation);

mapping_constraints;

	shape_representation <= representation
{representation.context_of_items -> representation_context
representation_context.context_type = 'external'}
				
end_mapping_constraints;

attribute_mapping items(items, $PATH, axis2_placement);

	shape_representation <= representation
	representation.items[1] -> representation_item
	representation_item => geometric_representation_item
	geometric_representation_item => placement
	placement => axis2_placement_3d
					
end_attribute_mapping;

attribute_mapping external_file(external_file, $PATH, Digital_file);

shape_representation <= representation
representation <- property_definition_representation.used_representation
property_definition_representation.definition -> represented_definition
represented_definition = property_definition
{property_definition.name = 'external definition'}
property_definition.definition -> characterized_definition
characterized_definition = characterized_object
characterized_object => document_file
{document_file <= document
document <- document_representation_type.represented_document
document_representation_type.name = 'digital'}
				
end_attribute_mapping;

end_entity_mapping;
end_uof_mapping;

(*end_schema_mapping;*)
