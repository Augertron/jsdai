(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping constructive_solid_geometry_2d(Constructive_solid_geometry_2d_arm, Constructive_solid_geometry_2d_mim);*)
(*
uof_mapping Constructive_solid_geometry_2d(Constructive_solid_geometry_2d);
end_uof_mapping; *)


entity_mapping Closed_curve_style_parameters_armx(Closed_curve_style_parameters_armx, closed_curve_style_parameters);

mapping_constraints;
closed_curve_style_parameters <=
curve_style_parameters_representation <=
representation
[representation
representation.context_of_items ->
representation_context
[representation_context
representation_context =>
global_uncertainty_assigned_context]
[representation_context
representation_context =>
parametric_representation_context]]
[representation
representation.context_of_items ->
representation_context
representation_context.context_type
representation_context.context_type = 'curve style parametric context']

end_mapping_constraints;

end_entity_mapping;

entity_mapping Curve_style_parameters(Curve_style_parameters, curve_style_parameters_representation);

mapping_constraints;
curve_style_parameters_representation <=
representation
[representation
representation.context_of_items ->
representation_context
[representation_context
representation_context =>
global_uncertainty_assigned_context]
[representation_context
representation_context =>
parametric_representation_context]]
[representation
representation.context_of_items ->
representation_context
representation_context.context_type
representation_context.context_type = 'curve style parametric context']

end_mapping_constraints;

attribute_mapping name_x(name_x, descriptive_representation_item.description);
curve_style_parameters_representation <=
representation
representation.items[i] ->
representation_item
{representation_item.name = 'curve style name'}
representation_item =>
descriptive_representation_item
descriptive_representation_item.description

end_attribute_mapping;

attribute_mapping corner_style(corner_style, $PATH);
curve_style_parameters_representation <=
representation
representation.items[i] ->
representation_item
{{representation_item.name = 'corner style'}
representation_item =>
descriptive_representation_item
(descriptive_representation_item.description = 'chord 2 extend')
(descriptive_representation_item.description = 'extend')
(descriptive_representation_item.description = 'round')
(descriptive_representation_item.description = 'truncate')
}

end_attribute_mapping;

attribute_mapping curve_width(curve_width, $PATH, length_measure_with_unit);
curve_style_parameters_representation <=
representation
representation.items[i] ->
representation_item
{representation_item
representation_item.name = 'curve width'}
representation_item =>
measure_representation_item <= 
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

attribute_mapping width_uncertainty(width_uncertainty, $PATH, length_measure_with_unit);
curve_style_parameters_representation <=
representation
representation.context_of_items ->
representation_context
representation_context =>
global_uncertainty_assigned_context
global_uncertainty_assigned_context.uncertainty[i] ->
uncertainty_measure_with_unit <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

end_entity_mapping;

entity_mapping Curve_style_parameters_with_ends_armx(Curve_style_parameters_with_ends_armx, curve_style_parameters_with_ends);

mapping_constraints;
curve_style_parameters_with_ends <=
curve_style_parameters_representation <=
representation
[representation
representation.context_of_items ->
representation_context
[representation_context
representation_context =>
global_uncertainty_assigned_context]
[representation_context
representation_context =>
parametric_representation_context]]
[representation
representation.context_of_items ->
representation_context
representation_context.context_type
representation_context.context_type = 'curve style parametric context']

end_mapping_constraints;

attribute_mapping end_extension(end_extension, $PATH);
curve_style_parameters_with_ends <=
curve_style_parameters_representation <=
representation
representation.items[i] ->
representation_item
{{representation_item.name = 'end extension'}
representation_item =>
descriptive_representation_item
(descriptive_representation_item.description = 'extend')
(descriptive_representation_item.description = 'truncate')}

end_attribute_mapping;

attribute_mapping end_style(end_style, $PATH);
curve_style_parameters_with_ends <=
curve_style_parameters_representation <=
representation
representation.items[i] ->
representation_item
{{representation_item.name = 'end style'}
representation_item =>
descriptive_representation_item
(descriptive_representation_item.description = 'round')
(descriptive_representation_item.description = 'square')}

end_attribute_mapping;

end_entity_mapping;

entity_mapping Path_area_with_parameters_armx(Path_area_with_parameters_armx, path_area_with_parameters);

mapping_constraints;
{path_area_with_parameters <=
mapped_item <=
representation_item}

end_mapping_constraints;

attribute_mapping parameters(parameters, $PATH, Curve_style_parameters);
path_area_with_parameters <=
mapped_item
mapped_item.mapping_source ->
representation_map
representation_map.mapped_representation ->
representation =>
curve_style_parameters_representation
end_attribute_mapping;

attribute_mapping centreline(centreline, $PATH, Curve);
path_area_with_parameters <=
mapped_item                
mapped_item.mapping_target ->
representation_item => 
geometric_representation_item => 
curve
end_attribute_mapping;

end_entity_mapping;



(*end_schema_mapping;*)
