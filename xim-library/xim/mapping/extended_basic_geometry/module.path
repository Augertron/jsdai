(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping extended_elemental_geometric_shape(Extended_elemental_geometric_shape_arm, Extended_elemental_geometric_shape_mim);*)

(* Take from AIM
entity_mapping Axis_placement_2d(Axis_placement_2d, axis2_placement_2d);

mapping_constraints;

end_mapping_constraints;

end_entity_mapping;

entity_mapping Axis_placement_3d(Axis_placement_3d, axis2_placement_3d);

mapping_constraints;

end_mapping_constraints;

end_entity_mapping;
*)
entity_mapping Definitional_representation_relationship(Definitional_representation_relationship, definitional_representation_relationship);

mapping_constraints;

end_mapping_constraints;

end_entity_mapping;
(* AIM entity is taken instead
entity_mapping Detailed_geometric_model_element_relationship(Detailed_geometric_model_element_relationship, representation_item_relationship);

mapping_constraints;
representation_item_relationship
			
end_mapping_constraints;

attribute_mapping item_1(item_1, $PATH, geometric_representation_item);

					representation_item_relationship.relating_representation_item ->
					representation_item
				
end_attribute_mapping;

attribute_mapping item_2(item_2, $PATH, geometric_representation_item);

					representation_item_relationship.related_representation_item ->
					representation_item
				
end_attribute_mapping;

end_entity_mapping;
*)
(*
entity_mapping Geometric_model_relationship(Geometric_model_relationship, (shape_representation_relationship)(mapped_item));

mapping_constraints;
	
				(shape_representation_relationship)
				(mapped_item)				
				

			
end_mapping_constraints;

attribute_mapping rep_1(rep_1, $PATH, Shape_representation);
	(shape_representation_relationship <= 
					representation_relationship 
					representation_relationship.rep_1 -> 
					representation 
					{representation => 
					shape_representation}) 
					(mapped_item 
					mapped_item.mapping_source -> 
					representation_map 
					{representation_map 
					representation_map.mapping_origin -> 
					representation_item 
					{representation_item 
					representation_item.name = 'origin'} 
					representation_item => 
					geometric_representation_item => 
					placement 
					(placement => 
					axis2_placement_2d) 
					(placement => 
					axis2_placement_3d)} 
					representation_map.mapped_representation -> 
					representation)
				
end_attribute_mapping;

attribute_mapping rep_2(rep_2, $PATH, Shape_representation);
(shape_representation_relationship <= 
					representation_relationship 
					representation_relationship.rep_2 -> 
					{representation 
					representation => 
					shape_representation}) 
					(mapped_item <= 
					representation_item <- 
					representation.items[i] 
					representation => 
					shape_representation)
				
end_attribute_mapping;

end_entity_mapping;
*)

entity_mapping Vector(Vector, vector);

mapping_constraints;

end_mapping_constraints;

attribute_mapping orientation(orientation, vector.orientation, Direction);

end_attribute_mapping;

attribute_mapping magnitude(magnitude, vector.magnitude, Length_measure);

end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
