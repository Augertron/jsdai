(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping security_classification(Security_classification_arm, Security_classification_mim);*)

uof_mapping Security_classification(Security_classification);

entity_mapping Security_classification(Security_classification, security_classification);

attribute_mapping classification_level(classification_level, security_classification_level.name);
security_classification
			 					security_classification.security_level ->
								security_classification_level
								security_classification_level.name
end_attribute_mapping;

attribute_mapping description(description, security_classification.purpose);

end_attribute_mapping;

end_entity_mapping;

entity_mapping Security_classification_assignment(Security_classification_assignment, applied_security_classification_assignment);

mapping_constraints;

		 	 applied_security_classification_assignment <=
		   security_classification_assignment
		 
end_mapping_constraints;

attribute_mapping classification(classification, $PATH, Security_classification);

			   applied_security_classification_assignment <=
		     security_classification_assignment
			   security_classification_assignment.assigned_security_classification ->
				 security_classification
			 
end_attribute_mapping;

attribute_mapping items(items, $PATH, security_classification_item);

			   applied_security_classification_assignment.items [i] ->
		     security_classification_item
			 
end_attribute_mapping;

end_entity_mapping;
end_uof_mapping;

(*end_schema_mapping;*)
