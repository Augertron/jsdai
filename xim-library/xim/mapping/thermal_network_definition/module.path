(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping thermal_network_definition(Thermal_network_definition_arm, Thermal_network_definition_mim);*)


entity_mapping Thermal_network_definition(Thermal_network_definition, thermal_network);

mapping_constraints;
thermal_network <=
functional_unit <=
product_definition
{product_definition <-
product_definition_context_association.definition
product_definition_context_association
{product_definition_context_association.role ->
product_definition_context_role
product_definition_context_role.name = 'part definition type'}
product_definition_context_association.frame_of_reference ->
product_definition_context <=
application_context_element
application_context_element.name = 'functional network design'}

end_mapping_constraints;

end_entity_mapping;

entity_mapping Thermal_functional_unit_network_node_definition(Thermal_functional_unit_network_node_definition, thermal_network_node_definition);

mapping_constraints;
	thermal_network_node_definition <=
	network_node_definition <=
	product_definition
	{product_definition <-
	product_definition_context_association.definition
	product_definition_context_association
	{product_definition_context_association.role ->
	product_definition_context_role
	product_definition_context_role.name = 'part definition type'}
	product_definition_context_association.frame_of_reference ->
	product_definition_context <=
	application_context_element
	application_context_element.name = 'functional network design'}
end_mapping_constraints;

attribute_mapping associated_functional_unit_definition(associated_functional_unit_definition, $PATH, Thermal_network_definition);
	thermal_network_node_definition <=
	network_node_definition <=
	product_definition <-
	product_definition_relationship.related_product_definition
	product_definition_relationship
	{product_definition_relationship
	product_definition_relationship.name = 'functional unit network node'}
	product_definition_relationship.relating_product_definition ->
	{product_definition <-
	product_definition_context_association.definition
	product_definition_context_association
	{product_definition_context_association.role ->
	product_definition_context_role
	product_definition_context_role.name = 'part definition type'}
	product_definition_context_association.frame_of_reference ->
	product_definition_context <=
	application_context_element
	application_context_element.name = 'functional network design'}
	product_definition =>
	functional_unit =>
	thermal_network
end_attribute_mapping;

attribute_mapping location(location, $PATH, cartesian_point);
	thermal_network_node_definition <=
	network_node_definition <=
	product_definition
	characterized_product_definition = product_definition
	characterized_product_definition
	characterized_definition = characterized_product_definition
	characterized_definition <-
	property_definition.definition
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	{[representation =>
	shape_representation]
	[representation
	representation.name = 'location']}
	representation
	representation.items[i] ->
	representation_item =>
	geometric_representation_item
	{geometric_representation_item
	geometric_representation_item.dim = 2}
	geometric_representation_item =>
	point =>
	cartesian_point
end_attribute_mapping;

attribute_mapping location(location, $PATH, Component_feature_armx);
	thermal_network_node_definition <=
	network_node_definition <=
	product_definition
	characterized_product_definition = product_definition
	characterized_product_definition
	characterized_definition = characterized_product_definition
	characterized_definition <-
	property_definition.definition
	property_definition <-
	property_definition_relationship.related_property_definition
	{property_definition_relationship
	property_definition_relationship.name = 'reference feature'}
	property_definition_relationship.relating_property_definition ->
	property_definition.definition ->
	characterized_definition = shape_definition
	shape_definition = shape_aspect
	shape_aspect =>
	component_feature
end_attribute_mapping;

attribute_mapping location(location, $PATH, Part_feature);
	thermal_network_node_definition <=
	network_node_definition <=
	product_definition
	characterized_product_definition = product_definition
	characterized_product_definition
	characterized_definition = characterized_product_definition
	characterized_definition <-
	property_definition.definition
	property_definition <-
	property_definition_relationship.related_property_definition
	{property_definition_relationship
	property_definition_relationship.name = 'reference feature'}
	property_definition_relationship.relating_property_definition ->
	property_definition.definition ->
	characterized_definition = shape_definition
	shape_definition = shape_aspect
	shape_aspect
end_attribute_mapping;

attribute_mapping location(location, $PATH, Non_feature_shape_element);
	thermal_network_node_definition <=
	network_node_definition <=
	product_definition
	characterized_product_definition = product_definition
	characterized_product_definition
	characterized_definition = characterized_product_definition
	characterized_definition <-
	property_definition.definition
	property_definition <-
	property_definition_relationship.related_property_definition
	{property_definition_relationship
	property_definition_relationship.name = 'reference feature'}
	property_definition_relationship.relating_property_definition ->
	property_definition.definition ->
	characterized_definition = shape_definition
	shape_definition = shape_aspect
	shape_aspect
	{shape_aspect
	shape_aspect.product_definitional = .FALSE.}
end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
