(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping packaged_connector_model(Packaged_connector_model_arm, Packaged_connector_model_mim);*)

entity_mapping Mating_connector_relationship(Mating_connector_relationship, product_definition_relationship);

mapping_constraints;
	product_definition_relationship
	{product_definition_relationship
	product_definition_relationship.name = 'mating connector relationship' }
end_mapping_constraints;



attribute_mapping relating_view(relating_view, $PATH, Packaged_part_armx);
	product_definition_relationship.relating_product_definition -> product_definition  
	product_definition => 
	physical_unit =>
	packaged_part
end_attribute_mapping;

attribute_mapping related_view(related_view, $PATH, Packaged_part_armx);
 	product_definition_relationship.related_product_definition -> product_definition  
	product_definition => 
	physical_unit =>
	packaged_part
end_attribute_mapping;

end_entity_mapping;

entity_mapping Packaged_connector_armx(Packaged_connector_armx, packaged_connector);

mapping_constraints;
packaged_connector <=
packaged_part <=
physical_unit <=
product_definition

end_mapping_constraints;

end_entity_mapping;

entity_mapping Packaged_connector_terminal_relationship_armx(Packaged_connector_terminal_relationship_armx, packaged_connector_terminal_relationship);

mapping_constraints;
packaged_connector_terminal_relationship <=
[shape_aspect]
[shape_aspect_relationship]

end_mapping_constraints;

attribute_mapping connector(connector, $PATH, Packaged_connector);
packaged_connector_terminal_relationship <=
shape_aspect
shape_aspect.of_shape ->
product_definition_shape =>
physical_unit =>
packaged_part =>
packaged_connector

end_attribute_mapping;

attribute_mapping interface_terminal(interface_terminal, $PATH, Packaged_part_interface_terminal);
packaged_connector_terminal_relationship <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'interface terminal'}
shape_aspect =>
packaged_part_terminal

end_attribute_mapping;

attribute_mapping join_terminal(join_terminal, $PATH, Packaged_part_join_terminal);
packaged_connector_terminal_relationship <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
{shape_aspect
shape_aspect.description = 'join terminal'}
shape_aspect =>
packaged_part_terminal

end_attribute_mapping;

end_entity_mapping;

entity_mapping Packaged_part_interface_terminal(Packaged_part_interface_terminal, packaged_part_terminal);

mapping_constraints;
packaged_part_terminal <=
shape_aspect
{shape_aspect
shape_aspect.description = 'interface terminal'}

end_mapping_constraints;

end_entity_mapping;
(*end_schema_mapping;*)
