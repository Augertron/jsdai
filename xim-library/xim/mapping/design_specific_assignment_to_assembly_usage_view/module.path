(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping design_specific_assignment_to_assembly_usage_view(Design_specific_assignment_to_assembly_usage_view_arm, Design_specific_assignment_to_assembly_usage_view_mim);*)


entity_mapping Component_terminal_to_assembly_module_interface_terminal_assignment(Component_terminal_to_assembly_module_interface_terminal_assignment, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
[shape_aspect_relationship.name = 'component feature to physical usage assignment']
[shape_aspect_relationship.description = 'component terminal to assembly module interface terminal assignment']}

end_mapping_constraints;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Assembly_module_component_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'assembly module component terminal'}
shape_aspect =>
component_feature =>
component_terminal =>
physical_component_terminal

end_attribute_mapping;

attribute_mapping usage_view_terminal(usage_view_terminal, $PATH, Assembly_module_interface_terminal);
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
{shape_aspect
shape_aspect.of_shape ->
product_definition_shape <=
property_definition
{property_definition.name = 'assembly module'}}
shape_aspect =>
assembly_module_terminal =>
assembly_module_interface_terminal

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Physical_component_interface_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
(shape_aspect.description = 'interconnect component interface terminal')
(shape_aspect.description = 'packaged connector component interface terminal')}
shape_aspect =>
component_feature =>
physical_component_feature =>
physical_component_interface_terminal

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Interconnect_module_component_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'interconnect module component terminal'}
shape_aspect =>
component_feature =>
component_terminal =>
physical_component_terminal

end_attribute_mapping;

end_entity_mapping;

entity_mapping Component_terminal_to_pca_terminal_assignment(Component_terminal_to_pca_terminal_assignment, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
[shape_aspect_relationship.name = 'component feature to physical usage assignment']
[shape_aspect_relationship.description = 'component terminal to pca terminal assignment']}

end_mapping_constraints;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Assembly_module_component_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'assembly module component terminal'}
shape_aspect =>
component_feature =>
component_terminal =>
physical_component_terminal

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Physical_component_interface_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
(shape_aspect.description = 'interconnect component interface terminal')
(shape_aspect.description = 'packaged connector component interface terminal')}
shape_aspect =>
component_feature =>
physical_component_feature =>
physical_component_interface_terminal


end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Interconnect_module_component_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'interconnect module component terminal'}
shape_aspect =>
component_feature =>
component_terminal =>
physical_component_terminal

end_attribute_mapping;

attribute_mapping usage_view_terminal(usage_view_terminal, $PATH, Pca_terminal);
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
{shape_aspect
shape_aspect.description = 'pca terminal'}
shape_aspect =>
assembly_module_terminal

end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
