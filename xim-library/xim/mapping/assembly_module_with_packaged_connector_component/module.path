(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping assembly_module_with_packaged_connector_component(Assembly_module_with_packaged_connector_component_arm, Assembly_module_with_packaged_connector_component_mim);*)


entity_mapping Interface_mounted_join_armx(Interface_mounted_join_armx, interface_mounted_join);

mapping_constraints;
interface_mounted_join <=
[shape_aspect_relationship]
[shape_aspect]

end_mapping_constraints;

attribute_mapping connection_to_interconnect_module_component(connection_to_interconnect_module_component, $PATH, Packaged_connector_component_interface_terminal);
interface_mounted_join <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'packaged connector component interface terminal'}
shape_aspect =>
component_feature =>
physical_component_feature =>
physical_component_interface_terminal

end_attribute_mapping;

attribute_mapping access_to_interface_mounted_component(access_to_interface_mounted_component, $PATH, Component_terminal_armx);
interface_mounted_join <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
component_feature =>
component_terminal =>
physical_component_terminal

end_attribute_mapping;

end_entity_mapping;

entity_mapping Packaged_connector_component_armx(Packaged_connector_component_armx, packaged_connector_component);

mapping_constraints;
packaged_connector_component <=
packaged_component <=
physical_component <=
assembly_component <=
component_definition <=
product_definition

end_mapping_constraints;

attribute_mapping derived_from(derived_from, $PATH, Packaged_connector);
packaged_connector_component <=
packaged_component <=
physical_component <=
assembly_component <=
component_definition <=
product_definition <-
product_definition_relationship.related_product_definition
product_definition_relationship
{product_definition_relationship
product_definition_relationship.name = 'definition usage'}
product_definition_relationship.relating_product_definition ->
product_definition =>
physical_unit =>
packaged_part =>
packaged_connector

end_attribute_mapping;

end_entity_mapping;

entity_mapping Packaged_connector_component_interface_terminal(Packaged_connector_component_interface_terminal, physical_component_interface_terminal);

mapping_constraints;
physical_component_interface_terminal <=
physical_component_feature <=
component_feature <=
shape_aspect
{[shape_aspect.description = 'packaged connector component interface terminal']
[shape_aspect.product_definitional = .TRUE.]}

end_mapping_constraints;

attribute_mapping associated_component(associated_component, $PATH, Packaged_connector_component_armx);
physical_component_interface_terminal <=
physical_component_feature <=
component_feature <=
shape_aspect
shape_aspect.of_shape ->
product_definition_shape =>
assembly_component =>
physical_component =>
packaged_component =>
packaged_connector_component

end_attribute_mapping;

attribute_mapping definition(definition, $PATH, Packaged_part_interface_terminal);
physical_component_interface_terminal <=
physical_component_feature <=
component_feature <=
shape_aspect <-
shape_aspect_relationship.related_shape_aspect
{shape_aspect_relationship
shape_aspect_relationship.name = 'instantiated feature'}
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
{shape_aspect
shape_aspect.description = 'interface terminal'}
shape_aspect =>
packaged_part_terminal

end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
