(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping part_template_3d_shape(Part_template_3d_shape_arm, Part_template_3d_shape_mim);*)

entity_mapping Edge_segment_cross_section_armx(Edge_segment_cross_section_armx, edge_segment_cross_section);

mapping_constraints;
{edge_segment_cross_section <=
shape_definition_3d_intersection <=
[representation_relationship_with_transformation
representation_relationship_with_transformation
representation_relationship_with_transformation.transformation_operator ->
transformation
transformation = item_defined_transformation]
[shape_representation_relationship]
[representation]
[shape_representation_relationship <=
representation_relationship
representation_relationship.name = 'shape definition 3d intersection']}
{edge_segment_cross_section <=
shape_definition_3d_intersection <=
representation <- 
property_definition_representation.used_representation
property_definition_representation
property_definition_representation.definition ->
property_definition
{property_definition
property_definition.name = 'cross section'}
property_definition.definition ->
characterized_definition
characterized_definition = characterized_product_definition
characterized_product_definition
characterized_product_definition = product_definition
product_definition =>
part_template_definition =>
inter_stratum_feature_edge_segment_template}

end_mapping_constraints;

attribute_mapping surface_intersection_result(surface_intersection_result, $PATH, Edge_shape_model);
edge_segment_cross_section <=
shape_definition_3d_intersection <=
shape_representation_relationship <=
representation_relationship
representation_relationship.rep_1 ->
representation =>
shape_representation

end_attribute_mapping;

attribute_mapping projected_volume(projected_volume, $PATH, Part_template_3d_shape_model);
edge_segment_cross_section <=
shape_definition_3d_intersection <=
shape_representation_relationship <=
representation_relationship
representation_relationship.rep_2 ->
{[representation.name = '3d bound volume shape']
[representation.description = 'pt3dsm']
[representation.context_of_items ->
representation_context =>
geometric_representation_context
geometric_representation_context.coordinate_space_dimension = 3]}
representation =>
shape_representation

end_attribute_mapping;

end_entity_mapping;

entity_mapping Inter_stratum_feature_edge_segment_template_with_cross_section_armx(Inter_stratum_feature_edge_segment_template_with_cross_section_armx, inter_stratum_feature_edge_segment_template_with_cross_section);

mapping_constraints;
inter_stratum_feature_edge_segment_template_with_cross_section <=
[inter_stratum_feature_edge_segment_template <=
part_template_definition]
[inter_stratum_feature_edge_segment_template <=
shape_aspect_relationship]

end_mapping_constraints;

attribute_mapping cross_section(cross_section, $PATH, Edge_segment_cross_section_armx);
inter_stratum_feature_edge_segment_template_with_cross_section <=
inter_stratum_feature_edge_segment_template <=
part_template_definition <=
product_definition
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
property_definition <-
{property_definition
property_definition.name = 'cross section'}
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation =>
shape_definition_3d_intersection =>
edge_segment_cross_section

end_attribute_mapping;

end_entity_mapping;


entity_mapping Footprint_definition_shape_model(Footprint_definition_shape_model, shape_representation)
extended;

attribute_mapping reference_shape(reference_shape, , Part_template_3d_shape_model);

				shape_representation
				
end_attribute_mapping;

attribute_mapping reference_shape(reference_shape, , Physical_unit_3d_shape_model);

				shape_representation
				
end_attribute_mapping;

end_entity_mapping;

entity_mapping Part_template_3d_keepout_shape_model(Part_template_3d_keepout_shape_model, shape_representation);

mapping_constraints;
{shape_representation <=
representation
[representation.id= 'nfsm']
[representation.name = '3d bound volume shape']
[representation.description = 'pt3dksm']
[representation
representation.context_of_items ->
representation_context =>
geometric_representation_context
geometric_representation_context.coordinate_space_dimension = 3]
[representation <-
property_definition_representation.used_representation
property_definition_representation
{property_definition_representation =>
shape_definition_representation}
property_definition_representation.definition ->
property_definition =>
product_definition_shape =>
part_template_definition]}

end_mapping_constraints;

end_entity_mapping;

entity_mapping Part_template_3d_shape_model(Part_template_3d_shape_model, shape_representation);

mapping_constraints;
{shape_representation <=
representation				
[representation.name = '3d bound volume shape']
[representation.description = 'pt3dsm']
[representation
representation.context_of_items ->
representation_context =>
geometric_representation_context
geometric_representation_context.coordinate_space_dimension = 3]
[representation <-
property_definition_representation.used_representation
property_definition_representation
{property_definition_representation =>
shape_definition_representation}
property_definition_representation.definition ->
property_definition =>
product_definition_shape =>
part_template_definition]}

end_mapping_constraints;

end_entity_mapping;
(*end_schema_mapping;*)
