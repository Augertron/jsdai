(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping datum_difference_based_model(Datum_difference_based_model_arm, Datum_difference_based_model_mim);*)


entity_mapping datum_difference_based_model_parameter_armx(datum_difference_based_model_parameter_armx, datum_difference_based_model_parameter);

mapping_constraints;
datum_difference_based_model_parameter <=
model_parameter <=
general_property

end_mapping_constraints;

attribute_mapping of_datum_difference(of_datum_difference, $PATH, Datum_difference_armx);
datum_difference_based_model_parameter <=
model_parameter <=
general_property
represented_definition = general_property 
represented_definition <-
property_definition_representation.definition
property_definition_representation
{property_definition_representation.name = 'of datum difference'}
property_definition_representation.used_representation ->
representation <-
property_definition_representation.used_representation
property_definition_representation
property_definition_representation.definition ->
property_definition
property_definition.definition ->
characterized_definition
characterized_definition = shape_definition
shape_definition
shape_definition = shape_aspect_relationship
shape_aspect_relationship =>
datum_difference

end_attribute_mapping;

end_entity_mapping;

entity_mapping datum_difference_functional_unit_usage_view_terminal_assignment_armx(datum_difference_functional_unit_usage_view_terminal_assignment_armx, datum_difference_functional_unit_usage_view_terminal_assignment);

mapping_constraints;
datum_difference_functional_unit_usage_view_terminal_assignment <=
shape_aspect_relationship

end_mapping_constraints;

attribute_mapping assigned_datum_difference(assigned_datum_difference, $PATH, Datum_difference_armx);
datum_difference_functional_unit_usage_view_terminal_assignment <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
datum_difference

end_attribute_mapping;

attribute_mapping assigned_functional_terminal_definition(assigned_functional_terminal_definition, $PATH, Functional_unit_usage_view_terminal_definition);
datum_difference_functional_unit_usage_view_terminal_assignment <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect =>
functional_unit_terminal_definition

end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
