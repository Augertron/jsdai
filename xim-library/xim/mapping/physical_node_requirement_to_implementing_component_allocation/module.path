(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping physical_node_requirement_to_implementing_component_allocation(Physical_node_requirement_to_implementing_component_allocation_arm, Physical_node_requirement_to_implementing_component_allocation_mim);*)


entity_mapping physical_node_requirement_to_implementing_component_allocation_armx(physical_node_requirement_to_implementing_component_allocation_armx, physical_node_requirement_to_implementing_component_allocation);

mapping_constraints;
{[physical_node_requirement_to_implementing_component_allocation <=
shape_aspect]
[physical_node_requirement_to_implementing_component_allocation <=
shape_aspect_relationship]}

end_mapping_constraints;

attribute_mapping implementation_component(implementation_component, $PATH, Assembly_component_armx);
physical_node_requirement_to_implementing_component_allocation <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect.of_shape ->
product_definition_shape =>
assembly_component

end_attribute_mapping;

attribute_mapping implementation_joint_set(implementation_joint_set, $PATH, Assembly_joint_armx);
physical_node_requirement_to_implementing_component_allocation <=
shape_aspect <-
shape_aspect_relationship.related_shape_aspect
{shape_aspect_relationship
shape_aspect_relationship.name = 'implementation joint'}
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
component_feature_joint =>
assembly_joint

end_attribute_mapping;

attribute_mapping implementation_interface_joint_set(implementation_interface_joint_set, $PATH, Interface_mounted_join_armx);
physical_node_requirement_to_implementing_component_allocation <=
shape_aspect <-
shape_aspect_relationship.related_shape_aspect
{shape_aspect_relationship
shape_aspect_relationship.name = 'implementation interface joint'}
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
interface_mounted_join

end_attribute_mapping;

attribute_mapping physical_node_requirement(physical_node_requirement, $PATH, Physical_connectivity_definition_armx);
physical_node_requirement_to_implementing_component_allocation <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
physical_connectivity_definition

end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
