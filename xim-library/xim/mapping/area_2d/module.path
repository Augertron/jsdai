(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping area_2d(Area_2d_arm, Area_2d_mim);*)


entity_mapping Circular_area(Circular_area, circular_area);

mapping_constraints;

end_mapping_constraints;

attribute_mapping centre(centre, $PATH, Cartesian_point);
circular_area
circular_area.centre ->
cartesian_point

end_attribute_mapping;

attribute_mapping radius(radius, $PATH, length_measure_with_unit);
circular_area
circular_area.radius ->
positive_length_measure

end_attribute_mapping;

end_entity_mapping;

entity_mapping Elliptic_area(Elliptic_area, elliptic_area);

mapping_constraints;

end_mapping_constraints;

attribute_mapping position(position, $PATH, axis2_placement_2d);
elliptic_area
elliptic_area.position ->
axis2_placement_2d

end_attribute_mapping;

attribute_mapping semi_axis_1(semi_axis_1, $PATH, length_measure_with_unit);
elliptic_area
elliptic_area.semi_axis_1 ->
positive_length_measure

end_attribute_mapping;

attribute_mapping semi_axis_2(semi_axis_2, $PATH, length_measure_with_unit);
elliptic_area
elliptic_area.semi_axis_2 ->
positive_length_measure

end_attribute_mapping;

end_entity_mapping;

entity_mapping Polygonal_area(Polygonal_area, polygonal_area);

mapping_constraints;

end_mapping_constraints;

attribute_mapping bounds(bounds, $PATH, Cartesian_point);
polygonal_area
polygonal_area.bounds[i] ->
cartesian_point

end_attribute_mapping;

end_entity_mapping;

entity_mapping Primitive_2d(Primitive_2d, primitive_2d);

mapping_constraints;

end_mapping_constraints;

end_entity_mapping;

entity_mapping Rectangular_area(Rectangular_area, rectangular_area);

mapping_constraints;

end_mapping_constraints;

attribute_mapping position(position, $PATH, axis2_placement_2d);
rectangular_area
rectangular_area.position ->
axis2_placement_2d

end_attribute_mapping;

attribute_mapping x(x, $PATH, length_measure_with_unit);
rectangular_area
rectangular_area.x ->
positive_length_measure

end_attribute_mapping;

attribute_mapping y(y, $PATH, length_measure_with_unit);
rectangular_area
rectangular_area.y ->
positive_length_measure

end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
