(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping physical_unit_2d_shape(Physical_unit_2d_shape_arm, Physical_unit_2d_shape_mim);*)


entity_mapping External_source_identification(External_source_identification, applied_external_identification_assignment)
extended;

attribute_mapping item(item, , Physical_unit_planar_shape_model);

				external_identification_item *> pu2ds_external_identification_item
				pu2ds_external_identification_item = shape_representation 
				
end_attribute_mapping;

end_entity_mapping;

entity_mapping Physical_unit_planar_keepout_shape_model(Physical_unit_planar_keepout_shape_model, shape_representation);

mapping_constraints;
shape_representation <=
representation
{[representation.id ='uvlnfsm']
[representation.name = 'pupksm']
[(representation.description = 'pupksm')]
[representation <-
property_definition_representation.used_representation
property_definition_representation
{property_definition_representation =>
shape_definition_representation}
property_definition_representation.definition ->
property_definition =>
product_definition_shape =>
physical_unit]}

end_mapping_constraints;

attribute_mapping model_shape(model_shape, $PATH, Physical_unit_shape_model);

					shape_representation <=
					representation
					{representation.id = 'uvlnfsm'}
					representation <-
					representation_relationship.rep_2
					representation_relationship
					{representation_relationship
					representation_relationship.name = 'model shape'}
					representation_relationship.rep_1 ->
					representation =>
					shape_representation
				
end_attribute_mapping;

attribute_mapping component_application(component_application, descriptive_representation_item);
shape_representation <=
representation <-
representation_relationship.rep_1 
representation_relationship 
representation_relationship.rep_2 -> 
representation 
{representation.name = 'component application'}
representation.items[i] ->
representation_item
{(representation_item.name = 'compliant components permitted')
(representation_item.name = 'no components permitted')}
representation_item =>
descriptive_representation_item

end_attribute_mapping;

attribute_mapping side(side, descriptive_representation_item);
shape_representation <=
representation <-
representation_relationship.rep_1 
representation_relationship 
representation_relationship.rep_2 -> 
representation 
{representation.name = 'side'}
representation.items[i] ->
representation_item
{(representation_item.name = 'same side')
(representation_item.name = 'opposite side')
(representation_item.name = 'both sides')}
representation_item =>
descriptive_representation_item

end_attribute_mapping;

attribute_mapping extrusion(extrusion, descriptive_representation_item);
shape_representation <=
representation <-
representation_relationship.rep_1 
representation_relationship 
representation_relationship.rep_2 -> 
representation 
{representation.name = 'extrusion'}
representation.items[i] ->
representation_item
{(representation_item.name = 'true')
(representation_item.name = 'false')}
representation_item =>
descriptive_representation_item

end_attribute_mapping;

attribute_mapping shape_location_with_respect_to_seating_plane(shape_location_with_respect_to_seating_plane, descriptive_representation_item);
shape_representation <=
representation <-
representation_relationship.rep_1 
representation_relationship 
representation_relationship.rep_2 -> 
representation 
{representation.name = 'shape location'}
representation.items[i] ->
representation_item
{(representation_item.name = 'above')
(representation_item.name = 'congruent')
(representation_item.name = 'below')}
representation_item =>
descriptive_representation_item

end_attribute_mapping;

attribute_mapping shape_distance_from_seating_plane(shape_distance_from_seating_plane, $PATH, Length_tolerance_characteristic);
shape_representation <=
representation <-
representation_relationship.rep_1
representation_relationship
{representation_relationship
representation_relationship.name = 'shape distance from seating plane'}
representation_relationship.rep_2 ->
representation

end_attribute_mapping;

end_entity_mapping;

entity_mapping Physical_unit_planar_shape_model(Physical_unit_planar_shape_model, shape_representation);

mapping_constraints;
shape_representation <=
representation
{[representation.name = 'ppsm']
[representation.description = 'pupsm']
[representation <-
property_definition_representation.used_representation
property_definition_representation
{property_definition_representation =>
shape_definition_representation}
property_definition_representation.definition ->
property_definition =>
product_definition_shape =>
physical_unit]}

end_mapping_constraints;

attribute_mapping shape_location_with_respect_to_seating_plane(shape_location_with_respect_to_seating_plane, descriptive_representation_item);
shape_representation <=
representation <-
representation_relationship.rep_1 
representation_relationship 
representation_relationship.rep_2 -> 
representation 
{representation.name = 'shape location'}
representation.items[i] ->
representation_item
{(representation_item.name = 'above')
(representation_item.name = 'congruent')
(representation_item.name = 'below')}
representation_item =>
descriptive_representation_item

end_attribute_mapping;

attribute_mapping shape_distance_from_seating_plane(shape_distance_from_seating_plane, $PATH, Length_tolerance_characteristic);
shape_representation <=
representation <-
representation_relationship.rep_1
representation_relationship
{representation_relationship
representation_relationship.name = 'shape distance from seating plane'}
representation_relationship.rep_2 ->
representation


end_attribute_mapping;

attribute_mapping shape_purpose(shape_purpose, representation_item.name, Predefined_planar_purpose);
shape_representation <=
representation <-
representation_relationship.rep_1 
representation_relationship 
representation_relationship.rep_2 -> 
representation 
{representation.name = 'predefined shape purpose'}
representation.items[i] ->
representation_item
{(representation_item.name = 'analysis input') 
(representation_item.name = 'analysis output') 
(representation_item.name = 'assembly symbol') 
(representation_item.name = 'shock analysis input') 
(representation_item.name = 'shock analysis output') 
(representation_item.name = 'design') 
(representation_item.name = 'design profile') 
(representation_item.name = 'vibration analysis input') 
(representation_item.name = 'vibration analysis output') 
(representation_item.name = 'electromagnetic compatibility analysis input') 
(representation_item.name = 'electromagnetic compatibility analysis output') 
(representation_item.name = 'thermal analysis input')
(representation_item.name = 'thermal analysis output')
(representation_item.name = 'physical extent')}

end_attribute_mapping;

end_entity_mapping;

entity_mapping Usage_view_level_non_feature_shape_model(Usage_view_level_non_feature_shape_model, shape_representation)
extended;

attribute_mapping model_shape(model_shape, , Physical_unit_shape_model);

				shape_representation 
				
end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
