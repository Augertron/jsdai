(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping interconnect_module_connection_routing(Interconnect_module_connection_routing_arm, Interconnect_module_connection_routing_mim);*)



entity_mapping Dielectric_crossover_area_armx(Dielectric_crossover_area_armx, dielectric_crossover_area);

mapping_constraints;
[dielectric_crossover_area <=
shape_aspect_relationship]
[dielectric_crossover_area <=
shape_aspect]

end_mapping_constraints;

attribute_mapping related_concept(related_concept, $PATH, Stratum_feature_armx);
dielectric_crossover_area <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect =>
stratum_feature

end_attribute_mapping;

attribute_mapping relating_concept(relating_concept, $PATH, Stratum_feature_armx);
dielectric_crossover_area <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
stratum_feature

end_attribute_mapping;

attribute_mapping resulting_dielectric_crossover(resulting_dielectric_crossover, $PATH, Stratum_feature_armx);
dielectric_crossover_area <=
shape_aspect <-
shape_aspect_relationship.related_shape_aspect
shape_aspect_relationship
{shape_aspect_relationship
shape_aspect_relationship.name = 'resulting dielectric crossover'}
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
stratum_feature

end_attribute_mapping;

attribute_mapping resulting_shape(resulting_shape, $PATH, Shape_representation);
dielectric_crossover_area <=
shape_aspect_relationship
shape_definition = shape_aspect_relationship
shape_definition
characterized_definition = shape_definition
characterized_definition <-
property_definition.definition
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation

end_attribute_mapping;

end_entity_mapping;

entity_mapping Direct_stratum_component_join_implementation_armx(Direct_stratum_component_join_implementation_armx, direct_stratum_component_join_implementation);

mapping_constraints;
direct_stratum_component_join_implementation <=
shape_aspect_relationship

end_mapping_constraints;

attribute_mapping topological_requirement(topological_requirement, $PATH, Stratum_embedded_physical_component_join_relationship);
direct_stratum_component_join_implementation <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.name = 'stratum embedded physical component join'}
shape_aspect =>
join_shape_aspect

end_attribute_mapping;

attribute_mapping implementing_joint(implementing_joint, $PATH, Fabrication_joint_armx);
direct_stratum_component_join_implementation <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
component_feature_joint =>
fabrication_joint

end_attribute_mapping;

end_entity_mapping;

entity_mapping Indirect_stratum_component_join_implementation_armx(Indirect_stratum_component_join_implementation_armx, indirect_stratum_component_join_implementation);

mapping_constraints;
indirect_stratum_component_join_implementation <=
plated_inter_stratum_feature

end_mapping_constraints;

attribute_mapping indirect_topological_requirement(indirect_topological_requirement, $PATH, Stratum_embedded_physical_component_join_relationship);
indirect_stratum_component_join_implementation <=
plated_inter_stratum_feature <=
inter_stratum_feature <=
laminate_component <=
assembly_component <=
product_definition_shape <-
shape_aspect.of_shape
shape_aspect <-
shape_aspect_relationship.related_shape_aspect
shape_aspect_relationship
{shape_aspect_relationship
shape_aspect_relationship.name = 'indirect topological requirement'}
shape_aspect_relationship.relating_shape_aspect ->
{shape_aspect
shape_aspect.name = 'stratum embedded physical component join'}
shape_aspect =>
join_shape_aspect

end_attribute_mapping;

attribute_mapping implementing_joint(implementing_joint, $PATH, Fabrication_joint_armx);
indirect_stratum_component_join_implementation <=
plated_inter_stratum_feature <=
inter_stratum_feature <=
laminate_component <=
assembly_component <=
product_definition_shape <-
shape_aspect.of_shape
shape_aspect <-
shape_aspect_relationship.related_shape_aspect
shape_aspect_relationship
{shape_aspect_relationship
shape_aspect_relationship.name = 'implementing joint'}
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
component_feature_joint =>
fabrication_joint

end_attribute_mapping;

end_entity_mapping;


entity_mapping Junction_vertex_allocation(Junction_vertex_allocation, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
shape_aspect_relationship.name = 'junction vertex allocation'}

end_mapping_constraints;

attribute_mapping implementation_point(implementation_point, $PATH, trace_junction_or_via);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect

end_attribute_mapping;

attribute_mapping required_vertex(required_vertex, $PATH, Part_connected_terminals_topological_junction);
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect
{shape_aspect
[shape_aspect.description = 'part connected terminals topological junction']
[shape_aspect.product_definitional = .TRUE.]}
end_attribute_mapping;

end_entity_mapping;

entity_mapping Physical_connectivity_abstraction_map(Physical_connectivity_abstraction_map, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
shape_aspect_relationship.name = 'physical to topological abstraction map'}

end_mapping_constraints;

attribute_mapping geometric_context_based_definition(geometric_context_based_definition, $PATH, Conductive_interconnect_element_terminal_link_armx);
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
conductive_interconnect_element_terminal_link

end_attribute_mapping;

attribute_mapping geometric_context_based_definition(geometric_context_based_definition, $PATH, Passage_terminal_based_fabrication_joint_link_armx);
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
passage_terminal_based_fabrication_joint_link

end_attribute_mapping;

attribute_mapping name_space_context_based_definition(name_space_context_based_definition, $PATH, Part_connected_terminals_element_armx);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect =>
part_connected_terminals_element

end_attribute_mapping;

end_entity_mapping;

entity_mapping Physical_connectivity_element_armx(Physical_connectivity_element_armx, physical_connectivity_element)
extended;

attribute_mapping start_terminus(start_terminus, $PATH, Inter_stratum_join_relationship);

				physical_connectivity_element <=
				shape_aspect_relationship
				{shape_aspect_relationship
				shape_aspect_relationship.name = 'start to end terminus'}
				shape_aspect_relationship.relating_shape_aspect ->
				shape_aspect =>
				join_shape_aspect
				
end_attribute_mapping;

attribute_mapping start_terminus(start_terminus, $PATH, Explicitly_located_layer_connection_point);

				physical_connectivity_element <=
				shape_aspect_relationship
				{shape_aspect_relationship
				shape_aspect_relationship.name = 'start to end terminus'}
				shape_aspect_relationship.relating_shape_aspect ->
				shape_aspect =>
				layer_connection_point
				
end_attribute_mapping;

attribute_mapping end_terminus(end_terminus, $PATH, Inter_stratum_join_relationship);

				physical_connectivity_element <=
				shape_aspect_relationship
				{shape_aspect_relationship
				shape_aspect_relationship.name = 'start to end terminus'}
				shape_aspect_relationship.relating_shape_aspect ->
				shape_aspect =>
				join_shape_aspect
				
end_attribute_mapping;

attribute_mapping end_terminus(end_terminus, $PATH, Explicitly_located_layer_connection_point);

				physical_connectivity_element <=
				shape_aspect_relationship
				{shape_aspect_relationship
				shape_aspect_relationship.name = 'start to end terminus'}
				shape_aspect_relationship.relating_shape_aspect ->
				shape_aspect =>
				layer_connection_point
				
end_attribute_mapping;

end_entity_mapping;

entity_mapping requirement_assignment_armx(requirement_assignment_armx, requirement_assignment)
extended;

attribute_mapping assigned_to(assigned_to, , Stratum_feature_conductive_join_armx);

					requirement_assigned_item *> imcr_requirement_assigned_item
					imcr_requirement_assigned_item = stratum_feature_conductive_join
				
end_attribute_mapping;
attribute_mapping assigned_to(assigned_to, , Dielectric_crossover_area_armx);

					requirement_assigned_item *> imcr_requirement_assigned_item
					imcr_requirement_assigned_item = dielectric_crossover_area
				
end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
