(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping bare_die(Bare_die_arm, Bare_die_mim);*)


entity_mapping Bare_die_armx(Bare_die_armx, bare_die);

mapping_constraints;
bare_die <=
physical_unit <=
product_definition
{product_definition
product_definition.formation ->
product_definition_formation
product_definition_formation.of_product ->
product <-
product_related_product_category.products[i]
product_related_product_category <=
product_category
product_category.name = 'bare die'}

end_mapping_constraints;

attribute_mapping implemented_function(implemented_function, $PATH, Functional_unit_usage_view);
bare_die <=
physical_unit <=
product_definition <-
product_definition_relationship.related_product_definition
product_definition_relationship
{product_definition_relationship
product_definition_relationship.name = 'implemented function'}
product_definition_relationship.relating_product_definition ->
{product_definition <-
product_definition_context_association.definition
product_definition_context_association
{product_definition_context_association.role ->
product_definition_context_role
product_definition_context_role.name = 'part definition type'}
product_definition_context_association.frame_of_reference ->
product_definition_context <=
application_context_element
application_context_element.name = 'functional design usage'}
product_definition =>
functional_unit

end_attribute_mapping;

attribute_mapping least_material_condition_centroid_location(least_material_condition_centroid_location, $PATH, Cartesian_point);
bare_die <=
physical_unit <=
product_definition
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'maximum material condition centroid location'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
representation.items[i] ->
representation_item =>
geometric_representation_item =>
point =>
cartesian_point

end_attribute_mapping;

attribute_mapping maximum_material_condition_centroid_location(maximum_material_condition_centroid_location, $PATH, Cartesian_point);
bare_die <=
physical_unit <=
product_definition
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'maximum material condition centroid location'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
representation.items[i] ->
representation_item =>
geometric_representation_item =>
point =>
cartesian_point

end_attribute_mapping;

attribute_mapping maximum_height_above_seating_plane(maximum_height_above_seating_plane, $PATH, length_measure_with_unit);
bare_die <=
physical_unit <=
product_definition
characterized_product_definition = product_definition 
characterized_product_definition 
characterized_definition = characterized_product_definition 
characterized_definition <- 
property_definition.definition 
property_definition
{property_definition.name = 'maximum height above seating plane'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
representation.items[i] ->
representation_item
representation_item =>
measure_representation_item <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

end_entity_mapping;

entity_mapping Bare_die_bottom_surface_armx(Bare_die_bottom_surface_armx, bare_die_bottom_surface);

mapping_constraints;
bare_die_bottom_surface <=
bare_die_surface <=
part_mounting_feature <=
shape_aspect

end_mapping_constraints;

end_entity_mapping;

entity_mapping Bare_die_edge_segment_surface_armx(Bare_die_edge_segment_surface_armx, bare_die_edge_segment_surface);

mapping_constraints;
[bare_die_edge_segment_surface <=
shape_aspect]
[bare_die_edge_segment_surface <=
shape_aspect_relationship]

end_mapping_constraints;

attribute_mapping composed_surface(composed_surface, $PATH, Bare_die_edge_surface_armx);
bare_die_edge_segment_surface <=
shape_aspect <-
shape_aspect_relationship.related_shape_aspect
{shape_aspect_relationship
shape_aspect_relationship.name = 'composed surface'}
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
part_mounting_feature =>
bare_die_surface =>
bare_die_edge_surface

end_attribute_mapping;

attribute_mapping end_vertex(end_vertex, $PATH, Edge_segment_vertex_armx);
bare_die_edge_segment_surface <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect
{shape_aspect
shape_aspect.name = 'single datum'}
shape_aspect =>
datum =>
edge_segment_vertex

end_attribute_mapping;

attribute_mapping start_vertex(start_vertex, $PATH, Edge_segment_vertex_armx);
bare_die_edge_segment_surface <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect
{shape_aspect
shape_aspect.name = 'single datum'}
shape_aspect =>
datum =>
edge_segment_vertex

end_attribute_mapping;

end_entity_mapping;

entity_mapping Bare_die_edge_surface_armx(Bare_die_edge_surface_armx, bare_die_edge_surface);

mapping_constraints;
bare_die_edge_surface <=
bare_die_surface <=
part_mounting_feature <=
shape_aspect

end_mapping_constraints;

end_entity_mapping;

entity_mapping Bare_die_surface_armx(Bare_die_surface_armx, (bare_die_surface) (bare_die_edge_segment_surface));

mapping_constraints;
(bare_die_surface <=
part_mounting_feature <=
shape_aspect)
(bare_die_edge_segment_surface <=
shape_aspect)

end_mapping_constraints;

attribute_mapping associated_definition(associated_definition, $PATH, Bare_die_armx);
bare_die_surface <=
part_mounting_feature <=
shape_aspect
shape_aspect.of_shape ->
product_definition_shape =>
physical_unit =>
bare_die

end_attribute_mapping;

end_entity_mapping;

entity_mapping Bare_die_terminal_armx(Bare_die_terminal_armx, bare_die_terminal);

mapping_constraints;
bare_die_terminal <=
minimally_defined_bare_die_terminal <=
shape_aspect

end_mapping_constraints;

attribute_mapping definition(definition, $PATH, Bare_die_template_terminal);
bare_die_terminal <=
minimally_defined_bare_die_terminal <=
shape_aspect
shape_definition = shape_aspect
characterized_definition = shape_definition
characterized_definition <-
property_definition.definition
property_definition <-
property_definition_relationship.related_property_definition 
{property_definition_relationship.name = 'definition'}
property_definition_relationship.relating_property_definition ->
property_definition
property_definition.definition ->
characterized_definition = characterized_object
characterized_object =>
shape_feature_definition =>
part_feature_template_definition =>
bare_die_template_terminal

end_attribute_mapping;

end_entity_mapping;

entity_mapping Bare_die_template_terminal_armx(Bare_die_template_terminal_armx, bare_die_template_terminal);

mapping_constraints;
bare_die_template_terminal <=
part_feature_template_definition <=
shape_feature_definition <=
characterized_object
end_mapping_constraints;

attribute_mapping connection_area(connection_area, $PATH, Connection_zone_in_usage_view);
bare_die_template_terminal <=
shape_aspect <-
shape_aspect_relationship.relating_shape_aspect
{shape_aspect_relationship
shape_aspect_relationship.name = 'connection_area'}
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect
{shape_aspect
shape_aspect.description = 'connection zone'}

end_attribute_mapping;

attribute_mapping seating_plane_zone(seating_plane_zone, $PATH, Connection_zone_bare_die_interface_plane_relationship);
bare_die_template_terminal <=
part_feature_template_definition <=
shape_feature_definition <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
property_definition =>
product_definition_shape <-
shape_aspect.of_shape
shape_aspect <-
shape_aspect_relationship.related_shape_aspect
{shape_aspect_relationship
shape_aspect_relationship.name = 'seating plane zone'}
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
connection_zone_interface_plane_relationship

end_attribute_mapping;

end_entity_mapping;

entity_mapping Bare_die_terminal_surface_constituent_relationship(Bare_die_terminal_surface_constituent_relationship, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
shape_aspect_relationship.name = 'bare die terminal surface constituent relationship'}

end_mapping_constraints;

attribute_mapping related_shape_aspect(related_shape_aspect, $PATH, Bare_die_terminal_armx);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect =>
minimally_defined_bare_die_terminal =>
bare_die_terminal

end_attribute_mapping;

attribute_mapping relating_shape_aspect(relating_shape_aspect, $PATH, Bare_die_surface_armx);
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
part_mounting_feature =>
bare_die_surface

end_attribute_mapping;

end_entity_mapping;

entity_mapping Bare_die_top_surface_armx(Bare_die_top_surface_armx, bare_die_top_surface);

mapping_constraints;
bare_die_top_surface <=
bare_die_surface <=
part_mounting_feature <=
shape_aspect

end_mapping_constraints;

end_entity_mapping;

entity_mapping Connection_zone_bare_die_interface_plane_relationship(Connection_zone_bare_die_interface_plane_relationship, connection_zone_interface_plane_relationship);

mapping_constraints;
{[connection_zone_interface_plane_relationship <=
shape_aspect_relationship]
[connection_zone_interface_plane_relationship <=
shape_aspect]}

end_mapping_constraints;

attribute_mapping derived_zone_shape_class(derived_zone_shape_class, shape_aspect_relationship.description);
connection_zone_interface_plane_relationship <=
shape_aspect_relationship
shape_aspect_relationship.description
{(shape_aspect_relationship.description = 'area')
(shape_aspect_relationship.description = 'edge')}

end_attribute_mapping;

attribute_mapping derived_zone(derived_zone, $PATH, Connection_zone_in_usage_view);
connection_zone_interface_plane_relationship <=
shape_aspect <-
shape_aspect_relationship.relating_shape_aspect
shape_aspect_relationship
{shape_aspect_relationship
shape_aspect_relationship.name = 'derived zone'}
shape_aspect_relationship.related_shape_aspect ->
shape_aspect
{shape_aspect
shape_aspect.description = 'connection zone'}

end_attribute_mapping;

attribute_mapping mating_zone(mating_zone, $PATH, Connection_zone_in_usage_view);
connection_zone_interface_plane_relationship <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect
{shape_aspect
shape_aspect.description = 'connection zone'}

end_attribute_mapping;

attribute_mapping interface_plane(interface_plane, $PATH, Seating_plane);
connection_zone_interface_plane_relationship <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
seating_plane

end_attribute_mapping;

end_entity_mapping;

entity_mapping Guided_wave_bare_die_terminal(Guided_wave_bare_die_terminal, minimally_defined_bare_die_terminal);

mapping_constraints;
minimally_defined_bare_die_terminal <=
shape_aspect
{shape_aspect
shape_aspect.description = 'guided wave bare die terminal'}

end_mapping_constraints;

end_entity_mapping;
(*
entity_mapping Material_identification(Material_identification, material_designation)
extended;

attribute_mapping items(items, $PATH, Bare_die_terminal_armx);
 characterized_definition
				characterized_definition <-
				property_definition.definition
				property_definition =>
				product_definition_shape <-
				shape_aspect.of_shape
				shape_aspect => 
				minimally_defined_bare_die_terminal =>
				bare_die_terminal
				
end_attribute_mapping;

end_entity_mapping;
*)
entity_mapping Minimally_defined_bare_die_terminal_armx(Minimally_defined_bare_die_terminal_armx, minimally_defined_bare_die_terminal);

mapping_constraints;
minimally_defined_bare_die_terminal <=
shape_aspect

end_mapping_constraints;

attribute_mapping associated_definition(associated_definition, $PATH, Bare_die_armx);
minimally_defined_bare_die_terminal
minimally_defined_bare_die_terminal <=
shape_aspect
shape_aspect.of_shape ->
product_definition_shape =>
physical_unit =>
bare_die

end_attribute_mapping;

end_entity_mapping;

entity_mapping Non_feature_shape_element(Non_feature_shape_element, shape_aspect)
extended;

attribute_mapping scope(scope, $PATH, Bare_die_armx);

					product_definition_shape =>
					physical_unit =>
					bare_die
				
end_attribute_mapping;

end_entity_mapping;

entity_mapping Part_terminal(Part_terminal, 
			(/SUBTYPE(Minimally_defined_bare_die_terminal_armx)/)
		)
extended;

end_entity_mapping;
(*end_schema_mapping;*)
