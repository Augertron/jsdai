(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping part_external_reference(Part_external_reference_arm, Part_external_reference_mim);*)


entity_mapping Package_external_reference(Package_external_reference, representation);

mapping_constraints;
{representation
representation.name = 'package external reference'}

end_mapping_constraints;

attribute_mapping design_owner(design_owner, descriptive_representation_item);
representation
representation.items[i] ->
{representation_item
representation_item.name = 'design owner'}
representation_item =>
descriptive_representation_item

end_attribute_mapping;

attribute_mapping part_number(part_number, descriptive_representation_item);
representation
representation.items[i] ->
{representation_item
representation_item.name = 'part number'}
representation_item =>
descriptive_representation_item

end_attribute_mapping;

attribute_mapping revision_code(revision_code, descriptive_representation_item);
representation
representation.items[i] ->
{representation_item
representation_item.name = 'revision code'}
representation_item =>
descriptive_representation_item

end_attribute_mapping;

attribute_mapping product_definition_id(product_definition_id, descriptive_representation_item);
representation
representation.items[i] ->
{representation_item
representation_item.name = 'product definition id'}
representation_item =>
descriptive_representation_item

end_attribute_mapping;

end_entity_mapping;

entity_mapping Package_terminal_external_reference(Package_terminal_external_reference, descriptive_representation_item);

mapping_constraints;
descriptive_representation_item <=
{representation_item
representation_item.name = 'package terminal external reference'}
representation_item

end_mapping_constraints;

attribute_mapping name(name, descriptive_representation_item.description);

end_attribute_mapping;

attribute_mapping associated_definition(associated_definition, $PATH, Package_external_reference);
descriptive_representation_item <=
representation_item <-
representation.items[i]
{representation
representation.name = 'package external reference'}
representation

end_attribute_mapping;

end_entity_mapping;

entity_mapping Part_terminal_external_reference_armx(Part_terminal_external_reference_armx, part_terminal_external_reference);

mapping_constraints;
	part_terminal_external_reference <=
	shape_aspect
end_mapping_constraints;

end_entity_mapping;
(*end_schema_mapping;*)
