(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping design_specific_assignment_to_interconnect_usage_view(Design_specific_assignment_to_interconnect_usage_view_arm, Design_specific_assignment_to_interconnect_usage_view_mim);*)


entity_mapping Component_terminal_to_interconnect_module_interface_terminal_assignment(Component_terminal_to_interconnect_module_interface_terminal_assignment, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
[shape_aspect_relationship.name = 'component feature to physical usage assignment']
[shape_aspect_relationship.description = 'component terminal to interconnect module interface terminal assignment']}

end_mapping_constraints;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Component_termination_passage_interface_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'component termination passage interface terminal'}
shape_aspect =>
component_feature =>
laminate_component_feature =>
laminate_component_interface_terminal

end_attribute_mapping;

attribute_mapping usage_view_terminal(usage_view_terminal, $PATH, Interconnect_module_interface_terminal_armx);
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
{shape_aspect
shape_aspect.of_shape ->
product_definition_shape <=
property_definition
{property_definition.name = 'interconnect module'}}
shape_aspect =>
interconnect_module_terminal =>
interconnect_module_interface_terminal

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Component_termination_passage_interface_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'component termination passage interface terminal'}
shape_aspect =>
component_feature =>
laminate_component_feature =>
laminate_component_interface_terminal

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Land_interface_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'land interface terminal'}
shape_aspect =>
component_feature =>
laminate_component_feature =>
laminate_component_interface_terminal

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Printed_connector_component_interface_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'printed connector component interface terminal'}
shape_aspect =>
component_feature =>
laminate_component_feature =>
laminate_component_interface_terminal

end_attribute_mapping;

end_entity_mapping;

entity_mapping Component_terminal_to_interconnect_module_macro_terminal_assignment(Component_terminal_to_interconnect_module_macro_terminal_assignment, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
[shape_aspect_relationship.name = 'component feature to physical usage assignment']
[shape_aspect_relationship.description = 'component terminal to interconnect module macro terminal assignment']}

end_mapping_constraints;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Component_termination_passage_join_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'component termination passage join terminal'}
shape_aspect =>
component_feature =>
component_terminal =>
laminate_component_join_terminal

end_attribute_mapping;

attribute_mapping usage_view_terminal(usage_view_terminal, $PATH, Interconnect_module_macro_terminal_armx);
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
{shape_aspect
shape_aspect.of_shape ->
product_definition_shape <=
property_definition
{property_definition.name = 'interconnect module'}}
shape_aspect =>
interconnect_module_terminal =>
interconnect_module_macro_terminal

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Via_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'via terminal'}
shape_aspect =>
component_feature =>
laminate_component_feature

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Conductive_interconnect_element_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'conductive interconnect element terminal'}
shape_aspect =>
component_feature =>
laminate_component_feature

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Embedded_physical_component_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'embedded physical component terminal'}
shape_aspect =>
component_feature =>
component_terminal =>
laminate_component_join_terminal

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Land_join_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'land join terminal'}
shape_aspect =>
component_feature =>
laminate_component_feature =>
laminate_component_join_terminal

end_attribute_mapping;

attribute_mapping assigned_terminal(assigned_terminal, $PATH, Printed_component_join_terminal);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
{shape_aspect
shape_aspect.description = 'printed component join terminal'}
shape_aspect =>
component_feature =>				
laminate_component_feature =>	
laminate_component_join_terminal 

end_attribute_mapping;

end_entity_mapping;

entity_mapping Stratum_concept_to_physical_usage_view_assignment(Stratum_concept_to_physical_usage_view_assignment, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
shape_aspect_relationship.name = 'stratum concept to physical usage view assignment'}

end_mapping_constraints;

attribute_mapping purpose(purpose, shape_aspect_relationship.description);

end_attribute_mapping;

attribute_mapping defined_part_feature(defined_part_feature, $PATH, Part_feature);
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect

end_attribute_mapping;

attribute_mapping assigned_design_object(assigned_design_object, $PATH, Inter_stratum_feature_armx);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect
shape_aspect.of_shape ->
product_definition_shape =>
assembly_component =>
laminate_component =>
inter_stratum_feature

end_attribute_mapping;

attribute_mapping assigned_design_object(assigned_design_object, $PATH, Laminate_component_armx);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect.of_shape ->
product_definition_shape =>
assembly_component =>
laminate_component

end_attribute_mapping;

attribute_mapping assigned_design_object(assigned_design_object, $PATH, Stratum_armx);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect
!{(shape_aspect =>
stratum_surface)
(shape_aspect =>
stratum_feature)}
shape_aspect.of_shape ->
product_definition_shape =>
stratum

end_attribute_mapping;

attribute_mapping assigned_design_object(assigned_design_object, $PATH, Stratum_feature_armx);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect =>
stratum_feature

end_attribute_mapping;

attribute_mapping assigned_design_object(assigned_design_object, $PATH, Stratum_surface_armx);
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect =>
stratum_surface

end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
