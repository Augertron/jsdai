(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping fabrication_technology(Fabrication_technology_arm, Fabrication_technology_mim);*)

entity_mapping Assigned_property(Assigned_property, property_definition)
extended;

attribute_mapping described_element(described_element, $PATH, Stratum_technology_armx);

				characterized_definition
				characterized_definition = characterized_object
				characterized_object =>
				stratum_technology
			
end_attribute_mapping;

attribute_mapping described_element(described_element, $PATH, Passage_technology_armx);

				characterized_definition
				characterized_definition = characterized_object
				characterized_object =>
				passage_technology
			
end_attribute_mapping;

end_entity_mapping;

entity_mapping Copy_stratum_technology_occurrence_relationship_armx(Copy_stratum_technology_occurrence_relationship_armx, copy_stratum_technology_occurrence_relationship);

mapping_constraints;
				{copy_stratum_technology_occurrence_relationship <=
        derived_stratum_technology_occurrence_relationship <=
	      stratum_technology_occurrence_relationship
    	  [stratum_technology_occurrence_relationship <=
				property_definition_relationship]
				[stratum_technology_occurrence_relationship <=
				property_definition]}
end_mapping_constraints;

end_entity_mapping;


entity_mapping Default_component_termination_passage_definition(Default_component_termination_passage_definition, passage_technology);

mapping_constraints;
passage_technology <=
characterized_object
{characterized_object
characterized_object.description = 'default component termination passage definition'}

end_mapping_constraints;

attribute_mapping allowed_component_terminal_extent(allowed_component_terminal_extent, $PATH, Length_tolerance_characteristic);
passage_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'allowed component terminal extent'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation

end_attribute_mapping;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, Value_limit);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	[measure_representation_item]
	[qualified_representation_item
	{qualified_representation_item.qualifiers[1] ->
	value_qualifier = type_qualifier
	type_qualifier
	type_qualifier.name = 'maximum'}]
end_attribute_mapping;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, Value_range_armx);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	compound_representation_item =>
	value_range
end_attribute_mapping;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, measure_representation_item);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	measure_representation_item
	(* Security check to avoid satisfying Value_limit mapping *)
	!{measure_representation_item <=
	representation_item =>
	qualified_representation_item}	
end_attribute_mapping;

attribute_mapping as_finished_deposition_thickness(as_finished_deposition_thickness, $PATH, Length_tolerance_characteristic);
passage_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'as finished deposition thickness'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
				
end_attribute_mapping;

end_entity_mapping;

entity_mapping Default_unsupported_passage_definition(Default_unsupported_passage_definition, passage_technology);

mapping_constraints;
passage_technology <=
characterized_object
{characterized_object
characterized_object.description = 'default unsupported passage definition'}

end_mapping_constraints;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, Value_limit);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	[measure_representation_item]
	[qualified_representation_item
	{qualified_representation_item.qualifiers[1] ->
	value_qualifier = type_qualifier
	type_qualifier
	type_qualifier.name = 'maximum'}]
end_attribute_mapping;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, Value_range_armx);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	compound_representation_item =>
	value_range
end_attribute_mapping;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, measure_representation_item);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	measure_representation_item
	(* Security check to avoid satisfying Value_limit mapping *)
	!{measure_representation_item <=
	representation_item =>
	qualified_representation_item}	
end_attribute_mapping;

end_entity_mapping;

entity_mapping Default_tapered_blind_via_definition(Default_tapered_blind_via_definition, passage_technology);

mapping_constraints;
passage_technology <=
characterized_object
{characterized_object
characterized_object.description = 'default tapered blind via definition'}

end_mapping_constraints;

attribute_mapping as_finished_interior_passage_extent(as_finished_interior_passage_extent, $PATH, Length_tolerance_characteristic);
passage_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'as finished interior passage extent'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation

end_attribute_mapping;

end_entity_mapping;

entity_mapping Default_via_definition(Default_via_definition, passage_technology);

mapping_constraints;
passage_technology <=
characterized_object
{characterized_object
(characterized_object.description = 'default via definition')
(characterized_object.description = 'default tapered blind via definition')}

end_mapping_constraints;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, Value_limit);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	[measure_representation_item]
	[qualified_representation_item
	{qualified_representation_item.qualifiers[1] ->
	value_qualifier = type_qualifier
	type_qualifier
	type_qualifier.name = 'maximum'}]
end_attribute_mapping;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, Value_range_armx);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	compound_representation_item =>
	value_range
end_attribute_mapping;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, measure_representation_item);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	measure_representation_item
	(* Security check to avoid satisfying Value_limit mapping *)
	!{measure_representation_item <=
	representation_item =>
	qualified_representation_item}	
end_attribute_mapping;

attribute_mapping as_finished_deposition_thickness(as_finished_deposition_thickness, $PATH, Length_tolerance_characteristic);
passage_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'as finished deposition thickness'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
				
end_attribute_mapping;

end_entity_mapping;

entity_mapping Derived_stratum_technology_occurrence_relationship_armx(Derived_stratum_technology_occurrence_relationship_armx, derived_stratum_technology_occurrence_relationship);

mapping_constraints;
				{derived_stratum_technology_occurrence_relationship <=
	      stratum_technology_occurrence_relationship
    	  [stratum_technology_occurrence_relationship <=
				property_definition_relationship]
				[stratum_technology_occurrence_relationship <=
				property_definition]}
end_mapping_constraints;

end_entity_mapping;

entity_mapping Design_layer_technology(Design_layer_technology, stratum_technology);

mapping_constraints;
stratum_technology <=
characterized_object
{characterized_object
characterized_object.description = 'design layer'}

end_mapping_constraints;

attribute_mapping design_layer_purpose(design_layer_purpose, property_definition.description);
stratum_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'layer purpose'}
property_definition.description
(property_definition.description = 'power or ground')
(property_definition.description = 'other signal')
(property_definition.description = 'lands only')

end_attribute_mapping;

end_entity_mapping;


entity_mapping Documentation_layer_technology(Documentation_layer_technology, stratum_technology);

mapping_constraints;
stratum_technology <=
characterized_object
{characterized_object
characterized_object.description = 'documentation layer'}

end_mapping_constraints;

attribute_mapping pre_defined_documentation_layer_purpose(pre_defined_documentation_layer_purpose, property_definition.description);
stratum_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'layer purpose'}
property_definition.description
(property_definition.description = 'soldermask')
(property_definition.description = 'solderpaste')
(property_definition.description = 'silkscreen')
(property_definition.description = 'generic layer')
(property_definition.description = 'glue')
(property_definition.description = 'gluemask')
(property_definition.description = 'pastemask')
(property_definition.description = 'finish coating')
end_attribute_mapping;

end_entity_mapping;

entity_mapping External_source_identification(External_source_identification, applied_external_identification_assignment)
extended;

attribute_mapping item(item, , Documentation_layer_technology);

				external_identification_item *> ft_external_identification_item
				ft_external_identification_item = stratum_technology 
				{stratum_technology <=
				characterized_object
				{characterized_object
				characterized_object.description = 'documentation layer'}}
end_attribute_mapping;

attribute_mapping item(item, , Design_layer_technology);

				external_identification_item *> ft_external_identification_item
				ft_external_identification_item = stratum_technology 
				{stratum_technology <=
				characterized_object
				{characterized_object
				characterized_object.description = 'design layer'}}
end_attribute_mapping;

end_entity_mapping;

entity_mapping Inverse_copy_stratum_technology_occurrence_relationship_armx(Inverse_copy_stratum_technology_occurrence_relationship_armx, inverse_copy_stratum_technology_occurrence_relationship);

mapping_constraints;
			{inverse_copy_stratum_technology_occurrence_relationship <=
       	derived_stratum_technology_occurrence_relationship <=
	      stratum_technology_occurrence_relationship
    	 [stratum_technology_occurrence_relationship <=
				property_definition_relationship]
				[stratum_technology_occurrence_relationship <=
				property_definition]}
end_mapping_constraints;

end_entity_mapping;

entity_mapping Document_assignment(Document_assignment, (applied_document_reference)(* alternative moved to Partial_document... (applied_document_usage_constraint_assignment) *))
extended;

attribute_mapping is_assigned_to(is_assigned_to, , Stratum_technology_armx);
(
						document_reference_item *> ft_document_reference_item
						ft_document_reference_item = stratum_technology
					)(
						document_reference_item *> ft_document_reference_item
						ft_document_reference_item = stratum_technology
					)
end_attribute_mapping;

attribute_mapping is_assigned_to(is_assigned_to, , Passage_technology_armx);
(
						document_reference_item *> ft_document_reference_item
						ft_document_reference_item = passage_technology
					)(
						document_reference_item *> ft_document_reference_item
						ft_document_reference_item = passage_technology
					)
end_attribute_mapping;

end_entity_mapping;

(*
entity_mapping Material_identification(Material_identification, material_designation)
extended;

attribute_mapping items(items, $PATH, Stratum_technology);

				characterized_definition
				characterized_definition = characterized_object
				characterized_object =>
				stratum_technology
				
end_attribute_mapping;

end_entity_mapping;
*)

entity_mapping Passage_deposition_material_identification_armx(Passage_deposition_material_identification_armx, passage_deposition_material_identification);

mapping_constraints;
	passage_deposition_material_identification <=
	material_designation
end_mapping_constraints;

end_entity_mapping;

entity_mapping Passage_filling_material_identification_armx(Passage_filling_material_identification_armx, passage_filling_material_identification);

mapping_constraints;
	passage_filling_material_identification <=
	material_designation
end_mapping_constraints;

end_entity_mapping;

entity_mapping Passage_technology_armx(Passage_technology_armx, passage_technology);

mapping_constraints;
passage_technology <=
characterized_object

end_mapping_constraints;

attribute_mapping plated_passage(plated_passage, $PATH);
passage_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'plated passage'}
{(property_definition.description = 'true')
(property_definition.description = 'false')}
				
end_attribute_mapping;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, Value_limit);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	[measure_representation_item]
	[qualified_representation_item
	{qualified_representation_item.qualifiers[1] ->
	value_qualifier = type_qualifier
	type_qualifier
	type_qualifier.name = 'maximum'}]
end_attribute_mapping;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, Value_range_armx);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	compound_representation_item =>
	value_range
end_attribute_mapping;

attribute_mapping as_finished_passage_extent(as_finished_passage_extent, $PATH, measure_representation_item);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'as finished passage extent'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	measure_representation_item
	(* Security check to avoid satisfying Value_limit mapping *)
	!{measure_representation_item <=
	representation_item =>
	qualified_representation_item}
end_attribute_mapping;

attribute_mapping minimum_finished_feature_size(minimum_finished_feature_size, $PATH, length_measure_with_unit);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'minimum finished feature size'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] -> 
	representation_item => 
	measure_representation_item <= 
	measure_with_unit => 
	length_measure_with_unit
end_attribute_mapping;

attribute_mapping supported_external_minimum_annular_ring(supported_external_minimum_annular_ring, $PATH, length_measure_with_unit);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'supported external minimum annular ring'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] -> 
	representation_item => 
	measure_representation_item <= 
	measure_with_unit => 
	length_measure_with_unit
end_attribute_mapping;

attribute_mapping supported_internal_minimum_annular_ring(supported_internal_minimum_annular_ring, $PATH, length_measure_with_unit);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'supported internal minimum annular ring'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] -> 
	representation_item => 
	measure_representation_item <= 
	measure_with_unit => 
	length_measure_with_unit
end_attribute_mapping;

attribute_mapping unsupported_minimum_annular_ring(unsupported_minimum_annular_ring, $PATH, length_measure_with_unit);
	passage_technology <=
	characterized_object
	characterized_definition = characterized_object
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'unsupported minimum annular ring'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation
	property_definition_representation.used_representation ->
	representation
	representation.items[i] -> 
	representation_item => 
	measure_representation_item <= 
	measure_with_unit => 
	length_measure_with_unit
end_attribute_mapping;

attribute_mapping as_finished_deposition_thickness(as_finished_deposition_thickness, $PATH, Length_tolerance_characteristic);
passage_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'as finished deposition thickness'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
				
end_attribute_mapping;

attribute_mapping maximum_aspect_ratio(maximum_aspect_ratio, $PATH);
passage_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'maximum aspect ratio'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
representation.items[i] ->
representation_item => 
measure_representation_item <= 
measure_with_unit => 
ratio_measure_with_unit <= 
measure_with_unit
measure_with_unit.value_component ->
measure_value 
measure_value = positive_ratio_measure 
positive_ratio_measure
				
end_attribute_mapping;

attribute_mapping minimum_finished_size(minimum_finished_size, $PATH, length_measure_with_unit);
passage_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'minimum finished size'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
representation.items[i] ->
representation_item => 
measure_representation_item <= 
measure_with_unit => 
length_measure_with_unit
				
end_attribute_mapping;

attribute_mapping minimum_fabrication_allowance(minimum_fabrication_allowance, $PATH, length_measure_with_unit);
passage_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'minimum fabrication allowance'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
representation.items[i] -> 
representation_item => 
measure_representation_item <= 
measure_with_unit => 
length_measure_with_unit
				
end_attribute_mapping;

(* MADE DERIVED
attribute_mapping specification(specification, $PATH, Process_specification);
representation
document_reference_item = representation
document_reference_item <-
applied_document_reference.items[i]
applied_document_reference
applied_document_reference <=
document_reference
document_reference.assigned_document ->
document <-
document_product_association.relating_document
{document_product_association.name = 'equivalence'}
document_product_association.related_product ->
product_or_formation_or_definition = product_definition
product_definition
{product_definition.name = 'process specification'}					
				
end_attribute_mapping;
*)

attribute_mapping passage_terminus_condition(passage_terminus_condition, $PATH);
passage_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'passage terminus condition'}
{(property_definition.description = 'bilateral complete removal')
(property_definition.description = 'bilateral bond')
(property_definition.description = 'unilateral bond')}
				
end_attribute_mapping;

end_entity_mapping;

entity_mapping requirement_assignment_armx(requirement_assignment_armx, requirement_assignment)
extended;

attribute_mapping assigned_to(assigned_to, , Passage_technology_armx);

					requirement_assigned_item *> ft_requirement_assigned_item
					ft_requirement_assigned_item = passage_technology
				
end_attribute_mapping;

attribute_mapping assigned_to(assigned_to, , Stratum_technology_armx);

					requirement_assigned_item *> ft_requirement_assigned_item
					ft_requirement_assigned_item = stratum_technology
				
end_attribute_mapping;

attribute_mapping assigned_to(assigned_to, , Stratum_technology_occurrence_armx);

					requirement_assigned_item *> ft_requirement_assigned_item
					ft_requirement_assigned_item = stratum_technology_occurrence
				
end_attribute_mapping;

attribute_mapping assigned_to(assigned_to, , Stratum_technology_occurrence_relationship_armx);

					requirement_assigned_item *> ft_requirement_assigned_item
					ft_requirement_assigned_item = stratum_technology_occurrence_relationship
				
end_attribute_mapping;

end_entity_mapping;

entity_mapping Footprint_library_stratum_technology_armx(Footprint_library_stratum_technology_armx, footprint_library_stratum_technology);

mapping_constraints;
	footprint_library_stratum_technology <=
	stratum_technology <=
	characterized_object
end_mapping_constraints;

end_entity_mapping;

entity_mapping Stratum_surface_technology_armx(Stratum_surface_technology_armx, stratum_surface_technology);

mapping_constraints;
stratum_surface_technology <=
shape_aspect
end_mapping_constraints;

attribute_mapping associated_technology(associated_technology, $PATH, Stratum_technology_armx);
stratum_surface_technology <=
shape_aspect
shape_aspect.of_shape ->
product_definition_shape =>
stratum_technology
end_attribute_mapping;

end_entity_mapping;

entity_mapping Stratum_technology_armx(Stratum_technology_armx, stratum_technology);

mapping_constraints;
[stratum_technology <=
characterized_object]
[stratum_technology <=
product_definition_shape]

end_mapping_constraints;

attribute_mapping minimum_aspect_ratio(minimum_aspect_ratio, $PATH);
stratum_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'minimum aspect ratio'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
{representation
representation.name = 'physical characteristics representation'}
representation.items[i] ->
representation_item => 
measure_representation_item <= 
measure_with_unit => 
ratio_measure_with_unit <= 
measure_with_unit
measure_with_unit.value_component ->
measure_value 
measure_value = positive_ratio_measure 
positive_ratio_measure
				
end_attribute_mapping;

attribute_mapping laminate_stiffness_class(laminate_stiffness_class, descriptive_representation_item);
stratum_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'laminate stiffness class'}
property_definition.description
(property_definition.description = 'fluid like with constant thickness')
(property_definition.description = 'fluid like with varying thickness')
(property_definition.description = 'stiff laminate')

end_attribute_mapping;

attribute_mapping name(name, characterized_object.name);
stratum_technology <=
characterized_object
characterized_object.name

end_attribute_mapping;

attribute_mapping layer_position(layer_position, descriptive_representation_item);
stratum_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'layer position'}
property_definition.description
(property_definition.description = 'secondary')
(property_definition.description = 'all')
(property_definition.description = 'external')
(property_definition.description = 'primary')
(property_definition.description = 'internal')

end_attribute_mapping;

attribute_mapping maximum_feature_size_requirement(maximum_feature_size_requirement, $PATH, length_measure_with_unit);
stratum_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'maximum feature size requirement'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
{representation
representation.name = 'physical characteristics representation'}
representation.items[i] ->
representation_item =>
measure_representation_item <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

attribute_mapping stratum_thickness(stratum_thickness, $PATH, Length_tolerance_characteristic);
stratum_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'stratum thickness'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
{representation
representation.description = 'length tolerance'}

end_attribute_mapping;

attribute_mapping minimum_finished_feature_size(minimum_finished_feature_size, $PATH, length_measure_with_unit);
stratum_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'minimum finished feature size'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
{representation
representation.name = 'physical characteristics representation'}
representation.items[i] ->
representation_item =>
measure_representation_item <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

attribute_mapping minimum_finished_feature_spacing(minimum_finished_feature_spacing, $PATH, length_measure_with_unit);
stratum_technology <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
{property_definition.name = 'minimum finished feature spacing'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
{representation
representation.name = 'physical characteristics representation'}
representation.items[i] ->
representation_item =>
measure_representation_item <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;
(* MADE DERIVED
attribute_mapping specification(specification, $PATH, Process_specification);
stratum_technology <=
characterized_object
document_reference_item = characterized_object
document_reference_item <-
applied_document_reference.items[i]
applied_document_reference
applied_document_reference <=
document_reference
document_reference.assigned_document ->
document <-
document_product_association.relating_document
{document_product_association.name = 'equivalence'}
document_product_association.related_product ->
product_or_formation_or_definition = product_definition
product_definition
{product_definition.name = 'process specification'}

end_attribute_mapping;

attribute_mapping surface_specification(surface_specification, $PATH, Surface_finish_specification);
stratum_technology <=
characterized_object
document_reference_item = characterized_object
document_reference_item <-
applied_document_reference.items[i]
applied_document_reference
applied_document_reference <=
document_reference
document_reference.assigned_document ->
document <-
document_product_association.relating_document
{document_product_association.name = 'equivalence'}
document_product_association.related_product ->
product_or_formation_or_definition = product_definition
product_definition
{product_definition.name = 'surface finish specification'}

end_attribute_mapping;
*)
end_entity_mapping;

entity_mapping Stratum_technology_occurrence_armx(Stratum_technology_occurrence_armx, stratum_technology_occurrence);

mapping_constraints;
{stratum_technology_occurrence <=
property_definition}

end_mapping_constraints;

attribute_mapping name(name, property_definition.name);
stratum_technology_occurrence <=
property_definition
property_definition.name

end_attribute_mapping;
(* It comes from AIM
attribute_mapping definition(definition, $PATH, Stratum_technology_armx);
stratum_technology_occurrence <=
property_definition_relationship
property_definition_relationship.related_property_definition ->
property_definition =>
product_definition_shape =>
stratum_technology

end_attribute_mapping;
*)

attribute_mapping primary(primary, $PATH, Stratum_surface_technology_armx);
stratum_technology_occurrence <=
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'primary'}
property_definition_relationship.relating_property_definition ->
property_definition
property_definition.definition ->
characterized_definition
characterized_definition = shape_definition
shape_definition = shape_aspect
shape_aspect =>
stratum_surface_technology

end_attribute_mapping;

attribute_mapping rotation(rotation, $PATH, plane_angle_measure_with_unit);
stratum_technology_occurrence <=
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
representation.items[i] ->
representation_item
representation_item =>
measure_representation_item <=
measure_with_unit =>
plane_angle_measure_with_unit

end_attribute_mapping;

end_entity_mapping;


entity_mapping Stratum_technology_occurrence_link_armx(Stratum_technology_occurrence_link_armx, stratum_technology_occurrence_link);

mapping_constraints;
			{stratum_technology_occurrence_link <=
	      stratum_technology_occurrence_relationship
    	 [stratum_technology_occurrence_relationship <=
				property_definition_relationship]
				[stratum_technology_occurrence_relationship <=
				property_definition]}
end_mapping_constraints;

attribute_mapping base_stratum_technology_occurrence(base_stratum_technology_occurrence, $PATH);
stratum_technology_occurrence_link <=
stratum_technology_occurrence_relationship <=
property_definition
property_definition.name
{(property_definition.name = 'independent')
(property_definition.name = 'precedent')
(property_definition.name = 'subsequent')}

end_attribute_mapping;

end_entity_mapping;


entity_mapping Stratum_technology_occurrence_relationship_armx(Stratum_technology_occurrence_relationship_armx, stratum_technology_occurrence_relationship);

mapping_constraints;
			{[stratum_technology_occurrence_relationship <=
				property_definition_relationship]
				[stratum_technology_occurrence_relationship <=
				property_definition]}
end_mapping_constraints;

attribute_mapping sto_1(sto_1, $PATH, Stratum_technology_occurrence_armx);
stratum_technology_occurrence_relationship <=
property_definition_relationship
property_definition_relationship.relating_property_definition ->
property_definition =>
stratum_technology_occurrence

end_attribute_mapping;

attribute_mapping sto_2(sto_2, $PATH, Stratum_technology_occurrence_armx);
stratum_technology_occurrence_relationship <=
property_definition_relationship
property_definition_relationship.related_property_definition ->
property_definition =>
stratum_technology_occurrence

end_attribute_mapping;

attribute_mapping scope(scope, $PATH, Stratum_stack_model_armx);
stratum_technology_occurrence_relationship <=
property_definition
property_definition.definition ->
characterized_definition
characterized_definition = characterized_product_definition
characterized_product_definition = product_definition
product_definition =>
part_template_definition =>
stratum_stack_model

end_attribute_mapping;

end_entity_mapping;
(*
entity_mapping Stratum_technology_occurrence_feature_constraint_armx(Stratum_technology_occurrence_feature_constraint_armx, stratum_technology_occurrence_feature_constraint);

mapping_constraints;
{stratum_technology_occurrence_feature_constraint <=
stratum_technology_occurrence_relationship <=
property_definition_relationship}
end_mapping_constraints;

attribute_mapping difference_distance(difference_distance, $PATH, length_measure_with_unit);
stratum_technology_occurrence_feature_constraint <=
stratum_technology_occurrence_relationship <=
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
{representation
representation.name = 'difference distance'}
representation.items[i] ->
representation_item =>
measure_representation_item <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

attribute_mapping intersection_distance(intersection_distance, $PATH, length_measure_with_unit);
stratum_technology_occurrence_feature_constraint <=
stratum_technology_occurrence_relationship <=
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
{representation
representation.name = 'intersection distance'}
representation.items[i] ->
representation_item =>
measure_representation_item <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

end_entity_mapping;
*)
entity_mapping Stratum_technology_occurrence_swap_relationship_armx(Stratum_technology_occurrence_swap_relationship_armx, stratum_technology_occurrence_swap_relationship);

mapping_constraints;
{stratum_technology_occurrence_swap_relationship <=
stratum_technology_occurrence_relationship <=
property_definition_relationship}
end_mapping_constraints;

end_entity_mapping;

entity_mapping Stratum_technology_swap_relationship_armx(Stratum_technology_swap_relationship_armx, stratum_technology_swap_relationship);

mapping_constraints;
{stratum_technology_swap_relationship <=
property_definition_relationship}
end_mapping_constraints;

attribute_mapping primary_stratum_technology(primary_stratum_technology, $PATH, Stratum_technology_armx);
stratum_technology_swap_relationship <=
property_definition_relationship
property_definition_relationship.relating_property_definition ->
property_definition =>
product_definition_shape =>
stratum_technology

end_attribute_mapping;

attribute_mapping secondary_stratum_technology(secondary_stratum_technology, $PATH, Stratum_technology_armx);
stratum_technology_swap_relationship <=
property_definition_relationship
property_definition_relationship.related_property_definition ->
property_definition =>
product_definition_shape =>
stratum_technology

end_attribute_mapping;

end_entity_mapping;

entity_mapping Stratum_technology_mapping_relationship_armx(Stratum_technology_mapping_relationship_armx, stratum_technology_mapping_relationship);

mapping_constraints;
{stratum_technology_mapping_relationship <=
property_definition_relationship}
end_mapping_constraints;

attribute_mapping source_stratum_technology(source_stratum_technology, $PATH, Footprint_library_stratum_technology_armx);
stratum_technology_mapping_relationship <=
property_definition_relationship
property_definition_relationship.relating_property_definition ->
property_definition =>
product_definition_shape =>
stratum_technology =>
footprint_library_stratum_technology

end_attribute_mapping;

attribute_mapping target_stratum_technology(target_stratum_technology, $PATH, Stratum_technology_armx);
stratum_technology_mapping_relationship <=
property_definition_relationship
property_definition_relationship.related_property_definition ->
property_definition =>
product_definition_shape =>
stratum_technology

end_attribute_mapping;

end_entity_mapping;

entity_mapping Stratum_stack_model_armx(Stratum_stack_model_armx, stratum_stack_model);

mapping_constraints;
{stratum_stack_model <=
part_template_definition <=
product_definition}
end_mapping_constraints;

end_entity_mapping;

entity_mapping Usage_concept_usage_relationship_armx(Usage_concept_usage_relationship_armx, usage_concept_usage_relationship)
extended;

attribute_mapping associated_usage(associated_usage, $PATH, Land_template_terminal_armx);

usage_concept_usage_relationship <=
item_identified_representation_usage
item_identified_representation_usage.definition ->
represented_definition 
represented_definition = shape_aspect                
shape_aspect
shape_aspect => 
land_template_terminal
				
end_attribute_mapping;

end_entity_mapping;

entity_mapping Design_stack_model_armx(Design_stack_model_armx, design_stack_model);

mapping_constraints;
{design_stack_model <=
part_template_definition <=
product_definition}
end_mapping_constraints;
(* Made derived
attribute_mapping passage(passage, $PATH, Passage_technology_allocation_to_stack_model_armx);
design_stack_model <=
stratum_stack_model <=
part_template_definition <=
product_definition_shape <=
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'passage'}
property_definition_relationship.relating_property_definition ->
property_definition =>
passage_technology_allocation_to_stack_model

end_attribute_mapping;
*)

attribute_mapping model_thickness(model_thickness, $PATH, Length_tolerance_characteristic);
design_stack_model <=
stratum_stack_model <=
part_template_definition <=
product_definition
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'model thickness'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
end_attribute_mapping;

end_entity_mapping;

entity_mapping Stratum_sub_stack_armx(Stratum_sub_stack_armx, stratum_sub_stack);

mapping_constraints;
stratum_sub_stack <=
part_template_definition <=
product_definition_shape <=
property_definition
end_mapping_constraints;

attribute_mapping stratum_technology_sequence(stratum_technology_sequence, $PATH, Stratum_technology_occurrence_link_armx);
stratum_sub_stack <=                
part_template_definition <=
product_definition_shape <=
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'stratum technology sequence'}
property_definition_relationship.relating_property_definition ->
property_definition =>
stratum_technology_occurrence_relationship =>
stratum_technology_occurrence_link

end_attribute_mapping;

attribute_mapping associated_stackup(associated_stackup, $PATH, Design_stack_model_armx);
stratum_sub_stack <=                
part_template_definition <=
product_definition_shape <=
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'associated stackup'}
property_definition_relationship.relating_property_definition ->
property_definition =>
product_definition_shape =>
part_template_definition =>
stratum_stack_model =>
design_stack_model
end_attribute_mapping;

attribute_mapping stack_thickness(stack_thickness, $PATH, Length_tolerance_characteristic);
stratum_sub_stack <=                
part_template_definition <=
product_definition
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
property_definition
{property_definition.name = 'stack thickness'}
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation
end_attribute_mapping;

end_entity_mapping;

entity_mapping Local_linear_stack_armx(Local_linear_stack_armx, local_linear_stack);

mapping_constraints;
{local_linear_stack <=
stratum_sub_stack <=
part_template_definition <=
product_definition_shape <=
property_definition}
end_mapping_constraints;

attribute_mapping stratum_technology_sequence(stratum_technology_sequence, $PATH,Stratum_technology_occurrence_link_armx);
local_linear_stack <=
stratum_sub_stack <=                
part_template_definition <=
product_definition_shape <=
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'stratum technology sequence'}
property_definition_relationship.relating_property_definition ->
property_definition =>
stratum_technology_occurrence_relationship =>
stratum_technology_occurrence_link				
end_attribute_mapping;

end_entity_mapping;

entity_mapping Passage_technology_allocation_to_stack_model_armx(Passage_technology_allocation_to_stack_model_armx, passage_technology_allocation_to_stack_model);

mapping_constraints;
passage_technology_allocation_to_stack_model <=
stratum_sub_stack <=
part_template_definition <=
product_definition_shape <=
property_definition
end_mapping_constraints;

attribute_mapping allocated_technology(allocated_technology, $PATH, Passage_technology_armx);
passage_technology_allocation_to_stack_model <=
stratum_sub_stack <=
part_template_definition <=
product_definition_shape <=
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'allocated technology'}
property_definition_relationship.relating_property_definition ->
property_definition =>
product_definition_shape =>
passage_technology

end_attribute_mapping;

attribute_mapping associated_stackup(associated_stackup, $PATH, Design_stack_model_armx);
passage_technology_allocation_to_stack_model <=
stratum_sub_stack <=
part_template_definition <=
product_definition_shape <=
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'associated stackup'}
property_definition_relationship.relating_property_definition ->
property_definition =>
product_definition_shape =>
part_template_definition =>
stratum_stack_model =>
design_stack_model
end_attribute_mapping;

attribute_mapping single_stratum_passage_location(single_stratum_passage_location, $PATH, Stratum_technology_occurrence_armx);
passage_technology_allocation_to_stack_model <=
stratum_sub_stack <=
part_template_definition <=
product_definition_shape <=
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'single stratum passage location'}
property_definition_relationship.relating_property_definition ->
property_definition =>
stratum_technology_occurrence

end_attribute_mapping;

attribute_mapping target_stratum(target_stratum, $PATH, Stratum_technology_occurrence_armx);
passage_technology_allocation_to_stack_model <=
stratum_sub_stack <=
part_template_definition <=
product_definition_shape <=
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'target stratum'}
property_definition_relationship.relating_property_definition ->
property_definition =>
stratum_technology_occurrence

end_attribute_mapping;

attribute_mapping stratum_technology_sequence(stratum_technology_sequence, $PATH, Stratum_technology_occurrence_link_armx);
passage_technology_allocation_to_stack_model <=
stratum_sub_stack <=
part_template_definition <=
product_definition_shape <=
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'stratum technology sequence'}
property_definition_relationship.relating_property_definition ->
property_definition =>
stratum_technology_occurrence_relationship =>
stratum_technology_occurrence_link

end_attribute_mapping;

end_entity_mapping;

entity_mapping Allocated_passage_minimum_annular_ring_armx(Allocated_passage_minimum_annular_ring_armx, allocated_passage_minimum_annular_ring);

mapping_constraints;
		allocated_passage_minimum_annular_ring <=
		characterized_object
end_mapping_constraints;

attribute_mapping supported_external_minimum_annular_ring(supported_external_minimum_annular_ring, $PATH, length_measure_with_unit);
		allocated_passage_minimum_annular_ring <=
		characterized_object
		characterized_definition = characterized_object
		characterized_definition <-
		property_definition.definition
		{property_definition.name = 'supported external minimum annular ring'}
		property_definition <-
		property_definition_representation.definition
		property_definition_representation
		property_definition_representation.used_representation ->
		representation
		representation.items[i] ->
		representation_item =>
		measure_representation_item <=
		measure_with_unit =>
		length_measure_with_unit
end_attribute_mapping;

attribute_mapping supported_internal_minimum_annular_ring(supported_internal_minimum_annular_ring, $PATH, length_measure_with_unit);
		allocated_passage_minimum_annular_ring <=
		characterized_object
		characterized_definition = characterized_object
		characterized_definition <-
		property_definition.definition
		{property_definition.name = 'supported internal minimum annular ring'}
		property_definition <-
		property_definition_representation.definition
		property_definition_representation
		property_definition_representation.used_representation ->
		representation
		representation.items[i] ->
		representation_item =>
		measure_representation_item <=
		measure_with_unit =>
		length_measure_with_unit
end_attribute_mapping;

attribute_mapping unsupported_minimum_annular_ring(unsupported_minimum_annular_ring, $PATH, length_measure_with_unit);
		allocated_passage_minimum_annular_ring <=
		characterized_object
		characterized_definition = characterized_object
		characterized_definition <-
		property_definition.definition
		{property_definition.name = 'unsupported minimum annular ring'}
		property_definition <-
		property_definition_representation.definition
		property_definition_representation
		property_definition_representation.used_representation ->
		representation
		representation.items[i] ->
		representation_item =>
		measure_representation_item <=
		measure_with_unit =>
		length_measure_with_unit
end_attribute_mapping;

attribute_mapping minimum_fabrication_allowance(minimum_fabrication_allowance, $PATH, length_measure_with_unit);
		allocated_passage_minimum_annular_ring <=
		characterized_object
		characterized_definition = characterized_object
		characterized_definition <-
		property_definition.definition
		{property_definition.name = 'minimum fabrication allowance'}
		property_definition <-
		property_definition_representation.definition
		property_definition_representation
		property_definition_representation.used_representation ->
		representation
		representation.items[i] ->
		representation_item =>
		measure_representation_item <=
		measure_with_unit =>
		length_measure_with_unit
end_attribute_mapping;

attribute_mapping associated_passage_allocation(associated_passage_allocation, $PATH, Passage_technology_allocation_to_stack_model_armx);
		allocated_passage_minimum_annular_ring <=
		characterized_object
		characterized_definition = characterized_object
		characterized_definition <-
		property_definition.definition
		property_definition <-
		property_definition_relationship.related_property_definition
		property_definition_relationship
		{property_definition_relationship
		property_definition_relationship.name = 'associated passage allocation'}
		property_definition_relationship.relating_property_definition ->
		property_definition =>
		product_definition_shape =>
		part_template_definition =>
		stratum_sub_stack =>
		passage_technology_allocation_to_stack_model
end_attribute_mapping;

attribute_mapping associated_stratum_technology_occurrence(associated_stratum_technology_occurrence, $PATH, Stratum_technology_occurrence_armx);
		allocated_passage_minimum_annular_ring <=
		characterized_object
		characterized_definition = characterized_object
		characterized_definition <-
		property_definition.definition
		property_definition <-
		property_definition_relationship.related_property_definition
		property_definition_relationship
		{property_definition_relationship
		property_definition_relationship.name = 'associated stratum technology occurrence'}
		property_definition_relationship.relating_property_definition ->
		property_definition =>
		stratum_technology_occurrence
end_attribute_mapping;

end_entity_mapping;

entity_mapping Equivalent_stackup_model_definition_armx(Equivalent_stackup_model_definition_armx, equivalent_stackup_model_definition);

mapping_constraints;
	[equivalent_stackup_model_definition <=
	product_definition]
	[equivalent_stackup_model_definition <=
	product_definition_relationship]
end_mapping_constraints;

attribute_mapping primary_stackup_model(primary_stackup_model, $PATH, Stratum_stack_model_armx);
			equivalent_stackup_model_definition <=
    	product_definition_relationship
			product_definition_relationship.relating_product_definition -> 
			product_definition =>
			part_template_definition =>					
			stratum_stack_model
end_attribute_mapping;

attribute_mapping equivalent_stackup_model(equivalent_stackup_model, $PATH, Stratum_stack_model_armx);
			equivalent_stackup_model_definition <=
			product_definition_relationship
			product_definition_relationship.related_product_definition -> 
			product_definition =>
			part_template_definition =>					
			stratum_stack_model
end_attribute_mapping;

attribute_mapping equivalent_sub_stacks(equivalent_sub_stacks, $PATH, Equivalent_sub_stack_definition_armx);
			equivalent_stackup_model_definition <=
			product_definition <-
			product_definition_relationship.related_product_definition
			{product_definition_relationship
			product_definition_relationship.name = 'equivalent sub stack'}
			product_definition_relationship
			product_definition_relationship.relating_product_definition ->
			product_definition =>
			equivalent_sub_stack_definition
end_attribute_mapping;

end_entity_mapping;

entity_mapping Equivalent_sub_stack_definition_armx(Equivalent_sub_stack_definition_armx, equivalent_sub_stack_definition);

mapping_constraints;
	equivalent_sub_stack_definition <=
	product_definition
end_mapping_constraints;

attribute_mapping equivalent_stack(equivalent_stack, $PATH, Local_linear_stack_armx);
		equivalent_sub_stack_definition <=
		product_definition <-
		product_definition_relationship.related_product_definition
		{product_definition_relationship
		product_definition_relationship.name = 'equivalent stack'}
		product_definition_relationship
		product_definition_relationship.relating_product_definition ->
		product_definition =>
		part_template_definition =>
		stratum_sub_stack =>
		local_linear_stack
end_attribute_mapping;

attribute_mapping primary_sto(primary_sto, $PATH, Stratum_technology_occurrence_armx);
		equivalent_sub_stack_definition <=
		product_definition
		characterized_product_definition = product_definition
		characterized_product_definition
		characterized_definition = characterized_product_definition
		characterized_definition <-
		property_definition.definition					
		property_definition <-
		property_definition_relationship.related_property_definition
		{property_definition_relationship
		property_definition_relationship.name = 'primary sto'}
		property_definition_relationship.relating_property_definition ->
		property_definition =>
		stratum_technology_occurrence
end_attribute_mapping;

attribute_mapping primary_sto_link(primary_sto_link, $PATH, Stratum_technology_occurrence_link_armx);
equivalent_sub_stack_definition <=
		product_definition
		characterized_product_definition = product_definition
		characterized_product_definition
		characterized_definition = characterized_product_definition
		characterized_definition <-
		property_definition.definition					
		property_definition <-
		property_definition_relationship.related_property_definition
		{property_definition_relationship
		property_definition_relationship.name = 'primary sto link'}
		property_definition_relationship.relating_property_definition ->
		property_definition =>
		stratum_technology_occurrence_relationship =>
		stratum_technology_occurrence_link
end_attribute_mapping;

end_entity_mapping;

entity_mapping Impedance_measurement_setup_requirement_armx(Impedance_measurement_setup_requirement_armx, impedance_measurement_setup_requirement);

mapping_constraints;
impedance_measurement_setup_requirement <=
predefined_requirement_view_definition
end_mapping_constraints;

attribute_mapping characterized_stackup(characterized_stackup, $PATH, Stratum_sub_stack_armx);
impedance_measurement_setup_requirement <=
predefined_requirement_view_definition <=
product_definition <-
product_definition_relationship.related_product_definition
{product_definition_relationship
product_definition_relationship.name = 'test bench'}
product_definition_relationship.relating_product_definition ->
product_definition =>
part_template_definition =>
stratum_sub_stack
end_attribute_mapping;

attribute_mapping measurement_stratum_1(measurement_stratum_1, $PATH, Stratum_technology_occurrence_armx);
impedance_measurement_setup_requirement <=
predefined_requirement_view_definition <=
product_definition
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'measurement stratum 1'}
property_definition_relationship.relating_property_definition ->
property_definition =>
stratum_technology_occurrence
end_attribute_mapping;

attribute_mapping measurement_stratum_2(measurement_stratum_2, $PATH, Stratum_technology_occurrence_armx);
impedance_measurement_setup_requirement <=
predefined_requirement_view_definition <=
product_definition
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'measurement stratum 2'}
property_definition_relationship.relating_property_definition ->
property_definition =>
stratum_technology_occurrence
end_attribute_mapping;
attribute_mapping reference_stratum(reference_stratum, $PATH, Stratum_technology_occurrence_armx);
impedance_measurement_setup_requirement <=
predefined_requirement_view_definition <=
product_definition
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
property_definition <-
property_definition_relationship.related_property_definition
{property_definition_relationship
property_definition_relationship.name = 'reference stratum'}
property_definition_relationship.relating_property_definition ->
property_definition =>
stratum_technology_occurrence           
end_attribute_mapping;

end_entity_mapping;

entity_mapping Impedance_requirement_armx(Impedance_requirement_armx, impedance_requirement);

mapping_constraints;
impedance_requirement <=
predefined_requirement_view_definition
end_mapping_constraints;

attribute_mapping frequency_range(frequency_range, $PATH, Value_range_armx);
	impedance_requirement <=
	predefined_requirement_view_definition <=
	product_definition			
	characterized_product_definition = product_definition
	characterized_product_definition
	characterized_definition = characterized_product_definition
	characterized_definition <-
	property_definition.definition
	{property_definition.name = 'frequency range'}
	property_definition <-
	property_definition_representation.definition
	property_definition_representation.used_representation ->
	representation
	representation.items[i] ->
	representation_item =>
	compound_representation_item =>
	value_range
end_attribute_mapping;

attribute_mapping test_bench(test_bench, $PATH, Impedance_measurement_setup_requirement_armx);
impedance_requirement <=
predefined_requirement_view_definition <=
product_definition <-
product_definition_relationship.related_product_definition
{product_definition_relationship
product_definition_relationship.name = 'test bench'}
product_definition_relationship.relating_product_definition ->
product_definition =>
predefined_requirement_view_definition =>
impedance_measurement_setup_requirement
end_attribute_mapping;

attribute_mapping test_method(test_method, $PATH, Test_specification);
impedance_requirement <=
predefined_requirement_view_definition <=
product_definition <-
product_definition_relationship.related_product_definition
{product_definition_relationship
product_definition_relationship.name = 'test method'}
product_definition_relationship.relating_product_definition ->
product_definition =>
specification_definition
end_attribute_mapping;

attribute_mapping impedance_value(impedance_value, $PATH, Tolerance_characteristic);
impedance_requirement <=
predefined_requirement_view_definition <=
product_definition			
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
{property_definition.name = 'impedance value'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation
end_attribute_mapping;

end_entity_mapping;

(*end_schema_mapping;*)
