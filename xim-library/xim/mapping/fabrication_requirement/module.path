(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping fabrication_requirement(Fabrication_requirement_arm, Fabrication_requirement_mim);*)


entity_mapping Fabrication_thickness_requirement_occurrence(Fabrication_thickness_requirement_occurrence, predefined_requirement_view_definition);

mapping_constraints;
predefined_requirement_view_definition <=
product_definition
{product_definition
product_definition.description = 'fabrication thickness requirement'}

end_mapping_constraints;

attribute_mapping characterized_class(characterized_class, property_definition.id);

				predefined_requirement_view_definition <=
				product_definition
				{product_definition
				(product_definition.id = 'over finished conductor') 
				(product_definition.id = 'over finished dielectric')}
					
end_attribute_mapping;

attribute_mapping tolerance(tolerance, $PATH, Tolerance_characteristic);

				predefined_requirement_view_definition <=
				product_definition
				characterized_product_definition = product_definition
				characterized_product_definition
				characterized_definition = characterized_product_definition
				characterized_definition <-
				property_definition.definition
				{property_definition.name = 'tolerance'}
				property_definition <-
				property_definition_representation.definition
				property_definition_representation.used_representation ->
				representation
				
end_attribute_mapping;

attribute_mapping characterized_class_range(characterized_class_range, $PATH, Range_characteristic_armx);
					predefined_requirement_view_definition <=
					product_definition
					characterized_product_definition = product_definition
					characterized_product_definition
					characterized_definition = characterized_product_definition
					characterized_definition <-
					property_definition.definition
					{property_definition.name = 'characterized class range'}
					property_definition <-
					property_definition_representation.definition
					property_definition_representation.used_representation ->
					representation.items[i] ->
					representation_item =>
					descriptive_representation_item =>
					range_characteristic
					
end_attribute_mapping;

end_entity_mapping;

entity_mapping Layout_land_width_tolerance_requirement_occurrence(Layout_land_width_tolerance_requirement_occurrence, predefined_requirement_view_definition);

mapping_constraints;
predefined_requirement_view_definition <=
product_definition
{product_definition
product_definition.description = 'layout land width tolerance requirement'}

end_mapping_constraints;

attribute_mapping maximum_negative_deviation(maximum_negative_deviation, $PATH, length_measure_with_unit);
predefined_requirement_view_definition <=
product_definition			
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
{property_definition.name = 'maximum negative deviation'}
property_definition <-
property_definition_representation.definition 
property_definition_representation.used_representation ->
representation
representation.items[i] ->
representation_item =>
measure_representation_item <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

attribute_mapping mating_feature_pitch_class(mating_feature_pitch_class, $PATH, Pitch_class);
predefined_requirement_view_definition <=
product_definition			
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
{property_definition.name = 'mating feature pitch class'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation

end_attribute_mapping;

end_entity_mapping;

entity_mapping Layout_line_width_tolerance_requirement_occurrence(Layout_line_width_tolerance_requirement_occurrence, predefined_requirement_view_definition);

mapping_constraints;
predefined_requirement_view_definition <=
product_definition
{product_definition
product_definition.description = 'layout line width tolerance requirement'}


end_mapping_constraints;

attribute_mapping maximum_negative_deviation(maximum_negative_deviation, $PATH, length_measure_with_unit);
predefined_requirement_view_definition <=
product_definition			
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
{property_definition.name = 'maximum negative deviation'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation
representation.items[i] ->
representation_item =>
measure_representation_item <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

attribute_mapping maximum_positive_deviation(maximum_positive_deviation, $PATH, length_measure_with_unit);
predefined_requirement_view_definition <=
product_definition			
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
{property_definition.name = 'maximum positive deviation'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation
representation.items[i] ->
representation_item =>
measure_representation_item <=
measure_with_unit =>
length_measure_with_unit

end_attribute_mapping;

attribute_mapping tolerance_line_width_class(tolerance_line_width_class, $PATH, Line_width_class);
predefined_requirement_view_definition <=
product_definition			
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
{property_definition.name = 'maximum negative deviation'}
property_definition <-
property_definition_representation.definition
property_definition_representation.used_representation ->
representation.items[i] ->
representation_item =>
styled_item

end_attribute_mapping;

attribute_mapping characterized_stratum_technology(characterized_stratum_technology, $PATH, Stratum_technology_armx);
predefined_requirement_view_definition <=
product_definition			
characterized_product_definition = product_definition
characterized_product_definition
characterized_definition = characterized_product_definition
characterized_definition <-
property_definition.definition
{property_definition.name = 'characterized stratum technology'}
property_definition <-
property_definition_relationship.related_property_definition
property_definition_relationship
{property_definition_relationship
property_definition_relationship.name = 'technology usage'}
property_definition_relationship.relating_property_definition ->
property_definition =>
product_definition_shape =>
stratum_technology

end_attribute_mapping;

end_entity_mapping;

entity_mapping Line_width_class(Line_width_class, styled_item);

mapping_constraints;

end_mapping_constraints;

attribute_mapping class_name(class_name, representation_item.name);
styled_item <=
representation_item
representation_item.name

end_attribute_mapping;

attribute_mapping class_member(class_member, $PATH, Range_characteristic_armx);
styled_item <=
representation_item <-
representation.items[i]
representation
representation.items[i] ->
representation_item =>
descriptive_representation_item =>
range_characteristic

end_attribute_mapping;

end_entity_mapping;

entity_mapping Pitch_class(Pitch_class, representation);

mapping_constraints;
{representation
representation.name = 'pitch class'}

end_mapping_constraints;

attribute_mapping class_name(class_name, representation.description);
representation
representation.description

end_attribute_mapping;

attribute_mapping class_member(class_member, $PATH, Range_characteristic_armx);
representation 
representation.items[i] ->
representation_item =>
descriptive_representation_item =>
range_characteristic

end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
