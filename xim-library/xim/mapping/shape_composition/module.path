(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping shape_composition(Shape_composition_arm, Shape_composition_mim);*)


entity_mapping Composite_group_shape_element(Composite_group_shape_element, composite_group_shape_aspect);

mapping_constraints;
composite_group_shape_aspect <=
composite_shape_aspect

end_mapping_constraints;

end_entity_mapping;

entity_mapping Composite_shape_element(Composite_shape_element, composite_shape_aspect);

mapping_constraints;
{composite_shape_aspect <=
shape_aspect <-
shape_aspect_relationship.relating_shape_aspect
shape_aspect_relationship
{shape_aspect_relationship
shape_aspect_relationship.name = 'composing'}}

end_mapping_constraints;

end_entity_mapping;

entity_mapping Composite_unit_shape_element(Composite_unit_shape_element, composite_unit_shape_aspect);

mapping_constraints;
composite_unit_shape_aspect <=
composite_shape_aspect

end_mapping_constraints;

end_entity_mapping;

entity_mapping Shape_element_boundary_relationship(Shape_element_boundary_relationship, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
shape_aspect_relationship.name = 'boundary'}

end_mapping_constraints;

end_entity_mapping;

entity_mapping Shape_element_composing_relationship(Shape_element_composing_relationship, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
shape_aspect_relationship.name = 'composing'}

end_mapping_constraints;

attribute_mapping relating(relating, $PATH, Composite_shape_element);
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect =>
composite_shape_aspect

end_attribute_mapping;

end_entity_mapping;

entity_mapping Shape_element_constituent_relationship(Shape_element_constituent_relationship, shape_aspect_relationship);

mapping_constraints;
{shape_aspect_relationship
(shape_aspect_relationship.name = 'bare die terminal surface constituent relationship')
(shape_aspect_relationship.name = 'composing')
(shape_aspect_relationship.name = 'constituent')
(shape_aspect_relationship.name = 'interconnect module terminal surface constituent relationship')
(shape_aspect_relationship.name = 'package terminal surface constituent relationship')}

end_mapping_constraints;

end_entity_mapping;

entity_mapping Shape_element_locating_relationship(Shape_element_locating_relationship, dimensional_location);

mapping_constraints;
(!{shape_aspect_relationship.name = 'linear distance'})
end_mapping_constraints;

attribute_mapping located_shape_element(located_shape_element, $PATH, Shape_element);
dimensional_location <=
shape_aspect_relationship
shape_aspect_relationship.related_shape_aspect ->
shape_aspect

end_attribute_mapping;

attribute_mapping locating_shape_element(locating_shape_element, $PATH, Shape_element);
dimensional_location <=
shape_aspect_relationship
shape_aspect_relationship.relating_shape_aspect ->
shape_aspect

end_attribute_mapping;

end_entity_mapping;
(*end_schema_mapping;*)
