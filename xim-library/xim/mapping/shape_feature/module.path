(*
 * $Id$
 *
 * JSDAI(TM), a way to implement STEP, ISO 10303
 * Copyright (C) 1997-2008, LKSoftWare GmbH, Germany
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License
 * version 3 as published by the Free Software Foundation (AGPL v3).
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * JSDAI is a registered trademark of LKSoftWare GmbH, Germany
 * This software is also available under commercial licenses.
 * See also http://www.jsdai.net/
 *)

(*schema_mapping extended_elemental_geometric_shape(Extended_elemental_geometric_shape_arm, Extended_elemental_geometric_shape_mim);*)

entity_mapping Assigned_property(Assigned_property, property_definition)
extended;

attribute_mapping described_element(described_element, $PATH, Shape_element);

				characterized_definition
				characterized_definition = shape_definition
				shape_definition = shape_aspect
				shape_aspect
			
end_attribute_mapping;

attribute_mapping described_element(described_element, $PATH, Item_shape);

				characterized_definition
				characterized_definition = shape_definition
				shape_definition 
				shape_definition = product_definition_shape 
				product_definition_shape
			
end_attribute_mapping;

attribute_mapping described_element(described_element, $PATH, characterized_object);

				characterized_definition
				characterized_definition = characterized_object
				characterized_object
			
end_attribute_mapping;

end_entity_mapping;


(* REMOVED
entity_mapping Feature_shape_definition(Feature_shape_definition, shape_representation);

mapping_constraints;
{[{!{shape_representation <=
representation <-
property_definition_representation.used_representation
property_definition_representation
property_definition_representation.definition ->
property_definition
property_definition.definition ->
characterized_definition
characterized_definition = shape_definition
shape_definition
shape_definition = shape_aspect
shape_aspect
{shape_aspect
shape_aspect.product_definitional = .FALSE.}}}]
[shape_representation <=
representation
{(representation.id = 'fsd')
(representation.id = 'ac2ds')
(representation.id = 'ac3ds')
(representation.id = 'acnps')}]}

end_mapping_constraints;

end_entity_mapping;
*)
entity_mapping Shape_feature_definition_armx (Shape_feature_definition_armx

, shape_feature_definition);

 mapping_constraints; shape_feature_definition <=
characterized_object
 end_mapping_constraints;
(* Made derived
attribute_mapping feature_model(feature_model, $PATH, shape_representation);
shape_feature_definition <=
characterized_object
characterized_definition = characterized_object
characterized_definition <-
property_definition.definition
property_definition <-
property_definition_representation.definition
property_definition_representation
property_definition_representation.used_representation ->
representation =>
shape_representation

end_attribute_mapping;
*)
end_entity_mapping;

entity_mapping Shape_feature_occurrence (Shape_feature_occurrence

, shape_aspect);

 mapping_constraints; 
 end_mapping_constraints;

end_entity_mapping;

entity_mapping Instanced_feature_armx (Instanced_feature_armx, instanced_feature);

 mapping_constraints; instanced_feature <=
[shape_aspect]
[shape_feature_definition <=
characterized_object]
 end_mapping_constraints;

end_entity_mapping;

entity_mapping placed_feature_armx (placed_feature_armx

, placed_feature);

 mapping_constraints; placed_feature <=
shape_aspect
 end_mapping_constraints;

attribute_mapping definition(definition, $PATH, Shape_feature_definition_armx);
placed_feature <=
shape_aspect
shape_definition = shape_aspect
characterized_definition = shape_definition
characterized_definition <-
property_definition.definition
property_definition <-
property_definition_relationship.related_property_definition 
{property_definition_relationship.name = 'definition'}
property_definition_relationship.relating_property_definition ->
property_definition
property_definition.definition ->
characterized_definition = characterized_object
characterized_object =>
shape_feature_definition

end_attribute_mapping;

end_entity_mapping;


(*end_schema_mapping;*)
